// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_read_hippo
#define gopaw_read_hippo

#include <inlib/aida_ntuple>

#include <inlib/parse>
#include <inlib/srep>

#include <exlib/gzip>

namespace gopaw {

typedef bool (*read_func_t)(void*,char*,unsigned int,size_t&);

inline bool read(std::ostream& a_out,read_func_t a_func,void* a_tag,inlib::aida::ntuple*& a_tuple) {
  a_tuple = 0;

  const unsigned int BUFSIZE = 65536;
  char buffer[BUFSIZE+1];

  // First line :
  size_t l;
  if(!a_func(a_tag,buffer,sizeof(buffer),l)) return false; //EOF.
  
  //::printf("debug : read_hippo : line(1) : \"%s\"\n",buffer);

  std::string title;
  std::vector<std::string> names;

  std::vector<double> ds;
  // Guess the style of the file (ascii or hippodraw) :
  inlib::cstring_strtods(buffer,ds);
  unsigned int dn = ds.size();
  if(dn) {
    // First line is numbers. The style is assumed to be "ascii".
    for(unsigned int index=0;index<dn;index++) {
      std::string s;
      inlib::sprintf(s,32,"v%d",index);
      names.push_back(s);
    }    
  
  } else {
    // Expect hippodraw style, then a title line followed
    // with a line describing columns and then data.
    title = std::string(buffer);
  
    // Read second line :
    if(!a_func(a_tag,buffer,sizeof(buffer),l)) return false; //EOF.

    inlib::words(buffer,"\t",false,names);
    inlib::strip(names);
    inlib::replace(names," ","_");

  }

  //::printf("debug : read_hippo : title : \"%s\"\n",title.c_str());

  a_tuple = new inlib::aida::ntuple(a_out,title);
  typedef inlib::aida::aida_col<double> aida_col_t;

  std::vector<aida_col_t*> aida_cols;

 {inlib_vforcit(std::string,names,it) aida_cols.push_back(a_tuple->create_col<double>(*it));}

  size_t coln = aida_cols.size();

  ds.resize(coln);
  bool status;

  size_t count = 0;
  while(true) {
    if(!a_func(a_tag,buffer,sizeof(buffer),l)) break; //EOF.
  
    size_t nd = inlib::cstring_strtods(buffer,ds,true); //the last true is important.
    
    if(nd!=coln) {
      a_out << "read_hippo : read row : " << count
            << " : mismatch number of data (" << ds.size() << ") versus #columns (" << coln << ")."
	    << std::endl;
      delete a_tuple;
      a_tuple = 0;
      return false;
    }

    status = true;
    for(size_t coli=0;coli<coln;coli++) {
      if(!aida_cols[coli]->fill(ds[coli])) {
        a_out << "read_hippo : aida_col fill failed." << std::endl;
        status = false;
        break;
      }
    }
    
    if(!status || !a_tuple->add_row()) {
      a_out << "read_hippo : ntuple fill failed." << std::endl;
      delete a_tuple;
      a_tuple = 0;
      return false;
    }

    count++;
  }
  
  return true;
}

inline bool read_hippo(std::ostream& a_out,const std::string& a_file,inlib::aida::ntuple*& a_tuple) {
  std::string suffix = inlib::suffix(a_file);
  bool compressed = (suffix=="gz"?true:false);
  
  if(compressed) {
    gzFile file = ::gzopen(a_file.c_str(),"rb");
    if(!file) {
      a_out << "read_hippo : can't open file " << a_file << std::endl;
      a_tuple = 0;
      return false;
    } 
    if(!read(a_out,(read_func_t)exlib::zread_cstring,file,a_tuple)) {
      a_out << "read_hippo : problem reading " << a_file << std::endl;
      return false;
    }
    ::gzclose(file);
  } else {
    FILE* file = ::fopen(a_file.c_str(),"rb");
    if(!file) {
      a_out << "read_hippo : can't open file " << a_file << std::endl;
      a_tuple = 0;
      return false;
    } 
    if(!read(a_out,(read_func_t)inlib::file::read_cstring,file,a_tuple)) {
      a_out << "read_hippo : problem reading " << a_file << std::endl;
      return false;
    }
    ::fclose(file);
  }
  return true;
}

}

#endif


