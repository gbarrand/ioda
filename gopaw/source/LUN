// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_LUN
#define gopaw_LUN

#include <string>
#include <cstdio>

#include <inlib/rroot/file>
#include <inlib/wroot/file>

#ifdef APP_USE_HDF5
//#include <exlib/hdf5/header>
#include <exlib/hdf5/h2file>
#endif
#ifdef APP_USE_CFITSIO
#include <exlib/cfitsio>
#endif

namespace gopaw {

class LUN {
public:
  enum Type {
     NONE = 0
    ,SYS_FILE = 1
    ,READ_ROOT_FILE = 2
    ,WRITE_ROOT_FILE = 3
#ifdef APP_USE_HDF5
    ,HDF5_FILE = 4
#endif
#ifdef APP_USE_CFITSIO
    ,FITS_FILE = 5
#endif
  };
  static bool type_to_string(Type a_type,std::string& a_s) {
    switch(a_type) {
    case           NONE:a_s = "NONE";            return true;
    case       SYS_FILE:a_s = "SYS_FILE";        return true;
    case READ_ROOT_FILE:a_s = "READ_ROOT_FILE";  return true;
    case WRITE_ROOT_FILE:a_s = "WRITE_ROOT_FILE";return true;
#ifdef APP_USE_HDF5
    case      HDF5_FILE:a_s = "HDF5_FILE";       return true;
#endif
#ifdef APP_USE_CFITSIO
    case      FITS_FILE:a_s = "FITS_FILE";       return true;
#endif
    default: a_s.clear();return false;
    }
    return false;
  }
public:  
  LUN()
  :m_type(NONE)
  ,m_string()
  ,m_FILE(0)
  ,m_rroot_file(0)
  ,m_wroot_file(0)
#ifdef APP_USE_HDF5
  ,m_hdf5_file(-1)
#endif
#ifdef APP_USE_CFITSIO
  ,m_fits_file(0)
#endif
  //
  ,m_is_meta(false)
  ,m_rroot_cur_dir(0)
  ,m_rroot_cur_dir_owner(false)
#ifdef APP_USE_HDF5
  ,m_hdf5_cur_dir(-1)
  ,m_hdf5_cur_dir_owner(false)
#endif
  {}

  LUN(const std::string& a_path,FILE* a_file)
  :m_type(SYS_FILE)
  ,m_string(a_path)
  ,m_FILE(a_file)
  ,m_rroot_file(0)
  ,m_wroot_file(0)
#ifdef APP_USE_HDF5
  ,m_hdf5_file(-1)
#endif
#ifdef APP_USE_CFITSIO
  ,m_fits_file(0)
#endif
  ,m_is_meta(false)
  ,m_rroot_cur_dir(0)
  ,m_rroot_cur_dir_owner(false)
#ifdef APP_USE_HDF5
  ,m_hdf5_cur_dir(-1)
  ,m_hdf5_cur_dir_owner(false)
#endif
  {}

  LUN(inlib::rroot::file* a_file)
  :m_type(READ_ROOT_FILE)
  ,m_string(a_file->path())
  ,m_FILE(0)
  ,m_rroot_file(a_file)
  ,m_wroot_file(0)
#ifdef APP_USE_HDF5
  ,m_hdf5_file(-1)
#endif
#ifdef APP_USE_CFITSIO
  ,m_fits_file(0)
#endif
  ,m_is_meta(false)
  ,m_rroot_cur_dir(&(a_file->dir()))
  ,m_rroot_cur_dir_owner(false)
#ifdef APP_USE_HDF5
  ,m_hdf5_cur_dir(-1)
  ,m_hdf5_cur_dir_owner(false)
#endif
  {}

  LUN(inlib::wroot::file* a_file)
  :m_type(WRITE_ROOT_FILE)
  ,m_string(a_file->path())
  ,m_FILE(0)
  ,m_rroot_file(0)
  ,m_wroot_file(a_file)
#ifdef APP_USE_HDF5
  ,m_hdf5_file(-1)
#endif
#ifdef APP_USE_CFITSIO
  ,m_fits_file(0)
#endif
  ,m_is_meta(false)
  ,m_rroot_cur_dir(0)
  ,m_rroot_cur_dir_owner(false)
#ifdef APP_USE_HDF5
  ,m_hdf5_cur_dir(-1)
  ,m_hdf5_cur_dir_owner(false)
#endif
  {}

#ifdef APP_USE_HDF5
  LUN(const std::string& a_path,hid_t a_file,hid_t a_dir,bool a_dir_owner)
  :m_type(HDF5_FILE)
  ,m_string(a_path)
  ,m_FILE(0)
  ,m_rroot_file(0)
  ,m_wroot_file(0)
  ,m_hdf5_file(a_file)
#ifdef APP_USE_CFITSIO
  ,m_fits_file(0)
#endif  
  ,m_is_meta(false)
  ,m_rroot_cur_dir(0)
  ,m_rroot_cur_dir_owner(false)
  ,m_hdf5_cur_dir(a_dir)
  ,m_hdf5_cur_dir_owner(a_dir_owner)
  {}
#endif

#ifdef APP_USE_CFITSIO
  LUN(const std::string& a_path,exlib::cfitsio::file* a_file)
  :m_type(FITS_FILE)
  ,m_string(a_path)
  ,m_FILE(0)
  ,m_rroot_file(0)
  ,m_wroot_file(0)
#ifdef APP_USE_HDF5
  ,m_hdf5_file(-1)
#endif  
  ,m_fits_file(a_file)
  ,m_is_meta(false)
  ,m_rroot_cur_dir(0)
  ,m_rroot_cur_dir_owner(false)
#ifdef APP_USE_HDF5
  ,m_hdf5_cur_dir(-1)
  ,m_hdf5_cur_dir_owner(false)
#endif  
  {}
#endif

  virtual ~LUN() {
    //close() done by the session. Warning : session handles LUNs in a map, then they are copied.
  }
public:
  LUN(const LUN& a_from)
  :m_type(a_from.m_type)
  ,m_string(a_from.m_string)
  ,m_FILE(a_from.m_FILE)
  ,m_rroot_file(a_from.m_rroot_file)
  ,m_wroot_file(a_from.m_wroot_file)
#ifdef APP_USE_HDF5
  ,m_hdf5_file(a_from.m_hdf5_file)
#endif
#ifdef APP_USE_CFITSIO
  ,m_fits_file(a_from.m_fits_file)
#endif
  ,m_is_meta(a_from.m_is_meta)
  ,m_rroot_cur_dir(a_from.m_rroot_cur_dir)
  ,m_rroot_cur_dir_owner(a_from.m_rroot_cur_dir_owner)
#ifdef APP_USE_HDF5
  ,m_hdf5_cur_dir(a_from.m_hdf5_cur_dir)
  ,m_hdf5_cur_dir_owner(a_from.m_hdf5_cur_dir_owner)
#endif
  {}
  LUN& operator=(const LUN& a_from) { 
    m_type = a_from.m_type;
    m_string = a_from.m_string;
    m_FILE = a_from.m_FILE;
    m_rroot_file = a_from.m_rroot_file;
    m_wroot_file = a_from.m_wroot_file;
#ifdef APP_USE_HDF5
    m_hdf5_file = a_from.m_hdf5_file;
#endif
#ifdef APP_USE_CFITSIO
    m_fits_file = a_from.m_fits_file;
#endif
    m_is_meta = a_from.m_is_meta;
    m_rroot_cur_dir = a_from.m_rroot_cur_dir;
    m_rroot_cur_dir_owner = a_from.m_rroot_cur_dir_owner;
#ifdef APP_USE_HDF5
    m_hdf5_cur_dir = a_from.m_hdf5_cur_dir;
    m_hdf5_cur_dir_owner = a_from.m_hdf5_cur_dir_owner;
#endif
    return *this;
  }
public:
  //bool isFILE() const { return m_FILE?true:false;}
  bool equal(const LUN& a_from) const {
    if(m_type!=a_from.m_type) return false;
    if(m_string!=a_from.m_string) return false;
    if(m_FILE!=a_from.m_FILE) return false;
    if(m_rroot_file!=a_from.m_rroot_file) return false;
    if(m_wroot_file!=a_from.m_wroot_file) return false;
#ifdef APP_USE_HDF5
    if(m_hdf5_file!=a_from.m_hdf5_file) return false;
#endif
#ifdef APP_USE_CFITSIO
    if(m_fits_file!=a_from.m_fits_file) return false;
#endif
    return true;
  }  
public:
  bool operator==(const LUN& a2){return equal(a2);}
  bool operator!=(const LUN& a2){return !equal(a2);}
public:  
  void close() {
    if(m_type==SYS_FILE) {
      if(m_FILE) ::fclose(m_FILE);
      m_FILE = 0;

    } else if(m_type==READ_ROOT_FILE) {
      if(m_rroot_cur_dir_owner) {
        delete m_rroot_cur_dir;
	m_rroot_cur_dir = 0;
	m_rroot_cur_dir_owner = false;
      }
      if(m_rroot_file) delete m_rroot_file;
      m_rroot_file = 0;

    } else if(m_type==WRITE_ROOT_FILE) {
      if(m_wroot_file) delete m_wroot_file;
      m_wroot_file = 0;
      
#ifdef APP_USE_HDF5
    } else if(m_type==HDF5_FILE) {
      if(m_hdf5_cur_dir_owner) {
        ::H5Gclose(m_hdf5_cur_dir);
        m_hdf5_cur_dir = (-1);
        m_hdf5_cur_dir_owner = false;
      }
      if(m_hdf5_file!=(-1)) ::H5Fclose(m_hdf5_file);
      m_hdf5_file = (-1);
#endif      
#ifdef APP_USE_CFITSIO
    } else if(m_type==FITS_FILE) {
      if(m_fits_file) delete m_fits_file;
      m_fits_file = 0;
#endif      
    }
    m_type = LUN::NONE;
  }
public:
  Type m_type;
  std::string m_string;
  FILE* m_FILE;
  inlib::rroot::file* m_rroot_file;
  inlib::wroot::file* m_wroot_file;
#ifdef APP_USE_HDF5
  hid_t m_hdf5_file;
#endif
#ifdef APP_USE_CFITSIO
  exlib::cfitsio::file* m_fits_file;
#endif
  // not used in equal :
  bool m_is_meta;
  inlib::rroot::directory* m_rroot_cur_dir;
  bool m_rroot_cur_dir_owner;
#ifdef APP_USE_HDF5
  hid_t m_hdf5_cur_dir;
  bool m_hdf5_cur_dir_owner;
#endif
};

}

#endif
