// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_funcs
#define gopaw_funcs

#include <inlib/func>
#include <inlib/sprintf>
#include <inlib/S_STRING>
#include <inlib/not_found>

namespace gopaw {

class base_func {
public:
  typedef std::vector<double> point;
public:
  virtual const std::string& s_cls() const = 0;
  virtual double point_value(const point&) = 0; 
  virtual bool set_params(unsigned int,const double[])  = 0;
  virtual void param_values(std::vector<double>&)  = 0;
  virtual unsigned int dimension() const = 0;
public:
  base_func()
  :m_param_names()
  ,m_xdomain_number_of_steps(100)
  ,m_xdomain_min(0)
  ,m_xdomain_max(0)
  ,m_ydomain_number_of_steps(100)
  ,m_ydomain_min(0)
  ,m_ydomain_max(0)
  {}
  virtual ~base_func(){}
public:
  base_func(const base_func& a_from)
  :m_param_names(a_from.m_param_names)
  ,m_xdomain_number_of_steps(a_from.m_xdomain_number_of_steps)
  ,m_xdomain_min(a_from.m_xdomain_min)
  ,m_xdomain_max(a_from.m_xdomain_max)

  ,m_ydomain_number_of_steps(a_from.m_ydomain_number_of_steps)
  ,m_ydomain_min(a_from.m_ydomain_min)
  ,m_ydomain_max(a_from.m_ydomain_max)
  ,m_codelet(a_from.m_codelet)
  ,m_title(a_from.m_title)
  {}
  base_func& operator=(const base_func& a_from) {
    m_param_names = a_from.m_param_names;
    m_xdomain_number_of_steps = a_from.m_xdomain_number_of_steps;
    m_xdomain_min = a_from.m_xdomain_min;
    m_xdomain_max = a_from.m_xdomain_max;
    m_ydomain_number_of_steps = a_from.m_ydomain_number_of_steps;
    m_ydomain_min = a_from.m_ydomain_min;
    m_ydomain_max = a_from.m_ydomain_max;
    m_codelet = a_from.m_codelet;
    m_title = a_from.m_title;
    return *this;
  }
public:
  const std::vector<std::string>& parameter_names() const {return m_param_names;}
public: //for f1d2plot
  unsigned int xdomain_number_of_steps() const {return m_xdomain_number_of_steps;}
  double xdomain_min() const {return m_xdomain_min;}
  double xdomain_max() const {return m_xdomain_max;}
  void set_xdomain_number_of_steps(unsigned int a_v) {m_xdomain_number_of_steps = a_v;}
  void set_xdomain_min(double a_v) {m_xdomain_min = a_v;}
  void set_xdomain_max(double a_v) {m_xdomain_max = a_v;}

  unsigned int ydomain_number_of_steps() const {return m_ydomain_number_of_steps;}
  double ydomain_min() const {return m_ydomain_min;}
  double ydomain_max() const {return m_ydomain_max;}
  void set_ydomain_number_of_steps(unsigned int a_v) {m_ydomain_number_of_steps = a_v;}
  void set_ydomain_min(double a_v) {m_ydomain_min = a_v;}
  void set_ydomain_max(double a_v) {m_ydomain_max = a_v;}

  const std::string& codelet_string() const {return m_codelet;}

  void set_title(const std::string& a_s) {m_title = a_s;}
protected:
  std::vector<std::string> m_param_names;
  unsigned int m_xdomain_number_of_steps;
  double m_xdomain_min;
  double m_xdomain_max;
  unsigned int m_ydomain_number_of_steps;
  double m_ydomain_min;
  double m_ydomain_max;
  std::string m_codelet;
  std::string m_title;
};

class polynomial : public base_func, public inlib::func::polynomial {
  typedef base_func parent;
  typedef inlib::func::polynomial parent_data;
public:
  INLIB_SCLASS(polynomial)
public:
  virtual const std::string& s_cls() const {return s_class();}
public: //base_func
  virtual void param_values(std::vector<double>& a_vec)  {a_vec = parent_data::parameters();}
  virtual bool set_params(unsigned int,const double a_params[])  {
    parent_data::set(a_params);
    return true;
  }
  virtual double point_value(const point& a_pt) {
    return parent_data::value(a_pt[0]); //WARNING : no check done on a_pt.size().
  }
  virtual unsigned int dimension() const {return 1;}
public:
  polynomial(const std::vector<double>& a_params)
  :parent()
  ,parent_data(a_params)
  {
    size_t number = a_params.size(); //It is the degree.
    m_param_names.resize(number);
    for(unsigned int i=0;i<number;i++) {
      std::string s;
      inlib::sprintf(s,32,"p%d",i);
      m_param_names[i] = s;
    }
    //m_variable_names.push_back("x[0]");
    inlib::sprintf(m_codelet,9+32,"class:Polynomial:%d",number);
    //m_codelet = "class:Polynomial";
  }
  virtual ~polynomial(){}
public:
  polynomial(const polynomial& a_from)
  :parent(a_from)
  ,parent_data(a_from)
  {}
  polynomial& operator=(const polynomial& a_from) {
    parent::operator=(a_from);
    parent_data::operator=(a_from);
    return *this;
  }
};

class gauss : public base_func, public inlib::func::gaussian {
  typedef base_func parent;
  typedef inlib::func::gaussian parent_data;
public:
  INLIB_SCLASS(gauss)
public:
  virtual const std::string& s_cls() const {return s_class();}
public: //base_func
  virtual void param_values(std::vector<double>& a_vec)  {
    a_vec.resize(3);
    a_vec[0] = parent_data::scale();
    a_vec[1] = parent_data::mean();
    a_vec[2] = parent_data::sigma();
  }
  virtual bool set_params(unsigned int,const double a_params[])  {
    parent_data::set(a_params[0],a_params[1],a_params[2]);
    return true;
  }
  virtual double point_value(const point& a_pt) {
    return parent_data::value(a_pt[0]); //WARNING : no check done on a_pt.size().
  }
  virtual unsigned int dimension() const {return 1;}
public:
  gauss(double a_scale = 1,double a_mean = 0,double a_sigma = 1)
  :parent()
  ,parent_data(a_scale,a_mean,a_sigma)
  {
    m_param_names.resize(3);
    m_param_names[0] = "amplitude"; //AIDA naming.
    m_param_names[1] = "mean";      
    m_param_names[2] = "sigma";
    m_codelet = "class:Gaussian";
  }
  virtual ~gauss(){}
public:
  gauss(const gauss& a_from)
  :parent(a_from)
  ,parent_data(a_from)
  {}
  gauss& operator=(const gauss& a_from) {
    parent::operator=(a_from);
    parent_data::operator=(a_from);
    return *this;
  }
};

class breit_wigner : public base_func, public inlib::func::bw {
  typedef base_func parent;
  typedef inlib::func::bw parent_data;
public:
  INLIB_SCLASS(breit_wigner)
public:
  virtual const std::string& s_cls() const {return s_class();}
public: //base_func
  virtual void param_values(std::vector<double>& a_vec)  {
    a_vec.resize(3);
    a_vec[0] = parent_data::height();
    a_vec[1] = parent_data::center();
    a_vec[2] = parent_data::width();
  }
  virtual bool set_params(unsigned int,const double a_params[])  {
    parent_data::set(a_params[0],a_params[1],a_params[2]);
    return true;
  }
  virtual double point_value(const point& a_pt) {
    return parent_data::value(a_pt[0]); //WARNING : no check done on a_pt.size().
  }
  virtual unsigned int dimension() const {return 1;}
public:
  breit_wigner(double a_height = 1,double a_center = 0,double a_width = 1)
  :parent()
  ,parent_data(a_height,a_center,a_width)
  {
    m_param_names.resize(3);
    m_param_names[0] = "amplitude";
    m_param_names[1] = "origin";      
    m_param_names[2] = "width";
    m_codelet = "class:BreitWigner";
  }
  virtual ~breit_wigner(){}
public:
  breit_wigner(const breit_wigner& a_from)
  :parent(a_from)
  ,parent_data(a_from)
  {}
  breit_wigner& operator=(const breit_wigner& a_from) {
    parent::operator=(a_from);
    parent_data::operator=(a_from);
    return *this;
  }
};

class exp_aida : public base_func, public inlib::func::expa {
  typedef base_func parent;
  typedef inlib::func::expa parent_data;
public:
  INLIB_SCLASS(exp_aida)
public:
  virtual const std::string& s_cls() const {return s_class();}
public: //base_func
  virtual void param_values(std::vector<double>& a_vec)  {
    a_vec.resize(2);
    a_vec[0] = parent_data::a();
    a_vec[1] = parent_data::b();
  }
  virtual bool set_params(unsigned int,const double a_params[])  {
    parent_data::set(a_params[0],a_params[1]);
    return true;
  }
  virtual double point_value(const point& a_pt) {
    return parent_data::value(a_pt[0]); //WARNING : no check done on a_pt.size().
  }
  virtual unsigned int dimension() const {return 1;}
public:
  exp_aida(double a_a = 1,double a_b = 1)
  :parent()
  ,parent_data(a_a,a_b)
  {
    // WARNING : 
    //   Lib, HBOOK, ROOT : exp(aA + aB * x)
    //   AIDA : par[0] * exp(par[1]*x)
    m_param_names.resize(2);
    m_param_names[0] = "amplitude"; //AIDA naming.
    m_param_names[1] = "exponent";      
    m_codelet = "class:ExpAIDA";
  }
  virtual ~exp_aida(){}
public:
  exp_aida(const exp_aida& a_from)
  :parent(a_from)
  ,parent_data(a_from)
  {}
  exp_aida& operator=(const exp_aida& a_from) {
    parent::operator=(a_from);
    parent_data::operator=(a_from);
    return *this;
  }
};

class exp_hbook : public base_func, public inlib::func::expo {
  typedef base_func parent;
  typedef inlib::func::expo parent_data;
public:
  INLIB_SCLASS(exp_hbook)
public:
  virtual const std::string& s_cls() const {return s_class();}
public: //base_func
  virtual void param_values(std::vector<double>& a_vec)  {
    a_vec.resize(2);
    a_vec[0] = parent_data::a();
    a_vec[1] = parent_data::b();
  }
  virtual bool set_params(unsigned int,const double a_params[])  {
    parent_data::set(a_params[0],a_params[1]);
    return true;
  }
  virtual double point_value(const point& a_pt) {
    return parent_data::value(a_pt[0]); //WARNING : no check done on a_pt.size().
  }
  virtual unsigned int dimension() const {return 1;}
public:
  exp_hbook(double a_a = 0,double a_b = 1)
  :parent()
  ,parent_data(a_a,a_b)
  {
    // WARNING : 
    //   Lib, HBOOK, ROOT : exp(aA + aB * x)
    //   AIDA : par[0] * exp(par[1]*x)
    m_param_names.resize(2);
    m_param_names[0] = "A";
    m_param_names[1] = "B";      
    m_codelet = "class:ExpHBOOK";
  }
  virtual ~exp_hbook(){}
public:
  exp_hbook(const exp_hbook& a_from)
  :parent(a_from)
  ,parent_data(a_from)
  {}
  exp_hbook& operator=(const exp_hbook& a_from) {
    parent::operator=(a_from);
    parent_data::operator=(a_from);
    return *this;
  }
};

}

#include <exlib/yacc/scripted>

namespace gopaw {

class scripted : public base_func, public exlib::scripted {
  typedef base_func parent;
  typedef exlib::scripted parent_data;
public:
  INLIB_SCLASS(scripted)
public:
  virtual const std::string& s_cls() const {return s_class();}
public: //base_func
  virtual void param_values(std::vector<double>& a_vec)  {a_vec = parent_data::m_param_values;}
  virtual bool set_params(unsigned int a_paramn,const double a_params[])  {
    parent_data::set_parameters(a_paramn,a_params);
    return true;
  }
  virtual double point_value(const point& a_pt) {
    double value;
    std::string serr;
    if(!parent_data::value(a_pt,value,serr)) {
      parent_data::m_out << "scripted : error : " << serr << std::endl;
      return 0;
    }
    return value;
  }
  virtual unsigned int dimension() const {return parent_data::dimension();}
public:
  scripted(std::ostream& a_out,const std::string& a_script)
  :parent()
  ,parent_data(a_out,a_script)
  {
    parent::m_param_names = parent_data::m_param_names;
    m_codelet = "scripted:" + a_script;
  }
  virtual ~scripted(){}
public:
  scripted(const scripted& a_from)
  :parent(a_from)
  ,parent_data(a_from)
  {}
  scripted& operator=(const scripted& a_from) {
    parent::operator=(a_from);
    parent_data::operator=(a_from);
    return *this;
  }
public:
   //if dim=1, for f1d2plot :
  bool in_domain(double) const {return true;}
  double value(double a_x) const {
    scripted& self = const_cast<scripted&>(*this);
    self.m_xs.resize(1,0);
    self.m_xs[0] = a_x;
    double value;
    self.m_serr.clear();
    if(!self.parent_data::value(m_xs,value,self.m_serr)) return 0;
    return value;
  }
   //if dim=2, for f2d2plot :
  bool in_domain(double,double) const {return true;}
  double value(double a_x,double a_y) const {
    scripted& self = const_cast<scripted&>(*this);
    self.m_xs.resize(2,0);
    self.m_xs[0] = a_x;
    self.m_xs[1] = a_y;
    double value;
    self.m_serr.clear();
    if(!self.parent_data::value(m_xs,value,self.m_serr)) return 0;
    return value;
  }
private:
  std::vector<double> m_xs;
  std::string m_serr;
};

}

#include "ifunction"

#include <inlib/forit>
#include <inlib/vdata>

#include "hbook.h"

namespace gopaw {

class compiled : public base_func {
  typedef inlib::value imp_value_t;
  typedef inlib::value itf_value_t; 
private:  
  typedef base_func parent;
  typedef inlib::array<double> array_t;
public:
  INLIB_SCLASS(compiled)
public:
  virtual const std::string& s_cls() const {return s_class();}
  virtual double point_value(const point& a_pt) {
    double _value;
    if(!value(a_pt,_value)) return 0;
    return _value;
  }
  virtual bool set_params(unsigned int a_paramn,const double a_params[])  {
    if(a_paramn!=m_params.size()) return false;
    for(unsigned int i=0;i<a_paramn;i++) m_params[i] = a_params[i];
    return true;
  }
  virtual void param_values(std::vector<double>& a_vec)  {a_vec = m_params;}
  virtual unsigned int dimension() const {return m_variable_names.size();}
public:
  virtual bool set_parameter(const std::string& a_name,double a_value) { 
    int index = index_of_parameter(a_name);
    if(index==inlib::not_found()) {
      m_out << "compiled::set_parameter : parameter name " << inlib::sout(a_name) << " not found." << std::endl;
      return false;
    }
    m_params[index] = a_value;
    //emitUpdate();
    return true;
  }
  virtual bool set_parameters(const std::vector<double>& a_params) {
    if(a_params.size()!=m_params.size()) {
      m_out << "compiled::set_parameters : bad input vector size." << std::endl;
      return false;
    }
    m_params = a_params;
    //emitUpdate();
    return true;
  }
  virtual double parameter(const std::string& a_name) const {
    if(a_name.size()>=1) {
      if(a_name[0]=='p'){
        std::string s = a_name.substr(1,a_name.size()-1);
        unsigned int index;
        if(inlib::to<unsigned int>(s,index)) {
          if(index<m_params.size()) return m_params[index];
        }
      }
    }
    m_out << "compiled::parameter : unknown parameter " << a_name << "." << std::endl;
    return 0;
  }
public: //base_func
  virtual bool value(const std::vector<double>& a_point,double& a_value) const { 
    if(!m_func) {
      m_out << "compiled::value : not initailized." << std::endl;
      a_value = 0;
      return false;
    }

    //3 0 0 : 3 1
    //::printf("debug : compiled::value %d %d %d : %d %d\n",
    //   m_variable_names.size(),m_params.size(),m_arrays.size(),m_func->dimension(),a_point.size());

    unsigned int xn = a_point.size();
    unsigned int pn = m_params.size();
    unsigned int an = m_arrays.size();    

    itf_value_t* retsig;
    std::vector<itf_value_t*> func_sig = m_func->signature(retsig);
      
    std::vector<itf_value_t*> args;

    unsigned int xi = 0; //a_points index
    unsigned int pi = 0; //m_params index
    unsigned int ai = 0; //m_arrays index

    unsigned args_dim = 0;

   {unsigned int sign = func_sig.size();
    for(unsigned int sigi=0;sigi<sign;sigi++) {
        itf_value_t* arg_sig = func_sig[sigi];
        if(arg_sig->type()==itf_value_t::INT) {  //double on int = we may lose info.
          args_dim++;
          if(xi<xn) {
            args.push_back(new imp_value_t((int)a_point[xi]));xi++;
	  } else if(pi<pn) {
            args.push_back(new imp_value_t((int)m_params[pi]));pi++;
	  } else {
            m_out << "compiled::value : not sufficient data to fill INT argument."
                  << " Codelet is " << inlib::sout(m_codelet) << "." << std::endl;
            clear_args(args);
            a_value = 0;
            return false;
	  }
	  
        } else if(arg_sig->type()==itf_value_t::FLOAT) { //double on int = we may lose info.
          args_dim++;
          if(xi<xn) {
            args.push_back(new imp_value_t((float)a_point[xi]));xi++;
	  } else if(pi<pn) {
            args.push_back(new imp_value_t((float)m_params[pi]));pi++;
	  } else {
            m_out << "compiled::value : not sufficient data to fill FLOAT argument."
                  << " Codelet is " << inlib::sout(m_codelet) << "." << std::endl;
            clear_args(args);
            a_value = 0;
            return false;
	  }
	  
        } else if(arg_sig->type()==itf_value_t::DOUBLE) {
          args_dim++;
          if(xi<xn) {
            args.push_back(new imp_value_t(a_point[xi]));xi++;
	  } else if(pi<pn) {
            args.push_back(new imp_value_t(m_params[pi]));pi++;
	  } else {
            m_out << "compiled::value : not sufficient data to fill DOUBLE argument."
                  << " Codelet is " << inlib::sout(m_codelet) << "." << std::endl;
            clear_args(args);
            a_value = 0;
            return false;
	  }
	  
        } else if(arg_sig->type()==itf_value_t::FLOAT_STAR) { //mandel.f/XP(2)
          unsigned int dim = arg_sig->itag();
          args_dim += dim; //warning.
          //::printf("debug : funcs : %s, FLOAT_STAR, id %d\n",arg_sig->label().c_str(),an);
          float* array = new float[dim];
          for(unsigned int index=0;index<dim;index++) {
            if(xi<xn) {
              array[index] = float(a_point[xi]);xi++;
            } else if(pi<pn) {  
              array[index] = float(m_params[pi]);pi++;
            } else {
              m_out << "compiled::value : not sufficient data to fill FLOAT_STAR argument."
                    << " Codelet is " << inlib::sout(m_codelet) << "." << std::endl;
              clear_args(args);
              a_value = 0;
              return false;
	    }
          }
          args.push_back(new imp_value_t(array));
	  
        } else if(arg_sig->type()==itf_value_t::DOUBLE_STAR) {  
          args_dim++;
          if(ai<an) {
            std::vector<double>& va = m_arrays[ai]->vector();
            if(!va.size()) {
              m_out << "compiled::value : IArray as an empty vector<double>."
                    << " Codelet is " << inlib::sout(m_codelet) << "." << std::endl;
              clear_args(args);
              a_value = 0;
              return false;
            }
          //args.push_back(new imp_value_t(inlib::vec_data(va)));ai++;
            imp_value_t* _value = new imp_value_t(inlib::vec_data(va));
	    _value->set_itag((unsigned int)va.size()); //for py_wrap_func.
            args.push_back(_value);ai++;
	  } else {
            m_out << "compiled::value : not sufficient data to fill DOUBLE_STAR argument."
                  << " Codelet is " << inlib::sout(m_codelet) << "." << std::endl;
            clear_args(args);
            a_value = 0;
            return false;
	  }
  
        } else if(arg_sig->type()==itf_value_t::VOID_STAR) { //urout.c
          args_dim++;
          if(arg_sig->label()=="a_hbook") {
            args.push_back(new imp_value_t((void*)&m_hbook));
          } else if(arg_sig->label()=="a_tag") {
            args.push_back(new imp_value_t((void*)m_hbook_tag));
          } else {
            m_out << "compiled::value : unknow void* variable " << inlib::sout(arg_sig->label()) << "."
                  << " Codelet is " << inlib::sout(m_codelet) << "." << std::endl;
            clear_args(args);
            a_value = 0;
            return false;
          }

        } else {
          m_out << "compiled::value : function arg type " << inlib::sout(arg_sig->stype()) << " not handled."
                << " Codelet is " << inlib::sout(m_codelet) << "." << std::endl;
          clear_args(args);
          a_value = 0;
          return false;
        }
    }}

    if(args_dim!=m_func->dimension()) {
      m_out << "compiled::value : args/dimension mismatch (" << args.size() << "," << m_func->dimension() << ")."
            << " Codelet is " << inlib::sout(m_codelet) << "." << std::endl;
      clear_args(args);
      a_value = 0;
      return false;
    }

    imp_value_t ret;
    if(!m_func->value(args,ret)) {
      m_out << "compiled::value : get value failed for codelet " << inlib::sout(m_codelet) << " at point";
     {unsigned int number = a_point.size();
      for(unsigned int i=0;i<number;i++) m_out << " " << a_point[i];}
      m_out << std::endl;
      clear_args(args);
      return false;
    }

    //check retSig and ret.type() ?

    clear_args(args);
  
    if(ret.type()==itf_value_t::FLOAT) {
      a_value = ret.get_float();
    } else if(ret.type()==itf_value_t::DOUBLE) {
      a_value = ret.get_double();
    } else {
      m_out << "compiled::value : returned imp_value_t type " << inlib::sout(ret.stype()) << " not treated." << std::endl;
      return false;
    }
    
  // m_out << "compiled::value : at point";
  // unsigned int number = a_point.size();
  // for(unsigned int i=0;i<number;i++) m_out << " " << a_point[i];
  // m_out << " value : " << a_value;
  // m_out << std::endl;}
  
    return true;
  }

public:
  compiled(std::ostream& a_out,const hbook& a_hbook,void* a_tag,gopaw::ifunction* a_function)
  :parent()
  ,m_out(a_out)
  ,m_hbook(a_hbook)
  ,m_hbook_tag(a_tag)
  ,m_func(0)
  ,m_retain_arrays(false)
  {
    //NOTE : we do NOT take ownership of a_function.
    if(!initialize(a_function,m_arrays,false)) {}
  }

  compiled(std::ostream& a_out,const hbook& a_hbook,void* a_tag,gopaw::ifunction* a_function,
           const std::vector<array_t*>& aArrays,bool a_retain_arrays)
  :parent()
  ,m_out(a_out)
  ,m_hbook(a_hbook)
  ,m_hbook_tag(a_tag)
  ,m_func(0)
  ,m_retain_arrays(false)
  {
    //NOTE : we do NOT take ownership of a_function.
    if(!initialize(a_function,aArrays,a_retain_arrays)) {}
  }

  virtual ~compiled() {
    if(m_retain_arrays) {inlib_vforcit(array_t*,m_arrays,it) delete *it;}
    m_arrays.clear();
  }
public:
  compiled(const compiled& a_from)
  :parent(a_from)
  ,m_out(a_from.m_out)
  ,m_hbook(a_from.m_hbook)
  ,m_hbook_tag(a_from.m_hbook_tag)
  ,m_func(0)
  ,m_retain_arrays(false)
  {
    if(!initialize(a_from.m_func,a_from.m_arrays,a_from.m_retain_arrays)) {}
  }
  compiled& operator=(const compiled& a_from) {
    parent::operator=(a_from);

    if(m_retain_arrays) {inlib_vforcit(array_t*,m_arrays,it) delete *it;}
    m_arrays.clear();
    m_func = 0;
    m_retain_arrays = false;
    if(!initialize(a_from.m_func,a_from.m_arrays,a_from.m_retain_arrays)) {}

    return *this;
  }
public:
   //if dim=1, for f1d2plot :
  bool in_domain(double) const {return true;}
  double value(double a_x) const {
    std::vector<double> xs(1);xs[0] = a_x;
    double v;
    if(!value(xs,v)) return 0;
    return v;
  }
   //if dim=2, for f2d2plot :
  bool in_domain(double,double) const {return true;}
  double value(double a_x,double a_y) const {
    std::vector<double> xs(2);xs[0] = a_x;;xs[1] = a_y;
    double v;
    if(!value(xs,v)) return 0;
    return v;
  }
public:
  gopaw::ifunction* slashFunction() const {return m_func;}
private:
  static void clear_args(std::vector<itf_value_t*>& a_args) {
    inlib_vforit(itf_value_t*,a_args,it) {
      if((*it)->type()==itf_value_t::FLOAT_STAR) delete (*it)->get_float_star();
      delete *it;
    }
    a_args.clear();
  }

  bool initialize(gopaw::ifunction* a_function,const std::vector<array_t*>& aArrays,bool a_retain_arrays) {
    if(!a_function) {
      m_out << "compiled::initialize : null gopaw::ifunction* given." << std::endl;
      return false;
    }
    if(a_function->numberOfParameters()>a_function->dimension()) {
      m_out << "compiled::initialize :"
          << " for model " << inlib::sout(a_function->model())
          << " in file " << inlib::sout(a_function->file())
  //        << " with signature " << inlib::sout(a_function->signature())
          << ", dimension mismatch"
          << " parameters = " << a_function->numberOfParameters() 
          << " > dimension = " << a_function->dimension()
          << "."
          << std::endl;
      return false;
    }

    if(a_retain_arrays) {
      inlib_vforcit(array_t*,aArrays,it) {
        array_t* to = new array_t((*it)->orders());
        to->copy(*(*it));
        m_arrays.push_back(to);
      }
      m_retain_arrays = true;
    } else {
      inlib_vforcit(array_t*,aArrays,it) m_arrays.push_back(*it);
      m_retain_arrays = false;
    }
  
    unsigned int parn = a_function->numberOfParameters();
    unsigned int varn = a_function->dimension()-parn;
    unsigned int an = m_arrays.size();    
    if(an) varn -= an;
  
   {m_variable_names.resize(varn);
    for(unsigned int i=0;i<varn;i++) {
      std::string s;
      inlib::sprintf(s,32,"x[%d]",i);
      m_variable_names[i] = s;
    }}
  
   {m_param_names.resize(parn);
    m_params.resize(parn,0);
    for(unsigned int i=0;i<parn;i++) {
      std::string s;
      inlib::sprintf(s,32,"p%d",i);
      m_param_names[i] = s;
    }}
  
    // codelet syntax is : compiled:<model>;<file>
    // compiled:<file> alone is not sufficient since a 
    // source file may contain multiple functions !
    // For the second separator, we can't take ':', since
    // it is part of the file path syntax on Windows (drive separator).
  
    m_func = a_function;
  
    m_model = a_function->model();
    m_file = a_function->file();
    //m_signature = a_function->signature();
    m_codelet = "compiled:" + m_model + ";" + m_file;

    return true;
  }

/*
  void reset() {
    m_param_names.clear();
    m_params.clear();
    m_variable_names.clear();
    fCodelet = "";
    m_model = "";
    m_file = "";
    m_signature = "";
    m_func = 0;
  }
*/
  int index_of_parameter(const std::string& a_name) const {
    unsigned int number = m_param_names.size();
    for(unsigned int i=0;i<number;i++) {
      if(m_param_names[i]==a_name) return i;
    }
    return inlib::not_found();
  }
private:
  std::ostream& m_out;
  const hbook& m_hbook;
  void* m_hbook_tag;
  gopaw::ifunction* m_func;
  std::string m_model;
  std::string m_file;
  std::string m_signature;
  std::vector<array_t*> m_arrays;
  bool m_retain_arrays;

  std::vector<double> m_params;
  std::vector<std::string> m_param_names;
  std::vector<std::string> m_variable_names;
};

}

#endif //gopaw_funcs
