// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_fits_aida
#define gopaw_fits_aida

#ifdef APP_USE_CFITSIO

#include <inlib/aida_ntuple>
#include <exlib/rcfitsio_ntuple>

namespace gopaw {

inline bool fits2aida(std::ostream& a_out,const std::string& a_file,unsigned int a_hdu,inlib::aida::ntuple*& a_aida) {
  exlib::rcfitsio::ntuple ntu(a_out,a_file,a_hdu);
  if(!ntu.initialize()) {
    a_out << "fits2aida : for hdu " << a_hdu << ", exlib::rcfitsio::initialize() failed." << std::endl;
    a_aida = 0;
    return false;
  }

  std::string title;
  inlib::num2s(a_hdu,title);
  inlib::aida::ntuple* aida_tuple = new inlib::aida::ntuple(a_out,title);

  typedef inlib::read::icolumn<float> fits_fcol_t;
  std::vector<fits_fcol_t*> fits_fcols;
  typedef inlib::read::icolumn<double> fits_dcol_t;
  std::vector<fits_dcol_t*> fits_dcols;
  typedef inlib::read::icolumn<int> fits_icol_t;
  std::vector<fits_icol_t*> fits_icols;

  typedef inlib::aida::aida_col<double> aida_col_t;
  std::vector<aida_col_t*> aida_cols;

  inlib_vforcit(inlib::read::icol*,ntu.columns(),it) {
   {fits_dcol_t* fits_col = inlib::id_cast<inlib::read::icol,fits_dcol_t>(*(*it));    
    if(fits_col) {
      fits_fcols.push_back(0);
      fits_dcols.push_back(fits_col);
      fits_icols.push_back(0);
      aida_cols.push_back(aida_tuple->create_col<double>(fits_col->name()));
      continue;
   }}
   {fits_fcol_t* fits_col = inlib::id_cast<inlib::read::icol,fits_fcol_t>(*(*it));    
    if(fits_col) {
      fits_fcols.push_back(fits_col);
      fits_dcols.push_back(0);
      fits_icols.push_back(0);
      aida_cols.push_back(aida_tuple->create_col<double>(fits_col->name()));
      continue;
    }}
   {fits_icol_t* fits_col = inlib::id_cast<inlib::read::icol,fits_icol_t>(*(*it));    
    if(fits_col) {
      fits_fcols.push_back(0);
      fits_dcols.push_back(0);
      fits_icols.push_back(fits_col);
      aida_cols.push_back(aida_tuple->create_col<double>(fits_col->name()));
      continue;
    }}

    std::string scid;
    if(!inlib::cid2s((*it)->id_cls(),scid)) {}
    a_out << "fits2aida : a fits_col " << inlib::sout((*it)->name())
          << " is not of type double or float. id_cls() is " << (*it)->id_cls() << " (" << scid << ")."
          << " Continue." << std::endl;
    //delete aida_tuple;
    //a_aida = 0;
    //return false;
  }

  size_t coln = aida_cols.size();

  float fvalue;
  double dvalue;
  int ivalue;
  bool status;

  ntu.start();
  while(ntu.next()){
    status = true;
    for(size_t coli=0;coli<coln;coli++) {
      if(fits_fcols[coli]) {
        if(!fits_fcols[coli]->get_entry(fvalue)) {
          a_out << "fits2aida : fits_fcol.get_entry() failed." << std::endl;
          status = false;
          break;
        }
        if(!aida_cols[coli]->fill(fvalue)) {
          a_out << "fits2aida : aida_col fill failed." << std::endl;
          status = false;
          break;
        }
      } else if(fits_dcols[coli]) {
        if(!fits_dcols[coli]->get_entry(dvalue)) {
          a_out << "fits2aida : fits_dcol.get_entry() failed." << std::endl;
          status = false;
          break;
        }
        if(!aida_cols[coli]->fill(dvalue)) {
          a_out << "fits2aida : aida_col fill failed." << std::endl;
          status = false;
          break;
        }
      } else if(fits_icols[coli]) {
        if(!fits_icols[coli]->get_entry(ivalue)) {
          a_out << "fits2aida : fits_icol.get_entry() failed." << std::endl;
          status = false;
          break;
        }
        if(!aida_cols[coli]->fill(double(ivalue))) {
          a_out << "fits2aida : aida_col fill failed." << std::endl;
          status = false;
          break;
        }
      }
    }
    if(!status || !aida_tuple->add_row()) {
      a_out << "fits2aida : aida ntuple fill failed." << std::endl;
      delete aida_tuple;
      a_aida = 0;
      return false;
    }
  }

  a_aida = aida_tuple;
  return true;
}

}

#endif //APP_USE_CFITSIO

#endif
