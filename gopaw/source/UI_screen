// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_UI_screen
#define gopaw_UI_screen

#include "base_viewer"

#include <exlib/sg/viewer>
#include <inlib/strip>

namespace gopaw {

class GL_viewer : public base_viewer, public exlib::sg::viewer {
  typedef exlib::sg::viewer parent_viewer;
public:
#ifdef APP_USE_PYTHON
  virtual const inlib::sg::viewer& viewer() const {return *this;}
  virtual inlib::sg::viewer& viewer() {return *this;}
#endif  
  virtual void set_produce_jpeg(bool a_value) {parent_viewer::set_produce_out_jpg(a_value);}
  virtual void set_produce_png(bool a_value) {parent_viewer::set_produce_out_png(a_value);}
  virtual void set_produce_file(const std::string& a_file) {parent_viewer::set_produce_out_file(a_file);}
  virtual void set_background_color(float a_r,float a_g,float a_b,float a_a = 1) {
    parent_viewer::set_clear_color(a_r,a_g,a_b,a_a);
  }    
  virtual void get_background_color(float& a_r,float& a_g,float& a_b,float& a_a) {
    parent_viewer::get_clear_color(a_r,a_g,a_b,a_a);
  }
  
  virtual void set_size(unsigned int a_w,unsigned int a_h) {
    base_viewer::_set_size(a_w,a_h);
    parent_viewer::set_size(a_w,a_h);
  }
  virtual void after_render() {
    //WARNING : it does OpenGL. Under Android it should be executed in the OpenGL thread.
    //WARNING : if having more m_produce_xxx, look exlib/app/iOS/GLView_mm.

    std::ostream& _out = parent_viewer::m_out;

    if(parent_viewer::m_produce_out_jpg) {
      parent_viewer::m_produce_out_jpg = false;
      
      unsigned int bpp = 4;
      unsigned char* buffer = exlib::sg::GL_manager::get_rgbas(parent_viewer::m_ww,parent_viewer::m_wh);
      if(!buffer) {
        _out << "gopaw::GL_viewer::after_render : can't get image." << std::endl;
        return;
      }
      
      //NOTE : jpeg wants bpp=3.
      inlib::img_byte rgba(parent_viewer::m_ww,parent_viewer::m_wh,bpp,buffer,true); //true=img owns buffer.
      inlib::img_byte rgb;
      if(!rgba.rgba2rgb(rgb)) {
        _out << "gopaw::GL_viewer::after_render : can't convert rgba image to rgb." << std::endl;
        return;
      }
      
      if(!exlib::jpeg::write(_out,parent_viewer::m_produce_out_file,rgb.buffer(),rgb.width(),rgb.height(),rgb.bpp(),100)) {
        _out << "gopaw::GL_viewer::after_render : exlib::jpeg::write() failed." << std::endl;
      }
    }
    
    if(parent_viewer::m_produce_out_png) {
      parent_viewer::m_produce_out_png = false;
      
      unsigned int bpp = 4;
      unsigned char* buffer = exlib::sg::GL_manager::get_rgbas(parent_viewer::m_ww,parent_viewer::m_wh);
      if(!buffer) {
        _out << "gopaw::GL_viewer::after_render : can't get image." << std::endl;
        return;
      }
      
      if(!exlib::png::write(_out,parent_viewer::m_produce_out_file,buffer,parent_viewer::m_ww,parent_viewer::m_wh,bpp)) {
        _out << "gopaw::GL_viewer::after_render : exlib::png::write() failed." << std::endl;
      }
      delete [] buffer;
    }
  }
public:
  GL_viewer(std::ostream& a_out,unsigned int a_width,unsigned int a_height)
  :base_viewer(a_out,a_width,a_height)
  ,parent_viewer(a_out,a_width,a_height)
  {
    base_viewer::set_viewer_scene_graph(&(parent_viewer::sg()));
  }
  virtual ~GL_viewer() {
    //WARNING : nodes may refer graphics managers (to handle gstos/texs), then
    //          we have to delete them before the managers.
    base_viewer::clean_gstos();
  }
public:
  GL_viewer(const GL_viewer& a_from)
  :iwidget(a_from)
  ,base_viewer(a_from)
  ,parent_viewer(a_from)
  {}
  GL_viewer& operator=(const GL_viewer& a_from){
    base_viewer::operator=(a_from);
    parent_viewer::operator=(a_from);
    return *this;
  }
};

}

#include <Getline/ourex_Getline.h> //enforce ourex. //WARNING : there is a getline.c in ourex/KUIP.

extern "C" {
  bool gopaw_kuip_exec(std::ostream&,const std::string&);
}

namespace gopaw {

class term  {
public:
  term(iui& a_ui):m_ui(a_ui),m_accum(false) {
    // NOTE : the two below must be done after the banner had beend dump (then after gopaw_initialize())
    ::ourex_Gl_histinit((char*)"term.hist");
    ::ourex_Getlinem(-1,"GOPAW> ");
    //if!ourex_Gl_is_valid()) {}
  }
  virtual ~term(){
    ::ourex_Getlinem(-1,"");
    ::ourex_Gl_erase_line();
    ::ourex_Getlinem(2,0);
  }
private:
  term(const term& a_from):m_ui(a_from.m_ui) {}
  term& operator=(const term&){return *this;}
public:
  //void set_prompt(const std::string& a_prompt) {
  //  ::ourex_Getlinem(-1,a_prompt.c_str());
  //}
  void get_line() {
    char* p = ourex_Getlinem(1,0);
    if(!p) return;
    if(*p) {
      std::string cmd(p);
      inlib::strip(cmd,inlib::trailing,'\n');
      if((cmd=="quit")||(cmd=="exit")) {
        ::ourex_Gl_histadd((char*)cmd.c_str());
        m_ui.exit();
      } else if(cmd.size() && (cmd[cmd.size()-1]=='_')) {
        m_accum = true;
        m_cmd += cmd.substr(0,cmd.size()-1);
        ::ourex_Getlinem(-1,"GOPAW>_ ");
      } else {
	if(m_accum) {
          m_cmd += cmd;
          ::ourex_Gl_histadd((char*)m_cmd.c_str());
          //::printf("debug : accum : \"%s\" ...\n",m_cmd.c_str());
          if(gopaw_kuip_exec(m_ui.out(),m_cmd)) m_ui.render_it();
          m_accum = false;
          m_cmd.clear();
	} else {
          ::ourex_Gl_histadd((char*)cmd.c_str());
          //::printf("debug : \"%s\" ...\n",cmd.c_str());
          if(gopaw_kuip_exec(m_ui.out(),cmd)) m_ui.render_it();
	}
        //::printf("debug : \"%s\" end.\n",cmd.c_str());
        ::ourex_Getlinem(-1,"GOPAW> ");
      }
    } else { // ^D
      m_ui.exit();
    }
  }
private:
  iui& m_ui;
  bool m_accum;
  std::string m_cmd;
};

class UI_screen : public virtual iui {
  // still virtual :
  //virtual void synchronize() = 0;
  //virtual void render_it() = 0;
public:
  virtual std::ostream& out() const {return m_out;}

  virtual void exit(int = 0) {m_to_exit = true;}
  
  virtual bool ask(const std::string& a_prompt,std::string& a_value){
    char* p = ::ourex_Getline(a_prompt.c_str());
    if(!p) {a_value.clear();return false;}
    if(!*p) {a_value.clear();return true;} //^D
    std::string cmd(p);
    inlib::strip(cmd,inlib::trailing,'\n');
    a_value = cmd;
    return true;
  }
  
  virtual iwidget* current_widget() const {
    gopaw::GL_viewer* viewer = const_cast<gopaw::GL_viewer*>(&m_viewer);
    return static_cast<iwidget*>(viewer);
  }
  virtual iwidget* find_widget(const std::string&) const {
    gopaw::GL_viewer* viewer = const_cast<gopaw::GL_viewer*>(&m_viewer);
    return static_cast<iwidget*>(viewer);
  }
public:
  UI_screen(std::ostream& a_out,unsigned int a_width,unsigned int a_height)
  :m_out(a_out)
  ,m_viewer(a_out,a_width,a_height)
  ,m_to_exit(false)
  ,m_term(0)
  {   
    inlib::sg::separator* sep = new inlib::sg::separator;
    m_viewer.set_scene_graph(*sep);    
    m_viewer.sg().add(sep); //give sep ownership to the viewer.
  }
  virtual ~UI_screen() {
    delete m_term;
  }
protected:
  UI_screen(const UI_screen& a_from)
  :m_out(a_from.m_out)
  ,m_viewer(a_from.m_viewer)
  ,m_to_exit(false)
  ,m_term(0)
  {}
  UI_screen& operator=(const UI_screen& a_from) {
    m_viewer = a_from.m_viewer;
    return *this;
  }
public:
#ifdef APP_USE_PYTHON
  const GL_viewer& viewer() const {return m_viewer;}
  GL_viewer& viewer() {return m_viewer;}
#endif  
  void enable_terminal() {
    if(m_term) return; //done.
    m_term = new term(*this);
  }
protected:
  std::ostream& m_out;
  GL_viewer m_viewer;
  bool m_to_exit;
  term* m_term;
};

}

#endif
