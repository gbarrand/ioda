// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_plugin_func
#define gopaw_plugin_func

#include "ifunction"

#ifdef INLIB_MEM
#include <inlib/mem>
#endif

#include <inlib/sout>

namespace gopaw {

class plugin_func : public virtual gopaw::ifunction {
  typedef gopaw::ifunction parent;
#ifdef INLIB_MEM
  static const std::string& s_class() {
    static const std::string s_v("gopaw::plugin_func");
    return s_v;
  }
#endif  
  typedef inlib::value imp_value_t;
  typedef inlib::value itf_value_t; 
public: // ifunction :
  virtual std::string file() const {return m_file;}
  virtual std::string model() const {return m_model;}
  //virtual void* address() const {return m_address;}

  virtual unsigned int dimension() const {
    unsigned int dim = 0;
    unsigned int dimn = m_dims.size();
    for(unsigned int i=0;i<dimn;i++) dim += (m_dims[i]?m_dims[i]:1);
    return dim;
  }

  virtual unsigned int numberOfParameters() const {return m_parn;}

/*
  virtual bool value(const std::vector<double>& a_args,double& a_value) const {
    if(!m_address) {
      a_value = 0;
      return false;
    }
  
    if(a_args.size()!=dimension()) {
      a_value = 0;
      return false;
    }
  
    bool status = true;
  
    unsigned int argn = m_values.size();
    unsigned int aArgn = a_args.size();
  
   {unsigned int argc = 0;
    for(unsigned int argi=0;argi<argn;argi++) {
      itf_value_t* ivalue = m_values[argi];
  
      if(ivalue->type()==itf_value_t::DOUBLE) {
        if((argc+1)>aArgn) {
          status = false;
          break;
        } else {
          ivalue->set(a_args[argc]);
          argc++;
        }
      } else if(ivalue->type()==itf_value_t::FLOAT) {
        if((argc+1)>aArgn) {
          status = false;
          break;
        } else {
          ivalue->set((float)a_args[argc]);
          argc++;
        }
      } else if(ivalue->type()==itf_value_t::INT) {
        if((argc+1)>aArgn) {
          status = false;
          break;
        } else {
          ivalue->set((int)a_args[argc]);
          argc++;
        }
      } else if(ivalue->type()==itf_value_t::DOUBLE_STAR) {
        unsigned int dim = m_dims[argi];
        if((argc+dim)>aArgn) {
          status = false;
          break;
        } else {
          double* array = ivalue->get_double_star();
          for(unsigned int i=0;i<dim;i++) {
            array[i] = a_args[argc];
            argc++;
          }
        }
  
      } else if(ivalue->type()==itf_value_t::INT_STAR) {
        unsigned int dim = m_dims[argi];
        if((argc+dim)>aArgn) {
          status = false;
          break;
        } else {
          int* array = ivalue->get_int_star();
          for(unsigned int i=0;i<dim;i++) {
            array[i] = (int)a_args[argc];
            argc++;
          }
        }
  
      } else if(ivalue->type()==itf_value_t::FLOAT_STAR) {
        unsigned int dim = m_dims[argi];
        if((argc+dim)>aArgn) {
          status = false;
          break;
        } else {
          float* array = ivalue->get_float_star();
          for(unsigned int i=0;i<dim;i++) {
            array[i] = (float)a_args[argc];
            argc++;
          }
        }
  
      } else if(ivalue->type()==itf_value_t::VOID_STAR) {
        status = false;
        break;
      } else {
        status = false;
        break;
      }
    }
    if(argc!=dimension()) {
      status = false;
    }}
    //if(!status) {
      //printf("debug : gopaw::plugin_func::value : arg setup failed.\n");
    //}
  
    if(status) {
      typedef bool (*Function)(std::ostream&,const std::string&,const std::string&,
                               const std::vector<itf_value_t*>&,itf_value_t&);
      status = ((Function)m_address)(m_out,m_file,m_model,m_values,*m_return);
    }
   
    if(status) {
      status = true;
      if(m_return->type()==itf_value_t::FLOAT) {
        a_value = m_return->get_float();
      } else if(m_return->type()==itf_value_t::DOUBLE) {
        a_value = m_return->get_double();
      } else {
        status = false;    
      }
    }
  
    return status;  
  }
*/  
  virtual bool value(const std::vector<itf_value_t*>& a_args,itf_value_t& a_value) const {
    if(!m_address) {
      a_value.set_none();
      return false;
    }
  
    typedef bool (*Function)(std::ostream&,const std::string&,const std::string&,const std::vector<itf_value_t*>&,itf_value_t&);
  
    return ((Function)m_address)(m_out,m_file,m_model,a_args,a_value);
  }

  virtual std::vector<itf_value_t*> signature(itf_value_t*& a_return) const {
    // args + return value.
    a_return = m_return;
    return m_values;
  }

public:
  plugin_func(std::ostream& a_out,
              const std::string& a_file,const std::string& a_model,
              void* a_address,const std::vector<imp_value_t>& a_args,
              unsigned int a_parn)
  :m_out(a_out)
  ,m_file(a_file)
  ,m_model(a_model)
  ,m_address(a_address)
  ,m_parn(a_parn)
  ,m_return(0)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  
    unsigned int argn = a_args.size();
    for(unsigned int argi=0;argi<argn;argi++) {
      const imp_value_t& v = a_args[argi];
      if( (v.type()==itf_value_t::DOUBLE_STAR) ||
          (v.type()==itf_value_t::INT_STAR)    ||
          (v.type()==itf_value_t::FLOAT_STAR)  ||
          (v.type()==itf_value_t::VOID_STAR)   || //function,tag.
          (v.type()==itf_value_t::DOUBLE)      ||
          (v.type()==itf_value_t::INT)         ||
          (v.type()==itf_value_t::FLOAT)       ){
        //ok
      } else {
        //unknown type :
        m_out << "gopaw::plugin_func::plugin_func : " << inlib::sout(v.stype()) << " not handled." << std::endl;
        m_address = 0;
        m_dims.clear();
        return;
      }
      m_dims.push_back(v.itag());
      //::printf("debug :  plugin_func : arg \"%s\" %d\n",v.label().c_str(),v.itag());
    }
  
    // to optimize :
   {m_values.resize(argn,0);
    for(unsigned int argi=0;argi<argn;argi++) {
      const imp_value_t& v = a_args[argi];
      if(v.type()==itf_value_t::DOUBLE) {
        m_values[argi] = new imp_value_t(double(0));
      } else if(v.type()==itf_value_t::FLOAT) {
        m_values[argi] = new imp_value_t(float(0));
      } else if(v.type()==itf_value_t::INT) {
        m_values[argi] = new imp_value_t(int(0));
      } else if(v.type()==itf_value_t::DOUBLE_STAR) {
        unsigned int dim = m_dims[argi];
        double* array = dim ? new double[dim] : 0;
        m_values[argi] = new imp_value_t(array);
      } else if(v.type()==itf_value_t::INT_STAR) {
        unsigned int dim = m_dims[argi];
        int* array = dim ? new int[dim] : 0;
        m_values[argi] = new imp_value_t(array);
      } else if(v.type()==itf_value_t::FLOAT_STAR) {
        unsigned int dim = m_dims[argi];
        float* array = dim? new float[dim] : 0;
        m_values[argi] = new imp_value_t(array);
      } else if(v.type()==itf_value_t::VOID_STAR) {
        m_values[argi] = new imp_value_t((void*)0);
      }
      m_values[argi]->set_label(v.label());
      m_values[argi]->set_itag(v.itag());
    }}
    m_return = new imp_value_t;  
  }

  virtual ~plugin_func(){
    delete m_return;
   {unsigned int argn = m_values.size();
    for(unsigned int argi=0;argi<argn;argi++) {
      itf_value_t* ivalue = m_values[argi];
      if(ivalue->type()==itf_value_t::FLOAT_STAR) {
        if(ivalue->get_float_star()) delete [] ivalue->get_float_star();
      } else if(ivalue->type()==itf_value_t::DOUBLE_STAR) {
        if(ivalue->get_double_star()) delete [] ivalue->get_double_star();
      } else if(ivalue->type()==itf_value_t::INT_STAR) {
        if(ivalue->get_int_star()) delete [] ivalue->get_int_star();
      } else if(ivalue->type()==itf_value_t::VOID_STAR) {
      }
      delete ivalue;
    }}
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
protected:
  plugin_func(const plugin_func& a_from):parent(a_from),m_out(a_from.m_out) {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  plugin_func& operator=(const plugin_func&) {return *this;}
protected:
  std::ostream& m_out;
  std::string m_file;
  std::string m_model;
  void* m_address;
  std::vector<unsigned int> m_dims;
  unsigned int m_parn;
  std::vector<itf_value_t*> m_values;
  itf_value_t* m_return;
};

}

#endif




