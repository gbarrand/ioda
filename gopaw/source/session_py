// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_session_py
#define gopaw_session_py

#ifdef APP_USE_PYTHON

#include <exlib/Python>

#include <inlib/S_STRING>
#include <inlib/sout>
//#include <inlib/pointer>

#include "session"

namespace gopaw {

class session_py {
public:
  INLIB_SCLASS(gopaw::session_py)
public:
  session_py(session& a_session,bool a_init = true)
  :m_session(a_session)
  ,m_method_get_session_string_pointer_name("get_session_string_pointer")
  ,m_method_hrndm1_name("hrndm1")
  ,m_method_hfill_name("hfill")
  ,m_methods(0)
  ,m_tag(0)
  ,m_module(0)
  {
    if(a_init) if(!initialize()) {}
  }
  virtual ~session_py(){
    if(!finalize()) {}
  }
protected: //not copyable
  session_py(const session_py& a_from)
  :m_session(a_from.m_session)
  ,m_method_get_session_string_pointer_name(a_from.m_method_get_session_string_pointer_name)
  ,m_method_hrndm1_name(a_from.m_method_hrndm1_name)
  ,m_method_hfill_name(a_from.m_method_hfill_name)
  ,m_methods(0)
  ,m_tag(0)
  ,m_module(0)
  {}
  session_py& operator=(const session_py&){return *this;}
public:
  bool initialize() {
    if(m_module) return true; //done

    m_tag = ::PyCObject_FromVoidPtr(&m_session,NULL); //new ref.
    //m_tag->ob_refcnt is 1

    m_methods = new PyMethodDef[4];
    m_methods[0].ml_name = m_method_get_session_string_pointer_name.c_str();
    m_methods[0].ml_meth = get_session_string_pointer;
    m_methods[0].ml_flags = 0;
    m_methods[0].ml_doc = NULL; 

    m_methods[1].ml_name = m_method_hrndm1_name.c_str();
    m_methods[1].ml_meth = hrndm1;
    m_methods[1].ml_flags = METH_VARARGS;
    m_methods[1].ml_doc = NULL; 

    m_methods[2].ml_name = m_method_hfill_name.c_str();
    m_methods[2].ml_meth = hfill;
    m_methods[2].ml_flags = METH_VARARGS;
    m_methods[2].ml_doc = NULL;

    m_methods[3].ml_name = NULL;
    m_methods[3].ml_meth = NULL;
    m_methods[3].ml_flags = 0;
    m_methods[3].ml_doc = NULL; 

    // See Include/modsupport.h Python/modsupport.c :
    std::string module_name("gopaw");     
    m_module = ::Py_InitModule4((char*)module_name.c_str(),m_methods,(char*)NULL,m_tag,PYTHON_API_VERSION); //borrowed ref.
    if(m_module==NULL) {
      m_session.out() << "gopaw::session_py::initialize :"
                      << " Py_InitModule4 failed for "
                      << inlib::sout(module_name) << "."
                      << std::endl;
      delete [] m_methods;
      m_methods = 0;
      Py_DECREF(m_tag); //Since we are the creator.
      m_tag = 0;
      return false;
    }
    //m_module->ob_refcnt is 1 // the first time. 
                               // But may be more if having done 
                               // a "import <moduleName>"
                               // and passed here again.
    //m_tag->ob_refcnt is 2
    return true;
  }
protected:
  bool finalize(){
    if(!m_module) return true; //done.
    //NOTE : an exit of Python shell may induce that
    //       Python is Finalized at this point.
    if(m_tag) {
      Py_DECREF(m_tag); //Since we are the creator.
      m_tag = 0;
    }
    if(m_module) {
      PyObject* d = ::PyModule_GetDict(m_module); //borrowed ref.
      if(d) {
        ::PyDict_DelItemString(d,m_methods[0].ml_name);
        ::PyDict_DelItemString(d,m_methods[1].ml_name);
        ::PyDict_DelItemString(d,m_methods[2].ml_name);
      }
      m_module = 0;
    }
    delete [] m_methods;
    m_methods = 0;
    return true;
  }
protected:
  static PyObject* get_session_string_pointer(PyObject* a_tag,PyObject* /*a_args*/) { //a_tag is the m_tag object.
    session* _sess = (session*)(void*)::PyCObject_AsVoidPtr(a_tag);
    std::string s;
    if(!inlib::p2sx(_sess,s)) return NULL; //the format must be the same than in the function cast_session(const std::string&).
    return ::PyString_FromString(s.c_str());
  }
  static PyObject* hrndm1(PyObject* a_tag,PyObject* a_args) { //a_tag is the m_tag object.
    session* _sess = (session*)(void*)::PyCObject_AsVoidPtr(a_tag);
    int id;
    if (!::PyArg_ParseTuple(a_args, "i", &id)) {
      _sess->out() << "gopaw::session_py::hrndm1 : PyArg_ParseTuple() failed." << std::endl;
      return NULL;
    }
    //_sess->out() << "debug : gopaw::session_py::hrndm1 : id " << id << std::endl;
    return ::PyFloat_FromDouble(gopaw::hrndm1(_sess->out(),_sess->named_handles(),_sess->random_flat(),id));
  }
  static PyObject* hfill(PyObject* a_tag,PyObject* a_args) { //a_tag is the m_tag object.
    session* _sess = (session*)(void*)::PyCObject_AsVoidPtr(a_tag);
    int id;
    float x,y,w;
    if (!::PyArg_ParseTuple(a_args, "ifff", &id,&x,&y,&w)) {
      _sess->out() << "gopaw::session_py::hfill : PyArg_ParseTuple() failed." << std::endl;
      return NULL;
    }
    //_sess->out() << "debug : gopaw::session_py::hfill : id " << id << ", x " << x << ", y " << y << ", w " << w << std::endl;
    gopaw::hfill(_sess->out(),_sess->named_handles(),id,x,y,w);
    PyObject* none = Py_None;Py_INCREF(none);
    return none;
  }
protected:
  session& m_session;
  std::string m_method_get_session_string_pointer_name;
  std::string m_method_hrndm1_name;
  std::string m_method_hfill_name;
  PyMethodDef* m_methods;
  PyObject* m_tag;
  PyObject* m_module;
};

//#include "../pointer"

//inline viewer* cast_session(const std::string& a_s) {
//  void* p;
//  if(!to_pointer(a_s,p)) return 0; //read with %lx and, if failure, with %lu.
//  return (session*)p;
//}

}

#endif //APP_USE_PYTHON

#endif
