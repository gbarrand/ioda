// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_UI_X11
#define gopaw_UI_X11

#include "UI_screen"

#include <exlib/X11/session>

#include <inlib/net/base_socket>

extern "C" {
  int ku_stop(int);
}

namespace gopaw {

class UI_X11 : public UI_screen {
  typedef UI_screen parent;
public:
  virtual void show() {
    if(m_window) m_x11.show_window(m_window);
  }

  virtual void synchronize() {
    //m_x11.sync(); //it does not dispatch().
    if(!m_x11.display()) return;
    ::glXWaitX();
    ::XSync(m_x11.display(),False);
    while(true) { 
      XEvent xevent;
      if(::XPending(m_x11.display())) {
        ::XNextEvent(m_x11.display(),&xevent);
        dispatch(xevent);
      } else {
        break;
      }
    }
    if(m_to_exit) ::ku_stop(true); //In case we are executing a kuip macro.
  }
  virtual void render_it() {
    if(!m_x11.display()) return;
    if(::glXMakeCurrent(m_x11.display(),m_window,m_x11.context())==False){
      m_out << "glXMakeCurrent failed." << std::endl;
      m_to_exit = true;
      return;
    }
    m_viewer.render();
    ::glXSwapBuffers(m_x11.display(),m_window);
  }
public:
  UI_X11(std::ostream& a_out,unsigned int a_width,unsigned int a_height)
  :parent(a_out,a_width,a_height)
  ,m_x11(a_out)
  ,m_window(0L)
  {   
    if(m_x11.display()) {
      //m_bg_atom = ::XInternAtom(m_x11.display(),"GOPAW_BD",False);
      //if(m_bg_atom==None) {
      //  m_out << "gopaw::UI_X11::UI_X11 : can't create/get GOPAW_BG Atom." << std::endl;
      //  m_x11.finalize();
      //  return;
      //}
      m_window = m_x11.create_window("win 1",0,0,a_width,a_height);
    }
  }
  virtual ~UI_X11() {
    //::k_set_out_func(0,0);
    if(m_window) m_x11.delete_window(m_window);
  }
protected:
  UI_X11(const UI_X11& a_from)
  :parent(a_from)
  ,iui(a_from)
  ,m_x11(a_from.m_x11)
  ,m_window(0L)
  {}
  UI_X11& operator=(const UI_X11& a_from) {return *this;}
public:
  int steer() {
    if(!m_x11.display()) return 0;
    if(m_window==0L) return 0;

    int fd_stdin = fileno(stdin);
    int fd_X11 = ::XConnectionNumber(m_x11.display());
    std::vector<int> socks;
    std::vector<bool> has_input;

    while(!m_to_exit) { 
      socks.clear();
      socks.push_back(fd_X11);
      if(m_term) socks.push_back(fd_stdin);
      if(!inlib::net::wait_input(socks,has_input)) {
        m_out << "UI_X11::steer : inlib::net::wait_input failed." << std::endl;
        m_to_exit = true;
        break;
      }
      if(has_input[0]) { // does the same as if(::XPending(m_x11.display())) 
        XEvent xevent;
        ::XNextEvent(m_x11.display(),&xevent);
        dispatch(xevent);
      } else if(m_term && has_input[1]) {
	m_term->get_line();
      }

    }  

    return 0;
  }
protected:
  void dispatch(XEvent& a_event) {
    //m_out << a_event.type << std::endl;
    //::printf("debug : X event : %d\n",a_event.type);
    if(a_event.type==ClientMessage) {
      Atom atom = ::XInternAtom(m_x11.display(),"WM_DELETE_WINDOW",False);
      if(a_event.xclient.data.l[0]==(long)atom) {
        m_to_exit = true;
      }

    } else if(a_event.type==Expose) {
      int width,height;
      m_x11.window_size(m_window,width,height);
      m_viewer.set_size(width,height);
      render_it();

  //} else if(a_event.type==KeyPress) {
  //   ::printf("debug : X11 : KeyPress\n");
  //} else if(a_event.type==ConfigureNotify) {
  //} else if(a_event.type==ButtonPress && a_event.xbutton.button==1) {
  //  m_to_exit = true;
    }
  }

protected:
  exlib::X11::session m_x11;
  Window m_window;
};

}

#endif
