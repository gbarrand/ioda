// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_hdf5_aida
#define gopaw_hdf5_aida

#ifdef APP_USE_HDF5

#include <inlib/aida_ntuple>
#include <exlib/hdf5/ntuple>

namespace gopaw {

inline bool hdf52aida(std::ostream& a_out,exlib::hdf5::ntuple& a_ntuple,inlib::aida::ntuple*& a_aida) {
  inlib::aida::ntuple* aida_tuple = new inlib::aida::ntuple(a_out,a_ntuple.title());

  typedef exlib::hdf5::ntuple::icol icol_t;
  typedef exlib::hdf5::ntuple::column<float> fcol_t;
  std::vector<fcol_t*> fcols;
  typedef exlib::hdf5::ntuple::column<double> dcol_t;
  std::vector<dcol_t*> dcols;

  typedef inlib::aida::aida_col<double> aida_col_t;

  std::vector<aida_col_t*> aida_cols;
  
  const std::vector<icol_t*>& _columns = a_ntuple.columns();
  inlib_vforcit(icol_t*,_columns,it) {
   {fcol_t* _col = inlib::id_cast<icol_t,fcol_t>(*(*it));
    if(_col) {
      fcols.push_back(_col);
      dcols.push_back(0);
      aida_cols.push_back(aida_tuple->create_col<double>(_col->name()));
      continue;
    }}
   {dcol_t* _col = inlib::id_cast<icol_t,dcol_t>(*(*it));
    if(_col) {
      fcols.push_back(0);
      dcols.push_back(_col);
      aida_cols.push_back(aida_tuple->create_col<double>(_col->name()));
      continue;
    }}

    std::string scid;
    if(!inlib::cid2s((*it)->id_cls(),scid)) {}
    a_out << "hdf52aida : a column " << inlib::sout((*it)->name())
          << " is not of type double or float. id_cls() is " << (*it)->id_cls() << " (" << scid << ")."
          << " Continue." << std::endl;
    //delete aida_tuple;
    //a_aida = 0;
    //return false;
  }

  size_t coln = aida_cols.size();

  float fvalue;
  double dvalue;
  bool status;

  inlib::uint64 entries;
  if(!a_ntuple.entries(entries)) {
    a_out << "hdf52aida : a_ntuple.entries() failed." << std::endl;
    delete aida_tuple;
    a_aida = 0;
    return false;
  }

  for(inlib::uint64 row=0;row<entries;row++) {
    if(!a_ntuple.get_row()) {
      a_out << "hdf52aida : a_ntuple.get_row() failed." << std::endl;
      delete aida_tuple;
      a_aida = 0;
      return false;
    }
    status = true;
    for(size_t coli=0;coli<coln;coli++) {
      if(fcols[coli]) {
        if(!fcols[coli]->get_entry(fvalue)) {
          a_out << "hdf52aida : fcol.get_entry() failed." << std::endl;
          status = false;
          break;
        }
        if(!aida_cols[coli]->fill(fvalue)) {
          a_out << "hdf52aida : aida_col fill failed." << std::endl;
          status = false;
          break;
        }
      } else if(dcols[coli]) {
        if(!dcols[coli]->get_entry(dvalue)) {
          a_out << "hdf52aida : dcol.get_entry() failed." << std::endl;
          status = false;
          break;
        }
        if(!aida_cols[coli]->fill(dvalue)) {
          a_out << "hdf52aida : aida_col fill failed." << std::endl;
          status = false;
          break;
        }
      }
    }
    if(!status || !aida_tuple->add_row()) {
      a_out << "hdf52aida : aida ntuple fill failed." << std::endl;
      delete aida_tuple;
      a_aida = 0;
      return false;
    }
  }

  a_aida = aida_tuple;
  return true;
}

}

#endif //APP_USE_HDF5

#endif //hdf5_aida
