// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_UI_offscreen
#define gopaw_UI_offscreen

#include "base_viewer"

#include <inlib/sg/viewer>

namespace gopaw {

class offscreen_viewer : public base_viewer, public inlib::sg::viewer {
  typedef inlib::sg::viewer parent_viewer;
public:
#ifdef APP_USE_PYTHON
  virtual const inlib::sg::viewer& viewer() const {return *this;}
  virtual inlib::sg::viewer& viewer() {return *this;}
#endif  
  virtual void set_produce_jpeg(bool) {}
  virtual void set_produce_png(bool) {}
  virtual void set_produce_file(const std::string&) {}
  virtual void set_background_color(float a_r,float a_g,float a_b,float a_a = 1) {
    parent_viewer::set_clear_color(a_r,a_g,a_b,a_a);
  }
  virtual void get_background_color(float& a_r,float& a_g,float& a_b,float& a_a) {
    parent_viewer::get_clear_color(a_r,a_g,a_b,a_a);
  }
public:
  virtual void set_size(unsigned int a_w,unsigned int a_h) {
    base_viewer::_set_size(a_w,a_h);
    parent_viewer::set_size(a_w,a_h);
  }
public:
  offscreen_viewer(std::ostream& a_out,unsigned int a_width,unsigned int a_height)
  :base_viewer(a_out,a_width,a_height)
  ,parent_viewer(a_out,a_width,a_height)
  {
    base_viewer::set_viewer_scene_graph(&(parent_viewer::sg()));
  }
  virtual ~offscreen_viewer() {}
public:
  offscreen_viewer(const offscreen_viewer& a_from)
  :iwidget(a_from)
  ,base_viewer(a_from)
  ,parent_viewer(a_from)
  {}
  offscreen_viewer& operator=(const offscreen_viewer& a_from){
    base_viewer::operator=(a_from);
    parent_viewer::operator=(a_from);
    return *this;
  }
};

class UI_offscreen : public virtual iui {
public:
  virtual void show() {}
  virtual std::ostream& out() const {return m_out;}

  virtual bool ask(const std::string& a_prompt,std::string& a_value){
    m_out << "UI_offscreen::ask : dummy." << inlib::sout(a_prompt) << std::endl;
    a_value = "Q";
    return false;
  }
  
  virtual void exit(int = 0) {m_to_exit = true;}
  virtual void synchronize() {}
  virtual int steer() {return 0;}

  virtual iwidget* current_widget() const {
    gopaw::offscreen_viewer* viewer = const_cast<gopaw::offscreen_viewer*>(&m_viewer);
    return static_cast<iwidget*>(viewer);
  }
  virtual iwidget* find_widget(const std::string&) const {
    gopaw::offscreen_viewer* viewer = const_cast<gopaw::offscreen_viewer*>(&m_viewer);
    return static_cast<iwidget*>(viewer);
  }
  
  virtual void render_it() {}
public:
  UI_offscreen(std::ostream& a_out,unsigned int a_width,unsigned int a_height)
  :m_out(a_out)
  ,m_viewer(a_out,a_width,a_height)
  ,m_to_exit(false)
  {   
    inlib::sg::separator* sep = new inlib::sg::separator;
    m_viewer.set_scene_graph(*sep);    
    m_viewer.sg().add(sep); //give sep ownership to the viewer.
  }
  virtual ~UI_offscreen() {
    //::k_set_out_func(0,0);
  }
protected:
  UI_offscreen(const UI_offscreen& a_from)
  :m_out(a_from.m_out)
  ,m_viewer(a_from.m_viewer)
  ,m_to_exit(false)
  {}
  UI_offscreen& operator=(const UI_offscreen& a_from) {
    m_viewer = a_from.m_viewer;
    return *this;
  }
public:  
#ifdef APP_USE_PYTHON
  const offscreen_viewer& viewer() const {return m_viewer;}
  offscreen_viewer& viewer() {return m_viewer;}
#endif  
protected:
  std::ostream& m_out;
  offscreen_viewer m_viewer;
  bool m_to_exit;
};

}

#endif
