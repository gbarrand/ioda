#ifndef wrap_gopaw_help
#define wrap_gopaw_help

//
//  This file had been produced automatically
// by the inlib/wrap program from the file :
//    gopaw.help
//

inline const char** gopaw_help(unsigned int& a_linen){
  static const char _0[] = "WEB";
  static const char _1[] = "  http://softinex.lal.in2p3.fr";
  static const char _2[] = "";
  static const char _3[] = "USAGE";
  static const char _4[] = "      OS> gopaw <options> [<kumac file>]";
  static const char _5[] = "";
  static const char _6[] = "  Various examples can be found in the distribution under :";
  static const char _7[] = "      res/gopaw/examples/PAW_cpp_root";
  static const char _8[] = "    ( res@@back_slash@@gopaw@@back_slash@@examples@@back_slash@@PAW_cpp_root on a Windows)";
  static const char _9[] = "    ";
  static const char _10[] = "  As the kumac files may refer each other and produce various files, the best is to ";
  static const char _11[] = "  run them from a local copy of the PAW_cpp_root directory.";
  static const char _12[] = "  For example on a UNIX :";
  static const char _13[] = "      UNIX> cp -R <install_dir>/res/gopaw/examples/PAW_cpp_root .";
  static const char _14[] = "      UNIX> cd PAW_cpp_root";
  static const char _15[] = "      UNIX> gopaw pawex1.kumac";
  static const char _16[] = "";
  static const char _17[] = "OPTIONS";
  static const char _18[] = " -version : ";
  static const char _19[] = "    gopaw version.";
  static const char _20[] = "";
  static const char _21[] = "FILES ";
  static const char _22[] = "  Under res/gopaw :";
  static const char _23[] = "    examples/PAW_cpp_root : C/C++/ROOT_format versions of the CERN-PAW examples.";
  static const char _24[] = "    examples/PAW_f77_hbook : original CERN-PAW examples using hbook file format and f77 functions.";
  static const char _25[] = "    etc...";
  static const char* _lines[] = {
_0
,_1
,_2
,_3
,_4
,_5
,_6
,_7
,_8
,_9
,_10
,_11
,_12
,_13
,_14
,_15
,_16
,_17
,_18
,_19
,_20
,_21
,_22
,_23
,_24
,_25
};
 a_linen = 26;
 return _lines;
}

#endif
