// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_base_viewer
#define gopaw_base_viewer

#include "iui"

#include <exlib/sg/write_paper>

#include <inlib/sg/ortho>

namespace gopaw {

class base_viewer : public virtual iwidget {
public:
  virtual inlib::sg::plots* plots(bool& a_created) const {a_created = false;return (inlib::sg::plots*)&m_plots;}
  virtual bool size(unsigned int& a_w,unsigned int& a_h) {a_w = m_width;a_h = m_height;return true;}
  virtual bool write(const std::string& a_file,const std::string& a_format,const std::string& /*a_opts*/ = "") {
    if(!m_scene_graph) return false;
    float r,g,b,a;get_background_color(r,g,b,a);
    return exlib::sg::write_paper(m_out,m_gl2ps_mgr,m_zb_mgr,r,g,b,a,
                                  *m_scene_graph,m_width,m_height,a_file,a_format);
  }
public:
  base_viewer(std::ostream& a_out,unsigned int a_width,unsigned int a_height)
  :m_out(a_out)
  ,m_width(a_width)
  ,m_height(a_height)
  ,m_ttf()
  ,m_camera()
  ,m_plots(m_ttf)  
  ,m_scene_graph(0)
  {
  //m_light.direction = inlib::vec3f(1,-1,-10);
  //m_light.on = false;

    inlib::sg::plotter& plotter = m_plots.current_plotter();
    m_camera.height = 20; //YSIZ
    float z = 10*plotter.depth.value(); //large to handle plotter::shape=xyz.
    m_camera.position = inlib::vec3f(0,0,z);
    m_camera.znear = 0.01f*z;
    m_camera.zfar = 100*z;
    m_camera.focal = z;
    _set_size(a_width,a_height); //it sets m_camera.height.
    
  }
  virtual ~base_viewer() {clean_gstos();} //take care of nodes gstos and graphics managers.
public:
protected:
  base_viewer(const base_viewer& a_from)
  :iwidget(a_from)
  ,m_out(a_from.m_out)
  ,m_width(a_from.m_width)
  ,m_height(a_from.m_height)
  ,m_ttf()
  ,m_camera(a_from.m_camera)
  ,m_plots(a_from.m_plots)  
  ,m_scene_graph(0)
  {}
  base_viewer& operator=(const base_viewer& a_from){
    m_width = a_from.m_width;
    m_height = a_from.m_height;
    m_camera = a_from.m_camera;
    return *this;
  }
public:
  void set_viewer_scene_graph(inlib::sg::group* a_viewer_sg) {m_scene_graph = a_viewer_sg;}
  void set_scene_graph(inlib::sg::group& a_group) {
    a_group.add(new inlib::sg::noderef(m_camera));
  //a_group.add(new inlib::sg::noderef(m_light));
    a_group.add(new inlib::sg::noderef(m_plots));
  }
  void clean_gstos() {m_plots.init_sg();} //m_camera,m_light do not have gstos.
protected:
  void _set_size(unsigned int a_w,unsigned int a_h) {
    if(!a_w||!a_h) return;    
    m_width = a_w;
    m_height = a_h;
    float aspect = float(a_w)/float(a_h);
    if(aspect>=1) {
      m_camera.height = 20;
    } else {
      m_camera.height = 20/aspect;
    }
  }
protected:
  std::ostream& m_out;
  unsigned int m_width;
  unsigned int m_height;
  exlib::sg::text_freetype m_ttf;
  inlib::sg::ortho m_camera;
//inlib::sg::head_light m_light;
  inlib::sg::plots m_plots;
  inlib::sg::group* m_scene_graph;
  inlib::sg::zb_manager m_zb_mgr;
  exlib::sg::gl2ps_manager m_gl2ps_mgr;
};

}

#endif
