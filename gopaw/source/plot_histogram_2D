// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_plot_histogram_2D
#define gopaw_plot_histogram_2D

#include "find_object"

#include "funcs" //scripted

#include <inlib/sout>
#include <inlib/sto>

namespace gopaw {

inline void plot_histogram_2D(inlib::sg::plotter& a_plotter,const inlib::histo::h2d& a_hist,
                                    const std::string& aModel,std::ostream& a_out,
                                    int aNLEVEL,size_t a_PALNB,gopaw::session& a_session) {
  int number = a_plotter.number_of_plotted_bins2Ds();
  if(number==0) region_set_automated(a_plotter,a_hist);

  inlib::sg::style& binsStyle = a_plotter.bins_style(number);
  binsStyle.line_pattern = inlib::sg::line_solid;
  //binsStyle.marker_style = CROSS;

  inlib::sg::style& errorsStyle = a_plotter.errors_style(number);
  errorsStyle.visible = false;

  atts_t& atts = a_session.atts();
  opts_t& opts = a_session.opts();
  if( (aModel==s_SURF()) || 
      (aModel==s_SURF_CONT()) ||
      (aModel==s_SURF_LIGHT()) ||
      (aModel==s_SURF_LEVEL()) ||
      (aModel==s_SURF_LEVEL_NO_EDGE()) ||
      (aModel==s_SURF_COL()) ) {

    binsStyle.modeling = inlib::sg::modeling_curve();

    if(aModel==s_SURF()) {
      binsStyle.painting = inlib::sg::painting_uniform;
      binsStyle.color = inlib::colorf_white();
      binsStyle.area_style = inlib::sg::area_edged;
      binsStyle.line_width = 2;
      binsStyle.light_model = inlib::sg::light_model_base_color();

    } else if(aModel==s_SURF_CONT()) {
      binsStyle.painting = inlib::sg::painting_uniform;
      binsStyle.color = inlib::colorf_white();
      binsStyle.area_style = inlib::sg::area_edged;
      binsStyle.line_width = 2;
      binsStyle.light_model = inlib::sg::light_model_base_color();

      double mn = a_hist.min_bin_height();
      double mx = a_hist.max_bin_height();
      a_session.region_set_colormap(binsStyle,mn,mx,a_PALNB);

    } else if(aModel==s_SURF_LIGHT()) {
      binsStyle.painting = inlib::sg::painting_uniform;
      binsStyle.color = inlib::colorf_white();

    } else if(aModel==s_SURF_LEVEL()) {
      binsStyle.painting = inlib::sg::painting_by_level;
      double mn = a_hist.min_bin_height();
      double mx = a_hist.max_bin_height();
      a_session.region_set_colormap(binsStyle,mn,mx,a_PALNB);
      binsStyle.area_style = inlib::sg::area_edged;
      binsStyle.line_width = 2;
      binsStyle.light_model = inlib::sg::light_model_base_color();

    } else if(aModel==s_SURF_LEVEL_NO_EDGE()) {
      binsStyle.painting = inlib::sg::painting_by_level;
      double mn = a_hist.min_bin_height();
      double mx = a_hist.max_bin_height();
      a_session.region_set_colormap(binsStyle,mn,mx,a_PALNB);
      binsStyle.light_model = inlib::sg::light_model_base_color();

    } else if(aModel==s_SURF_COL()) {
      binsStyle.painting = inlib::sg::painting_by_value;
      double mn = a_hist.min_bin_height();
      double mx = a_hist.max_bin_height();
      a_session.region_set_colormap(binsStyle,mn,mx,a_PALNB);
    }

    a_plotter.wall_style().visible = false;
    a_plotter.grid_style().visible = true;

    a_plotter.colormap_attached = false;
    double THETA = a_session.THETA();
    double PHI = a_session.PHI();

    a_plotter.theta = float(THETA);
    a_plotter.phi = float(PHI);
    a_plotter.shape_automated = false;
    a_plotter.shape = inlib::sg::plotter::xyz;

    //std::string legend = f_annotation->value("Legend");
    std::string name;
    //inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(name,a_hist);
    inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(a_hist);
    _plottable->set_name(name);
    a_plotter.add_plottable(_plottable);

  } else if( (aModel==s_LEGO()) || 
             (aModel==s_LEGO_LIGHT()) ||
             (aModel==s_LEGO_LEVEL()) ||
             (aModel==s_LEGO_COL()) ) {

    binsStyle.modeling = inlib::sg::modeling_boxes();

    if(aModel==s_LEGO()) {
      binsStyle.painting = inlib::sg::painting_uniform;
      binsStyle.color = inlib::colorf_white();
      binsStyle.area_style = inlib::sg::area_edged;
      binsStyle.line_width = 2;
      binsStyle.light_model = inlib::sg::light_model_base_color();

    } else if(aModel==s_LEGO_LIGHT()) {
      binsStyle.painting = inlib::sg::painting_uniform;
      binsStyle.color = inlib::colorf_white();
      binsStyle.area_style = inlib::sg::area_edged;
      binsStyle.line_width = 2;
      binsStyle.light_model = inlib::sg::light_model_base_color();

    } else if(aModel==s_LEGO_LEVEL()) {
      binsStyle.painting = inlib::sg::painting_by_level;
      double mn = a_hist.min_bin_height();
      double mx = a_hist.max_bin_height();
      a_session.region_set_colormap(binsStyle,mn,mx,a_PALNB);
      binsStyle.area_style = inlib::sg::area_edged;
      binsStyle.line_width = 2;
      binsStyle.light_model = inlib::sg::light_model_base_color();

    } else if(aModel==s_LEGO_COL()) { //gopaw specific
      binsStyle.painting = inlib::sg::painting_by_value;
      double mn = a_hist.min_bin_height();
      double mx = a_hist.max_bin_height();
      a_session.region_set_colormap(binsStyle,mn,mx,a_PALNB);
    }

    a_plotter.wall_style().visible = false;
    a_plotter.grid_style().visible = true;

    a_plotter.colormap_attached = false;
    double THETA = a_session.THETA();
    double PHI = a_session.PHI();

    a_plotter.theta = float(THETA);
    a_plotter.phi = float(PHI);
    a_plotter.shape_automated = false;
    a_plotter.shape = inlib::sg::plotter::xyz;

    //std::string legend = f_annotation->value("Legend");
    std::string name;
    //inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(name,a_hist);
    inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(a_hist);
    _plottable->set_name(name);
    a_plotter.add_plottable(_plottable);

  } else if(aModel=="TEXT") {

    binsStyle.modeling = inlib::sg::modeling_texts();

    binsStyle.painting = inlib::sg::painting_uniform;
    binsStyle.color = inlib::colorf_black();

    a_plotter.shape_automated = false;
    a_plotter.shape = inlib::sg::plotter::xy;

    //std::string legend = f_annotation->value("Legend");
    std::string name;
    //inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(name,a_hist);
    inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(a_hist);
    _plottable->set_name(name);
    a_plotter.add_plottable(_plottable);

  } else if(aModel=="BOX") {

    binsStyle.modeling = inlib::sg::modeling_wire_boxes();
    binsStyle.painting = inlib::sg::painting_uniform;
    binsStyle.color = inlib::colorf_black();

    a_plotter.shape_automated = false;
    a_plotter.shape = inlib::sg::plotter::xy;

    //std::string legend = f_annotation->value("Legend");
    std::string name;
    //inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(name,a_hist);
    inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(a_hist);
    _plottable->set_name(name);
    a_plotter.add_plottable(_plottable);

  } else if(aModel=="COL") {
    // For :
    //   H/PLOT <h2d> COL
    // From CERN/PAW, the palette is set clearly by 
    //   PALETTE <num>
    // and not by :
    //   SET HCOL 0.<num>

    binsStyle.modeling = inlib::sg::modeling_solid();
    binsStyle.painting = inlib::sg::painting_by_value;

    double mn = a_hist.min_bin_height();
    double mx = a_hist.max_bin_height();
    a_session.region_set_colormap(binsStyle,mn,mx,a_PALNB);

    a_plotter.shape_automated = false;
    a_plotter.shape = inlib::sg::plotter::xy;

    //std::string legend = f_annotation->value("Legend");
    std::string name;
    //inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(name,a_hist);
    inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(a_hist);
    _plottable->set_name(name);
    a_plotter.add_plottable(_plottable);

  } else if( (aModel=="CONT_COL") || 
             (aModel=="CONT_COL_FILLED") ||
             (aModel=="CONT_DMOD") ) {

    std::string codelet;
    if(!a_hist.annotation("opaw.codelet",codelet)) {}

    //::printf("debug : %s : plot : %s\n",aModel.c_str(),codelet.c_str());
    
    if(codelet.empty()) {
      a_out << "plot_histogram_2D :" 
          << " histogram with title " << inlib::sout(a_hist.title())
          << " does not have a function script."
          << " We use content of bins to draw contours."
          << std::endl;

      if(aModel=="CONT_COL_FILLED") {
        binsStyle.modeling = inlib::sg::modeling_filled_curve();
      } else {
        binsStyle.modeling = inlib::sg::modeling_curve();
      }  

      if( (aModel=="CONT_COL") || (aModel=="CONT_COL_FILLED") ){
        if(opts.value("COLL")=="COLL") {
          binsStyle.painting = inlib::sg::painting_by_level;
          a_session.region_set_colormap(binsStyle,0,0,a_PALNB);
        } else {
          binsStyle.painting = inlib::sg::painting_by_value;
          double mn = a_hist.min_bin_height();
          double mx = a_hist.max_bin_height();
          a_session.region_set_colormap(binsStyle,mn,mx,a_PALNB);
        }
      } else if(aModel=="CONT_DMOD") {
        binsStyle.painting = inlib::sg::painting_uniform;
        binsStyle.color = get_COL(a_session.col_from_HCOL());
      }

      binsStyle.line_pattern = get_DMOD((int)atts.value("DMOD")); 

      a_plotter.number_of_levels = aNLEVEL;
      a_plotter.shape_automated = false;
      a_plotter.shape = inlib::sg::plotter::xy;

      //std::string legend = f_annotation->value("Legend");
      std::string name;
      inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(a_hist);
      _plottable->set_name(name);
      a_plotter.add_plottable(_plottable);

    } else { //codelet!=""

      std::string func_name;
      a_session.gen_func_name(func_name);
      std::string paths;
      base_func* func = create_function_vector(a_out,func_name,paths,codelet,a_session,false);
      if(!func) {
        a_out << "plot_histogram_2D : can't get function with codelet " << inlib::sout(codelet) << std::endl;
        return;
      }

      double XLOW,XUP;
     {bool xauto = a_plotter.x_axis_automated.getValue();
      if(xauto) {
        XLOW = a_hist.axis_x().lower_edge();
        XUP  = a_hist.axis_x().upper_edge();
      } else {
        XLOW = a_plotter.x_axis_min.getValue();
        XUP = a_plotter.x_axis_max.getValue();
      }}
  
      double YLOW,YUP;
     {bool yauto = a_plotter.y_axis_automated.getValue();
      if(yauto) {
        YLOW = a_hist.axis_y().lower_edge();
        YUP  = a_hist.axis_y().upper_edge();
      } else {
        YLOW = a_plotter.y_axis_min.getValue();
        YUP = a_plotter.y_axis_max.getValue();
      }}
      
      double ZLOW = a_hist.min_bin_height();
      double ZUP = a_hist.max_bin_height();

      if(func->s_cls()==scripted::s_class()) {
        scripted* _func = (scripted*)func;
        a_session.set_func_domain(*_func,XLOW,XUP,YLOW,YUP);
      //std::string legend = f_annotation->value("Legend");
	inlib::sg::f2d2plot_cp<scripted>* _plottable = new inlib::sg::f2d2plot_cp<scripted>(*_func);
	_plottable->set_name(func_name);
	_plottable->set_title(a_hist.title());
	a_session.plot_function_2D(a_plotter,ZLOW,ZUP,aNLEVEL,a_PALNB,aModel,_plottable);

      } else if(func->s_cls()==compiled::s_class()) {
        compiled* _func = (compiled*)func;
        a_session.set_func_domain(*_func,XLOW,XUP,YLOW,YUP);
      //std::string legend = f_annotation->value("Legend");
        inlib::sg::f2d2plot_cp<compiled>* _plottable = new inlib::sg::f2d2plot_cp<compiled>(*_func);
        _plottable->set_name(func_name);
	_plottable->set_title(a_hist.title());
        a_session.plot_function_2D(a_plotter,ZLOW,ZUP,aNLEVEL,a_PALNB,aModel,_plottable);

      } else {
        a_out << "plot_histogram_2D : class " << inlib::sout(func->s_cls()) << " not handled"
              << " for codelet " << inlib::sout(codelet) << std::endl;
      }

      delete func;

    }

  } else {
    //aModel=="C" pawex11_c/bottom.

    // Default is random points.
    binsStyle.modeling = inlib::sg::modeling_points();
    binsStyle.painting = inlib::sg::painting_uniform;
    binsStyle.color = inlib::colorf_black();
    binsStyle.marker_style = inlib::sg::marker_dot;
    binsStyle.marker_size = 1;

    a_plotter.shape_automated = false;
    a_plotter.shape = inlib::sg::plotter::xy;

    //std::string legend = f_annotation->value("Legend");
    std::string name;
    //inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(name,a_hist);
    inlib::sg::plottable* _plottable = new inlib::sg::h2d2plot_cp(a_hist);
    _plottable->set_name(name);
    a_plotter.add_plottable(_plottable);

  }

}

}

#endif //gopaw_plot_histogram_2D
