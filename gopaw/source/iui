// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_iui
#define gopaw_iui

#include <inlib/sg/plots>

#ifdef APP_USE_PYTHON
namespace inlib {namespace sg {class viewer;}}
#endif

namespace gopaw {

class iwidget {
public:
  virtual ~iwidget() {}
public:
#ifdef APP_USE_PYTHON
  virtual const inlib::sg::viewer& viewer() const = 0;
  virtual inlib::sg::viewer& viewer() = 0;
#endif  
  virtual inlib::sg::plots* plots(bool&) const = 0;
  virtual bool size(unsigned int& a_w,unsigned int& a_h) = 0;
  virtual bool write(const std::string& a_file,const std::string& /*a_format*/,const std::string& /*a_opts*/ = "") = 0;
  
  virtual void set_produce_jpeg(bool) = 0;
  virtual void set_produce_png(bool) = 0;
  virtual void set_produce_file(const std::string&) = 0;
  virtual void set_background_color(float,float,float,float = 1) = 0;
  virtual void get_background_color(float&,float&,float&,float&) = 0;
};

class iui {
public:
  virtual ~iui() {}
public:
  virtual void show() = 0;
  virtual std::ostream& out() const = 0;
  virtual void exit(int = 0) = 0;
  virtual void synchronize() = 0;
  virtual iwidget* current_widget() const = 0;
  virtual iwidget* find_widget(const std::string&) const = 0;
  virtual bool ask(const std::string&,std::string&) = 0;
  virtual void render_it() = 0;
};

/*
inline inlib::sg::plots* find_plots(iui& a_ui,const std::string& a_string) {
  iwidget* widget = a_ui.find_widget(a_string);
  if(!widget) {
    std::ostream& out = a_ui.out();
    out << "find_plots : " << inlib::sout(a_string) << " not found." << std::endl;
    return 0;
  }
  return widget->plots();
}
*/

}

#endif
