// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file gopaw.license for terms.

#ifndef gopaw_UI_Windows
#define gopaw_UI_Windows

#include "UI_screen"

#include <exlib/Windows/session>
#include <exlib/Windows/window>
#include <exlib/Windows/glarea>
#include <exlib/Windows/timer>

extern "C" {
  int ku_stop(int);
}

namespace gopaw {

class UI_Windows : public UI_screen {
  typedef UI_screen parent;
public:
  virtual void show() {
    if(m_window && m_window->hwnd()) m_Windows.show_window(m_window->hwnd());
  }
  virtual void synchronize() {
    m_Windows.sync();
    if(m_to_exit) ::ku_stop(true); //In case we are executing a kuip macro.
  }
  virtual void render_it() {
    if(!m_glarea) return;
    m_glarea->send_WM_PAINT();
    //m_glarea->wm_paint();
  }
public:
  UI_Windows(std::ostream& a_out,unsigned int a_width,unsigned int a_height)
  :parent(a_out,a_width,a_height)
  ,m_Windows(a_out)
  ,m_window(0)
  ,m_glarea(0)
  ,m_timer(*this,20) //millisecs.
  {   
    m_window = new window(*this,a_width,a_height);
    if(!m_window->hwnd()) {
      delete m_window;m_window=0;
      return;
    }

    m_glarea = new glarea(m_window->hwnd(),m_viewer);
    if(!m_glarea->hwnd()) {
      delete m_glarea;m_glarea = 0;
      delete m_window;m_window=0;
      return;
    }
    m_glarea->send_WM_PAINT();
  }
  virtual ~UI_Windows() {
    m_timer.stop();
    delete m_glarea;m_glarea = 0;
    delete m_window;m_window = 0;
  }
protected:
private:  
  UI_Windows(const UI_Windows& a_from)
  :parent(a_from)
  ,iui(a_from)
  ,m_Windows(a_from.m_Windows)
  ,m_window(0)
  ,m_glarea(0)
  ,m_timer(*this,a_from.m_timer.delay())
  {}
  UI_Windows& operator=(const UI_Windows& a_from) {return *this;}
public:  
  void enable_terminal() {
    if(m_term) return; //done.
    if(!::ourex_Gl_is_valid()) {
      m_out << "gopaw::UI_Windows::enable_terminal : ourex_Gl_is_valid() returns false." << std::endl;
      return;
    }
    m_term = new term(*this);
    m_timer.start();
  }
  
  int steer() {
    if(!m_glarea) return 0;
    //m_Windows.steer();
    while(!m_to_exit) {
      MSG event;
      BOOL status = ::GetMessage(&event,NULL,0,0);
      if(status == -1) { // This may happen (dixit Microsoft doc).
        break;
      } else if(status == 0) { //WM_QUIT
        break;
      } else {
        ::TranslateMessage(&event);
        ::DispatchMessage (&event);
      }
    }
    return 0;
  }
protected:
  class window : public exlib::Windows::window {
    typedef exlib::Windows::window parent;
  public:
    virtual void close(){
      m_ui.exit();
      //if(m_window) ::PostMessage(m_window,WM_QUIT,0,0);
      ::PostQuitMessage(0);
    }
  public:
    window(UI_Windows& a_ui,unsigned int a_w,unsigned int a_h):parent(a_w,a_h),m_ui(a_ui){}
    virtual ~window(){}
  protected:
    window(const window& a_from):parent(a_from),m_ui(a_from.m_ui){}
    window& operator=(const window& a_from){return *this;}
  protected:
    UI_Windows& m_ui;
  };
  
  class glarea : public exlib::Windows::glarea {
    typedef exlib::Windows::glarea parent;
  public:
    virtual void paint(unsigned int a_w,unsigned int a_h) {
      m_viewer.set_size(a_w,a_h);
      m_viewer.render();
    }
  public:
    glarea(HWND a_parent,GL_viewer& a_viewer):parent(a_parent),m_viewer(a_viewer){}
    virtual ~glarea(){}
  protected:
    glarea(const glarea& a_from):parent(a_from),m_viewer(a_from.m_viewer){}
    glarea& operator=(const glarea& a_from){return *this;}
  protected:
    GL_viewer& m_viewer;
  };

  class timer : public exlib::Windows::timer {
    typedef exlib::Windows::timer parent;
  public:
    virtual void execute() {
      if(!m_ui.m_term) return;
      int is_stdin;
      if(!::ourex_Gl_is_there_stdin_input(&is_stdin)) {
        m_ui.out() << "gopaw::UI_Windows::timer::execute : ourex_Gl_is_there_stdin_input() failed." << std::endl;
        return;
      }
      if(!is_stdin) return;
      m_ui.m_term->get_line();
    }
  public:
    timer(UI_Windows& a_ui,UINT a_delay):parent(a_delay),m_ui(a_ui){}
    virtual ~timer(){}
  protected:
    timer(const timer& a_from):parent(a_from),m_ui(a_from.m_ui){}
    timer& operator=(const timer& a_from){return *this;}
  protected:
    UI_Windows& m_ui;
  };

protected:
  exlib::Windows::session m_Windows;
  exlib::Windows::window* m_window;
  glarea* m_glarea;
  timer m_timer;
};

}

#endif
