//////////////////////////////////////////////////////////////////////////////
static std::string remove_versions(
 const std::string& aString
) 
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::vector<std::string> words = Lib::smanip::words(aString," ");
  unsigned int wordn = words.size();
  std::string snew;
  for(unsigned int index=0;index<wordn;index++) {
    const std::string& word = words[index];
    if(word.find("@@top@@")!=std::string::npos) {
      std::string s = Lib::smanip::removeVersions(word);
      if(snew.size()) snew += " ";
      snew += s;
    } else {
      if(snew.size()) snew += " ";
      snew += word;
    }
  }
  return snew;
}
//////////////////////////////////////////////////////////////////////////////
static bool find_cxx(
 const std::string& aArg0
,const std::string& aFile
) 
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::string dir_root;
  if(!Lib::dirmanip::binaryPath(aArg0,dir_root)) {
    ::fprintf(stderr,"Can't get binary path of %s\n",aArg0.c_str());
    return false;
  }
  std::string bname = Lib::smanip::basename(dir_root);
  bool is_release_area = ((bname=="bin")||(bname=="MacOS"));
     
#ifdef _WIN32
  std::string sep = "\\";
#else
  std::string sep = "/";
#endif
  std::string file = dir_root+sep+aFile;

  std::string value;
  if(!Lib::fmanip::findResource(file,"obuild_cxx_command",value)) 
    return false;

  ::printf("%s\n",value.c_str());
  return true;
}
//////////////////////////////////////////////////////////////////////////////
static bool find_incs(
 const std::string& aArg0
,const std::string& aFile
) 
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::string dir_root;
  if(!Lib::dirmanip::binaryPath(aArg0,dir_root)) {
    ::fprintf(stderr,"Can't get binary path of %s\n",aArg0.c_str());
    return false;
  }
  std::string bname = Lib::smanip::basename(dir_root);
  bool is_release_area = ((bname=="bin")||(bname=="MacOS"));

#ifdef _WIN32
  std::string sep = "\\";
#else
  std::string sep = "/";
#endif
  std::string file = dir_root+sep+aFile;

  std::string incs;
 {if(!Lib::fmanip::findResource(file,"obuild_cxx_includes",incs)) 
    return false;
  std::string HOME_DIR = 
    Lib::smanip::dirname(dir_root,is_release_area?1:3);
  if(is_release_area) {
    incs = remove_versions(incs);
    Lib::smanip::replace(incs,"@@top@@",HOME_DIR+sep+"Resources");
  } else {
    Lib::smanip::replace(incs,"@@top@@",HOME_DIR);
  }
  if(HOME_DIR.find(" ")==std::string::npos) {
    Lib::smanip::replace(incs,"\"","");
  }}

  ::printf("%s\n",incs.c_str());
  return true;
}
//////////////////////////////////////////////////////////////////////////////
static bool find_flags(
 const std::string& aArg0
,const std::string& aFile
) 
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::string dir_root;
  if(!Lib::dirmanip::binaryPath(aArg0,dir_root)) {
    ::fprintf(stderr,"Can't get binary path of %s\n",aArg0.c_str());
    return false;
  }
  std::string bname = Lib::smanip::basename(dir_root);
  bool is_release_area = ((bname=="bin")||(bname=="MacOS"));

#ifdef _WIN32
  std::string sep = "\\";
#else
  std::string sep = "/";
#endif
  std::string file = dir_root+sep+aFile;

  std::string opts;
  if(!Lib::fmanip::findResource(file,"obuild_cxx_options",opts)) 
    return false;

  std::string macs;
  if(!Lib::fmanip::findResource(file,"obuild_cxx_macros",macs)) 
    return false;

  std::string incs;
 {if(!Lib::fmanip::findResource(file,"obuild_cxx_includes",incs)) 
    return false;
  std::string HOME_DIR = 
    Lib::smanip::dirname(dir_root,is_release_area?1:3);
  if(is_release_area) {
    incs = remove_versions(incs);
    Lib::smanip::replace(incs,"@@top@@",HOME_DIR+sep+"Resources");
  } else {
    Lib::smanip::replace(incs,"@@top@@",HOME_DIR);
  }
  if(HOME_DIR.find(" ")==std::string::npos) {
    Lib::smanip::replace(incs,"\"","");
  }}

  std::string value = opts+" "+macs+" "+incs;

  ::printf("%s\n",value.c_str());
  return true;
}
//////////////////////////////////////////////////////////////////////////////
static bool find_libs(
 const std::string& aArg0
,const std::string& aFile
) 
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::string dir_root;
  if(!Lib::dirmanip::binaryPath(aArg0,dir_root)) {
    ::fprintf(stderr,"Can't get binary path of %s\n",aArg0.c_str());
    return false;
  }
  std::string bname = Lib::smanip::basename(dir_root);
  bool is_release_area = ((bname=="bin")||(bname=="MacOS"));

#ifdef _WIN32
  std::string sep = "\\";
#else
  std::string sep = "/";
#endif
  std::string file = dir_root+sep+aFile;

  std::string HOME_DIR = 
    Lib::smanip::dirname(dir_root,is_release_area?1:3);

  std::string spaths;
 {if(is_release_area) {
#ifdef _WIN32
   spaths = "/LIBPATH:\""+HOME_DIR+"\\lib\"";
#else
   spaths = "-L\""+HOME_DIR+"/lib\"";
#endif
  } else {
    if(!Lib::fmanip::findResource(file,"obuild_linked_paths",spaths)) 
      return false;
    Lib::smanip::replace(spaths,"@@top@@",HOME_DIR);
  }}

  std::string slibs;
 {if(!Lib::fmanip::findResource(file,"obuild_linked_libraries",slibs)) 
    return false;
  if(is_release_area) {
  } else {
    Lib::smanip::replace(slibs,"@@top@@",HOME_DIR);
  }}

  if(HOME_DIR.find(" ")==std::string::npos) {
    Lib::smanip::replace(spaths,"\"","");
  }

  std::string value = spaths+" "+slibs;

  ::printf("%s\n",value.c_str());
  return true;
}
//////////////////////////////////////////////////////////////////////////////
static bool find_incdir(
 const std::string& aArg0
,const std::string& aFile
) 
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::string dir_root;
  if(!Lib::dirmanip::binaryPath(aArg0,dir_root)) {
    ::fprintf(stderr,"Can't get binary path of %s\n",aArg0.c_str());
    return false;
  }
  std::string bname = Lib::smanip::basename(dir_root);
  bool is_release_area = ((bname=="bin")||(bname=="MacOS"));

#ifdef _WIN32
  std::string sep = "\\";
#else
  std::string sep = "/";
#endif
  std::string file = dir_root+sep+aFile;

  std::string package;
  if(!Lib::fmanip::findResource(file,"obuild_package",package)) 
    return false;

  std::string version;
  if(!Lib::fmanip::findResource(file,"obuild_version",version)) 
    return false;

  std::string HOME_DIR = 
    Lib::smanip::dirname(dir_root,is_release_area?1:3);

  std::string value;
  if(is_release_area) {
    value = HOME_DIR+sep+"Resources"+sep+package+sep+"include";
  } else {
    value = HOME_DIR+sep+package+sep+version+sep+"include";
  }

  ::printf("%s\n",value.c_str());
  return true;
}
