//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
bool Lib::System::kind(
 std::string& aKind
)
//////////////////////////////////////////////////////////////////////////////
//  System kind could compelled by the
// env variable LIBSYSKIND.
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  if(getenv("LIBSYSKIND",aKind)) {
    return true;
  } else {
#if defined(_WIN32)
    aKind = "Windows";
    return true;
#elif defined(VMS)
    aKind = "VMS";
    return true;
#else
    aKind = "UNIX";
    return true;
#endif
  }
}
//////////////////////////////////////////////////////////////////////////////
bool Lib::System::isKindOf(
 const std::string& aString   
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::string s;
  if(!kind(s)) return false;
  return (s==aString);
}
//////////////////////////////////////////////////////////////////////////////
bool Lib::System::getenv(
 const std::string& aString
,std::string& aValue
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  const char* env = ::getenv(aString.c_str());
  if(env) {
    aValue = std::string(env?env:"");
    return true;
  } else {
    aValue = "";
    return false;
  }
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
std::vector<std::string> Lib::smanip::words(
 const std::string& aString
,const std::string& aLimiter 
,bool aTakeEmpty //=false
)
//////////////////////////////////////////////////////////////////////////////
//  If aLimiter is for exa "|" and for "xxx||xxx" :
//  - aTakeEmpty false : {"xxx","xxx"} will be created 
//    (and NOT {"xxx","","xxx"}).
//  - aTakeEmpty true : {"xxx","","xxx"} will be created.
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::vector<std::string> words;
  if(aString.empty()) return words;
  std::string::size_type lim = (aTakeEmpty?0:1);
  if(aLimiter.empty()) {
    words.push_back(aString);
  } else {
    std::string::size_type l = aString.length();
    std::string::size_type llimiter = aLimiter.length();
    std::string::size_type pos = 0;
    while(1) {
      std::string::size_type index = aString.find(aLimiter,pos);
      if(index==std::string::npos){ // Last word.
        if((l-pos)>=lim) words.push_back(aString.substr(pos,l-pos));
        break;
      } else {
        //     abcxxxef
        //     0  3  67
        if((index-pos)>=lim) words.push_back(aString.substr(pos,index-pos));
        pos = index + llimiter;
      }
    }
  }
  return words;
}
//////////////////////////////////////////////////////////////////////////////
bool Lib::smanip::pathNameSuffix(
 const std::string& aString
,std::string& aPath
,std::string& aName
,std::string& aSuffix
)
//////////////////////////////////////////////////////////////////////////////
// If aString = dir0/dir1/dir2/dir3/name.xxx
//   aPath = dir0/dir1/dir2/dir3
//   aName = name.xxx
//   aSuffix = xxx
// If aString = dir0/name.xxx
//   aPath = dir0
//   aName = name.xxx
//   aSuffix = xxx
// If aString = name.xxx
//   aPath = ""
//   aName = name.xxx
//   aSuffix = xxx
// If aString = /name.xxx
//   aPath = "/"
//   aName = name.xxx
//   aSuffix = xxx
// If aString = .
//   aPath = "."
//   aName = ""
//   aSuffix = ""
// If aString = ..
//   aPath = ".."
//   aName = ""
//   aSuffix = ""
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  if(aString==".") {
    aPath = ".";
    aName = "";
    aSuffix = "";
    return true;
  } else if(aString=="..") {
    aPath = "..";
    aName = "";
    aSuffix = "";
    return true;
  }

  std::string::size_type pos_slash = aString.rfind('/');
  std::string::size_type pos_bslash = aString.rfind('\\');
  std::string::size_type pos = 0;
  if(pos_slash==std::string::npos) {
    if(pos_bslash==std::string::npos) {
      pos = std::string::npos;
    } else {
      pos = pos_bslash;
    }
  } else {
    if(pos_bslash==std::string::npos) {
      pos = pos_slash;
    } else {
      if(pos_slash<=pos_bslash) {
        pos = pos_bslash;
      } else {
        pos = pos_slash;
      }
    }
  }

  if(pos==std::string::npos) {
    aPath = "";
    pos = 0;
  } else if(pos==0) {
    aPath = "/";
    pos++;
  } else {
    aPath = aString.substr(0,pos);
    pos++;
  }
  std::string s = aString.substr(pos,aString.size()-pos);
  pos = s.rfind('.');
  if(pos==std::string::npos) {
    aName = s;
    aSuffix = "";
  } else {
    aName = s;
    pos++;
    aSuffix = s.substr(pos,s.size()-pos);
  }
  return true;
}
//////////////////////////////////////////////////////////////////////////////
bool Lib::smanip::isAbsolutePath(
 const std::string& aPath
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  if(aPath.find('\\')!=std::string::npos) { //Windows path.
    if(aPath.find(':')!=std::string::npos) return true;
    return (aPath.size()&&(aPath[0]=='\\')?true:false);
  } else { //UNIX path
    return (aPath.size()&&(aPath[0]=='/')?true:false);
  }
}
//////////////////////////////////////////////////////////////////////////////
std::string Lib::smanip::removeVersions(
 const std::string& aString
)
//////////////////////////////////////////////////////////////////////////////
// Used in the xxx-config programs.
// replace "@@top@@/pack/vers" -> "@@top@@/pack".
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
#ifdef _WIN32
  std::string sep = "\\";
#else
  std::string sep = "/";
#endif
  std::string sold = aString;
  Lib::smanip::replace(sold,"\"",sep+"@quote@"); //To treat AIDA/v3r2p1"/src
  std::vector<std::string> words = Lib::smanip::words(sold,sep);
  unsigned int wordn = words.size();
  std::string snew;
  for(unsigned int index=0;index<wordn;index++) {
    std::vector<unsigned int> vers;
    std::string word = words[index];
    if(!Lib::smanip::version(word,vers)) {
      if(snew.size()) snew += sep;
      snew += words[index];
    }
  }
  Lib::smanip::replace(snew,sep+"@quote@","\"");
  return snew;
}
//////////////////////////////////////////////////////////////////////////////
std::string Lib::smanip::dirname(
 const std::string& aPath
,unsigned int aNumber
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::string path = aPath;
  for(unsigned int index=0;index<aNumber;index++) {
    std::string p,n,s;
    Lib::smanip::pathNameSuffix(path,p,n,s);
    path = p;
  }
  return path;
}
//////////////////////////////////////////////////////////////////////////////
std::string Lib::smanip::basename(
 const std::string& aPath
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::string path,name,suffix;
  Lib::smanip::pathNameSuffix(aPath,path,name,suffix);
  return name;
}
//////////////////////////////////////////////////////////////////////////////
bool Lib::smanip::version(
 const std::string& aString
,std::vector<unsigned int>& aVersion
)
//////////////////////////////////////////////////////////////////////////////
// aString is of the form [v,V][<number><char>]<number>
// Examples : 0 1.2 v0 v1r2 V1r2p3 v0.1.3
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  unsigned int number = aString.size();
  if(!number) {
    aVersion.clear();
    return false;
  }
  char* pos = (char*)aString.c_str();
  if( ((*pos)=='v') || ((*pos)=='V') ) {
    if(number==1) {
      aVersion.clear();
      return false; //aString is only 'v' or 'V' !
    }
    pos++;
  }
  while(*pos!='\0') {
    char* s;
    long v = ::strtol(pos,&s,10);
    if(s==pos) {
      aVersion.clear();
      return false;
    }
    if(v<0) {
      aVersion.clear();
      return false;
    }
    aVersion.push_back((unsigned int)v);
    pos = s; //Could be at end.
    if(*pos=='\0') break;
    // Next char is then not a digit. Skip it.
    pos++;
  }
  return true;
}
//////////////////////////////////////////////////////////////////////////////
bool Lib::smanip::replace(
 std::string& aString
,const std::string& aOld     
,const std::string& aNew     
)
//////////////////////////////////////////////////////////////////////////////
// return true : some replacement done.
// return false : nothing replaced.
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  if(aOld.empty()) return false;
  std::string snew;
  std::string::size_type lold = aOld.length();
  bool status = false;
  std::string stmp = aString;
  while(true) {
    std::string::size_type pos = stmp.find(aOld);
    if(pos==std::string::npos){
      snew += stmp;
      break;
    } else {
      snew += stmp.substr(0,pos);
      snew += aNew;
      stmp = stmp.substr(pos+lold,stmp.length()-(pos+lold));
      status = true;
    }
  }
  aString = snew;
  return status;
}

#define MINIMUM(a,b) ((a)<(b)?a:b)

//////////////////////////////////////////////////////////////////////////////
bool Lib::smanip::getenv(
 std::string& aString
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::string::size_type dollar;
  while((dollar=aString.find('$'))!=std::string::npos){
    std::string::size_type slash = aString.find('/',dollar+1);
    std::string::size_type back_slash = aString.find('\\',dollar+1);
    std::string::size_type pos = std::string::npos; 
    if(slash!=std::string::npos) {
      if(back_slash!=std::string::npos) {
        pos = MINIMUM(slash,back_slash);
      } else {
        pos = slash;
      }
    } else {
      if(back_slash!=std::string::npos) {
        pos = back_slash;
      } else {
        pos = std::string::npos; 
      }
    }
    std::string env;
    if(pos==std::string::npos) {
      env = aString.substr(dollar+1,aString.length()-(dollar+1));
    } else {
      //     abc$xxx/ef
      //     0  3   7 9
      env = aString.substr(dollar+1,pos-(dollar+1));
    }
    char* val = ::getenv(env.c_str());
    if(!val) return false; // Stop looping if env variable not found.
    std::string value = aString.substr(0,dollar);
    value += val;
    if(pos!=std::string::npos)
      value += aString.substr(pos,aString.length()-pos);
    aString = value;
  }
  return true;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
std::string Lib::fmanip::name(
 const std::string& aString
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::string fname = aString;
  // Check for env variable in name :
  smanip::getenv(fname);
  if(System::isKindOf("Windows")) {
    smanip::replace(fname,"/","\\");
    smanip::replace(fname,"\"","");
  } else if(System::isKindOf("VMS")) {
    smanip::replace(fname,"/",":");
  }
  return fname;
}
#include <string.h> //strlen
#define BUFSIZE 65536
//////////////////////////////////////////////////////////////////////////////
bool Lib::fmanip::read(
 const std::string& aName
,std::vector<std::string>& aText
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  aText.clear();
  //FIXME : should read without a limited buffer.
  std::string name = fmanip::name(aName);
  FILE* file = ::fopen(name.c_str(),"rb");
  if(!file) return false;
  char buffer[BUFSIZE+1];
  while(1) {
    if(::fgets(buffer,BUFSIZE,(FILE*)file)==NULL) break; // EOF.
    int l = ::strlen(buffer);
    //  On Windows, editors when saving binary files,
    // put \r\n at place of \n ; we then look for \r\n.
    if( (l>=2) && (buffer[l-2]=='\r') && (buffer[l-1]=='\n') ) {
      buffer[l-2] = '\0';
    } else if( (l>=1) && (buffer[l-1]=='\n') ) {
      buffer[l-1] = '\0';
    }
    aText.push_back(buffer);
  }
  ::fclose(file);
  return true;
}
//////////////////////////////////////////////////////////////////////////////
bool Lib::fmanip::findResource(
 const std::string& aFile
,const std::string& aWhat
,std::string& aValue
) 
//////////////////////////////////////////////////////////////////////////////
// Used by the xxx-config programs.
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  std::vector<std::string> txt;
  if(!Lib::fmanip::read(aFile,txt)) {
    ::fprintf(stderr,"Can't read the file :\n");
    ::fprintf(stderr,"%s\n",aFile.c_str());
    ::fprintf(stderr,
              "containing the platform dependant incs and libs infos.\n");
    aValue = "";
    return false;
  }
  if(!txt.size()) {
    ::fprintf(stderr,"The file :\n");
    ::fprintf(stderr,"%s\n",aFile.c_str());
    ::fprintf(stderr,"is empty. We expect to find in it\n");
    ::fprintf(stderr,"the platform dependant incs and libs infos.\n");
    aValue = "";
    return false;
  }
 {unsigned int number = txt.size();
  for(unsigned int index=0;index<number;index++){
    const std::string& line = txt[index];
    std::string::size_type pos = line.find('=');
    if(pos==std::string::npos) {
      ::fprintf(stderr,"Syntax error in file :\n");
      ::fprintf(stderr,"%s\n",aFile.c_str());
      ::fprintf(stderr,"for line :\n");
      ::fprintf(stderr,"%s\n",line.c_str());
      ::fprintf(stderr,"We expect line with : <key>=<value>\n");
      aValue.clear();
      return false;
    }
    if(aWhat==line.substr(0,pos)) {
      aValue = line.substr(pos+1,line.size()-(pos+1));
      return true;
    }
  }}
  ::fprintf(stderr,"The file :\n");
  ::fprintf(stderr,"%s\n",aFile.c_str());
  ::fprintf(stderr,"does not contain the %s infos.\n",aWhat.c_str());
  aValue = "";
  return false;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
static bool Lib_System_getenv(
 const std::string& aString
,std::string& aValue
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  const char* env = ::getenv(aString.c_str());
  if(env) {
    aValue = std::string(env?env:"");
    return true;
  } else {
    aValue = "";
    return false;
  }
}
//////////////////////////////////////////////////////////////////////////////
static bool Lib_fmanip_exists(
 const std::string& aString
)
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  FILE* file = ::fopen(aString.c_str(),"rb");
  if(!file) return false;
  ::fclose(file);
  return true;
}
//////////////////////////////////////////////////////////////////////////////
bool Lib::dirmanip::binaryPath(
 const std::string& aArg0
,std::string& aPath
) 
//////////////////////////////////////////////////////////////////////////////
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  if(aArg0.empty()) {
    aPath = "";
    return false;
  }
#ifdef _WIN32
  std::string sep = "\\";
  std::string psep = ";";
#else
  std::string sep = "/";
  std::string psep = ":";
#endif
  std::string path,name,suffix;
  Lib::smanip::pathNameSuffix(aArg0,path,name,suffix);
  if(path.empty()) {
    std::string PATH;
    if(Lib_System_getenv("PATH",PATH)) {
      std::string program = aArg0;
#if defined(_WIN32) || (defined(__CYGWIN__) && defined(__GNUC__))
      if(program.find(".exe")==std::string::npos) program += ".exe";
#endif
      std::vector<std::string> paths = Lib::smanip::words(PATH,psep);
      unsigned int pathn = paths.size();
      for(unsigned int pathi=0;pathi<pathn;pathi++) {
        std::string dir = paths[pathi];
        if(Lib_fmanip_exists(dir+sep+program)) {
          path = dir;
          break;
        }
      }
    }
  }
  if(path.empty()) {
    aPath = "";
    return false;
  }
  if(!Lib::smanip::isAbsolutePath(path)) {
    std::string pwd;
    if(!Lib::dirmanip::directory(pwd)) {
      aPath = "";
      return false;
    }
    path = pwd+sep+path;
  }
  //printf("debug : path : %s\n",path.c_str());
  aPath = path;
  return true;
}
#ifdef _WIN32
#include <windows.h>
#include <direct.h>
#else //UNIX
#include <unistd.h>
#endif
//////////////////////////////////////////////////////////////////////////////
bool Lib::dirmanip::directory(
 std::string& aValue
)
//////////////////////////////////////////////////////////////////////////////
// Return current directory.
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
{
  aValue = "";
#define LIB_MAXPATHLEN 1024
  char cwd[LIB_MAXPATHLEN];
#ifdef _WIN32
  //  driveletter = 0 means return the working directory for the default drive.
  if(::_getdcwd(0,cwd,LIB_MAXPATHLEN)==NULL) return false;
#else
  if(::getcwd(cwd,LIB_MAXPATHLEN)==NULL) return false;
#endif
  aValue = cwd;
  return true;
}
