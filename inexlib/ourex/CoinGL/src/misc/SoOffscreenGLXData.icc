/**************************************************************************\
 *
 *  This file is part of the Coin 3D visualization library.
 *  Copyright (C) 1998-2002 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  ("GPL") version 2 as published by the Free Software Foundation.
 *  See the file LICENSE.GPL at the root directory of this source
 *  distribution for additional information about the GNU GPL.
 *
 *  For using Coin with software that can not be combined with the GNU
 *  GPL, and for taking advantage of the additional benefits of our
 *  support services, please contact Systems in Motion about acquiring
 *  a Coin Professional Edition License.
 *
 *  See <URL:http://www.coin3d.org> for  more information.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY.
 *  <URL:http://www.sim.no>.
 *
\**************************************************************************/

//
// This file can only be included from inside SoOffscreenRenderer
//

#include <GL/glx.h>
#include <Inventor/errors/SoDebugError.h>

// Flip this flag to get lots of debugging info on what happens with
// GLX context construction, activation, deactivation and destruction.
#define DEBUG_GLXCONTEXT_HANDLING 0

// FIXME: on SGI boxes with p-buffer support, that should be used
// instead of a standard offscreen GLX context, as it would render
// much faster (due to hardware acceleration). 20020503 mortene.

class SoOffscreenGLXData : public SoOffscreenInternalData {
public:
  SoOffscreenGLXData(void);
  virtual ~SoOffscreenGLXData();
  static int buildGLAttrs(int * attrs, int trynum);
  virtual void setBufferSize(const SbVec2s & size);
  virtual SbBool makeContextCurrent(uint32_t contextid);
  virtual unsigned char * getBuffer(void);
  static SbVec2f getResolution(void);

  virtual void postRender(void);
  static SbVec2s getMaxDimensions(void);
private:
  virtual SbVec2s getMax(void);
  static Display * getDisplay(void);

  unsigned char * buffer;
  static Display * display;
  XVisualInfo * visinfo;
  GLXContext context;
  Pixmap pixmap;
  GLXPixmap glxpixmap;

  Display * storeddisplay;
  GLXDrawable storeddrawable;
  GLXContext storedcontext;
};

Display * SoOffscreenGLXData::display = NULL;

Display *
SoOffscreenGLXData::getDisplay(void)
{
  static SbBool first = TRUE;
  if (first) {
    first = FALSE;

    // Keep a single static display-ptr.
    // 
    // This resource is never deallocated explicitly (but of course
    // implicitly by the system on application close-down). This to
    // work around some strange problems with the NVidia-driver 29.60
    // on XFree86 v4 when using XCloseDisplay() -- like doublebuffered
    // visuals not working correctly.
    //
    // Also, XCloseDisplay() has been known to cause crashes when
    // running remotely from some old Mesa version on Red Hat Linux
    // 6.2 onto an IRIX6.5 display. It seems likely that this was
    // caused by a bug in that particular old Mesa version.
    //
    // mortene@sim.no

    SoOffscreenGLXData::display = XOpenDisplay(NULL);

    if (!SoOffscreenGLXData::display) {
      SoDebugError::post("SoOffscreenGLXData::SoOffscreenGLXData",
                         "Couldn't connect to X11 DISPLAY.");
      // FIXME: will probably cause a crash later? If so, should be
      // more robust. 20020802 mortene.
      return NULL;
    }
  }

  return SoOffscreenGLXData::display;
}

SoOffscreenGLXData::SoOffscreenGLXData(void)
  // set everything to NULL first to gracefully handle error conditions
  : visinfo(NULL), context(NULL), pixmap(0), glxpixmap(0),
    storedcontext(NULL)
{
  this->buffer = NULL;

  int trynum = 0;
  const int ARRAYSIZE = 32;
  int attrs[ARRAYSIZE];
  while (this->visinfo == NULL && trynum < 8) {
    int arraysize = SoOffscreenGLXData::buildGLAttrs(attrs, trynum);
    assert(arraysize < ARRAYSIZE);
    this->visinfo = glXChooseVisual(SoOffscreenGLXData::getDisplay(),
                                    DefaultScreen(SoOffscreenGLXData::getDisplay()),
                                    attrs);
    trynum++;
  }

  if (!this->visinfo) {
    SoDebugError::postWarning("SoOffscreenGLXData::SoOffscreenGLXData",
                              "Couldn't get RGBA X11 visual.");
    return;
  }

  this->context = glXCreateContext(SoOffscreenGLXData::getDisplay(),
                                   this->visinfo,
                                   0, GL_FALSE);
  if (!this->context) {
    SoDebugError::postWarning("SoOffscreenGLXData::SoOffscreenGLXData",
                              "Couldn't create GLX context.");
  }

#if DEBUG_GLXCONTEXT_HANDLING // debug
  SoDebugError::postInfo("SoOffscreenGLXData::SoOffscreenGLXData",
                         "made new offscreen context == %p", this->context);
#endif // debug
}

SoOffscreenGLXData::~SoOffscreenGLXData()
{
#if DEBUG_GLXCONTEXT_HANDLING // debug
  SoDebugError::postInfo("SoOffscreenGLXData::~SoOffscreenGLXData",
                         "destroy context %p", this->context);
#endif // debug

  if (this->context) glXDestroyContext(SoOffscreenGLXData::getDisplay(), this->context);
  if (this->glxpixmap) glXDestroyGLXPixmap(SoOffscreenGLXData::getDisplay(), this->glxpixmap);
  if (this->pixmap) XFreePixmap(SoOffscreenGLXData::getDisplay(), this->pixmap);
  if (this->visinfo) XFree(this->visinfo);

  delete[] this->buffer;
}

// Pixels-pr-mm.
SbVec2f
SoOffscreenGLXData::getResolution(void)
{
  Display * d = SoOffscreenGLXData::getDisplay();
  if (!d) {
    return SbVec2f(72.0f / 25.4f, 72.0f / 25.4f); // fall back to 72dpi
  }

  int s = DefaultScreen(d);
  SbVec2f r(((float)DisplayWidth(d, s)) /  ((float)DisplayWidthMM(d, s)),
            ((float)DisplayHeight(d, s)) / ((float)DisplayHeightMM(d, s)));

  return r;
}

// NOTE: the strategy applied here for iterating through OpenGL
// canvas settings is exactly the same as the one applied in
// SoXt/src/Inventor/Xt/SoXtGLWidget.cpp. So if you make any fixes
// or other improvements here, migrate your changes.
int
SoOffscreenGLXData::buildGLAttrs(int * attrs, int trynum)
{
  int pos = 0;
  attrs[pos++] = GLX_RGBA;
  attrs[pos++] = GLX_DEPTH_SIZE;
  attrs[pos++] = 1;
  if (! (trynum & 0x04)) {
    attrs[pos++] = GLX_STENCIL_SIZE;
    attrs[pos++] = 1;
  }
  if (! (trynum & 0x02)) {
    attrs[pos++] = GLX_DOUBLEBUFFER;
  }
  if (! (trynum & 0x01)) {
    attrs[pos++] = GLX_RED_SIZE;
    attrs[pos++] = 4;
    attrs[pos++] = GLX_GREEN_SIZE;
    attrs[pos++] = 4;
    attrs[pos++] = GLX_BLUE_SIZE;
    attrs[pos++] = 4;
    // FIXME: won't get an alpha channel in the context unless we also
    // request a particular ALPHA bitsize. 20020605 mortene.
  }
  attrs[pos++] = None;
  return pos;
}

void
SoOffscreenGLXData::setBufferSize(const SbVec2s & size)
{
  // Avoid costly operations below if not really necessary.
  if (this->buffersize == size) { return; }

  SoOffscreenInternalData::setBufferSize(size);

  delete[] this->buffer;
  this->buffer =
    new unsigned char[this->buffersize[0] * this->buffersize[1] * 4];

  if (this->glxpixmap) glXDestroyGLXPixmap(SoOffscreenGLXData::getDisplay(), this->glxpixmap);
  if (this->pixmap) XFreePixmap(SoOffscreenGLXData::getDisplay(), this->pixmap);

  if (this->context) {
    this->pixmap = XCreatePixmap(SoOffscreenGLXData::getDisplay(),
                                 DefaultRootWindow(SoOffscreenGLXData::getDisplay()),
                                 size[0], size[1],
                                 this->visinfo->depth);
    if (!this->pixmap) {
      SoDebugError::postWarning("SoOffscreenGLXData::SoOffscreenGLXData",
                                "Couldn't create %dx%dx%d Pixmap.");
    }
    else {
      this->glxpixmap = glXCreateGLXPixmap(SoOffscreenGLXData::getDisplay(),
                                           this->visinfo, this->pixmap);
      if (!this->glxpixmap) {
        SoDebugError::postWarning("SoOffscreenGLXData::SoOffscreenGLXData",
                                  "Couldn't create GLX Pixmap.");
      }
    }

  }
}

SbBool
SoOffscreenGLXData::makeContextCurrent(uint32_t contextid)
{
  assert(this->buffer);
  if (this->context && this->glxpixmap) {
    this->storedcontext = glXGetCurrentContext();
    if (this->storedcontext) {
      // Must know for sure that there's a current context before
      // instantiating a glglue, or we'll get a crash due to the
      // OpenGL calls within GLWrapper().
      const cc_glglue * glw = cc_glglue_instance(contextid);
      this->storeddisplay = (Display *)cc_glglue_glXGetCurrentDisplay(glw);
      this->storeddrawable = glXGetCurrentDrawable();
    }

#if DEBUG_GLXCONTEXT_HANDLING // debug
    SoDebugError::postInfo("SoOffscreenGLXData::makeContextCurrent",
                           "store current status first => context==%p, "
                           "drawable==%p, display==%p",
                           this->storedcontext,
                           this->storeddrawable,
                           this->storeddisplay);
#endif // debug

    Bool r = glXMakeCurrent(SoOffscreenGLXData::getDisplay(), this->glxpixmap, this->context);

#if DEBUG_GLXCONTEXT_HANDLING // debug
    SoDebugError::postInfo("SoOffscreenGLXData::makeContextCurrent",
                           "made context %p current", this->context);
#endif // debug

    return (r == True) ? TRUE : FALSE;
  }
  return FALSE;
}

unsigned char *
SoOffscreenGLXData::getBuffer(void)
{
  return this->buffer;
}

void
SoOffscreenGLXData::postRender(void)
{
  SbVec2s size = this->getSize();

  if (this->context && this->buffer) {
    glPixelStorei(GL_PACK_ALIGNMENT, 1);
    glReadPixels(0, 0, size[0], size[1], GL_RGBA, GL_UNSIGNED_BYTE,
                 this->buffer);
    glPixelStorei(GL_PACK_ALIGNMENT, 4);

#if DEBUG_GLXCONTEXT_HANDLING // debug
    SoDebugError::postInfo("SoOffscreenGLXData::postRender",
                           "releasing context (glxMakeCurrent(d, None, NULL))");
#endif // debug
    (void) glXMakeCurrent(SoOffscreenGLXData::getDisplay(), None, NULL); // release

    // The previous context is stored and reset to make it possible
    // to use an SoOffscreenRenderer from for instance an SoCallback
    // node callback during SoGLRenderAction traversal, without the
    // need for any extra book-keeping on the application side.

    if (this->storedcontext && this->storeddrawable && this->storeddisplay) {
#if DEBUG_GLXCONTEXT_HANDLING // debug
      SoDebugError::postInfo("SoOffscreenGLXData::postRender",
                             "restoring context %p to be current "
                             "(drawable==%p, display==%p)",
                             this->storedcontext,
                             this->storeddrawable,
                             this->storeddisplay);
#endif // debug

      // FIXME: this causes a crash for the Mesa version 3.4.2 that
      // comes with XFree86 v4, on the third invocation after two
      // successful runs first. This is _bad_. 20020729 mortene.
      //
      // UPDATE: this might be our bug, and could be fixed
      // now -- test. 20020802 mortene.
      (void) glXMakeCurrent(this->storeddisplay, this->storeddrawable,
                            this->storedcontext);
    }
  }
}

SbVec2s
SoOffscreenGLXData::getMaxDimensions(void)
{

  /*
    FIXME: Here we have to have access to a valid GL context
    if we want this to work... (handegar)
  */

  /*
    GLint maxdims[2];
    glGetIntegerv(GL_MAX_VIEWPORT_DIMS, maxdims);
    // FIXME: clamp GLint to be within the size of SbVec2s. 20020809 mortene.
  */

#if 1
  return SbVec2s(2048,2048);
#else // Shrink the offscreen capacity for testing and debugging (handegar)
  return SbVec2s(640/2+3,480/7+11); 
#endif
}

SbVec2s
SoOffscreenGLXData::getMax(void)
{
  return SoOffscreenGLXData::getMaxDimensions();
}
