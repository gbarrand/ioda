#!/bin/sh -f

# CoinGL is crowded with statics of the nodes dictionary, then
# we need the shared lib in case CoinGL is used in an app using
# various plugins linked to CoinGL. (It is the case in the
# osc_vis context).

bush_home=../../../bush

. ${bush_home}/args
. ${bush_home}/ourex_header

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

if [ ${build_compile} = "yes" ] ; then

if [ ${build_sdk_ios} = yes -o ${build_sdk_android} = yes ] ; then
  echo ../../inlib/inlib/gldum/coin_gl.c >> c_tmp
fi
if [ ${build_inlib_gl} = "yes" ] ; then
  echo ../../inlib/inlib/gldum/coin_gl.c >> c_tmp
  echo ../../inlib/inlib/gldum/offscreen_gl.c >> c_tmp
fi

echo ./src/tidbits.c >> c_tmp
echo ./src/engines/evaluator.c >> c_tmp
echo ./src/engines/evaluator_tab.c >> c_tmp

find ./src/threads -name '*.c' -print >> c_tmp
find ./src/glue -name '*.c' -print >> c_tmp
find ./src/base -name '*.c' -print >> c_tmp
find ./src/errors -name '*.c' -print >> c_tmp
find ./src/misc -name '*.c' -print >> c_tmp
find ./src/fonts -name '*.c' -print >> c_tmp
find ./src/io -name '*.c' -print >> c_tmp

find ./src/threads -name '*.cpp' -print >> cpp_tmp
find ./src/glue -name '*.cpp' -print >> cpp_tmp
find ./src/actions -name '*.cpp' -print >> cpp_tmp
find ./src/base -name '*.cpp' -print >> cpp_tmp
find ./src/upgraders -name '*.cpp' -print >> cpp_tmp
find ./src/bundles -name '*.cpp' -print >> cpp_tmp
find ./src/caches -name '*.cpp' -print >> cpp_tmp
find ./src/details -name '*.cpp' -print >> cpp_tmp
find ./src/draggers -name '*.cpp' -print >> cpp_tmp
find ./src/elements -name '*.cpp' -print >> cpp_tmp
#find ./src/elements/GL -name '*.cpp' -print >> cpp_tmp
find ./src/engines -name '*.cpp' -print >> cpp_tmp

find ./src/errors -name '*.cpp' -print >> cpp_tmp
find ./src/events -name '*.cpp' -print >> cpp_tmp
find ./src/fields -name '*.cpp' -print >> cpp_tmp
find ./src/manips -name '*.cpp' -print >> cpp_tmp
find ./src/lists -name '*.cpp' -print >> cpp_tmp
find ./src/nodekits -name '*.cpp' -print >> cpp_tmp
find ./src/nodes -name '*.cpp' -print >> cpp_tmp
find ./src/projectors -name '*.cpp' -print >> cpp_tmp
find ./src/sensors -name '*.cpp' -print >> cpp_tmp
find ./src/misc -name '*.cpp' -print >> cpp_tmp
find ./src/3ds -name '*.cpp' -print >> cpp_tmp
find ./src/hardcopy -name '*.cpp' -print >> cpp_tmp
find ./src/shapenodes -name '*.cpp' -print >> cpp_tmp
find ./src/fonts -name '*.cpp' -print >> cpp_tmp
find ./src/collision -name '*.cpp' -print >> cpp_tmp
find ./src/io -name '*.cpp' -print >> cpp_tmp
find ./src/vrml97 -name '*.cpp' -print >> cpp_tmp
  
# 2.5.0 :
find ./src/geo -name '*.cpp' -print >> cpp_tmp
find ./src/shaders -name '*.cpp' -print >> cpp_tmp
find ./src/shadows -name '*.cpp' -print >> cpp_tmp

#///////////////////////////////////////////////////////
#/// to avoid ranlib warnings, do not      /////////////
#/// include files that induce empty .o :  /////////////
#///////////////////////////////////////////////////////
#if [ ${build_verbose} = yes ] ; then echo "filter out some files ...";fi

exclude=
exclude="${exclude} spidermonkey threads_dummy glue_dummy SbIntList"
exclude="${exclude} SbList SbStringList SoEngineOutputList"
exclude="${exclude} SoFieldList SoJavaScriptEngine"
exclude="${exclude} 3dsLoader SoStream"
#exclude="${exclude} SoOffscreenAGLData SoOffscreenGLXData SoOffscreenWGLData"
if [ ${build_visual} = "no" ] ; then
  exclude="${exclude} win32api"
fi

for exc in ${exclude} ; do
  grep -v ${exc} c_tmp   > tmp_0;/bin/mv tmp_0 c_tmp
  grep -v ${exc} cpp_tmp > tmp_0;/bin/mv tmp_0 cpp_tmp
done

#/bin/rm -f c_tmp
#echo './src/xcode_all_c.c' >> c_tmp
#/bin/rm -f cpp_tmp
#echo './src/xcode_all_cpp.cpp' >> cpp_tmp

#///////////////////////////////////////////////////////
#///////////////////////////////////////////////////////
#///////////////////////////////////////////////////////

# Darwin, Linux : from Coin_2_4_4 build system on a Panther.

gen_flags="${gen_flags} -I./src"
gen_flags="${gen_flags} -I."
gen_flags="${gen_flags} -I./include"
gen_flags="${gen_flags} -I./include/Inventor/annex"

if [ ${build_visual} = "yes" ] ; then
  gen_flags="${gen_flags} -DHAVE_CONFIG_H"
  gen_flags="${gen_flags} -DCOIN_INTERNAL"
  gen_flags="${gen_flags} -DCOIN_DEBUG=0"

  #NOTE : we do not compile with COIN_MAKE_DLL but the .lib, .dll are
  #       built by using the .def way of doing. See bush/archive.
  #       And the user code must be compiled with /DCOIN_NOT_DLL even
  #       if using the .lib and .dll.

  #NOTE : if building with COIN_MAKE_DLL, the .a is screwed up.
  #       We should build the .a without it.

  #NOTE : if building with COIN_MAKE_DLL, when using
  #       the library the user code must be
  #       build with COIN_DLL. See ourex/HEPVis/build and
  #       bush/use/CoinGL
  #gen_flags="${gen_flags} -DCOIN_MAKE_DLL"

else
  gen_flags="${gen_flags} -DHAVE_CONFIG_H"
  gen_flags="${gen_flags} -DCOIN_INTERNAL"
  gen_flags="${gen_flags} -DCOIN_DEBUG=0"

  gen_flags="${gen_flags} -D_REENTRANT"
  gen_flags="${gen_flags} -DPIC"
  #-DCOIN_THREADSAFE
  gen_flags="${gen_flags} -fPIC -fno-exceptions"
  gen_flags="${gen_flags} -fno-builtin"
  if [ ${build_clang} = "no" ] ; then
      gen_flags="${gen_flags} -finline-functions"
  fi      
  gen_flags="${gen_flags} -Wno-unused -Wno-multichar -Wreturn-type"
  gen_flags="${gen_flags} -Wchar-subscripts -Wparentheses"
  cppflags="${cppflags} -Woverloaded-virtual"
fi

if [ `uname` = "Darwin" ] ; then
  gen_flags="${gen_flags}  -fno-common"
#  if [ ${build_gnu} = "yes" ] ; then
#    gen_flags="${gen_flags} -no-cpp-precomp"
#  fi
  # put the below to rm warnings in dl.c and gl_agl.c :
  gen_flags="${gen_flags} -w"
fi

if [ ${build_inlib_gl} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then echo "CoinGL/build : build_inlib_gl.";fi
  gen_flags="${gen_flags} -I../../inlib"
  ccflags="${ccflags} -DOUREX_COINGL_INLIB_GL"
  cppflags="${cppflags} -DOUREX_COINGL_INLIB_GL"
fi

ccflags="${ccflags} ${gen_flags}"
cppflags="${cppflags} ${gen_flags}"

use_archive=no # OpenScientist needs shared libs.

if [ ${build_sdk_ios} = yes -o ${build_sdk_android} = yes ] ; then
  # to include inlib/gldum/gl4coin.ic in Inventor/system/gl-header.h :
  use_inlib=yes
  . ${bush_home}/use/inlib
fi

use_GL=yes
use_zip=yes
use_zlib=yes

. ${bush_home}/use/GL

. ${bush_home}/use/zip
. ${bush_home}/use/zlib

. ${bush_home}/compile

fi # end build_compile

if [ ${build_visual} = "yes" ] ; then
  #build_shlib=no
  libs="${libs} gdi32.lib user32.lib wsock32.lib"
fi

if [ ${build_archive} = "yes" ] ; then . ${bush_home}/archive; fi

#if [ ${build_visual} = "yes" ] ; then
  #NOTE : if building with COIN_MAKE_DLL, the .a is not good.
  #/bin/rm ${build_path}/lib${libname}.a
#fi

. ${bush_home}/clean
