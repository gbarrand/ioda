# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('HEPVis_SWIG_Python', [dirname(__file__)])
        except ImportError:
            import HEPVis_SWIG_Python
            return HEPVis_SWIG_Python
        if fp is not None:
            try:
                _mod = imp.load_module('HEPVis_SWIG_Python', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    HEPVis_SWIG_Python = swig_import_helper()
    del swig_import_helper
else:
    import HEPVis_SWIG_Python
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class charp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_charp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_charp
    __del__ = lambda self : None;
    def assign(self, *args): return HEPVis_SWIG_Python.charp_assign(self, *args)
    def value(self): return HEPVis_SWIG_Python.charp_value(self)
    def cast(self): return HEPVis_SWIG_Python.charp_cast(self)
    frompointer = staticmethod(HEPVis_SWIG_Python.charp_frompointer)
charp_swigregister = HEPVis_SWIG_Python.charp_swigregister
charp_swigregister(charp)
cast = HEPVis_SWIG_Python.cast

def charp_frompointer(*args):
  return HEPVis_SWIG_Python.charp_frompointer(*args)
charp_frompointer = HEPVis_SWIG_Python.charp_frompointer

class intp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_intp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_intp
    __del__ = lambda self : None;
    def assign(self, *args): return HEPVis_SWIG_Python.intp_assign(self, *args)
    def value(self): return HEPVis_SWIG_Python.intp_value(self)
    def cast(self): return HEPVis_SWIG_Python.intp_cast(self)
    frompointer = staticmethod(HEPVis_SWIG_Python.intp_frompointer)
intp_swigregister = HEPVis_SWIG_Python.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(*args):
  return HEPVis_SWIG_Python.intp_frompointer(*args)
intp_frompointer = HEPVis_SWIG_Python.intp_frompointer

class longp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_longp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_longp
    __del__ = lambda self : None;
    def assign(self, *args): return HEPVis_SWIG_Python.longp_assign(self, *args)
    def value(self): return HEPVis_SWIG_Python.longp_value(self)
    def cast(self): return HEPVis_SWIG_Python.longp_cast(self)
    frompointer = staticmethod(HEPVis_SWIG_Python.longp_frompointer)
longp_swigregister = HEPVis_SWIG_Python.longp_swigregister
longp_swigregister(longp)

def longp_frompointer(*args):
  return HEPVis_SWIG_Python.longp_frompointer(*args)
longp_frompointer = HEPVis_SWIG_Python.longp_frompointer

class floatp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_floatp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_floatp
    __del__ = lambda self : None;
    def assign(self, *args): return HEPVis_SWIG_Python.floatp_assign(self, *args)
    def value(self): return HEPVis_SWIG_Python.floatp_value(self)
    def cast(self): return HEPVis_SWIG_Python.floatp_cast(self)
    frompointer = staticmethod(HEPVis_SWIG_Python.floatp_frompointer)
floatp_swigregister = HEPVis_SWIG_Python.floatp_swigregister
floatp_swigregister(floatp)

def floatp_frompointer(*args):
  return HEPVis_SWIG_Python.floatp_frompointer(*args)
floatp_frompointer = HEPVis_SWIG_Python.floatp_frompointer

class doublep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_doublep()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_doublep
    __del__ = lambda self : None;
    def assign(self, *args): return HEPVis_SWIG_Python.doublep_assign(self, *args)
    def value(self): return HEPVis_SWIG_Python.doublep_value(self)
    def cast(self): return HEPVis_SWIG_Python.doublep_cast(self)
    frompointer = staticmethod(HEPVis_SWIG_Python.doublep_frompointer)
doublep_swigregister = HEPVis_SWIG_Python.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(*args):
  return HEPVis_SWIG_Python.doublep_frompointer(*args)
doublep_frompointer = HEPVis_SWIG_Python.doublep_frompointer

FALSE = HEPVis_SWIG_Python.FALSE
TRUE = HEPVis_SWIG_Python.TRUE
HAVE_INTTYPES_H = HEPVis_SWIG_Python.HAVE_INTTYPES_H
HAVE_STDINT_H = HEPVis_SWIG_Python.HAVE_STDINT_H
HAVE_SYS_TYPES_H = HEPVis_SWIG_Python.HAVE_SYS_TYPES_H
HAVE_STDDEF_H = HEPVis_SWIG_Python.HAVE_STDDEF_H
HAVE_INT8_T = HEPVis_SWIG_Python.HAVE_INT8_T
HAVE_UINT8_T = HEPVis_SWIG_Python.HAVE_UINT8_T
HAVE_INT16_T = HEPVis_SWIG_Python.HAVE_INT16_T
HAVE_UINT16_T = HEPVis_SWIG_Python.HAVE_UINT16_T
HAVE_INT32_T = HEPVis_SWIG_Python.HAVE_INT32_T
HAVE_UINT32_T = HEPVis_SWIG_Python.HAVE_UINT32_T
HAVE_INT64_T = HEPVis_SWIG_Python.HAVE_INT64_T
HAVE_UINT64_T = HEPVis_SWIG_Python.HAVE_UINT64_T
HAVE_INTPTR_T = HEPVis_SWIG_Python.HAVE_INTPTR_T
HAVE_UINTPTR_T = HEPVis_SWIG_Python.HAVE_UINTPTR_T
M_E = HEPVis_SWIG_Python.M_E
M_LOG2E = HEPVis_SWIG_Python.M_LOG2E
M_LOG10E = HEPVis_SWIG_Python.M_LOG10E
M_LN2 = HEPVis_SWIG_Python.M_LN2
M_LN10 = HEPVis_SWIG_Python.M_LN10
M_PI = HEPVis_SWIG_Python.M_PI
M_TWOPI = HEPVis_SWIG_Python.M_TWOPI
M_PI_2 = HEPVis_SWIG_Python.M_PI_2
M_PI_4 = HEPVis_SWIG_Python.M_PI_4
M_3PI_4 = HEPVis_SWIG_Python.M_3PI_4
M_SQRTPI = HEPVis_SWIG_Python.M_SQRTPI
M_1_PI = HEPVis_SWIG_Python.M_1_PI
M_2_PI = HEPVis_SWIG_Python.M_2_PI
M_2_SQRTPI = HEPVis_SWIG_Python.M_2_SQRTPI
M_SQRT2 = HEPVis_SWIG_Python.M_SQRT2
M_SQRT1_2 = HEPVis_SWIG_Python.M_SQRT1_2
M_LN2LO = HEPVis_SWIG_Python.M_LN2LO
M_LN2HI = HEPVis_SWIG_Python.M_LN2HI
M_SQRT3 = HEPVis_SWIG_Python.M_SQRT3
M_IVLN10 = HEPVis_SWIG_Python.M_IVLN10
M_LOG2_E = HEPVis_SWIG_Python.M_LOG2_E
M_INVLN2 = HEPVis_SWIG_Python.M_INVLN2
COIN_MAJOR_VERSION = HEPVis_SWIG_Python.COIN_MAJOR_VERSION
COIN_MINOR_VERSION = HEPVis_SWIG_Python.COIN_MINOR_VERSION
COIN_MICRO_VERSION = HEPVis_SWIG_Python.COIN_MICRO_VERSION
COIN_VERSION = HEPVis_SWIG_Python.COIN_VERSION
HAVE_HASH_QUOTING = HEPVis_SWIG_Python.HAVE_HASH_QUOTING
SUN_CC_4_0_SOTYPE_INIT_BUG = HEPVis_SWIG_Python.SUN_CC_4_0_SOTYPE_INIT_BUG
class SbDict(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbDict(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbDict
    __del__ = lambda self : None;
    def applyToAll(self, *args): return HEPVis_SWIG_Python.SbDict_applyToAll(self, *args)
    def clear(self): return HEPVis_SWIG_Python.SbDict_clear(self)
    def enter(self, *args): return HEPVis_SWIG_Python.SbDict_enter(self, *args)
    def find(self, *args): return HEPVis_SWIG_Python.SbDict_find(self, *args)
    def makePList(self, *args): return HEPVis_SWIG_Python.SbDict_makePList(self, *args)
    def remove(self, *args): return HEPVis_SWIG_Python.SbDict_remove(self, *args)
    def setHashingFunction(self, *args): return HEPVis_SWIG_Python.SbDict_setHashingFunction(self, *args)
SbDict_swigregister = HEPVis_SWIG_Python.SbDict_swigregister
SbDict_swigregister(SbDict)

class SoType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fromName = staticmethod(HEPVis_SWIG_Python.SoType_fromName)
    def getName(self): return HEPVis_SWIG_Python.SoType_getName(self)
    def getParent(self): return HEPVis_SWIG_Python.SoType_getParent(self)
    def isDerivedFrom(self, *args): return HEPVis_SWIG_Python.SoType_isDerivedFrom(self, *args)
    getAllDerivedFrom = staticmethod(HEPVis_SWIG_Python.SoType_getAllDerivedFrom)
    def canCreateInstance(self): return HEPVis_SWIG_Python.SoType_canCreateInstance(self)
    def getData(self): return HEPVis_SWIG_Python.SoType_getData(self)
    def getKey(self): return HEPVis_SWIG_Python.SoType_getKey(self)
    def __eq__(self, *args): return HEPVis_SWIG_Python.SoType___eq__(self, *args)
    def __ne__(self, *args): return HEPVis_SWIG_Python.SoType___ne__(self, *args)
    def __lt__(self, *args): return HEPVis_SWIG_Python.SoType___lt__(self, *args)
    def __le__(self, *args): return HEPVis_SWIG_Python.SoType___le__(self, *args)
    def __ge__(self, *args): return HEPVis_SWIG_Python.SoType___ge__(self, *args)
    def __gt__(self, *args): return HEPVis_SWIG_Python.SoType___gt__(self, *args)
    init = staticmethod(HEPVis_SWIG_Python.SoType_init)
    fromKey = staticmethod(HEPVis_SWIG_Python.SoType_fromKey)
    badType = staticmethod(HEPVis_SWIG_Python.SoType_badType)
    def isBad(self): return HEPVis_SWIG_Python.SoType_isBad(self)
    def makeInternal(self): return HEPVis_SWIG_Python.SoType_makeInternal(self)
    def isInternal(self): return HEPVis_SWIG_Python.SoType_isInternal(self)
    getNumTypes = staticmethod(HEPVis_SWIG_Python.SoType_getNumTypes)
    def getInstantiationMethod(self): return HEPVis_SWIG_Python.SoType_getInstantiationMethod(self)
    def createInstance(self): return HEPVis_SWIG_Python.SoType_createInstance(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoType
    __del__ = lambda self : None;
SoType_swigregister = HEPVis_SWIG_Python.SoType_swigregister
SoType_swigregister(SoType)

def SoType_fromName(*args):
  return HEPVis_SWIG_Python.SoType_fromName(*args)
SoType_fromName = HEPVis_SWIG_Python.SoType_fromName

def SoType_getAllDerivedFrom(*args):
  return HEPVis_SWIG_Python.SoType_getAllDerivedFrom(*args)
SoType_getAllDerivedFrom = HEPVis_SWIG_Python.SoType_getAllDerivedFrom

def SoType_init():
  return HEPVis_SWIG_Python.SoType_init()
SoType_init = HEPVis_SWIG_Python.SoType_init

def SoType_fromKey(*args):
  return HEPVis_SWIG_Python.SoType_fromKey(*args)
SoType_fromKey = HEPVis_SWIG_Python.SoType_fromKey

def SoType_badType():
  return HEPVis_SWIG_Python.SoType_badType()
SoType_badType = HEPVis_SWIG_Python.SoType_badType

def SoType_getNumTypes():
  return HEPVis_SWIG_Python.SoType_getNumTypes()
SoType_getNumTypes = HEPVis_SWIG_Python.SoType_getNumTypes

class SbVec2s(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbVec2s(*args)
        try: self.this.append(this)
        except: self.this = this
    def dot(self, *args): return HEPVis_SWIG_Python.SbVec2s_dot(self, *args)
    def getValue(self): return HEPVis_SWIG_Python.SbVec2s_getValue(self)
    def negate(self): return HEPVis_SWIG_Python.SbVec2s_negate(self)
    def setValue(self, *args): return HEPVis_SWIG_Python.SbVec2s_setValue(self, *args)
    def __imul__(self, *args): return HEPVis_SWIG_Python.SbVec2s___imul__(self, *args)
    def __idiv__(self, *args): return HEPVis_SWIG_Python.SbVec2s___idiv__(self, *args)
    def __iadd__(self, *args): return HEPVis_SWIG_Python.SbVec2s___iadd__(self, *args)
    def __isub__(self, *args): return HEPVis_SWIG_Python.SbVec2s___isub__(self, *args)
    def __neg__(self): return HEPVis_SWIG_Python.SbVec2s___neg__(self)
    def output(self, *args): return HEPVis_SWIG_Python.SbVec2s_output(self, *args)
    def __add__(self, *args): return HEPVis_SWIG_Python.SbVec2s___add__(self, *args)
    def __sub__(self, *args): return HEPVis_SWIG_Python.SbVec2s___sub__(self, *args)
    def __mul__(self, *args): return HEPVis_SWIG_Python.SbVec2s___mul__(self, *args)
    def __rmul__(self, *args): return HEPVis_SWIG_Python.SbVec2s___rmul__(self, *args)
    def __div__(self, *args): return HEPVis_SWIG_Python.SbVec2s___div__(self, *args)
    def __eq__(self, *args): return HEPVis_SWIG_Python.SbVec2s___eq__(self, *args)
    def __nq__(self, *args): return HEPVis_SWIG_Python.SbVec2s___nq__(self, *args)
    def __getitem__(self, *args): return HEPVis_SWIG_Python.SbVec2s___getitem__(self, *args)
    def __setitem__(self, *args): return HEPVis_SWIG_Python.SbVec2s___setitem__(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbVec2s
    __del__ = lambda self : None;
SbVec2s_swigregister = HEPVis_SWIG_Python.SbVec2s_swigregister
SbVec2s_swigregister(SbVec2s)

class SbPList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPList
    __del__ = lambda self : None;
    def copy(self, *args): return HEPVis_SWIG_Python.SbPList_copy(self, *args)
    def fit(self): return HEPVis_SWIG_Python.SbPList_fit(self)
    def append(self, *args): return HEPVis_SWIG_Python.SbPList_append(self, *args)
    def find(self, *args): return HEPVis_SWIG_Python.SbPList_find(self, *args)
    def insert(self, *args): return HEPVis_SWIG_Python.SbPList_insert(self, *args)
    def removeItem(self, *args): return HEPVis_SWIG_Python.SbPList_removeItem(self, *args)
    def remove(self, *args): return HEPVis_SWIG_Python.SbPList_remove(self, *args)
    def removeFast(self, *args): return HEPVis_SWIG_Python.SbPList_removeFast(self, *args)
    def getLength(self): return HEPVis_SWIG_Python.SbPList_getLength(self)
    def truncate(self, *args): return HEPVis_SWIG_Python.SbPList_truncate(self, *args)
    def getArrayPtr(self, start=0): return HEPVis_SWIG_Python.SbPList_getArrayPtr(self, start)
    def __eq__(self, *args): return HEPVis_SWIG_Python.SbPList___eq__(self, *args)
    def __ne__(self, *args): return HEPVis_SWIG_Python.SbPList___ne__(self, *args)
    def get(self, *args): return HEPVis_SWIG_Python.SbPList_get(self, *args)
    def set(self, *args): return HEPVis_SWIG_Python.SbPList_set(self, *args)
    def __getitem__(self, *args): return HEPVis_SWIG_Python.SbPList___getitem__(self, *args)
    def __setitem__(self, *args): return HEPVis_SWIG_Python.SbPList___setitem__(self, *args)
    def __iter__(self):
       for i in range(self.getLength()):
          yield self[i]

SbPList_swigregister = HEPVis_SWIG_Python.SbPList_swigregister
SbPList_swigregister(SbPList)

class SbIntList(SbPList):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbIntList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(self, *args): return HEPVis_SWIG_Python.SbIntList_append(self, *args)
    def find(self, *args): return HEPVis_SWIG_Python.SbIntList_find(self, *args)
    def insert(self, *args): return HEPVis_SWIG_Python.SbIntList_insert(self, *args)
    def __setitem__(self, *args): return HEPVis_SWIG_Python.SbIntList___setitem__(self, *args)
    def __getitem__(self, *args): return HEPVis_SWIG_Python.SbIntList___getitem__(self, *args)
    def get(self, *args): return HEPVis_SWIG_Python.SbIntList_get(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbIntList
    __del__ = lambda self : None;
SbIntList_swigregister = HEPVis_SWIG_Python.SbIntList_swigregister
SbIntList_swigregister(SbIntList)

class SbString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbString
    __del__ = lambda self : None;
    hash = staticmethod(HEPVis_SWIG_Python.SbString_hash)
    def getLength(self): return HEPVis_SWIG_Python.SbString_getLength(self)
    def makeEmpty(self, freeold=1): return HEPVis_SWIG_Python.SbString_makeEmpty(self, freeold)
    def getString(self): return HEPVis_SWIG_Python.SbString_getString(self)
    def getSubString(self, *args): return HEPVis_SWIG_Python.SbString_getSubString(self, *args)
    def deleteSubString(self, *args): return HEPVis_SWIG_Python.SbString_deleteSubString(self, *args)
    def addIntString(self, *args): return HEPVis_SWIG_Python.SbString_addIntString(self, *args)
    def __iadd__(self, *args): return HEPVis_SWIG_Python.SbString___iadd__(self, *args)
    def compareSubString(self, *args): return HEPVis_SWIG_Python.SbString_compareSubString(self, *args)
    def sprintf(self, *args): return HEPVis_SWIG_Python.SbString_sprintf(self, *args)
    def apply(self, *args): return HEPVis_SWIG_Python.SbString_apply(self, *args)
    def find(self, *args): return HEPVis_SWIG_Python.SbString_find(self, *args)
    def findAll(self, *args): return HEPVis_SWIG_Python.SbString_findAll(self, *args)
    def __eq__(self, *args): return HEPVis_SWIG_Python.SbString___eq__(self, *args)
    def __nq__(self, *args): return HEPVis_SWIG_Python.SbString___nq__(self, *args)
    def __getitem__(self, *args): return HEPVis_SWIG_Python.SbString___getitem__(self, *args)
    def __iter__(self):
      return getString().__iter__()

    def __repr__(self, *args): return HEPVis_SWIG_Python.SbString___repr__(self, *args)
SbString_swigregister = HEPVis_SWIG_Python.SbString_swigregister
SbString_swigregister(SbString)

def SbString_hash(*args):
  return HEPVis_SWIG_Python.SbString_hash(*args)
SbString_hash = HEPVis_SWIG_Python.SbString_hash

class SbName(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbName(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbName
    __del__ = lambda self : None;
    def getString(self): return HEPVis_SWIG_Python.SbName_getString(self)
    def getLength(self): return HEPVis_SWIG_Python.SbName_getLength(self)
    isIdentStartChar = staticmethod(HEPVis_SWIG_Python.SbName_isIdentStartChar)
    isIdentChar = staticmethod(HEPVis_SWIG_Python.SbName_isIdentChar)
    isBaseNameStartChar = staticmethod(HEPVis_SWIG_Python.SbName_isBaseNameStartChar)
    isBaseNameChar = staticmethod(HEPVis_SWIG_Python.SbName_isBaseNameChar)
    def __eq__(self, *args): return HEPVis_SWIG_Python.SbName___eq__(self, *args)
    def __nq__(self, *args): return HEPVis_SWIG_Python.SbName___nq__(self, *args)
    def __getitem__(self, *args): return HEPVis_SWIG_Python.SbName___getitem__(self, *args)
    def __iter__(self):
      return getString().__iter__()

    def __repr__(self, *args): return HEPVis_SWIG_Python.SbName___repr__(self, *args)
SbName_swigregister = HEPVis_SWIG_Python.SbName_swigregister
SbName_swigregister(SbName)

def SbName_isIdentStartChar(*args):
  return HEPVis_SWIG_Python.SbName_isIdentStartChar(*args)
SbName_isIdentStartChar = HEPVis_SWIG_Python.SbName_isIdentStartChar

def SbName_isIdentChar(*args):
  return HEPVis_SWIG_Python.SbName_isIdentChar(*args)
SbName_isIdentChar = HEPVis_SWIG_Python.SbName_isIdentChar

def SbName_isBaseNameStartChar(*args):
  return HEPVis_SWIG_Python.SbName_isBaseNameStartChar(*args)
SbName_isBaseNameStartChar = HEPVis_SWIG_Python.SbName_isBaseNameStartChar

def SbName_isBaseNameChar(*args):
  return HEPVis_SWIG_Python.SbName_isBaseNameChar(*args)
SbName_isBaseNameChar = HEPVis_SWIG_Python.SbName_isBaseNameChar

class SbTime(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTime(*args)
        try: self.this.append(this)
        except: self.this = this
    getTimeOfDay = staticmethod(HEPVis_SWIG_Python.SbTime_getTimeOfDay)
    def setToTimeOfDay(self): return HEPVis_SWIG_Python.SbTime_setToTimeOfDay(self)
    zero = staticmethod(HEPVis_SWIG_Python.SbTime_zero)
    max = staticmethod(HEPVis_SWIG_Python.SbTime_max)
    maxTime = staticmethod(HEPVis_SWIG_Python.SbTime_maxTime)
    def setValue(self, *args): return HEPVis_SWIG_Python.SbTime_setValue(self, *args)
    def setMsecValue(self, *args): return HEPVis_SWIG_Python.SbTime_setMsecValue(self, *args)
    def getValue(self, *args): return HEPVis_SWIG_Python.SbTime_getValue(self, *args)
    def getMsecValue(self): return HEPVis_SWIG_Python.SbTime_getMsecValue(self)
    def format(self, fmt="%S.%i"): return HEPVis_SWIG_Python.SbTime_format(self, fmt)
    def formatDate(self, fmt=None): return HEPVis_SWIG_Python.SbTime_formatDate(self, fmt)
    def parsedate(self, *args): return HEPVis_SWIG_Python.SbTime_parsedate(self, *args)
    def __iadd__(self, *args): return HEPVis_SWIG_Python.SbTime___iadd__(self, *args)
    def __isub__(self, *args): return HEPVis_SWIG_Python.SbTime___isub__(self, *args)
    def __neg__(self): return HEPVis_SWIG_Python.SbTime___neg__(self)
    def __imul__(self, *args): return HEPVis_SWIG_Python.SbTime___imul__(self, *args)
    def __idiv__(self, *args): return HEPVis_SWIG_Python.SbTime___idiv__(self, *args)
    def __mod__(self, *args): return HEPVis_SWIG_Python.SbTime___mod__(self, *args)
    def __eq__(self, *args): return HEPVis_SWIG_Python.SbTime___eq__(self, *args)
    def __ne__(self, *args): return HEPVis_SWIG_Python.SbTime___ne__(self, *args)
    def __lt__(self, *args): return HEPVis_SWIG_Python.SbTime___lt__(self, *args)
    def __gt__(self, *args): return HEPVis_SWIG_Python.SbTime___gt__(self, *args)
    def __le__(self, *args): return HEPVis_SWIG_Python.SbTime___le__(self, *args)
    def __ge__(self, *args): return HEPVis_SWIG_Python.SbTime___ge__(self, *args)
    def output(self, *args): return HEPVis_SWIG_Python.SbTime_output(self, *args)
    def __add__(self, *args): return HEPVis_SWIG_Python.SbTime___add__(self, *args)
    def __sub__(self, *args): return HEPVis_SWIG_Python.SbTime___sub__(self, *args)
    def __mul__(self, *args): return HEPVis_SWIG_Python.SbTime___mul__(self, *args)
    def __rmul__(self, *args): return HEPVis_SWIG_Python.SbTime___rmul__(self, *args)
    def __div__(self, *args): return HEPVis_SWIG_Python.SbTime___div__(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTime
    __del__ = lambda self : None;
SbTime_swigregister = HEPVis_SWIG_Python.SbTime_swigregister
SbTime_swigregister(SbTime)

def SbTime_getTimeOfDay():
  return HEPVis_SWIG_Python.SbTime_getTimeOfDay()
SbTime_getTimeOfDay = HEPVis_SWIG_Python.SbTime_getTimeOfDay

def SbTime_zero():
  return HEPVis_SWIG_Python.SbTime_zero()
SbTime_zero = HEPVis_SWIG_Python.SbTime_zero

def SbTime_max():
  return HEPVis_SWIG_Python.SbTime_max()
SbTime_max = HEPVis_SWIG_Python.SbTime_max

def SbTime_maxTime():
  return HEPVis_SWIG_Python.SbTime_maxTime()
SbTime_maxTime = HEPVis_SWIG_Python.SbTime_maxTime

class SoEvent(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEvent
    __del__ = lambda self : None;
    def isOfType(self, *args): return HEPVis_SWIG_Python.SoEvent_isOfType(self, *args)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoEvent_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoEvent_getTypeId(self)
    def setTime(self, *args): return HEPVis_SWIG_Python.SoEvent_setTime(self, *args)
    def getTime(self): return HEPVis_SWIG_Python.SoEvent_getTime(self)
    def setPosition(self, *args): return HEPVis_SWIG_Python.SoEvent_setPosition(self, *args)
    def getPosition(self, *args): return HEPVis_SWIG_Python.SoEvent_getPosition(self, *args)
    def getNormalizedPosition(self, *args): return HEPVis_SWIG_Python.SoEvent_getNormalizedPosition(self, *args)
    def setShiftDown(self, *args): return HEPVis_SWIG_Python.SoEvent_setShiftDown(self, *args)
    def wasShiftDown(self): return HEPVis_SWIG_Python.SoEvent_wasShiftDown(self)
    def setCtrlDown(self, *args): return HEPVis_SWIG_Python.SoEvent_setCtrlDown(self, *args)
    def wasCtrlDown(self): return HEPVis_SWIG_Python.SoEvent_wasCtrlDown(self)
    def setAltDown(self, *args): return HEPVis_SWIG_Python.SoEvent_setAltDown(self, *args)
    def wasAltDown(self): return HEPVis_SWIG_Python.SoEvent_wasAltDown(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoEvent_initClass)
SoEvent_swigregister = HEPVis_SWIG_Python.SoEvent_swigregister
SoEvent_swigregister(SoEvent)

def SoEvent_getClassTypeId():
  return HEPVis_SWIG_Python.SoEvent_getClassTypeId()
SoEvent_getClassTypeId = HEPVis_SWIG_Python.SoEvent_getClassTypeId

def SoEvent_initClass():
  return HEPVis_SWIG_Python.SoEvent_initClass()
SoEvent_initClass = HEPVis_SWIG_Python.SoEvent_initClass

class SoNotRec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CONTAINER = HEPVis_SWIG_Python.SoNotRec_CONTAINER
    PARENT = HEPVis_SWIG_Python.SoNotRec_PARENT
    SENSOR = HEPVis_SWIG_Python.SoNotRec_SENSOR
    FIELD = HEPVis_SWIG_Python.SoNotRec_FIELD
    ENGINE = HEPVis_SWIG_Python.SoNotRec_ENGINE
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoNotRec(*args)
        try: self.this.append(this)
        except: self.this = this
    def setType(self, *args): return HEPVis_SWIG_Python.SoNotRec_setType(self, *args)
    def getBase(self): return HEPVis_SWIG_Python.SoNotRec_getBase(self)
    def getType(self): return HEPVis_SWIG_Python.SoNotRec_getType(self)
    def getPrevious(self): return HEPVis_SWIG_Python.SoNotRec_getPrevious(self)
    def setPrevious(self, *args): return HEPVis_SWIG_Python.SoNotRec_setPrevious(self, *args)
    def output(self, *args): return HEPVis_SWIG_Python.SoNotRec_output(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoNotRec
    __del__ = lambda self : None;
SoNotRec_swigregister = HEPVis_SWIG_Python.SoNotRec_swigregister
SoNotRec_swigregister(SoNotRec)

class SoNotList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoNotList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(self, *args): return HEPVis_SWIG_Python.SoNotList_append(self, *args)
    def setLastType(self, *args): return HEPVis_SWIG_Python.SoNotList_setLastType(self, *args)
    def getFirstRec(self): return HEPVis_SWIG_Python.SoNotList_getFirstRec(self)
    def getLastRec(self): return HEPVis_SWIG_Python.SoNotList_getLastRec(self)
    def getFirstRecAtNode(self): return HEPVis_SWIG_Python.SoNotList_getFirstRecAtNode(self)
    def getLastField(self): return HEPVis_SWIG_Python.SoNotList_getLastField(self)
    def getLastEngineOutput(self): return HEPVis_SWIG_Python.SoNotList_getLastEngineOutput(self)
    def getTimeStamp(self): return HEPVis_SWIG_Python.SoNotList_getTimeStamp(self)
    def output(self, *args): return HEPVis_SWIG_Python.SoNotList_output(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoNotList
    __del__ = lambda self : None;
SoNotList_swigregister = HEPVis_SWIG_Python.SoNotList_swigregister
SoNotList_swigregister(SoNotList)

class SoField(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoField
    __del__ = lambda self : None;
    initClass = staticmethod(HEPVis_SWIG_Python.SoField_initClass)
    initClasses = staticmethod(HEPVis_SWIG_Python.SoField_initClasses)
    def setIgnored(self, *args): return HEPVis_SWIG_Python.SoField_setIgnored(self, *args)
    def isIgnored(self): return HEPVis_SWIG_Python.SoField_isIgnored(self)
    def setDefault(self, *args): return HEPVis_SWIG_Python.SoField_setDefault(self, *args)
    def isDefault(self): return HEPVis_SWIG_Python.SoField_isDefault(self)
    def getTypeId(self): return HEPVis_SWIG_Python.SoField_getTypeId(self)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoField_getClassTypeId)
    def isOfType(self, *args): return HEPVis_SWIG_Python.SoField_isOfType(self, *args)
    def enableConnection(self, *args): return HEPVis_SWIG_Python.SoField_enableConnection(self, *args)
    def isConnectionEnabled(self): return HEPVis_SWIG_Python.SoField_isConnectionEnabled(self)
    def isConnectedFromEngine(self): return HEPVis_SWIG_Python.SoField_isConnectedFromEngine(self)
    def getConnectedEngine(self, *args): return HEPVis_SWIG_Python.SoField_getConnectedEngine(self, *args)
    def connectFrom(self, *args): return HEPVis_SWIG_Python.SoField_connectFrom(self, *args)
    def appendConnection(self, *args): return HEPVis_SWIG_Python.SoField_appendConnection(self, *args)
    def isConnectedFromField(self): return HEPVis_SWIG_Python.SoField_isConnectedFromField(self)
    def getConnectedField(self, *args): return HEPVis_SWIG_Python.SoField_getConnectedField(self, *args)
    def getNumConnections(self): return HEPVis_SWIG_Python.SoField_getNumConnections(self)
    def getForwardConnections(self, *args): return HEPVis_SWIG_Python.SoField_getForwardConnections(self, *args)
    def getConnections(self, *args): return HEPVis_SWIG_Python.SoField_getConnections(self, *args)
    def disconnect(self, *args): return HEPVis_SWIG_Python.SoField_disconnect(self, *args)
    def isConnected(self): return HEPVis_SWIG_Python.SoField_isConnected(self)
    def setContainer(self, *args): return HEPVis_SWIG_Python.SoField_setContainer(self, *args)
    def getContainer(self): return HEPVis_SWIG_Python.SoField_getContainer(self)
    def set(self, *args): return HEPVis_SWIG_Python.SoField_set(self, *args)
    def shouldWrite(self): return HEPVis_SWIG_Python.SoField_shouldWrite(self)
    def touch(self): return HEPVis_SWIG_Python.SoField_touch(self)
    def startNotify(self): return HEPVis_SWIG_Python.SoField_startNotify(self)
    def notify(self, *args): return HEPVis_SWIG_Python.SoField_notify(self, *args)
    def enableNotify(self, *args): return HEPVis_SWIG_Python.SoField_enableNotify(self, *args)
    def isNotifyEnabled(self): return HEPVis_SWIG_Python.SoField_isNotifyEnabled(self)
    def addAuditor(self, *args): return HEPVis_SWIG_Python.SoField_addAuditor(self, *args)
    def removeAuditor(self, *args): return HEPVis_SWIG_Python.SoField_removeAuditor(self, *args)
    def __eq__(self, *args): return HEPVis_SWIG_Python.SoField___eq__(self, *args)
    def __ne__(self, *args): return HEPVis_SWIG_Python.SoField___ne__(self, *args)
    def connectionStatusChanged(self, *args): return HEPVis_SWIG_Python.SoField_connectionStatusChanged(self, *args)
    def isReadOnly(self): return HEPVis_SWIG_Python.SoField_isReadOnly(self)
    def isSame(self, *args): return HEPVis_SWIG_Python.SoField_isSame(self, *args)
    def copyFrom(self, *args): return HEPVis_SWIG_Python.SoField_copyFrom(self, *args)
    def fixCopy(self, *args): return HEPVis_SWIG_Python.SoField_fixCopy(self, *args)
    def referencesCopy(self): return HEPVis_SWIG_Python.SoField_referencesCopy(self)
    def copyConnection(self, *args): return HEPVis_SWIG_Python.SoField_copyConnection(self, *args)
    def read(self, *args): return HEPVis_SWIG_Python.SoField_read(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoField_write(self, *args)
    def countWriteRefs(self, *args): return HEPVis_SWIG_Python.SoField_countWriteRefs(self, *args)
    NORMAL_FIELD = HEPVis_SWIG_Python.SoField_NORMAL_FIELD
    EVENTIN_FIELD = HEPVis_SWIG_Python.SoField_EVENTIN_FIELD
    EVENTOUT_FIELD = HEPVis_SWIG_Python.SoField_EVENTOUT_FIELD
    EXPOSED_FIELD = HEPVis_SWIG_Python.SoField_EXPOSED_FIELD
    def setFieldType(self, *args): return HEPVis_SWIG_Python.SoField_setFieldType(self, *args)
    def getFieldType(self): return HEPVis_SWIG_Python.SoField_getFieldType(self)
    def getDirty(self): return HEPVis_SWIG_Python.SoField_getDirty(self)
    def setDirty(self, *args): return HEPVis_SWIG_Python.SoField_setDirty(self, *args)
    def evaluate(self): return HEPVis_SWIG_Python.SoField_evaluate(self)
    def get(self): return HEPVis_SWIG_Python.SoField_get(self)
SoField_swigregister = HEPVis_SWIG_Python.SoField_swigregister
SoField_swigregister(SoField)

def SoField_initClass():
  return HEPVis_SWIG_Python.SoField_initClass()
SoField_initClass = HEPVis_SWIG_Python.SoField_initClass

def SoField_initClasses():
  return HEPVis_SWIG_Python.SoField_initClasses()
SoField_initClasses = HEPVis_SWIG_Python.SoField_initClasses

def SoField_getClassTypeId():
  return HEPVis_SWIG_Python.SoField_getClassTypeId()
SoField_getClassTypeId = HEPVis_SWIG_Python.SoField_getClassTypeId

class SoSField(SoField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSField
    __del__ = lambda self : None;
    initClass = staticmethod(HEPVis_SWIG_Python.SoSField_initClass)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSField_getClassTypeId)
SoSField_swigregister = HEPVis_SWIG_Python.SoSField_swigregister
SoSField_swigregister(SoSField)

def SoSField_initClass():
  return HEPVis_SWIG_Python.SoSField_initClass()
SoSField_initClass = HEPVis_SWIG_Python.SoSField_initClass

def SoSField_getClassTypeId():
  return HEPVis_SWIG_Python.SoSField_getClassTypeId()
SoSField_getClassTypeId = HEPVis_SWIG_Python.SoSField_getClassTypeId

class SoMField(SoField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoMField
    __del__ = lambda self : None;
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoMField_getClassTypeId)
    def getNum(self): return HEPVis_SWIG_Python.SoMField_getNum(self)
    def setNum(self, *args): return HEPVis_SWIG_Python.SoMField_setNum(self, *args)
    def deleteValues(self, *args): return HEPVis_SWIG_Python.SoMField_deleteValues(self, *args)
    def insertSpace(self, *args): return HEPVis_SWIG_Python.SoMField_insertSpace(self, *args)
    def set1(self, *args): return HEPVis_SWIG_Python.SoMField_set1(self, *args)
    def get1(self, *args): return HEPVis_SWIG_Python.SoMField_get1(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoMField_initClass)
    def enableDeleteValues(self): return HEPVis_SWIG_Python.SoMField_enableDeleteValues(self)
    def isDeleteValuesEnabled(self): return HEPVis_SWIG_Python.SoMField_isDeleteValuesEnabled(self)
    def __iter__(self):
       i = 0
       while i < self.getNum():
          yield self[i]
          i += 1

    def __len__(self, *args): return HEPVis_SWIG_Python.SoMField___len__(self, *args)
SoMField_swigregister = HEPVis_SWIG_Python.SoMField_swigregister
SoMField_swigregister(SoMField)

def SoMField_getClassTypeId():
  return HEPVis_SWIG_Python.SoMField_getClassTypeId()
SoMField_getClassTypeId = HEPVis_SWIG_Python.SoMField_getClassTypeId

def SoMField_initClass():
  return HEPVis_SWIG_Python.SoMField_initClass()
SoMField_initClass = HEPVis_SWIG_Python.SoMField_initClass

class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return HEPVis_SWIG_Python.SwigPyIterator_value(self)
    def incr(self, n=1): return HEPVis_SWIG_Python.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return HEPVis_SWIG_Python.SwigPyIterator_decr(self, n)
    def distance(self, *args): return HEPVis_SWIG_Python.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return HEPVis_SWIG_Python.SwigPyIterator_equal(self, *args)
    def copy(self): return HEPVis_SWIG_Python.SwigPyIterator_copy(self)
    def next(self): return HEPVis_SWIG_Python.SwigPyIterator_next(self)
    def __next__(self): return HEPVis_SWIG_Python.SwigPyIterator___next__(self)
    def previous(self): return HEPVis_SWIG_Python.SwigPyIterator_previous(self)
    def advance(self, *args): return HEPVis_SWIG_Python.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return HEPVis_SWIG_Python.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return HEPVis_SWIG_Python.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return HEPVis_SWIG_Python.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return HEPVis_SWIG_Python.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return HEPVis_SWIG_Python.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return HEPVis_SWIG_Python.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = HEPVis_SWIG_Python.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SbArguments(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbArguments(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbArguments
    __del__ = lambda self : None;
    def isAnArgument(self, *args): return HEPVis_SWIG_Python.SbArguments_isAnArgument(self, *args)
    def number(self): return HEPVis_SWIG_Python.SbArguments_number(self)
    def find(self, *args): return HEPVis_SWIG_Python.SbArguments_find(self, *args)
    def last(self, *args): return HEPVis_SWIG_Python.SbArguments_last(self, *args)
    def file(self, *args): return HEPVis_SWIG_Python.SbArguments_file(self, *args)
SbArguments_swigregister = HEPVis_SWIG_Python.SbArguments_swigregister
SbArguments_swigregister(SbArguments)


def SbFROUND(*args):
  return HEPVis_SWIG_Python.SbFROUND(*args)
SbFROUND = HEPVis_SWIG_Python.SbFROUND
class SbAxis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAxis
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbAxis(*args)
        try: self.this.append(this)
        except: self.this = this
    def setLogScale(self, *args): return HEPVis_SWIG_Python.SbAxis_setLogScale(self, *args)
    def setMinimumValue(self, *args): return HEPVis_SWIG_Python.SbAxis_setMinimumValue(self, *args)
    def setMaximumValue(self, *args): return HEPVis_SWIG_Python.SbAxis_setMaximumValue(self, *args)
    def getMinimumValue(self): return HEPVis_SWIG_Python.SbAxis_getMinimumValue(self)
    def getMaximumValue(self): return HEPVis_SWIG_Python.SbAxis_getMaximumValue(self)
    def isLogScale(self): return HEPVis_SWIG_Python.SbAxis_isLogScale(self)
    def adjustAxis(self): return HEPVis_SWIG_Python.SbAxis_adjustAxis(self)
SbAxis_swigregister = HEPVis_SWIG_Python.SbAxis_swigregister
SbAxis_swigregister(SbAxis)

class SbAxisHPLOT_Text(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbAxisHPLOT_Text(*args)
        try: self.this.append(this)
        except: self.this = this
    fX = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fX_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fX_set)
    fY = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fY_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fY_set)
    fAngle = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAngle_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAngle_set)
    fSize = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fSize_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fSize_set)
    fString = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fString_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fString_set)
    fAlign = _swig_property(HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAlign_get, HEPVis_SWIG_Python.SbAxisHPLOT_Text_fAlign_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAxisHPLOT_Text
    __del__ = lambda self : None;
SbAxisHPLOT_Text_swigregister = HEPVis_SWIG_Python.SbAxisHPLOT_Text_swigregister
SbAxisHPLOT_Text_swigregister(SbAxisHPLOT_Text)

class SbAxisHPLOT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbAxisHPLOT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAxisHPLOT
    __del__ = lambda self : None;
    def paint(self, *args): return HEPVis_SWIG_Python.SbAxisHPLOT_paint(self, *args)
    def setTitle(self, *args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTitle(self, *args)
    def setTimeFormat(self, *args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTimeFormat(self, *args)
    def setTimeOffset(self, *args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTimeOffset(self, *args)
    def setTickSize(self, *args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTickSize(self, *args)
    def setLabelOffset(self, *args): return HEPVis_SWIG_Python.SbAxisHPLOT_setLabelOffset(self, *args)
    def setLabelSize(self, *args): return HEPVis_SWIG_Python.SbAxisHPLOT_setLabelSize(self, *args)
    def setTitleOffset(self, *args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTitleOffset(self, *args)
    def setTitleSize(self, *args): return HEPVis_SWIG_Python.SbAxisHPLOT_setTitleSize(self, *args)
SbAxisHPLOT_swigregister = HEPVis_SWIG_Python.SbAxisHPLOT_swigregister
SbAxisHPLOT_swigregister(SbAxisHPLOT)

class bitmap_info(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_bitmap_info()
        try: self.this.append(this)
        except: self.this = this
    blur_bitmap = _swig_property(HEPVis_SWIG_Python.bitmap_info_blur_bitmap_get, HEPVis_SWIG_Python.bitmap_info_blur_bitmap_set)
    crop_bitmap = _swig_property(HEPVis_SWIG_Python.bitmap_info_crop_bitmap_get, HEPVis_SWIG_Python.bitmap_info_crop_bitmap_set)
    make_transparent = _swig_property(HEPVis_SWIG_Python.bitmap_info_make_transparent_get, HEPVis_SWIG_Python.bitmap_info_make_transparent_set)
    bitmap_scale_factor = _swig_property(HEPVis_SWIG_Python.bitmap_info_bitmap_scale_factor_get, HEPVis_SWIG_Python.bitmap_info_bitmap_scale_factor_set)
    ofile_pattern = _swig_property(HEPVis_SWIG_Python.bitmap_info_ofile_pattern_get, HEPVis_SWIG_Python.bitmap_info_ofile_pattern_set)
    ofile_name = _swig_property(HEPVis_SWIG_Python.bitmap_info_ofile_name_get, HEPVis_SWIG_Python.bitmap_info_ofile_name_set)
    ofile_type = _swig_property(HEPVis_SWIG_Python.bitmap_info_ofile_type_get, HEPVis_SWIG_Python.bitmap_info_ofile_type_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_bitmap_info
    __del__ = lambda self : None;
bitmap_info_swigregister = HEPVis_SWIG_Python.bitmap_info_swigregister
bitmap_info_swigregister(bitmap_info)

DVI2BITMAPURL = HEPVis_SWIG_Python.DVI2BITMAPURL
class SbDVI(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbDVI()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbDVI
    __del__ = lambda self : None;
    def getImageFromStream(self, *args): return HEPVis_SWIG_Python.SbDVI_getImageFromStream(self, *args)
    def setFontGen(self, *args): return HEPVis_SWIG_Python.SbDVI_setFontGen(self, *args)
    def setForeground(self, *args): return HEPVis_SWIG_Python.SbDVI_setForeground(self, *args)
    def setBackground(self, *args): return HEPVis_SWIG_Python.SbDVI_setBackground(self, *args)
    def setTransparent(self, *args): return HEPVis_SWIG_Python.SbDVI_setTransparent(self, *args)
    def setBlur(self, *args): return HEPVis_SWIG_Python.SbDVI_setBlur(self, *args)
    def setBitmapScaleFactor(self, *args): return HEPVis_SWIG_Python.SbDVI_setBitmapScaleFactor(self, *args)
    def setResolution(self, *args): return HEPVis_SWIG_Python.SbDVI_setResolution(self, *args)
SbDVI_swigregister = HEPVis_SWIG_Python.SbDVI_swigregister
SbDVI_swigregister(SbDVI)

class SbFile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def openDirectory(self, *args): return HEPVis_SWIG_Python.SbFile_openDirectory(self, *args)
    def getDirectoryEntry(self, *args): return HEPVis_SWIG_Python.SbFile_getDirectoryEntry(self, *args)
    def closeDirectory(self, *args): return HEPVis_SWIG_Python.SbFile_closeDirectory(self, *args)
    getDirectoryFiles = staticmethod(HEPVis_SWIG_Python.SbFile_getDirectoryFiles)
    getDirectoryDirectories = staticmethod(HEPVis_SWIG_Python.SbFile_getDirectoryDirectories)
    dumpDirectory = staticmethod(HEPVis_SWIG_Python.SbFile_dumpDirectory)
    isDirectory = staticmethod(HEPVis_SWIG_Python.SbFile_isDirectory)
    getWorkingDirectory = staticmethod(HEPVis_SWIG_Python.SbFile_getWorkingDirectory)
    tmpname = staticmethod(HEPVis_SWIG_Python.SbFile_tmpname)
    getFullName = staticmethod(HEPVis_SWIG_Python.SbFile_getFullName)
    exists = staticmethod(HEPVis_SWIG_Python.SbFile_exists)
    remove = staticmethod(HEPVis_SWIG_Python.SbFile_remove)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbFile
    __del__ = lambda self : None;
SbFile_swigregister = HEPVis_SWIG_Python.SbFile_swigregister
SbFile_swigregister(SbFile)

def SbFile_getDirectoryFiles(*args):
  return HEPVis_SWIG_Python.SbFile_getDirectoryFiles(*args)
SbFile_getDirectoryFiles = HEPVis_SWIG_Python.SbFile_getDirectoryFiles

def SbFile_getDirectoryDirectories(*args):
  return HEPVis_SWIG_Python.SbFile_getDirectoryDirectories(*args)
SbFile_getDirectoryDirectories = HEPVis_SWIG_Python.SbFile_getDirectoryDirectories

def SbFile_dumpDirectory(*args):
  return HEPVis_SWIG_Python.SbFile_dumpDirectory(*args)
SbFile_dumpDirectory = HEPVis_SWIG_Python.SbFile_dumpDirectory

def SbFile_isDirectory(*args):
  return HEPVis_SWIG_Python.SbFile_isDirectory(*args)
SbFile_isDirectory = HEPVis_SWIG_Python.SbFile_isDirectory

def SbFile_getWorkingDirectory():
  return HEPVis_SWIG_Python.SbFile_getWorkingDirectory()
SbFile_getWorkingDirectory = HEPVis_SWIG_Python.SbFile_getWorkingDirectory

def SbFile_tmpname(*args):
  return HEPVis_SWIG_Python.SbFile_tmpname(*args)
SbFile_tmpname = HEPVis_SWIG_Python.SbFile_tmpname

def SbFile_getFullName(*args):
  return HEPVis_SWIG_Python.SbFile_getFullName(*args)
SbFile_getFullName = HEPVis_SWIG_Python.SbFile_getFullName

def SbFile_exists(*args):
  return HEPVis_SWIG_Python.SbFile_exists(*args)
SbFile_exists = HEPVis_SWIG_Python.SbFile_exists

def SbFile_remove(*args):
  return HEPVis_SWIG_Python.SbFile_remove(*args)
SbFile_remove = HEPVis_SWIG_Python.SbFile_remove

class SbFITS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getImageFromStream = staticmethod(HEPVis_SWIG_Python.SbFITS_getImageFromStream)
    getHeaderFromStream = staticmethod(HEPVis_SWIG_Python.SbFITS_getHeaderFromStream)
    dumpHeaderInStream = staticmethod(HEPVis_SWIG_Python.SbFITS_dumpHeaderInStream)
    putImageInStream = staticmethod(HEPVis_SWIG_Python.SbFITS_putImageInStream)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbFITS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbFITS
    __del__ = lambda self : None;
SbFITS_swigregister = HEPVis_SWIG_Python.SbFITS_swigregister
SbFITS_swigregister(SbFITS)

def SbFITS_getImageFromStream(*args):
  return HEPVis_SWIG_Python.SbFITS_getImageFromStream(*args)
SbFITS_getImageFromStream = HEPVis_SWIG_Python.SbFITS_getImageFromStream

def SbFITS_getHeaderFromStream(*args):
  return HEPVis_SWIG_Python.SbFITS_getHeaderFromStream(*args)
SbFITS_getHeaderFromStream = HEPVis_SWIG_Python.SbFITS_getHeaderFromStream

def SbFITS_dumpHeaderInStream(*args):
  return HEPVis_SWIG_Python.SbFITS_dumpHeaderInStream(*args)
SbFITS_dumpHeaderInStream = HEPVis_SWIG_Python.SbFITS_dumpHeaderInStream

def SbFITS_putImageInStream(*args):
  return HEPVis_SWIG_Python.SbFITS_putImageInStream(*args)
SbFITS_putImageInStream = HEPVis_SWIG_Python.SbFITS_putImageInStream

class SbGIF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getImageFromStream = staticmethod(HEPVis_SWIG_Python.SbGIF_getImageFromStream)
    putBytesInStream = staticmethod(HEPVis_SWIG_Python.SbGIF_putBytesInStream)
    putImageInStream = staticmethod(HEPVis_SWIG_Python.SbGIF_putImageInStream)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbGIF()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbGIF
    __del__ = lambda self : None;
SbGIF_swigregister = HEPVis_SWIG_Python.SbGIF_swigregister
SbGIF_swigregister(SbGIF)

def SbGIF_getImageFromStream(*args):
  return HEPVis_SWIG_Python.SbGIF_getImageFromStream(*args)
SbGIF_getImageFromStream = HEPVis_SWIG_Python.SbGIF_getImageFromStream

def SbGIF_putBytesInStream(*args):
  return HEPVis_SWIG_Python.SbGIF_putBytesInStream(*args)
SbGIF_putBytesInStream = HEPVis_SWIG_Python.SbGIF_putBytesInStream

def SbGIF_putImageInStream(*args):
  return HEPVis_SWIG_Python.SbGIF_putImageInStream(*args)
SbGIF_putImageInStream = HEPVis_SWIG_Python.SbGIF_putImageInStream

class SbHatch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbHatch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbHatch
    __del__ = lambda self : None;
    def computePolyline(self, *args): return HEPVis_SWIG_Python.SbHatch_computePolyline(self, *args)
    def checkPolyline(self, *args): return HEPVis_SWIG_Python.SbHatch_checkPolyline(self, *args)
    def setSpacing(self, *args): return HEPVis_SWIG_Python.SbHatch_setSpacing(self, *args)
    def setAngle(self, *args): return HEPVis_SWIG_Python.SbHatch_setAngle(self, *args)
    def setOffset(self, *args): return HEPVis_SWIG_Python.SbHatch_setOffset(self, *args)
    def setOffsetPoint(self, *args): return HEPVis_SWIG_Python.SbHatch_setOffsetPoint(self, *args)
    def setPrecisionFactor(self, *args): return HEPVis_SWIG_Python.SbHatch_setPrecisionFactor(self, *args)
    def setStripWidth(self, *args): return HEPVis_SWIG_Python.SbHatch_setStripWidth(self, *args)
    def getSpacing(self): return HEPVis_SWIG_Python.SbHatch_getSpacing(self)
    def getAngle(self): return HEPVis_SWIG_Python.SbHatch_getAngle(self)
    def getOffset(self): return HEPVis_SWIG_Python.SbHatch_getOffset(self)
    def getOffsetPoint(self): return HEPVis_SWIG_Python.SbHatch_getOffsetPoint(self)
    def getPrecisionFactor(self): return HEPVis_SWIG_Python.SbHatch_getPrecisionFactor(self)
    def getStripWidth(self): return HEPVis_SWIG_Python.SbHatch_getStripWidth(self)
    def getNormal(self): return HEPVis_SWIG_Python.SbHatch_getNormal(self)
    def getNoPoints(self): return HEPVis_SWIG_Python.SbHatch_getNoPoints(self)
    def getPoints(self): return HEPVis_SWIG_Python.SbHatch_getPoints(self)
    def getNoVertices(self): return HEPVis_SWIG_Python.SbHatch_getNoVertices(self)
    def getVertices(self): return HEPVis_SWIG_Python.SbHatch_getVertices(self)
SbHatch_swigregister = HEPVis_SWIG_Python.SbHatch_swigregister
SbHatch_swigregister(SbHatch)

class SbHatching(SbHatch):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbHatching
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbHatching(*args)
        try: self.this.append(this)
        except: self.this = this
    def addPolyline(self, *args): return HEPVis_SWIG_Python.SbHatching_addPolyline(self, *args)
    def getHatchPointsList(self): return HEPVis_SWIG_Python.SbHatching_getHatchPointsList(self)
    def getHatchNumVerticesList(self): return HEPVis_SWIG_Python.SbHatching_getHatchNumVerticesList(self)
    def getCornerMinBB(self): return HEPVis_SWIG_Python.SbHatching_getCornerMinBB(self)
    def getCornerMaxBB(self): return HEPVis_SWIG_Python.SbHatching_getCornerMaxBB(self)
    def getNumPointsList(self): return HEPVis_SWIG_Python.SbHatching_getNumPointsList(self)
    def getNumVertices(self): return HEPVis_SWIG_Python.SbHatching_getNumVertices(self)
SbHatching_swigregister = HEPVis_SWIG_Python.SbHatching_swigregister
SbHatching_swigregister(SbHatching)

class SbJGIF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    beginGIF_Stream = staticmethod(HEPVis_SWIG_Python.SbJGIF_beginGIF_Stream)
    putColormapInGIF_Stream = staticmethod(HEPVis_SWIG_Python.SbJGIF_putColormapInGIF_Stream)
    putImageInGIF_Stream = staticmethod(HEPVis_SWIG_Python.SbJGIF_putImageInGIF_Stream)
    endGIF_Stream = staticmethod(HEPVis_SWIG_Python.SbJGIF_endGIF_Stream)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbJGIF()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbJGIF
    __del__ = lambda self : None;
SbJGIF_swigregister = HEPVis_SWIG_Python.SbJGIF_swigregister
SbJGIF_swigregister(SbJGIF)

def SbJGIF_beginGIF_Stream(*args):
  return HEPVis_SWIG_Python.SbJGIF_beginGIF_Stream(*args)
SbJGIF_beginGIF_Stream = HEPVis_SWIG_Python.SbJGIF_beginGIF_Stream

def SbJGIF_putColormapInGIF_Stream(*args):
  return HEPVis_SWIG_Python.SbJGIF_putColormapInGIF_Stream(*args)
SbJGIF_putColormapInGIF_Stream = HEPVis_SWIG_Python.SbJGIF_putColormapInGIF_Stream

def SbJGIF_putImageInGIF_Stream(*args):
  return HEPVis_SWIG_Python.SbJGIF_putImageInGIF_Stream(*args)
SbJGIF_putImageInGIF_Stream = HEPVis_SWIG_Python.SbJGIF_putImageInGIF_Stream

def SbJGIF_endGIF_Stream():
  return HEPVis_SWIG_Python.SbJGIF_endGIF_Stream()
SbJGIF_endGIF_Stream = HEPVis_SWIG_Python.SbJGIF_endGIF_Stream

class SbJPEG(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    writeFile = staticmethod(HEPVis_SWIG_Python.SbJPEG_writeFile)
    readFile = staticmethod(HEPVis_SWIG_Python.SbJPEG_readFile)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbJPEG()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbJPEG
    __del__ = lambda self : None;
SbJPEG_swigregister = HEPVis_SWIG_Python.SbJPEG_swigregister
SbJPEG_swigregister(SbJPEG)

def SbJPEG_writeFile(*args):
  return HEPVis_SWIG_Python.SbJPEG_writeFile(*args)
SbJPEG_writeFile = HEPVis_SWIG_Python.SbJPEG_writeFile

def SbJPEG_readFile(*args):
  return HEPVis_SWIG_Python.SbJPEG_readFile(*args)
SbJPEG_readFile = HEPVis_SWIG_Python.SbJPEG_readFile

class SbLatex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def fileToDvi(self, *args): return HEPVis_SWIG_Python.SbLatex_fileToDvi(self, *args)
    def strToDvi(self, *args): return HEPVis_SWIG_Python.SbLatex_strToDvi(self, *args)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbLatex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbLatex
    __del__ = lambda self : None;
SbLatex_swigregister = HEPVis_SWIG_Python.SbLatex_swigregister
SbLatex_swigregister(SbLatex)

class SbLUT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    IDENTITY = HEPVis_SWIG_Python.SbLUT_IDENTITY
    LINEAR = HEPVis_SWIG_Python.SbLUT_LINEAR
    LOG = HEPVis_SWIG_Python.SbLUT_LOG
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbLUT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbLUT
    __del__ = lambda self : None;
    def initialize(self, *args): return HEPVis_SWIG_Python.SbLUT_initialize(self, *args)
    def getCellNumber(self): return HEPVis_SWIG_Python.SbLUT_getCellNumber(self)
    def getCells(self): return HEPVis_SWIG_Python.SbLUT_getCells(self)
SbLUT_swigregister = HEPVis_SWIG_Python.SbLUT_swigregister
SbLUT_swigregister(SbLUT)

SbMarkerDot = HEPVis_SWIG_Python.SbMarkerDot
SbMarkerPlus = HEPVis_SWIG_Python.SbMarkerPlus
SbMarkerAsterisk = HEPVis_SWIG_Python.SbMarkerAsterisk
SbMarkerCross = HEPVis_SWIG_Python.SbMarkerCross
SbMarkerStar = HEPVis_SWIG_Python.SbMarkerStar
SbMarkerCircleLine = HEPVis_SWIG_Python.SbMarkerCircleLine
SbMarkerCircleFilled = HEPVis_SWIG_Python.SbMarkerCircleFilled
SbMarkerTriangleUpLine = HEPVis_SWIG_Python.SbMarkerTriangleUpLine
SbMarkerTriangleUpFilled = HEPVis_SWIG_Python.SbMarkerTriangleUpFilled
SbMarkerTriangleDownLine = HEPVis_SWIG_Python.SbMarkerTriangleDownLine
SbMarkerTriangleDownFilled = HEPVis_SWIG_Python.SbMarkerTriangleDownFilled
SbMarkerDavidStarLine = HEPVis_SWIG_Python.SbMarkerDavidStarLine
SbMarkerDavidStarFilled = HEPVis_SWIG_Python.SbMarkerDavidStarFilled
SbMarkerSwissCrossLine = HEPVis_SWIG_Python.SbMarkerSwissCrossLine
SbMarkerSwissCrossFilled = HEPVis_SWIG_Python.SbMarkerSwissCrossFilled
SbMarkerDiamondLine = HEPVis_SWIG_Python.SbMarkerDiamondLine
SbMarkerDiamondFilled = HEPVis_SWIG_Python.SbMarkerDiamondFilled
SbMarkerSquareLine = HEPVis_SWIG_Python.SbMarkerSquareLine
SbMarkerSquareFilled = HEPVis_SWIG_Python.SbMarkerSquareFilled
SbMarkerPentaStarLine = HEPVis_SWIG_Python.SbMarkerPentaStarLine
SbMarkerPentaStarFilled = HEPVis_SWIG_Python.SbMarkerPentaStarFilled
SbAreaSolid = HEPVis_SWIG_Python.SbAreaSolid
SbAreaHatched = HEPVis_SWIG_Python.SbAreaHatched
SbAreaChecker = HEPVis_SWIG_Python.SbAreaChecker
SbAreaEdged = HEPVis_SWIG_Python.SbAreaEdged
SbProjectionNone = HEPVis_SWIG_Python.SbProjectionNone
SbProjectionRZ = HEPVis_SWIG_Python.SbProjectionRZ
SbProjectionPHIZ = HEPVis_SWIG_Python.SbProjectionPHIZ
SbProjectionZR = HEPVis_SWIG_Python.SbProjectionZR
SbProjectionZPHI = HEPVis_SWIG_Python.SbProjectionZPHI
SbPaintingUniform = HEPVis_SWIG_Python.SbPaintingUniform
SbPaintingByValue = HEPVis_SWIG_Python.SbPaintingByValue
SbPaintingByLevel = HEPVis_SWIG_Python.SbPaintingByLevel
SbPaintingGreyScale = HEPVis_SWIG_Python.SbPaintingGreyScale
SbPaintingVioletToRed = HEPVis_SWIG_Python.SbPaintingVioletToRed
SbPaintingGreyScaleInverse = HEPVis_SWIG_Python.SbPaintingGreyScaleInverse
SbHatchingNone = HEPVis_SWIG_Python.SbHatchingNone
SbHatchingRight = HEPVis_SWIG_Python.SbHatchingRight
SbHatchingLeft = HEPVis_SWIG_Python.SbHatchingLeft
SbHatchingLeftAndRight = HEPVis_SWIG_Python.SbHatchingLeftAndRight
SbLinePattern_solid = HEPVis_SWIG_Python.SbLinePattern_solid
SbLinePattern_dashed = HEPVis_SWIG_Python.SbLinePattern_dashed
SbLinePattern_dotted = HEPVis_SWIG_Python.SbLinePattern_dotted
SbLinePattern_dash_dotted = HEPVis_SWIG_Python.SbLinePattern_dash_dotted
SbLinePattern_s_solid = HEPVis_SWIG_Python.SbLinePattern_s_solid
SbLinePattern_s_dashed = HEPVis_SWIG_Python.SbLinePattern_s_dashed
SbLinePattern_s_dotted = HEPVis_SWIG_Python.SbLinePattern_s_dotted
SbLinePattern_s_dash_dotted = HEPVis_SWIG_Python.SbLinePattern_s_dash_dotted
SbModeling_boxes = HEPVis_SWIG_Python.SbModeling_boxes
SbModeling_wire_boxes = HEPVis_SWIG_Python.SbModeling_wire_boxes
SbModeling_lines = HEPVis_SWIG_Python.SbModeling_lines
SbModeling_segments = HEPVis_SWIG_Python.SbModeling_segments
SbModeling_points = HEPVis_SWIG_Python.SbModeling_points
SbModeling_top_lines = HEPVis_SWIG_Python.SbModeling_top_lines
SbModeling_texts = HEPVis_SWIG_Python.SbModeling_texts
SbModeling_curve = HEPVis_SWIG_Python.SbModeling_curve
SbModeling_filled_curve = HEPVis_SWIG_Python.SbModeling_filled_curve
SbModeling_bar_chart = HEPVis_SWIG_Python.SbModeling_bar_chart
SbModeling_solid = HEPVis_SWIG_Python.SbModeling_solid
SbModeling_wire_frame = HEPVis_SWIG_Python.SbModeling_wire_frame
SbModeling_reduced_wire_frame = HEPVis_SWIG_Python.SbModeling_reduced_wire_frame
SbModeling_polygon = HEPVis_SWIG_Python.SbModeling_polygon
SbModeling_none = HEPVis_SWIG_Python.SbModeling_none
SbEncoding_none = HEPVis_SWIG_Python.SbEncoding_none
SbEncoding_PAW = HEPVis_SWIG_Python.SbEncoding_PAW
SbEncoding_Latex = HEPVis_SWIG_Python.SbEncoding_Latex
SbTickModeling_none = HEPVis_SWIG_Python.SbTickModeling_none
SbTickModeling_hippo = HEPVis_SWIG_Python.SbTickModeling_hippo
SbTickModeling_hplot = HEPVis_SWIG_Python.SbTickModeling_hplot
SbPainting_uniform = HEPVis_SWIG_Python.SbPainting_uniform
SbPainting_by_value = HEPVis_SWIG_Python.SbPainting_by_value
SbPainting_by_level = HEPVis_SWIG_Python.SbPainting_by_level
SbPainting_grey_scale = HEPVis_SWIG_Python.SbPainting_grey_scale
SbPainting_violet_to_red = HEPVis_SWIG_Python.SbPainting_violet_to_red
SbFont_ROOT_12 = HEPVis_SWIG_Python.SbFont_ROOT_12
SbFont_ROOT_22 = HEPVis_SWIG_Python.SbFont_ROOT_22
SbFont_ROOT_32 = HEPVis_SWIG_Python.SbFont_ROOT_32
SbFont_ROOT_42 = HEPVis_SWIG_Python.SbFont_ROOT_42
SbFont_ROOT_52 = HEPVis_SWIG_Python.SbFont_ROOT_52
SbFont_ROOT_62 = HEPVis_SWIG_Python.SbFont_ROOT_62
SbFont_ROOT_72 = HEPVis_SWIG_Python.SbFont_ROOT_72
SbFont_ROOT_82 = HEPVis_SWIG_Python.SbFont_ROOT_82
SbFont_ROOT_92 = HEPVis_SWIG_Python.SbFont_ROOT_92
SbFont_ROOT_102 = HEPVis_SWIG_Python.SbFont_ROOT_102
SbFont_ROOT_112 = HEPVis_SWIG_Python.SbFont_ROOT_112
SbFont_ROOT_122 = HEPVis_SWIG_Python.SbFont_ROOT_122
SbFont_ROOT_132 = HEPVis_SWIG_Python.SbFont_ROOT_132
SbFont_ROOT_142 = HEPVis_SWIG_Python.SbFont_ROOT_142
SbFont_Hershey = HEPVis_SWIG_Python.SbFont_Hershey
SbFont_times = HEPVis_SWIG_Python.SbFont_times
SbLightModel_base_color = HEPVis_SWIG_Python.SbLightModel_base_color
SbLightModel_phong = HEPVis_SWIG_Python.SbLightModel_phong
SbPrimitivePoints = HEPVis_SWIG_Python.SbPrimitivePoints
SbPrimitiveLineStrip = HEPVis_SWIG_Python.SbPrimitiveLineStrip
SbPrimitiveLineLoop = HEPVis_SWIG_Python.SbPrimitiveLineLoop
SbPrimitiveLines = HEPVis_SWIG_Python.SbPrimitiveLines
SbPrimitivePolygon = HEPVis_SWIG_Python.SbPrimitivePolygon
class SbPainterContext(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fRed = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fRed_get, HEPVis_SWIG_Python.SbPainterContext_fRed_set)
    fGreen = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fGreen_get, HEPVis_SWIG_Python.SbPainterContext_fGreen_set)
    fBlue = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fBlue_get, HEPVis_SWIG_Python.SbPainterContext_fBlue_set)
    fLineWidth = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fLineWidth_get, HEPVis_SWIG_Python.SbPainterContext_fLineWidth_set)
    fLinePattern = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fLinePattern_get, HEPVis_SWIG_Python.SbPainterContext_fLinePattern_set)
    fMarkerSize = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fMarkerSize_get, HEPVis_SWIG_Python.SbPainterContext_fMarkerSize_set)
    fMarkerStyle = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fMarkerStyle_get, HEPVis_SWIG_Python.SbPainterContext_fMarkerStyle_set)
    fAreaStyle = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fAreaStyle_get, HEPVis_SWIG_Python.SbPainterContext_fAreaStyle_set)
    fPolygonMode = _swig_property(HEPVis_SWIG_Python.SbPainterContext_fPolygonMode_get, HEPVis_SWIG_Python.SbPainterContext_fPolygonMode_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbPainterContext()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPainterContext
    __del__ = lambda self : None;
SbPainterContext_swigregister = HEPVis_SWIG_Python.SbPainterContext_swigregister
SbPainterContext_swigregister(SbPainterContext)

class SbPainter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPainter
    __del__ = lambda self : None;
    def setWindowSize(self, *args): return HEPVis_SWIG_Python.SbPainter_setWindowSize(self, *args)
    def enableEdges(self, *args): return HEPVis_SWIG_Python.SbPainter_enableEdges(self, *args)
    def beginTraversal(self): return HEPVis_SWIG_Python.SbPainter_beginTraversal(self)
    def clearColorBuffer(self, *args): return HEPVis_SWIG_Python.SbPainter_clearColorBuffer(self, *args)
    def drawPrimitive(self, *args): return HEPVis_SWIG_Python.SbPainter_drawPrimitive(self, *args)
    def endTraversal(self): return HEPVis_SWIG_Python.SbPainter_endTraversal(self)
SbPainter_swigregister = HEPVis_SWIG_Python.SbPainter_swigregister
SbPainter_swigregister(SbPainter)

class SbPainterPS(SbPainter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbPainterPS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPainterPS
    __del__ = lambda self : None;
    def beginTraversal(self): return HEPVis_SWIG_Python.SbPainterPS_beginTraversal(self)
    def clearColorBuffer(self, *args): return HEPVis_SWIG_Python.SbPainterPS_clearColorBuffer(self, *args)
    def drawPrimitive(self, *args): return HEPVis_SWIG_Python.SbPainterPS_drawPrimitive(self, *args)
    def endTraversal(self): return HEPVis_SWIG_Python.SbPainterPS_endTraversal(self)
    def setColorScheme(self, *args): return HEPVis_SWIG_Python.SbPainterPS_setColorScheme(self, *args)
    def setOrientation(self, *args): return HEPVis_SWIG_Python.SbPainterPS_setOrientation(self, *args)
    def setBackgroundDrawn(self, *args): return HEPVis_SWIG_Python.SbPainterPS_setBackgroundDrawn(self, *args)
    def setBitsPerPixel(self, *args): return HEPVis_SWIG_Python.SbPainterPS_setBitsPerPixel(self, *args)
    def setLineWidth(self, *args): return HEPVis_SWIG_Python.SbPainterPS_setLineWidth(self, *args)
    def getStream(self): return HEPVis_SWIG_Python.SbPainterPS_getStream(self)
    def setFileName(self, *args): return HEPVis_SWIG_Python.SbPainterPS_setFileName(self, *args)
    def getFileName(self): return HEPVis_SWIG_Python.SbPainterPS_getFileName(self)
    def openFileForWriting(self, *args): return HEPVis_SWIG_Python.SbPainterPS_openFileForWriting(self, *args)
    def closeStream(self): return HEPVis_SWIG_Python.SbPainterPS_closeStream(self)
    def putPageScaleInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putPageScaleInStream(self, *args)
    def putSaveStateInStream(self): return HEPVis_SWIG_Python.SbPainterPS_putSaveStateInStream(self)
    def putRestoreStateInStream(self): return HEPVis_SWIG_Python.SbPainterPS_putRestoreStateInStream(self)
    def putTranslationInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putTranslationInStream(self, *args)
    def putScaleInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putScaleInStream(self, *args)
    def putBeginPageInStream(self): return HEPVis_SWIG_Python.SbPainterPS_putBeginPageInStream(self)
    def putEndPageInStream(self): return HEPVis_SWIG_Python.SbPainterPS_putEndPageInStream(self)
    def putRGB_InStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putRGB_InStream(self, *args)
    def putMarkerSizeInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putMarkerSizeInStream(self, *args)
    def putMarkerStyleInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putMarkerStyleInStream(self, *args)
    def putBackgroundInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putBackgroundInStream(self, *args)
    def putFrameInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putFrameInStream(self, *args)
    def putRotateInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putRotateInStream(self, *args)
    def putNewPathInStream(self): return HEPVis_SWIG_Python.SbPainterPS_putNewPathInStream(self)
    def putStrokeInStream(self): return HEPVis_SWIG_Python.SbPainterPS_putStrokeInStream(self)
    def putFillInStream(self): return HEPVis_SWIG_Python.SbPainterPS_putFillInStream(self)
    def putClosePathInStream(self): return HEPVis_SWIG_Python.SbPainterPS_putClosePathInStream(self)
    def putCapInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putCapInStream(self, *args)
    def putLineToInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putLineToInStream(self, *args)
    def putMoveInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putMoveInStream(self, *args)
    def putCircleInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putCircleInStream(self, *args)
    def putLineWidthInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putLineWidthInStream(self, *args)
    def putLinePatternInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putLinePatternInStream(self, *args)
    def putImageInStream(self, *args): return HEPVis_SWIG_Python.SbPainterPS_putImageInStream(self, *args)
SbPainterPS_swigregister = HEPVis_SWIG_Python.SbPainterPS_swigregister
SbPainterPS_swigregister(SbPainterPS)


def figure2bitmap(*args):
  return HEPVis_SWIG_Python.figure2bitmap(*args)
figure2bitmap = HEPVis_SWIG_Python.figure2bitmap

def rotateBitmap(*args):
  return HEPVis_SWIG_Python.rotateBitmap(*args)
rotateBitmap = HEPVis_SWIG_Python.rotateBitmap

def createBarBitmap(*args):
  return HEPVis_SWIG_Python.createBarBitmap(*args)
createBarBitmap = HEPVis_SWIG_Python.createBarBitmap

def rotatePixmap(*args):
  return HEPVis_SWIG_Python.rotatePixmap(*args)
rotatePixmap = HEPVis_SWIG_Python.rotatePixmap

def GIFToGL(*args):
  return HEPVis_SWIG_Python.GIFToGL(*args)
GIFToGL = HEPVis_SWIG_Python.GIFToGL

def JPEGToGL(*args):
  return HEPVis_SWIG_Python.JPEGToGL(*args)
JPEGToGL = HEPVis_SWIG_Python.JPEGToGL

def getRGB(*args):
  return HEPVis_SWIG_Python.getRGB(*args)
getRGB = HEPVis_SWIG_Python.getRGB

def FITSToGL(*args):
  return HEPVis_SWIG_Python.FITSToGL(*args)
FITSToGL = HEPVis_SWIG_Python.FITSToGL
class SbPlottableObject(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableObject
    __del__ = lambda self : None;
    def isValid(self): return HEPVis_SWIG_Python.SbPlottableObject_isValid(self)
    def cast(self, *args): return HEPVis_SWIG_Python.SbPlottableObject_cast(self, *args)
    def getInfos(self, *args): return HEPVis_SWIG_Python.SbPlottableObject_getInfos(self, *args)
    def getName(self): return HEPVis_SWIG_Python.SbPlottableObject_getName(self)
    def getLabel(self): return HEPVis_SWIG_Python.SbPlottableObject_getLabel(self)
    def getLegend(self): return HEPVis_SWIG_Python.SbPlottableObject_getLegend(self)
    def getDimension(self): return HEPVis_SWIG_Python.SbPlottableObject_getDimension(self)
SbPlottableObject_swigregister = HEPVis_SWIG_Python.SbPlottableObject_swigregister
SbPlottableObject_swigregister(SbPlottableObject)

class SbPlottableBins1D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableBins1D
    __del__ = lambda self : None;
    def getBinsSumOfWeightsRange(self, *args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinsSumOfWeightsRange(self, *args)
    def getAxisNumberOfBins(self): return HEPVis_SWIG_Python.SbPlottableBins1D_getAxisNumberOfBins(self)
    def getAxisMinimum(self): return HEPVis_SWIG_Python.SbPlottableBins1D_getAxisMinimum(self)
    def getAxisMaximum(self): return HEPVis_SWIG_Python.SbPlottableBins1D_getAxisMaximum(self)
    def getBinLowerEdge(self, *args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinLowerEdge(self, *args)
    def getBinUpperEdge(self, *args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinUpperEdge(self, *args)
    def getBinNumberOfEntries(self, *args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinNumberOfEntries(self, *args)
    def getBinSumOfWeights(self, *args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinSumOfWeights(self, *args)
    def getBinBar(self, *args): return HEPVis_SWIG_Python.SbPlottableBins1D_getBinBar(self, *args)
SbPlottableBins1D_swigregister = HEPVis_SWIG_Python.SbPlottableBins1D_swigregister
SbPlottableBins1D_swigregister(SbPlottableBins1D)

class SbPlottableBins2D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableBins2D
    __del__ = lambda self : None;
    def getBinsSumOfWeightsRange(self, *args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinsSumOfWeightsRange(self, *args)
    def getAxisNumberOfBinsX(self): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisNumberOfBinsX(self)
    def getAxisMinimumX(self): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMinimumX(self)
    def getAxisMaximumX(self): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMaximumX(self)
    def getAxisNumberOfBinsY(self): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisNumberOfBinsY(self)
    def getAxisMinimumY(self): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMinimumY(self)
    def getAxisMaximumY(self): return HEPVis_SWIG_Python.SbPlottableBins2D_getAxisMaximumY(self)
    def getBinLowerEdgeX(self, *args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinLowerEdgeX(self, *args)
    def getBinUpperEdgeX(self, *args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinUpperEdgeX(self, *args)
    def getBinLowerEdgeY(self, *args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinLowerEdgeY(self, *args)
    def getBinUpperEdgeY(self, *args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinUpperEdgeY(self, *args)
    def getBinNumberOfEntries(self, *args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinNumberOfEntries(self, *args)
    def getBinSumOfWeights(self, *args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinSumOfWeights(self, *args)
    def getBinBar(self, *args): return HEPVis_SWIG_Python.SbPlottableBins2D_getBinBar(self, *args)
SbPlottableBins2D_swigregister = HEPVis_SWIG_Python.SbPlottableBins2D_swigregister
SbPlottableBins2D_swigregister(SbPlottableBins2D)

class SbPlottablePoints2D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottablePoints2D
    __del__ = lambda self : None;
    def getAxisMinimumX(self): return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMinimumX(self)
    def getAxisMaximumX(self): return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMaximumX(self)
    def getAxisMinimumY(self): return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMinimumY(self)
    def getAxisMaximumY(self): return HEPVis_SWIG_Python.SbPlottablePoints2D_getAxisMaximumY(self)
    def getNumberOfPoints(self): return HEPVis_SWIG_Python.SbPlottablePoints2D_getNumberOfPoints(self)
    def getIthPoint(self, *args): return HEPVis_SWIG_Python.SbPlottablePoints2D_getIthPoint(self, *args)
SbPlottablePoints2D_swigregister = HEPVis_SWIG_Python.SbPlottablePoints2D_swigregister
SbPlottablePoints2D_swigregister(SbPlottablePoints2D)

class SbPlottablePoints3D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottablePoints3D
    __del__ = lambda self : None;
    def getAxisMinimumX(self): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMinimumX(self)
    def getAxisMaximumX(self): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMaximumX(self)
    def getAxisMinimumY(self): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMinimumY(self)
    def getAxisMaximumY(self): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMaximumY(self)
    def getAxisMinimumZ(self): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMinimumZ(self)
    def getAxisMaximumZ(self): return HEPVis_SWIG_Python.SbPlottablePoints3D_getAxisMaximumZ(self)
    def getNumberOfPoints(self): return HEPVis_SWIG_Python.SbPlottablePoints3D_getNumberOfPoints(self)
    def getIthPoint(self, *args): return HEPVis_SWIG_Python.SbPlottablePoints3D_getIthPoint(self, *args)
SbPlottablePoints3D_swigregister = HEPVis_SWIG_Python.SbPlottablePoints3D_swigregister
SbPlottablePoints3D_swigregister(SbPlottablePoints3D)

class SbPlottableFunction1D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableFunction1D
    __del__ = lambda self : None;
    def value(self, *args): return HEPVis_SWIG_Python.SbPlottableFunction1D_value(self, *args)
    def getNumberOfStepsX(self): return HEPVis_SWIG_Python.SbPlottableFunction1D_getNumberOfStepsX(self)
    def getMinimumX(self): return HEPVis_SWIG_Python.SbPlottableFunction1D_getMinimumX(self)
    def getMaximumX(self): return HEPVis_SWIG_Python.SbPlottableFunction1D_getMaximumX(self)
SbPlottableFunction1D_swigregister = HEPVis_SWIG_Python.SbPlottableFunction1D_swigregister
SbPlottableFunction1D_swigregister(SbPlottableFunction1D)

class SbPlottableFunction2D(SbPlottableObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottableFunction2D
    __del__ = lambda self : None;
    def value(self, *args): return HEPVis_SWIG_Python.SbPlottableFunction2D_value(self, *args)
    def getNumberOfStepsX(self): return HEPVis_SWIG_Python.SbPlottableFunction2D_getNumberOfStepsX(self)
    def getMinimumX(self): return HEPVis_SWIG_Python.SbPlottableFunction2D_getMinimumX(self)
    def getMaximumX(self): return HEPVis_SWIG_Python.SbPlottableFunction2D_getMaximumX(self)
    def getNumberOfStepsY(self): return HEPVis_SWIG_Python.SbPlottableFunction2D_getNumberOfStepsY(self)
    def getMinimumY(self): return HEPVis_SWIG_Python.SbPlottableFunction2D_getMinimumY(self)
    def getMaximumY(self): return HEPVis_SWIG_Python.SbPlottableFunction2D_getMaximumY(self)
    def getNumberOfPoints(self): return HEPVis_SWIG_Python.SbPlottableFunction2D_getNumberOfPoints(self)
    def getIthPoint(self, *args): return HEPVis_SWIG_Python.SbPlottableFunction2D_getIthPoint(self, *args)
    def setIthPoint(self, *args): return HEPVis_SWIG_Python.SbPlottableFunction2D_setIthPoint(self, *args)
    def dragger_update_points(self): return HEPVis_SWIG_Python.SbPlottableFunction2D_dragger_update_points(self)
SbPlottableFunction2D_swigregister = HEPVis_SWIG_Python.SbPlottableFunction2D_swigregister
SbPlottableFunction2D_swigregister(SbPlottableFunction2D)

class SbPlottablePrimitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlottablePrimitive
    __del__ = lambda self : None;
    def cast(self, *args): return HEPVis_SWIG_Python.SbPlottablePrimitive_cast(self, *args)
SbPlottablePrimitive_swigregister = HEPVis_SWIG_Python.SbPlottablePrimitive_swigregister
SbPlottablePrimitive_swigregister(SbPlottablePrimitive)

SbPlottableObject_s = HEPVis_SWIG_Python.SbPlottableObject_s
SbPlottableBins1D_s = HEPVis_SWIG_Python.SbPlottableBins1D_s
SbPlottableBins2D_s = HEPVis_SWIG_Python.SbPlottableBins2D_s
SbPlottablePoints2D_s = HEPVis_SWIG_Python.SbPlottablePoints2D_s
SbPlottablePoints3D_s = HEPVis_SWIG_Python.SbPlottablePoints3D_s
SbPlottableFunction1D_s = HEPVis_SWIG_Python.SbPlottableFunction1D_s
SbPlottableFunction2D_s = HEPVis_SWIG_Python.SbPlottableFunction2D_s
SbPlottablePrimitive_s = HEPVis_SWIG_Python.SbPlottablePrimitive_s
Sb_plotter = HEPVis_SWIG_Python.Sb_plotter
Sb_data = HEPVis_SWIG_Python.Sb_data
class SbRotation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRotation
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbRotation(*args)
        try: self.this.append(this)
        except: self.this = this
    def multVec(self, *args): return HEPVis_SWIG_Python.SbRotation_multVec(self, *args)
SbRotation_swigregister = HEPVis_SWIG_Python.SbRotation_swigregister
SbRotation_swigregister(SbRotation)

class HVPoint3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_HVPoint3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_HVPoint3D
    __del__ = lambda self : None;
HVPoint3D_swigregister = HEPVis_SWIG_Python.HVPoint3D_swigregister
HVPoint3D_swigregister(HVPoint3D)

DEFAULT_NUMBER_OF_STEPS = HEPVis_SWIG_Python.DEFAULT_NUMBER_OF_STEPS
class SbFacet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbFacet(*args)
        try: self.this.append(this)
        except: self.this = this
    def isEqual(self, *args): return HEPVis_SWIG_Python.SbFacet_isEqual(self, *args)
    def GetEdge(self, *args): return HEPVis_SWIG_Python.SbFacet_GetEdge(self, *args)
    def Set(self, *args): return HEPVis_SWIG_Python.SbFacet_Set(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbFacet
    __del__ = lambda self : None;
SbFacet_swigregister = HEPVis_SWIG_Python.SbFacet_swigregister
SbFacet_swigregister(SbFacet)

class SbPolyhedron(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def setName(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_setName(self, *args)
    def getName(self): return HEPVis_SWIG_Python.SbPolyhedron_getName(self)
    def Set(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_Set(self, *args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedron
    __del__ = lambda self : None;
    def Empty(self): return HEPVis_SWIG_Python.SbPolyhedron_Empty(self)
    def GetNoVertices(self): return HEPVis_SWIG_Python.SbPolyhedron_GetNoVertices(self)
    def GetNoFacets(self): return HEPVis_SWIG_Python.SbPolyhedron_GetNoFacets(self)
    def Transform(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_Transform(self, *args)
    def GetNextVertexIndex(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextVertexIndex(self, *args)
    def GetVertex(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetVertex(self, *args)
    def GetVertexFast(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetVertexFast(self, *args)
    def GetPV(self): return HEPVis_SWIG_Python.SbPolyhedron_GetPV(self)
    def GetPF(self): return HEPVis_SWIG_Python.SbPolyhedron_GetPF(self)
    def GetNextVertex(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextVertex(self, *args)
    def GetNextEdgeIndeces(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextEdgeIndeces(self, *args)
    def GetNextEdge(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextEdge(self, *args)
    def GetFacet(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetFacet(self, *args)
    def GetNextFacet(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextFacet(self, *args)
    def GetNormal(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetNormal(self, *args)
    def GetUnitNormal(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetUnitNormal(self, *args)
    def GetNextNormal(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextNormal(self, *args)
    def GetNextUnitNormal(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_GetNextUnitNormal(self, *args)
    def add(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_add(self, *args)
    def subtract(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_subtract(self, *args)
    def intersect(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_intersect(self, *args)
    def GetSurfaceArea(self): return HEPVis_SWIG_Python.SbPolyhedron_GetSurfaceArea(self)
    def GetVolume(self): return HEPVis_SWIG_Python.SbPolyhedron_GetVolume(self)
    def isEqual(self, *args): return HEPVis_SWIG_Python.SbPolyhedron_isEqual(self, *args)
    def isConsistent(self, arg2=None): return HEPVis_SWIG_Python.SbPolyhedron_isConsistent(self, arg2)
    def dump(self): return HEPVis_SWIG_Python.SbPolyhedron_dump(self)
    GetNumberOfRotationSteps = staticmethod(HEPVis_SWIG_Python.SbPolyhedron_GetNumberOfRotationSteps)
    SetNumberOfRotationSteps = staticmethod(HEPVis_SWIG_Python.SbPolyhedron_SetNumberOfRotationSteps)
    ResetNumberOfRotationSteps = staticmethod(HEPVis_SWIG_Python.SbPolyhedron_ResetNumberOfRotationSteps)
SbPolyhedron_swigregister = HEPVis_SWIG_Python.SbPolyhedron_swigregister
SbPolyhedron_swigregister(SbPolyhedron)

def SbPolyhedron_GetNumberOfRotationSteps():
  return HEPVis_SWIG_Python.SbPolyhedron_GetNumberOfRotationSteps()
SbPolyhedron_GetNumberOfRotationSteps = HEPVis_SWIG_Python.SbPolyhedron_GetNumberOfRotationSteps

def SbPolyhedron_SetNumberOfRotationSteps(*args):
  return HEPVis_SWIG_Python.SbPolyhedron_SetNumberOfRotationSteps(*args)
SbPolyhedron_SetNumberOfRotationSteps = HEPVis_SWIG_Python.SbPolyhedron_SetNumberOfRotationSteps

def SbPolyhedron_ResetNumberOfRotationSteps():
  return HEPVis_SWIG_Python.SbPolyhedron_ResetNumberOfRotationSteps()
SbPolyhedron_ResetNumberOfRotationSteps = HEPVis_SWIG_Python.SbPolyhedron_ResetNumberOfRotationSteps


def Sb_iabs(*args):
  return HEPVis_SWIG_Python.Sb_iabs(*args)
Sb_iabs = HEPVis_SWIG_Python.Sb_iabs
class SbPolyhedronTrd2(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTrd2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTrd2
    __del__ = lambda self : None;
SbPolyhedronTrd2_swigregister = HEPVis_SWIG_Python.SbPolyhedronTrd2_swigregister
SbPolyhedronTrd2_swigregister(SbPolyhedronTrd2)

class SbPolyhedronTrd1(SbPolyhedronTrd2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTrd1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTrd1
    __del__ = lambda self : None;
SbPolyhedronTrd1_swigregister = HEPVis_SWIG_Python.SbPolyhedronTrd1_swigregister
SbPolyhedronTrd1_swigregister(SbPolyhedronTrd1)

class SbPolyhedronBox(SbPolyhedronTrd2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronBox
    __del__ = lambda self : None;
SbPolyhedronBox_swigregister = HEPVis_SWIG_Python.SbPolyhedronBox_swigregister
SbPolyhedronBox_swigregister(SbPolyhedronBox)

class SbPolyhedronTrap(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTrap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTrap
    __del__ = lambda self : None;
SbPolyhedronTrap_swigregister = HEPVis_SWIG_Python.SbPolyhedronTrap_swigregister
SbPolyhedronTrap_swigregister(SbPolyhedronTrap)

class SbPolyhedronPara(SbPolyhedronTrap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronPara(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronPara
    __del__ = lambda self : None;
SbPolyhedronPara_swigregister = HEPVis_SWIG_Python.SbPolyhedronPara_swigregister
SbPolyhedronPara_swigregister(SbPolyhedronPara)

class SbPolyhedronCons(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronCons(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronCons
    __del__ = lambda self : None;
SbPolyhedronCons_swigregister = HEPVis_SWIG_Python.SbPolyhedronCons_swigregister
SbPolyhedronCons_swigregister(SbPolyhedronCons)

class SbPolyhedronCone(SbPolyhedronCons):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronCone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronCone
    __del__ = lambda self : None;
SbPolyhedronCone_swigregister = HEPVis_SWIG_Python.SbPolyhedronCone_swigregister
SbPolyhedronCone_swigregister(SbPolyhedronCone)

class SbPolyhedronTubs(SbPolyhedronCons):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTubs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTubs
    __del__ = lambda self : None;
SbPolyhedronTubs_swigregister = HEPVis_SWIG_Python.SbPolyhedronTubs_swigregister
SbPolyhedronTubs_swigregister(SbPolyhedronTubs)

class SbPolyhedronTube(SbPolyhedronCons):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTube(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTube
    __del__ = lambda self : None;
SbPolyhedronTube_swigregister = HEPVis_SWIG_Python.SbPolyhedronTube_swigregister
SbPolyhedronTube_swigregister(SbPolyhedronTube)

class SbPolyhedronPgon(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronPgon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronPgon
    __del__ = lambda self : None;
SbPolyhedronPgon_swigregister = HEPVis_SWIG_Python.SbPolyhedronPgon_swigregister
SbPolyhedronPgon_swigregister(SbPolyhedronPgon)

class SbPolyhedronPcon(SbPolyhedronPgon):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronPcon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronPcon
    __del__ = lambda self : None;
SbPolyhedronPcon_swigregister = HEPVis_SWIG_Python.SbPolyhedronPcon_swigregister
SbPolyhedronPcon_swigregister(SbPolyhedronPcon)

class SbPolyhedronSphere(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronSphere
    __del__ = lambda self : None;
SbPolyhedronSphere_swigregister = HEPVis_SWIG_Python.SbPolyhedronSphere_swigregister
SbPolyhedronSphere_swigregister(SbPolyhedronSphere)

class SbPolyhedronTorus(SbPolyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronTorus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronTorus
    __del__ = lambda self : None;
SbPolyhedronTorus_swigregister = HEPVis_SWIG_Python.SbPolyhedronTorus_swigregister
SbPolyhedronTorus_swigregister(SbPolyhedronTorus)

class SbPolyhedronProcessor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UNION = HEPVis_SWIG_Python.SbPolyhedronProcessor_UNION
    INTERSECTION = HEPVis_SWIG_Python.SbPolyhedronProcessor_INTERSECTION
    SUBTRACTION = HEPVis_SWIG_Python.SbPolyhedronProcessor_SUBTRACTION
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbPolyhedronProcessor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPolyhedronProcessor
    __del__ = lambda self : None;
    def push_back(self, *args): return HEPVis_SWIG_Python.SbPolyhedronProcessor_push_back(self, *args)
    def execute(self, *args): return HEPVis_SWIG_Python.SbPolyhedronProcessor_execute(self, *args)
    def clear(self): return HEPVis_SWIG_Python.SbPolyhedronProcessor_clear(self)
    def is_same_op(self): return HEPVis_SWIG_Python.SbPolyhedronProcessor_is_same_op(self)
    def execute1(self, *args): return HEPVis_SWIG_Python.SbPolyhedronProcessor_execute1(self, *args)
SbPolyhedronProcessor_swigregister = HEPVis_SWIG_Python.SbPolyhedronProcessor_swigregister
SbPolyhedronProcessor_swigregister(SbPolyhedronProcessor)


def SbSTRDUP(*args):
  return HEPVis_SWIG_Python.SbSTRDUP(*args)
SbSTRDUP = HEPVis_SWIG_Python.SbSTRDUP

def SbSTRDEL(*args):
  return HEPVis_SWIG_Python.SbSTRDEL(*args)
SbSTRDEL = HEPVis_SWIG_Python.SbSTRDEL

def SbSTREMPTY(*args):
  return HEPVis_SWIG_Python.SbSTREMPTY(*args)
SbSTREMPTY = HEPVis_SWIG_Python.SbSTREMPTY

def SbStringGetWords(*args):
  return HEPVis_SWIG_Python.SbStringGetWords(*args)
SbStringGetWords = HEPVis_SWIG_Python.SbStringGetWords

def SbStringGetLines(*args):
  return HEPVis_SWIG_Python.SbStringGetLines(*args)
SbStringGetLines = HEPVis_SWIG_Python.SbStringGetLines

def SbStringPrintF(*args):
  return HEPVis_SWIG_Python.SbStringPrintF(*args)
SbStringPrintF = HEPVis_SWIG_Python.SbStringPrintF

def SbStringFind(*args):
  return HEPVis_SWIG_Python.SbStringFind(*args)
SbStringFind = HEPVis_SWIG_Python.SbStringFind

def SbStringReverseFind(*args):
  return HEPVis_SWIG_Python.SbStringReverseFind(*args)
SbStringReverseFind = HEPVis_SWIG_Python.SbStringReverseFind

def SbStringDelete(*args):
  return HEPVis_SWIG_Python.SbStringDelete(*args)
SbStringDelete = HEPVis_SWIG_Python.SbStringDelete

def SbStringCreateEmpty(*args):
  return HEPVis_SWIG_Python.SbStringCreateEmpty(*args)
SbStringCreateEmpty = HEPVis_SWIG_Python.SbStringCreateEmpty

def SbStringIsTTF(*args):
  return HEPVis_SWIG_Python.SbStringIsTTF(*args)
SbStringIsTTF = HEPVis_SWIG_Python.SbStringIsTTF

def SbString_isenv(*args):
  return HEPVis_SWIG_Python.SbString_isenv(*args)
SbString_isenv = HEPVis_SWIG_Python.SbString_isenv

def SbString_getenv(*args):
  return HEPVis_SWIG_Python.SbString_getenv(*args)
SbString_getenv = HEPVis_SWIG_Python.SbString_getenv

def SbStringGetenv(*args):
  return HEPVis_SWIG_Python.SbStringGetenv(*args)
SbStringGetenv = HEPVis_SWIG_Python.SbStringGetenv

def SbStringReplace(*args):
  return HEPVis_SWIG_Python.SbStringReplace(*args)
SbStringReplace = HEPVis_SWIG_Python.SbStringReplace

def SbStringSuffix(*args):
  return HEPVis_SWIG_Python.SbStringSuffix(*args)
SbStringSuffix = HEPVis_SWIG_Python.SbStringSuffix
SbStringNotFound = HEPVis_SWIG_Python.SbStringNotFound

def SbConvertToInt(*args):
  return HEPVis_SWIG_Python.SbConvertToInt(*args)
SbConvertToInt = HEPVis_SWIG_Python.SbConvertToInt

def SbConvertToUnsignedLong(*args):
  return HEPVis_SWIG_Python.SbConvertToUnsignedLong(*args)
SbConvertToUnsignedLong = HEPVis_SWIG_Python.SbConvertToUnsignedLong

def SbConvertToFloat(*args):
  return HEPVis_SWIG_Python.SbConvertToFloat(*args)
SbConvertToFloat = HEPVis_SWIG_Python.SbConvertToFloat

def SbConvertToBool(*args):
  return HEPVis_SWIG_Python.SbConvertToBool(*args)
SbConvertToBool = HEPVis_SWIG_Python.SbConvertToBool

def SbGetWords(*args):
  return HEPVis_SWIG_Python.SbGetWords(*args)
SbGetWords = HEPVis_SWIG_Python.SbGetWords

def SbGetLines(*args):
  return HEPVis_SWIG_Python.SbGetLines(*args)
SbGetLines = HEPVis_SWIG_Python.SbGetLines
class SbStyleColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleColor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbStyleColor(*args)
        try: self.this.append(this)
        except: self.this = this
SbStyleColor_swigregister = HEPVis_SWIG_Python.SbStyleColor_swigregister
SbStyleColor_swigregister(SbStyleColor)

class SbStyleColormap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getColor(self, *args): return HEPVis_SWIG_Python.SbStyleColormap_getColor(self, *args)
    def getStringColor(self, *args): return HEPVis_SWIG_Python.SbStyleColormap_getStringColor(self, *args)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbStyleColormap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleColormap
    __del__ = lambda self : None;
SbStyleColormap_swigregister = HEPVis_SWIG_Python.SbStyleColormap_swigregister
SbStyleColormap_swigregister(SbStyleColormap)

class SbStyleDefaultColormap(SbStyleColormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbStyleDefaultColormap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleDefaultColormap
    __del__ = lambda self : None;
SbStyleDefaultColormap_swigregister = HEPVis_SWIG_Python.SbStyleDefaultColormap_swigregister
SbStyleDefaultColormap_swigregister(SbStyleDefaultColormap)

class SbStyleROOT_Colormap(SbStyleColormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbStyleROOT_Colormap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyleROOT_Colormap
    __del__ = lambda self : None;
SbStyleROOT_Colormap_swigregister = HEPVis_SWIG_Python.SbStyleROOT_Colormap_swigregister
SbStyleROOT_Colormap_swigregister(SbStyleROOT_Colormap)

class SbStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbStyle
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbStyle(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy(self, *args): return HEPVis_SWIG_Python.SbStyle_copy(self, *args)
    def isEqual(self, *args): return HEPVis_SWIG_Python.SbStyle_isEqual(self, *args)
    def reset(self): return HEPVis_SWIG_Python.SbStyle_reset(self)
    def getString(self): return HEPVis_SWIG_Python.SbStyle_getString(self)
    def setColor(self, *args): return HEPVis_SWIG_Python.SbStyle_setColor(self, *args)
    def getColor(self): return HEPVis_SWIG_Python.SbStyle_getColor(self)
    def setHighlightColor(self, *args): return HEPVis_SWIG_Python.SbStyle_setHighlightColor(self, *args)
    def getHighlightColor(self): return HEPVis_SWIG_Python.SbStyle_getHighlightColor(self)
    def setLineWidth(self, *args): return HEPVis_SWIG_Python.SbStyle_setLineWidth(self, *args)
    def getLineWidth(self): return HEPVis_SWIG_Python.SbStyle_getLineWidth(self)
    def getTransparency(self): return HEPVis_SWIG_Python.SbStyle_getTransparency(self)
    def setTransparency(self, *args): return HEPVis_SWIG_Python.SbStyle_setTransparency(self, *args)
    def setMarkerStyle(self, *args): return HEPVis_SWIG_Python.SbStyle_setMarkerStyle(self, *args)
    def getMarkerStyle(self): return HEPVis_SWIG_Python.SbStyle_getMarkerStyle(self)
    def setMarkerSize(self, *args): return HEPVis_SWIG_Python.SbStyle_setMarkerSize(self, *args)
    def getMarkerSize(self): return HEPVis_SWIG_Python.SbStyle_getMarkerSize(self)
    def setFontSize(self, *args): return HEPVis_SWIG_Python.SbStyle_setFontSize(self, *args)
    def getFontSize(self): return HEPVis_SWIG_Python.SbStyle_getFontSize(self)
    def setAreaStyle(self, *args): return HEPVis_SWIG_Python.SbStyle_setAreaStyle(self, *args)
    def getAreaStyle(self): return HEPVis_SWIG_Python.SbStyle_getAreaStyle(self)
    def setModeling(self, *args): return HEPVis_SWIG_Python.SbStyle_setModeling(self, *args)
    def getModeling(self): return HEPVis_SWIG_Python.SbStyle_getModeling(self)
    def setLightModel(self, *args): return HEPVis_SWIG_Python.SbStyle_setLightModel(self, *args)
    def getLightModel(self): return HEPVis_SWIG_Python.SbStyle_getLightModel(self)
    def setTickModeling(self, *args): return HEPVis_SWIG_Python.SbStyle_setTickModeling(self, *args)
    def getTickModeling(self): return HEPVis_SWIG_Python.SbStyle_getTickModeling(self)
    def setEncoding(self, *args): return HEPVis_SWIG_Python.SbStyle_setEncoding(self, *args)
    def getEncoding(self): return HEPVis_SWIG_Python.SbStyle_getEncoding(self)
    def setSmoothing(self, *args): return HEPVis_SWIG_Python.SbStyle_setSmoothing(self, *args)
    def getSmoothing(self): return HEPVis_SWIG_Python.SbStyle_getSmoothing(self)
    def setHinting(self, *args): return HEPVis_SWIG_Python.SbStyle_setHinting(self, *args)
    def getHinting(self): return HEPVis_SWIG_Python.SbStyle_getHinting(self)
    def getPaintingPolicy(self): return HEPVis_SWIG_Python.SbStyle_getPaintingPolicy(self)
    def setPaintingPolicy(self, *args): return HEPVis_SWIG_Python.SbStyle_setPaintingPolicy(self, *args)
    def getHatchingPolicy(self): return HEPVis_SWIG_Python.SbStyle_getHatchingPolicy(self)
    def setHatchingPolicy(self, *args): return HEPVis_SWIG_Python.SbStyle_setHatchingPolicy(self, *args)
    def getProjectionType(self): return HEPVis_SWIG_Python.SbStyle_getProjectionType(self)
    def setProjectionType(self, *args): return HEPVis_SWIG_Python.SbStyle_setProjectionType(self, *args)
    def setLinePattern(self, *args): return HEPVis_SWIG_Python.SbStyle_setLinePattern(self, *args)
    def getLinePattern(self): return HEPVis_SWIG_Python.SbStyle_getLinePattern(self)
    def setFontName(self, *args): return HEPVis_SWIG_Python.SbStyle_setFontName(self, *args)
    def getFontName(self): return HEPVis_SWIG_Python.SbStyle_getFontName(self)
    def setDivisions(self, *args): return HEPVis_SWIG_Python.SbStyle_setDivisions(self, *args)
    def getDivisions(self): return HEPVis_SWIG_Python.SbStyle_getDivisions(self)
    def setRotationSteps(self, *args): return HEPVis_SWIG_Python.SbStyle_setRotationSteps(self, *args)
    def getRotationSteps(self): return HEPVis_SWIG_Python.SbStyle_getRotationSteps(self)
    def setOffset(self, *args): return HEPVis_SWIG_Python.SbStyle_setOffset(self, *args)
    def getOffset(self): return HEPVis_SWIG_Python.SbStyle_getOffset(self)
    def setStripWidth(self, *args): return HEPVis_SWIG_Python.SbStyle_setStripWidth(self, *args)
    def getStripWidth(self): return HEPVis_SWIG_Python.SbStyle_getStripWidth(self)
    def setAngle(self, *args): return HEPVis_SWIG_Python.SbStyle_setAngle(self, *args)
    def getAngle(self): return HEPVis_SWIG_Python.SbStyle_getAngle(self)
    def setScale(self, *args): return HEPVis_SWIG_Python.SbStyle_setScale(self, *args)
    def getScale(self): return HEPVis_SWIG_Python.SbStyle_getScale(self)
    def setBarOffset(self, *args): return HEPVis_SWIG_Python.SbStyle_setBarOffset(self, *args)
    def getBarOffset(self): return HEPVis_SWIG_Python.SbStyle_getBarOffset(self)
    def setBarWidth(self, *args): return HEPVis_SWIG_Python.SbStyle_setBarWidth(self, *args)
    def getBarWidth(self): return HEPVis_SWIG_Python.SbStyle_getBarWidth(self)
    def setMultiNodeLimit(self, *args): return HEPVis_SWIG_Python.SbStyle_setMultiNodeLimit(self, *args)
    def getMultiNodeLimit(self): return HEPVis_SWIG_Python.SbStyle_getMultiNodeLimit(self)
    def setSpacing(self, *args): return HEPVis_SWIG_Python.SbStyle_setSpacing(self, *args)
    def getSpacing(self): return HEPVis_SWIG_Python.SbStyle_getSpacing(self)
    def setVisible(self, *args): return HEPVis_SWIG_Python.SbStyle_setVisible(self, *args)
    def getVisible(self): return HEPVis_SWIG_Python.SbStyle_getVisible(self)
    def setEditable(self, *args): return HEPVis_SWIG_Python.SbStyle_setEditable(self, *args)
    def getEditable(self): return HEPVis_SWIG_Python.SbStyle_getEditable(self)
    def setAutomated(self, *args): return HEPVis_SWIG_Python.SbStyle_setAutomated(self, *args)
    def getAutomated(self): return HEPVis_SWIG_Python.SbStyle_getAutomated(self)
    def setCut(self, *args): return HEPVis_SWIG_Python.SbStyle_setCut(self, *args)
    def getCut(self): return HEPVis_SWIG_Python.SbStyle_getCut(self)
    def setOptions(self, *args): return HEPVis_SWIG_Python.SbStyle_setOptions(self, *args)
    def getOptions(self): return HEPVis_SWIG_Python.SbStyle_getOptions(self)
    def setColorMapping(self, *args): return HEPVis_SWIG_Python.SbStyle_setColorMapping(self, *args)
    def getColorMapping(self): return HEPVis_SWIG_Python.SbStyle_getColorMapping(self)
    def setEnforced(self, *args): return HEPVis_SWIG_Python.SbStyle_setEnforced(self, *args)
    def getEnforced(self): return HEPVis_SWIG_Python.SbStyle_getEnforced(self)
    def setTranslation(self, *args): return HEPVis_SWIG_Python.SbStyle_setTranslation(self, *args)
    def getTranslation(self): return HEPVis_SWIG_Python.SbStyle_getTranslation(self)
    hls2rgb = staticmethod(HEPVis_SWIG_Python.SbStyle_hls2rgb)
    stringToColor = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToColor)
    colorToString = staticmethod(HEPVis_SWIG_Python.SbStyle_colorToString)
    stringToMarkerStyle = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToMarkerStyle)
    markerStyleToString = staticmethod(HEPVis_SWIG_Python.SbStyle_markerStyleToString)
    stringToAreaStyle = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToAreaStyle)
    areaStyleToString = staticmethod(HEPVis_SWIG_Python.SbStyle_areaStyleToString)
    stringToPaintingPolicy = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToPaintingPolicy)
    paintingPolicyToString = staticmethod(HEPVis_SWIG_Python.SbStyle_paintingPolicyToString)
    stringToHatchingPolicy = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToHatchingPolicy)
    hatchingPolicyToString = staticmethod(HEPVis_SWIG_Python.SbStyle_hatchingPolicyToString)
    stringToProjectionType = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToProjectionType)
    projectionTypeToString = staticmethod(HEPVis_SWIG_Python.SbStyle_projectionTypeToString)
    stringToLinePattern = staticmethod(HEPVis_SWIG_Python.SbStyle_stringToLinePattern)
    def setFromString(self, *args): return HEPVis_SWIG_Python.SbStyle_setFromString(self, *args)
SbStyle_swigregister = HEPVis_SWIG_Python.SbStyle_swigregister
SbStyle_swigregister(SbStyle)

def SbStyle_hls2rgb(*args):
  return HEPVis_SWIG_Python.SbStyle_hls2rgb(*args)
SbStyle_hls2rgb = HEPVis_SWIG_Python.SbStyle_hls2rgb

def SbStyle_stringToColor(*args):
  return HEPVis_SWIG_Python.SbStyle_stringToColor(*args)
SbStyle_stringToColor = HEPVis_SWIG_Python.SbStyle_stringToColor

def SbStyle_colorToString(*args):
  return HEPVis_SWIG_Python.SbStyle_colorToString(*args)
SbStyle_colorToString = HEPVis_SWIG_Python.SbStyle_colorToString

def SbStyle_stringToMarkerStyle(*args):
  return HEPVis_SWIG_Python.SbStyle_stringToMarkerStyle(*args)
SbStyle_stringToMarkerStyle = HEPVis_SWIG_Python.SbStyle_stringToMarkerStyle

def SbStyle_markerStyleToString(*args):
  return HEPVis_SWIG_Python.SbStyle_markerStyleToString(*args)
SbStyle_markerStyleToString = HEPVis_SWIG_Python.SbStyle_markerStyleToString

def SbStyle_stringToAreaStyle(*args):
  return HEPVis_SWIG_Python.SbStyle_stringToAreaStyle(*args)
SbStyle_stringToAreaStyle = HEPVis_SWIG_Python.SbStyle_stringToAreaStyle

def SbStyle_areaStyleToString(*args):
  return HEPVis_SWIG_Python.SbStyle_areaStyleToString(*args)
SbStyle_areaStyleToString = HEPVis_SWIG_Python.SbStyle_areaStyleToString

def SbStyle_stringToPaintingPolicy(*args):
  return HEPVis_SWIG_Python.SbStyle_stringToPaintingPolicy(*args)
SbStyle_stringToPaintingPolicy = HEPVis_SWIG_Python.SbStyle_stringToPaintingPolicy

def SbStyle_paintingPolicyToString(*args):
  return HEPVis_SWIG_Python.SbStyle_paintingPolicyToString(*args)
SbStyle_paintingPolicyToString = HEPVis_SWIG_Python.SbStyle_paintingPolicyToString

def SbStyle_stringToHatchingPolicy(*args):
  return HEPVis_SWIG_Python.SbStyle_stringToHatchingPolicy(*args)
SbStyle_stringToHatchingPolicy = HEPVis_SWIG_Python.SbStyle_stringToHatchingPolicy

def SbStyle_hatchingPolicyToString(*args):
  return HEPVis_SWIG_Python.SbStyle_hatchingPolicyToString(*args)
SbStyle_hatchingPolicyToString = HEPVis_SWIG_Python.SbStyle_hatchingPolicyToString

def SbStyle_stringToProjectionType(*args):
  return HEPVis_SWIG_Python.SbStyle_stringToProjectionType(*args)
SbStyle_stringToProjectionType = HEPVis_SWIG_Python.SbStyle_stringToProjectionType

def SbStyle_projectionTypeToString(*args):
  return HEPVis_SWIG_Python.SbStyle_projectionTypeToString(*args)
SbStyle_projectionTypeToString = HEPVis_SWIG_Python.SbStyle_projectionTypeToString

def SbStyle_stringToLinePattern(*args):
  return HEPVis_SWIG_Python.SbStyle_stringToLinePattern(*args)
SbStyle_stringToLinePattern = HEPVis_SWIG_Python.SbStyle_stringToLinePattern


def SbSystemIsMacApp(*args):
  return HEPVis_SWIG_Python.SbSystemIsMacApp(*args)
SbSystemIsMacApp = HEPVis_SWIG_Python.SbSystemIsMacApp

def SbSystemPutenv(*args):
  return HEPVis_SWIG_Python.SbSystemPutenv(*args)
SbSystemPutenv = HEPVis_SWIG_Python.SbSystemPutenv

def SbSystemPathSeparator():
  return HEPVis_SWIG_Python.SbSystemPathSeparator()
SbSystemPathSeparator = HEPVis_SWIG_Python.SbSystemPathSeparator

def SbSystemFileSeparator():
  return HEPVis_SWIG_Python.SbSystemFileSeparator()
SbSystemFileSeparator = HEPVis_SWIG_Python.SbSystemFileSeparator
class SbTessTriangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pointA = _swig_property(HEPVis_SWIG_Python.SbTessTriangle_pointA_get, HEPVis_SWIG_Python.SbTessTriangle_pointA_set)
    pointB = _swig_property(HEPVis_SWIG_Python.SbTessTriangle_pointB_get, HEPVis_SWIG_Python.SbTessTriangle_pointB_set)
    pointC = _swig_property(HEPVis_SWIG_Python.SbTessTriangle_pointC_get, HEPVis_SWIG_Python.SbTessTriangle_pointC_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbTessTriangle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTessTriangle
    __del__ = lambda self : None;
SbTessTriangle_swigregister = HEPVis_SWIG_Python.SbTessTriangle_swigregister
SbTessTriangle_swigregister(SbTessTriangle)

class SbTessContour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbTessContour()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTessContour
    __del__ = lambda self : None;
    def getFilledArea(self, *args): return HEPVis_SWIG_Python.SbTessContour_getFilledArea(self, *args)
SbTessContour_swigregister = HEPVis_SWIG_Python.SbTessContour_swigregister
SbTessContour_swigregister(SbTessContour)

class SbTestHistogram1D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbTestHistogram1D()
        try: self.this.append(this)
        except: self.this = this
    def name(self): return HEPVis_SWIG_Python.SbTestHistogram1D_name(self)
    def title(self): return HEPVis_SWIG_Python.SbTestHistogram1D_title(self)
    def xn(self): return HEPVis_SWIG_Python.SbTestHistogram1D_xn(self)
    def xmin(self): return HEPVis_SWIG_Python.SbTestHistogram1D_xmin(self)
    def xmax(self): return HEPVis_SWIG_Python.SbTestHistogram1D_xmax(self)
    def valueRange(self, *args): return HEPVis_SWIG_Python.SbTestHistogram1D_valueRange(self, *args)
    def binEntries(self, *args): return HEPVis_SWIG_Python.SbTestHistogram1D_binEntries(self, *args)
    def binWeight(self, *args): return HEPVis_SWIG_Python.SbTestHistogram1D_binWeight(self, *args)
    def binError(self, *args): return HEPVis_SWIG_Python.SbTestHistogram1D_binError(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestHistogram1D
    __del__ = lambda self : None;
SbTestHistogram1D_swigregister = HEPVis_SWIG_Python.SbTestHistogram1D_swigregister
SbTestHistogram1D_swigregister(SbTestHistogram1D)

class SbTestHistogram2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbTestHistogram2D()
        try: self.this.append(this)
        except: self.this = this
    def name(self): return HEPVis_SWIG_Python.SbTestHistogram2D_name(self)
    def title(self): return HEPVis_SWIG_Python.SbTestHistogram2D_title(self)
    def xn(self): return HEPVis_SWIG_Python.SbTestHistogram2D_xn(self)
    def xmin(self): return HEPVis_SWIG_Python.SbTestHistogram2D_xmin(self)
    def xmax(self): return HEPVis_SWIG_Python.SbTestHistogram2D_xmax(self)
    def yn(self): return HEPVis_SWIG_Python.SbTestHistogram2D_yn(self)
    def ymin(self): return HEPVis_SWIG_Python.SbTestHistogram2D_ymin(self)
    def ymax(self): return HEPVis_SWIG_Python.SbTestHistogram2D_ymax(self)
    def ytitle(self): return HEPVis_SWIG_Python.SbTestHistogram2D_ytitle(self)
    def valueRange(self, *args): return HEPVis_SWIG_Python.SbTestHistogram2D_valueRange(self, *args)
    def binEntries(self, *args): return HEPVis_SWIG_Python.SbTestHistogram2D_binEntries(self, *args)
    def binWeight(self, *args): return HEPVis_SWIG_Python.SbTestHistogram2D_binWeight(self, *args)
    def binError(self, *args): return HEPVis_SWIG_Python.SbTestHistogram2D_binError(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestHistogram2D
    __del__ = lambda self : None;
SbTestHistogram2D_swigregister = HEPVis_SWIG_Python.SbTestHistogram2D_swigregister
SbTestHistogram2D_swigregister(SbTestHistogram2D)

class SbTestPlottableBins1D(SbPlottableBins1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(self): return HEPVis_SWIG_Python.SbTestPlottableBins1D_isValid(self)
    def cast(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_cast(self, *args)
    def nativeObject(self): return HEPVis_SWIG_Python.SbTestPlottableBins1D_nativeObject(self)
    def getDimension(self): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getDimension(self)
    def getName(self): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getName(self)
    def getLabel(self): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getLabel(self)
    def getLegend(self): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getLegend(self)
    def getInfos(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getInfos(self, *args)
    def getBinsSumOfWeightsRange(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinsSumOfWeightsRange(self, *args)
    def getAxisNumberOfBins(self): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getAxisNumberOfBins(self)
    def getAxisMinimum(self): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getAxisMinimum(self)
    def getAxisMaximum(self): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getAxisMaximum(self)
    def getBinLowerEdge(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinLowerEdge(self, *args)
    def getBinUpperEdge(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinUpperEdge(self, *args)
    def getBinNumberOfEntries(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinNumberOfEntries(self, *args)
    def getBinSumOfWeights(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinSumOfWeights(self, *args)
    def getBinBar(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins1D_getBinBar(self, *args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTestPlottableBins1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestPlottableBins1D
    __del__ = lambda self : None;
SbTestPlottableBins1D_swigregister = HEPVis_SWIG_Python.SbTestPlottableBins1D_swigregister
SbTestPlottableBins1D_swigregister(SbTestPlottableBins1D)

class SbTestPlottableBins2D(SbPlottableBins2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_isValid(self)
    def cast(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_cast(self, *args)
    def nativeObject(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_nativeObject(self)
    def getDimension(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getDimension(self)
    def getName(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getName(self)
    def getLabel(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getLabel(self)
    def getLegend(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getLegend(self)
    def getInfos(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getInfos(self, *args)
    def getBinsSumOfWeightsRange(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinsSumOfWeightsRange(self, *args)
    def getAxisNumberOfBinsX(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisNumberOfBinsX(self)
    def getAxisMinimumX(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMinimumX(self)
    def getAxisMaximumX(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMaximumX(self)
    def getAxisNumberOfBinsY(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisNumberOfBinsY(self)
    def getAxisMinimumY(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMinimumY(self)
    def getAxisMaximumY(self): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getAxisMaximumY(self)
    def getBinLowerEdgeX(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinLowerEdgeX(self, *args)
    def getBinUpperEdgeX(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinUpperEdgeX(self, *args)
    def getBinLowerEdgeY(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinLowerEdgeY(self, *args)
    def getBinUpperEdgeY(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinUpperEdgeY(self, *args)
    def getBinNumberOfEntries(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinNumberOfEntries(self, *args)
    def getBinSumOfWeights(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinSumOfWeights(self, *args)
    def getBinBar(self, *args): return HEPVis_SWIG_Python.SbTestPlottableBins2D_getBinBar(self, *args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbTestPlottableBins2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTestPlottableBins2D
    __del__ = lambda self : None;
SbTestPlottableBins2D_swigregister = HEPVis_SWIG_Python.SbTestPlottableBins2D_swigregister
SbTestPlottableBins2D_swigregister(SbTestPlottableBins2D)

class SbChar(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbChar(*args)
        try: self.this.append(this)
        except: self.this = this
    LATIN = HEPVis_SWIG_Python.SbChar_LATIN
    GREEK = HEPVis_SWIG_Python.SbChar_GREEK
    SPECIAL = HEPVis_SWIG_Python.SbChar_SPECIAL
    NONE = HEPVis_SWIG_Python.SbChar_NONE
    UP = HEPVis_SWIG_Python.SbChar_UP
    DOWN = HEPVis_SWIG_Python.SbChar_DOWN
    fChar = _swig_property(HEPVis_SWIG_Python.SbChar_fChar_get, HEPVis_SWIG_Python.SbChar_fChar_set)
    fFont = _swig_property(HEPVis_SWIG_Python.SbChar_fFont_get, HEPVis_SWIG_Python.SbChar_fFont_set)
    fYMove = _swig_property(HEPVis_SWIG_Python.SbChar_fYMove_get, HEPVis_SWIG_Python.SbChar_fYMove_set)
    fBack = _swig_property(HEPVis_SWIG_Python.SbChar_fBack_get, HEPVis_SWIG_Python.SbChar_fBack_set)
    fBar = _swig_property(HEPVis_SWIG_Python.SbChar_fBar_get, HEPVis_SWIG_Python.SbChar_fBar_set)
    fCR = _swig_property(HEPVis_SWIG_Python.SbChar_fCR_get, HEPVis_SWIG_Python.SbChar_fCR_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbChar
    __del__ = lambda self : None;
SbChar_swigregister = HEPVis_SWIG_Python.SbChar_swigregister
SbChar_swigregister(SbChar)

class SbText(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getBBox = staticmethod(HEPVis_SWIG_Python.SbText_getBBox)
    getSubString = staticmethod(HEPVis_SWIG_Python.SbText_getSubString)
    getAscentDescent = staticmethod(HEPVis_SWIG_Python.SbText_getAscentDescent)
    decodePlain = staticmethod(HEPVis_SWIG_Python.SbText_decodePlain)
    decodePAW = staticmethod(HEPVis_SWIG_Python.SbText_decodePAW)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbText()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbText
    __del__ = lambda self : None;
SbText_swigregister = HEPVis_SWIG_Python.SbText_swigregister
SbText_swigregister(SbText)

def SbText_getBBox(*args):
  return HEPVis_SWIG_Python.SbText_getBBox(*args)
SbText_getBBox = HEPVis_SWIG_Python.SbText_getBBox

def SbText_getSubString(*args):
  return HEPVis_SWIG_Python.SbText_getSubString(*args)
SbText_getSubString = HEPVis_SWIG_Python.SbText_getSubString

def SbText_getAscentDescent(*args):
  return HEPVis_SWIG_Python.SbText_getAscentDescent(*args)
SbText_getAscentDescent = HEPVis_SWIG_Python.SbText_getAscentDescent

def SbText_decodePlain(*args):
  return HEPVis_SWIG_Python.SbText_decodePlain(*args)
SbText_decodePlain = HEPVis_SWIG_Python.SbText_decodePlain

def SbText_decodePAW(*args):
  return HEPVis_SWIG_Python.SbText_decodePAW(*args)
SbText_decodePAW = HEPVis_SWIG_Python.SbText_decodePAW

class SbTTF_BBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    xMin = _swig_property(HEPVis_SWIG_Python.SbTTF_BBox_xMin_get, HEPVis_SWIG_Python.SbTTF_BBox_xMin_set)
    yMin = _swig_property(HEPVis_SWIG_Python.SbTTF_BBox_yMin_get, HEPVis_SWIG_Python.SbTTF_BBox_yMin_set)
    xMax = _swig_property(HEPVis_SWIG_Python.SbTTF_BBox_xMax_get, HEPVis_SWIG_Python.SbTTF_BBox_xMax_set)
    yMax = _swig_property(HEPVis_SWIG_Python.SbTTF_BBox_yMax_get, HEPVis_SWIG_Python.SbTTF_BBox_yMax_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbTTF_BBox()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTTF_BBox
    __del__ = lambda self : None;
SbTTF_BBox_swigregister = HEPVis_SWIG_Python.SbTTF_BBox_swigregister
SbTTF_BBox_swigregister(SbTTF_BBox)

class SbTTF_Raster_Map(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    rows = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_rows_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_rows_set)
    cols = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_cols_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_cols_set)
    width = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_width_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_width_set)
    buffer = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_buffer_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_buffer_set)
    size = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_size_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_size_set)
    grays = _swig_property(HEPVis_SWIG_Python.SbTTF_Raster_Map_grays_get, HEPVis_SWIG_Python.SbTTF_Raster_Map_grays_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SbTTF_Raster_Map()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTTF_Raster_Map
    __del__ = lambda self : None;
SbTTF_Raster_Map_swigregister = HEPVis_SWIG_Python.SbTTF_Raster_Map_swigregister
SbTTF_Raster_Map_swigregister(SbTTF_Raster_Map)

class SbTTF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbTTF
    __del__ = lambda self : None;
    def isValid(self): return HEPVis_SWIG_Python.SbTTF_isValid(self)
    def getBounds(self, *args): return HEPVis_SWIG_Python.SbTTF_getBounds(self, *args)
    def setPointSize(self, *args): return HEPVis_SWIG_Python.SbTTF_setPointSize(self, *args)
    def getPointSize(self): return HEPVis_SWIG_Python.SbTTF_getPointSize(self)
    def getCharacter(self, *args): return HEPVis_SWIG_Python.SbTTF_getCharacter(self, *args)
    def getAscent(self): return HEPVis_SWIG_Python.SbTTF_getAscent(self)
    def getDescent(self): return HEPVis_SWIG_Python.SbTTF_getDescent(self)
    def getFontName(self): return HEPVis_SWIG_Python.SbTTF_getFontName(self)
SbTTF_swigregister = HEPVis_SWIG_Python.SbTTF_swigregister
SbTTF_swigregister(SbTTF)

HEPVIS_MAJOR_VERSION = HEPVis_SWIG_Python.HEPVIS_MAJOR_VERSION
HEPVIS_MINOR_VERSION = HEPVis_SWIG_Python.HEPVIS_MINOR_VERSION
HEPVIS_PATCH_VERSION = HEPVis_SWIG_Python.HEPVIS_PATCH_VERSION
HEPVIS_VERSION = HEPVis_SWIG_Python.HEPVIS_VERSION
HEPVIS_VERSION_VRP = HEPVis_SWIG_Python.HEPVIS_VERSION_VRP
class HEPVis_SoFile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.HEPVis_SoFile_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.HEPVis_SoFile_getTypeId(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_HEPVis_SoFile()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.HEPVis_SoFile_initClass)
    def readNamedFile(self, *args): return HEPVis_SWIG_Python.HEPVis_SoFile_readNamedFile(self, *args)
    setCurlFunction = staticmethod(HEPVis_SWIG_Python.HEPVis_SoFile_setCurlFunction)
HEPVis_SoFile_swigregister = HEPVis_SWIG_Python.HEPVis_SoFile_swigregister
HEPVis_SoFile_swigregister(HEPVis_SoFile)

def HEPVis_SoFile_getClassTypeId():
  return HEPVis_SWIG_Python.HEPVis_SoFile_getClassTypeId()
HEPVis_SoFile_getClassTypeId = HEPVis_SWIG_Python.HEPVis_SoFile_getClassTypeId

def HEPVis_SoFile_initClass():
  return HEPVis_SWIG_Python.HEPVis_SoFile_initClass()
HEPVis_SoFile_initClass = HEPVis_SWIG_Python.HEPVis_SoFile_initClass

def HEPVis_SoFile_setCurlFunction(*args):
  return HEPVis_SWIG_Python.HEPVis_SoFile_setCurlFunction(*args)
HEPVis_SoFile_setCurlFunction = HEPVis_SWIG_Python.HEPVis_SoFile_setCurlFunction

class SoLineStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoLineStyle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoLineStyle_getTypeId(self)
    color = _swig_property(HEPVis_SWIG_Python.SoLineStyle_color_get, HEPVis_SWIG_Python.SoLineStyle_color_set)
    transparency = _swig_property(HEPVis_SWIG_Python.SoLineStyle_transparency_get, HEPVis_SWIG_Python.SoLineStyle_transparency_set)
    width = _swig_property(HEPVis_SWIG_Python.SoLineStyle_width_get, HEPVis_SWIG_Python.SoLineStyle_width_set)
    pattern = _swig_property(HEPVis_SWIG_Python.SoLineStyle_pattern_get, HEPVis_SWIG_Python.SoLineStyle_pattern_set)
    visible = _swig_property(HEPVis_SWIG_Python.SoLineStyle_visible_get, HEPVis_SWIG_Python.SoLineStyle_visible_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoLineStyle()
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return HEPVis_SWIG_Python.SoLineStyle_reset(self)
    def setFromString(self, *args): return HEPVis_SWIG_Python.SoLineStyle_setFromString(self, *args)
    def getSbStyle(self): return HEPVis_SWIG_Python.SoLineStyle_getSbStyle(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoLineStyle_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoLineStyle
    __del__ = lambda self : None;
SoLineStyle_swigregister = HEPVis_SWIG_Python.SoLineStyle_swigregister
SoLineStyle_swigregister(SoLineStyle)

def SoLineStyle_getClassTypeId():
  return HEPVis_SWIG_Python.SoLineStyle_getClassTypeId()
SoLineStyle_getClassTypeId = HEPVis_SWIG_Python.SoLineStyle_getClassTypeId

def SoLineStyle_initClass():
  return HEPVis_SWIG_Python.SoLineStyle_initClass()
SoLineStyle_initClass = HEPVis_SWIG_Python.SoLineStyle_initClass

class SoTextStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTextStyle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoTextStyle_getTypeId(self)
    LEFT = HEPVis_SWIG_Python.SoTextStyle_LEFT
    CENTER = HEPVis_SWIG_Python.SoTextStyle_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTextStyle_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTextStyle_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTextStyle_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTextStyle_TOP
    color = _swig_property(HEPVis_SWIG_Python.SoTextStyle_color_get, HEPVis_SWIG_Python.SoTextStyle_color_set)
    transparency = _swig_property(HEPVis_SWIG_Python.SoTextStyle_transparency_get, HEPVis_SWIG_Python.SoTextStyle_transparency_set)
    fontName = _swig_property(HEPVis_SWIG_Python.SoTextStyle_fontName_get, HEPVis_SWIG_Python.SoTextStyle_fontName_set)
    fontSize = _swig_property(HEPVis_SWIG_Python.SoTextStyle_fontSize_get, HEPVis_SWIG_Python.SoTextStyle_fontSize_set)
    visible = _swig_property(HEPVis_SWIG_Python.SoTextStyle_visible_get, HEPVis_SWIG_Python.SoTextStyle_visible_set)
    encoding = _swig_property(HEPVis_SWIG_Python.SoTextStyle_encoding_get, HEPVis_SWIG_Python.SoTextStyle_encoding_set)
    smoothing = _swig_property(HEPVis_SWIG_Python.SoTextStyle_smoothing_get, HEPVis_SWIG_Python.SoTextStyle_smoothing_set)
    hinting = _swig_property(HEPVis_SWIG_Python.SoTextStyle_hinting_get, HEPVis_SWIG_Python.SoTextStyle_hinting_set)
    horizontalJustification = _swig_property(HEPVis_SWIG_Python.SoTextStyle_horizontalJustification_get, HEPVis_SWIG_Python.SoTextStyle_horizontalJustification_set)
    verticalJustification = _swig_property(HEPVis_SWIG_Python.SoTextStyle_verticalJustification_get, HEPVis_SWIG_Python.SoTextStyle_verticalJustification_set)
    scale = _swig_property(HEPVis_SWIG_Python.SoTextStyle_scale_get, HEPVis_SWIG_Python.SoTextStyle_scale_set)
    orientationX = _swig_property(HEPVis_SWIG_Python.SoTextStyle_orientationX_get, HEPVis_SWIG_Python.SoTextStyle_orientationX_set)
    orientationY = _swig_property(HEPVis_SWIG_Python.SoTextStyle_orientationY_get, HEPVis_SWIG_Python.SoTextStyle_orientationY_set)
    rotated = _swig_property(HEPVis_SWIG_Python.SoTextStyle_rotated_get, HEPVis_SWIG_Python.SoTextStyle_rotated_set)
    lineWidth = _swig_property(HEPVis_SWIG_Python.SoTextStyle_lineWidth_get, HEPVis_SWIG_Python.SoTextStyle_lineWidth_set)
    linePattern = _swig_property(HEPVis_SWIG_Python.SoTextStyle_linePattern_get, HEPVis_SWIG_Python.SoTextStyle_linePattern_set)
    enforced = _swig_property(HEPVis_SWIG_Python.SoTextStyle_enforced_get, HEPVis_SWIG_Python.SoTextStyle_enforced_set)
    translation = _swig_property(HEPVis_SWIG_Python.SoTextStyle_translation_get, HEPVis_SWIG_Python.SoTextStyle_translation_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTextStyle()
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return HEPVis_SWIG_Python.SoTextStyle_reset(self)
    def setFromString(self, *args): return HEPVis_SWIG_Python.SoTextStyle_setFromString(self, *args)
    def getSbStyle(self): return HEPVis_SWIG_Python.SoTextStyle_getSbStyle(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTextStyle_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextStyle
    __del__ = lambda self : None;
SoTextStyle_swigregister = HEPVis_SWIG_Python.SoTextStyle_swigregister
SoTextStyle_swigregister(SoTextStyle)

def SoTextStyle_getClassTypeId():
  return HEPVis_SWIG_Python.SoTextStyle_getClassTypeId()
SoTextStyle_getClassTypeId = HEPVis_SWIG_Python.SoTextStyle_getClassTypeId

def SoTextStyle_initClass():
  return HEPVis_SWIG_Python.SoTextStyle_initClass()
SoTextStyle_initClass = HEPVis_SWIG_Python.SoTextStyle_initClass

class SoAreaStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoAreaStyle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoAreaStyle_getTypeId(self)
    color = _swig_property(HEPVis_SWIG_Python.SoAreaStyle_color_get, HEPVis_SWIG_Python.SoAreaStyle_color_set)
    transparency = _swig_property(HEPVis_SWIG_Python.SoAreaStyle_transparency_get, HEPVis_SWIG_Python.SoAreaStyle_transparency_set)
    SOLID = HEPVis_SWIG_Python.SoAreaStyle_SOLID
    HATCHED = HEPVis_SWIG_Python.SoAreaStyle_HATCHED
    CHECKER = HEPVis_SWIG_Python.SoAreaStyle_CHECKER
    EDGED = HEPVis_SWIG_Python.SoAreaStyle_EDGED
    areaStyle = _swig_property(HEPVis_SWIG_Python.SoAreaStyle_areaStyle_get, HEPVis_SWIG_Python.SoAreaStyle_areaStyle_set)
    visible = _swig_property(HEPVis_SWIG_Python.SoAreaStyle_visible_get, HEPVis_SWIG_Python.SoAreaStyle_visible_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoAreaStyle()
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return HEPVis_SWIG_Python.SoAreaStyle_reset(self)
    def setFromString(self, *args): return HEPVis_SWIG_Python.SoAreaStyle_setFromString(self, *args)
    def getSbStyle(self): return HEPVis_SWIG_Python.SoAreaStyle_getSbStyle(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoAreaStyle_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAreaStyle
    __del__ = lambda self : None;
SoAreaStyle_swigregister = HEPVis_SWIG_Python.SoAreaStyle_swigregister
SoAreaStyle_swigregister(SoAreaStyle)

def SoAreaStyle_getClassTypeId():
  return HEPVis_SWIG_Python.SoAreaStyle_getClassTypeId()
SoAreaStyle_getClassTypeId = HEPVis_SWIG_Python.SoAreaStyle_getClassTypeId

def SoAreaStyle_initClass():
  return HEPVis_SWIG_Python.SoAreaStyle_initClass()
SoAreaStyle_initClass = HEPVis_SWIG_Python.SoAreaStyle_initClass

class SoStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoStyle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoStyle_getTypeId(self)
    color = _swig_property(HEPVis_SWIG_Python.SoStyle_color_get, HEPVis_SWIG_Python.SoStyle_color_set)
    transparency = _swig_property(HEPVis_SWIG_Python.SoStyle_transparency_get, HEPVis_SWIG_Python.SoStyle_transparency_set)
    lineWidth = _swig_property(HEPVis_SWIG_Python.SoStyle_lineWidth_get, HEPVis_SWIG_Python.SoStyle_lineWidth_set)
    linePattern = _swig_property(HEPVis_SWIG_Python.SoStyle_linePattern_get, HEPVis_SWIG_Python.SoStyle_linePattern_set)
    markerSize = _swig_property(HEPVis_SWIG_Python.SoStyle_markerSize_get, HEPVis_SWIG_Python.SoStyle_markerSize_set)
    DOT = HEPVis_SWIG_Python.SoStyle_DOT
    PLUS = HEPVis_SWIG_Python.SoStyle_PLUS
    ASTERISK = HEPVis_SWIG_Python.SoStyle_ASTERISK
    CROSS = HEPVis_SWIG_Python.SoStyle_CROSS
    STAR = HEPVis_SWIG_Python.SoStyle_STAR
    CIRCLE_LINE = HEPVis_SWIG_Python.SoStyle_CIRCLE_LINE
    CIRCLE_FILLED = HEPVis_SWIG_Python.SoStyle_CIRCLE_FILLED
    TRIANGLE_UP_LINE = HEPVis_SWIG_Python.SoStyle_TRIANGLE_UP_LINE
    TRIANGLE_UP_FILLED = HEPVis_SWIG_Python.SoStyle_TRIANGLE_UP_FILLED
    TRIANGLE_DOWN_LINE = HEPVis_SWIG_Python.SoStyle_TRIANGLE_DOWN_LINE
    TRIANGLE_DOWN_FILLED = HEPVis_SWIG_Python.SoStyle_TRIANGLE_DOWN_FILLED
    SWISS_CROSS_LINE = HEPVis_SWIG_Python.SoStyle_SWISS_CROSS_LINE
    SWISS_CROSS_FILLED = HEPVis_SWIG_Python.SoStyle_SWISS_CROSS_FILLED
    DAVID_STAR_LINE = HEPVis_SWIG_Python.SoStyle_DAVID_STAR_LINE
    DAVID_STAR_FILLED = HEPVis_SWIG_Python.SoStyle_DAVID_STAR_FILLED
    DIAMOND_LINE = HEPVis_SWIG_Python.SoStyle_DIAMOND_LINE
    DIAMOND_FILLED = HEPVis_SWIG_Python.SoStyle_DIAMOND_FILLED
    SQUARE_LINE = HEPVis_SWIG_Python.SoStyle_SQUARE_LINE
    SQUARE_FILLED = HEPVis_SWIG_Python.SoStyle_SQUARE_FILLED
    PENTA_STAR_LINE = HEPVis_SWIG_Python.SoStyle_PENTA_STAR_LINE
    PENTA_STAR_FILLED = HEPVis_SWIG_Python.SoStyle_PENTA_STAR_FILLED
    markerStyle = _swig_property(HEPVis_SWIG_Python.SoStyle_markerStyle_get, HEPVis_SWIG_Python.SoStyle_markerStyle_set)
    SOLID = HEPVis_SWIG_Python.SoStyle_SOLID
    HATCHED = HEPVis_SWIG_Python.SoStyle_HATCHED
    CHECKER = HEPVis_SWIG_Python.SoStyle_CHECKER
    EDGED = HEPVis_SWIG_Python.SoStyle_EDGED
    areaStyle = _swig_property(HEPVis_SWIG_Python.SoStyle_areaStyle_get, HEPVis_SWIG_Python.SoStyle_areaStyle_set)
    fontName = _swig_property(HEPVis_SWIG_Python.SoStyle_fontName_get, HEPVis_SWIG_Python.SoStyle_fontName_set)
    fontSize = _swig_property(HEPVis_SWIG_Python.SoStyle_fontSize_get, HEPVis_SWIG_Python.SoStyle_fontSize_set)
    scale = _swig_property(HEPVis_SWIG_Python.SoStyle_scale_get, HEPVis_SWIG_Python.SoStyle_scale_set)
    NONE = HEPVis_SWIG_Python.SoStyle_NONE
    RIGHT = HEPVis_SWIG_Python.SoStyle_RIGHT
    LEFT = HEPVis_SWIG_Python.SoStyle_LEFT
    LEFT_AND_RIGHT = HEPVis_SWIG_Python.SoStyle_LEFT_AND_RIGHT
    hatching = _swig_property(HEPVis_SWIG_Python.SoStyle_hatching_get, HEPVis_SWIG_Python.SoStyle_hatching_set)
    spacing = _swig_property(HEPVis_SWIG_Python.SoStyle_spacing_get, HEPVis_SWIG_Python.SoStyle_spacing_set)
    angle = _swig_property(HEPVis_SWIG_Python.SoStyle_angle_get, HEPVis_SWIG_Python.SoStyle_angle_set)
    offset = _swig_property(HEPVis_SWIG_Python.SoStyle_offset_get, HEPVis_SWIG_Python.SoStyle_offset_set)
    stripWidth = _swig_property(HEPVis_SWIG_Python.SoStyle_stripWidth_get, HEPVis_SWIG_Python.SoStyle_stripWidth_set)
    visible = _swig_property(HEPVis_SWIG_Python.SoStyle_visible_get, HEPVis_SWIG_Python.SoStyle_visible_set)
    modeling = _swig_property(HEPVis_SWIG_Python.SoStyle_modeling_get, HEPVis_SWIG_Python.SoStyle_modeling_set)
    lightModel = _swig_property(HEPVis_SWIG_Python.SoStyle_lightModel_get, HEPVis_SWIG_Python.SoStyle_lightModel_set)
    tickModeling = _swig_property(HEPVis_SWIG_Python.SoStyle_tickModeling_get, HEPVis_SWIG_Python.SoStyle_tickModeling_set)
    encoding = _swig_property(HEPVis_SWIG_Python.SoStyle_encoding_get, HEPVis_SWIG_Python.SoStyle_encoding_set)
    smoothing = _swig_property(HEPVis_SWIG_Python.SoStyle_smoothing_get, HEPVis_SWIG_Python.SoStyle_smoothing_set)
    hinting = _swig_property(HEPVis_SWIG_Python.SoStyle_hinting_get, HEPVis_SWIG_Python.SoStyle_hinting_set)
    UNIFORM = HEPVis_SWIG_Python.SoStyle_UNIFORM
    BY_VALUE = HEPVis_SWIG_Python.SoStyle_BY_VALUE
    BY_LEVEL = HEPVis_SWIG_Python.SoStyle_BY_LEVEL
    GREY_SCALE = HEPVis_SWIG_Python.SoStyle_GREY_SCALE
    VIOLET_TO_RED = HEPVis_SWIG_Python.SoStyle_VIOLET_TO_RED
    GREY_SCALE_INVERSE = HEPVis_SWIG_Python.SoStyle_GREY_SCALE_INVERSE
    painting = _swig_property(HEPVis_SWIG_Python.SoStyle_painting_get, HEPVis_SWIG_Python.SoStyle_painting_set)
    multiNodeLimit = _swig_property(HEPVis_SWIG_Python.SoStyle_multiNodeLimit_get, HEPVis_SWIG_Python.SoStyle_multiNodeLimit_set)
    divisions = _swig_property(HEPVis_SWIG_Python.SoStyle_divisions_get, HEPVis_SWIG_Python.SoStyle_divisions_set)
    rotationSteps = _swig_property(HEPVis_SWIG_Python.SoStyle_rotationSteps_get, HEPVis_SWIG_Python.SoStyle_rotationSteps_set)
    barOffset = _swig_property(HEPVis_SWIG_Python.SoStyle_barOffset_get, HEPVis_SWIG_Python.SoStyle_barOffset_set)
    barWidth = _swig_property(HEPVis_SWIG_Python.SoStyle_barWidth_get, HEPVis_SWIG_Python.SoStyle_barWidth_set)
    editable = _swig_property(HEPVis_SWIG_Python.SoStyle_editable_get, HEPVis_SWIG_Python.SoStyle_editable_set)
    automated = _swig_property(HEPVis_SWIG_Python.SoStyle_automated_get, HEPVis_SWIG_Python.SoStyle_automated_set)
    options = _swig_property(HEPVis_SWIG_Python.SoStyle_options_get, HEPVis_SWIG_Python.SoStyle_options_set)
    colorMapping = _swig_property(HEPVis_SWIG_Python.SoStyle_colorMapping_get, HEPVis_SWIG_Python.SoStyle_colorMapping_set)
    enforced = _swig_property(HEPVis_SWIG_Python.SoStyle_enforced_get, HEPVis_SWIG_Python.SoStyle_enforced_set)
    translation = _swig_property(HEPVis_SWIG_Python.SoStyle_translation_get, HEPVis_SWIG_Python.SoStyle_translation_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoStyle()
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return HEPVis_SWIG_Python.SoStyle_set(self, *args)
    def setFromString(self, *args): return HEPVis_SWIG_Python.SoStyle_setFromString(self, *args)
    def getSbStyle(self): return HEPVis_SWIG_Python.SoStyle_getSbStyle(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoStyle_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoStyle
    __del__ = lambda self : None;
SoStyle_swigregister = HEPVis_SWIG_Python.SoStyle_swigregister
SoStyle_swigregister(SoStyle)

def SoStyle_getClassTypeId():
  return HEPVis_SWIG_Python.SoStyle_getClassTypeId()
SoStyle_getClassTypeId = HEPVis_SWIG_Python.SoStyle_getClassTypeId

def SoStyle_initClass():
  return HEPVis_SWIG_Python.SoStyle_initClass()
SoStyle_initClass = HEPVis_SWIG_Python.SoStyle_initClass

class SoBinsStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoBinsStyle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoBinsStyle_getTypeId(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoBinsStyle()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoBinsStyle_initClass)
SoBinsStyle_swigregister = HEPVis_SWIG_Python.SoBinsStyle_swigregister
SoBinsStyle_swigregister(SoBinsStyle)

def SoBinsStyle_getClassTypeId():
  return HEPVis_SWIG_Python.SoBinsStyle_getClassTypeId()
SoBinsStyle_getClassTypeId = HEPVis_SWIG_Python.SoBinsStyle_getClassTypeId

def SoBinsStyle_initClass():
  return HEPVis_SWIG_Python.SoBinsStyle_initClass()
SoBinsStyle_initClass = HEPVis_SWIG_Python.SoBinsStyle_initClass

class SoPointsStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPointsStyle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPointsStyle_getTypeId(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPointsStyle()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoPointsStyle_initClass)
SoPointsStyle_swigregister = HEPVis_SWIG_Python.SoPointsStyle_swigregister
SoPointsStyle_swigregister(SoPointsStyle)

def SoPointsStyle_getClassTypeId():
  return HEPVis_SWIG_Python.SoPointsStyle_getClassTypeId()
SoPointsStyle_getClassTypeId = HEPVis_SWIG_Python.SoPointsStyle_getClassTypeId

def SoPointsStyle_initClass():
  return HEPVis_SWIG_Python.SoPointsStyle_initClass()
SoPointsStyle_initClass = HEPVis_SWIG_Python.SoPointsStyle_initClass

class SoFunctionStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoFunctionStyle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoFunctionStyle_getTypeId(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoFunctionStyle()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoFunctionStyle_initClass)
SoFunctionStyle_swigregister = HEPVis_SWIG_Python.SoFunctionStyle_swigregister
SoFunctionStyle_swigregister(SoFunctionStyle)

def SoFunctionStyle_getClassTypeId():
  return HEPVis_SWIG_Python.SoFunctionStyle_getClassTypeId()
SoFunctionStyle_getClassTypeId = HEPVis_SWIG_Python.SoFunctionStyle_getClassTypeId

def SoFunctionStyle_initClass():
  return HEPVis_SWIG_Python.SoFunctionStyle_initClass()
SoFunctionStyle_initClass = HEPVis_SWIG_Python.SoFunctionStyle_initClass

class SoRightHatchStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoRightHatchStyle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoRightHatchStyle_getTypeId(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoRightHatchStyle()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoRightHatchStyle_initClass)
SoRightHatchStyle_swigregister = HEPVis_SWIG_Python.SoRightHatchStyle_swigregister
SoRightHatchStyle_swigregister(SoRightHatchStyle)

def SoRightHatchStyle_getClassTypeId():
  return HEPVis_SWIG_Python.SoRightHatchStyle_getClassTypeId()
SoRightHatchStyle_getClassTypeId = HEPVis_SWIG_Python.SoRightHatchStyle_getClassTypeId

def SoRightHatchStyle_initClass():
  return HEPVis_SWIG_Python.SoRightHatchStyle_initClass()
SoRightHatchStyle_initClass = HEPVis_SWIG_Python.SoRightHatchStyle_initClass

class SoLeftHatchStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoLeftHatchStyle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoLeftHatchStyle_getTypeId(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoLeftHatchStyle()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoLeftHatchStyle_initClass)
SoLeftHatchStyle_swigregister = HEPVis_SWIG_Python.SoLeftHatchStyle_swigregister
SoLeftHatchStyle_swigregister(SoLeftHatchStyle)

def SoLeftHatchStyle_getClassTypeId():
  return HEPVis_SWIG_Python.SoLeftHatchStyle_getClassTypeId()
SoLeftHatchStyle_getClassTypeId = HEPVis_SWIG_Python.SoLeftHatchStyle_getClassTypeId

def SoLeftHatchStyle_initClass():
  return HEPVis_SWIG_Python.SoLeftHatchStyle_initClass()
SoLeftHatchStyle_initClass = HEPVis_SWIG_Python.SoLeftHatchStyle_initClass

class SoErrorsStyle(SoStyle):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoErrorsStyle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoErrorsStyle_getTypeId(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoErrorsStyle()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoErrorsStyle_initClass)
SoErrorsStyle_swigregister = HEPVis_SWIG_Python.SoErrorsStyle_swigregister
SoErrorsStyle_swigregister(SoErrorsStyle)

def SoErrorsStyle_getClassTypeId():
  return HEPVis_SWIG_Python.SoErrorsStyle_getClassTypeId()
SoErrorsStyle_getClassTypeId = HEPVis_SWIG_Python.SoErrorsStyle_getClassTypeId

def SoErrorsStyle_initClass():
  return HEPVis_SWIG_Python.SoErrorsStyle_initClass()
SoErrorsStyle_initClass = HEPVis_SWIG_Python.SoErrorsStyle_initClass

class SoSceneGraph(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSceneGraph_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoSceneGraph_getTypeId(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSceneGraph_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoSceneGraph()
        try: self.this.append(this)
        except: self.this = this
    def setString(self, *args): return HEPVis_SWIG_Python.SoSceneGraph_setString(self, *args)
    def getString(self): return HEPVis_SWIG_Python.SoSceneGraph_getString(self)
    def setInfos(self, *args): return HEPVis_SWIG_Python.SoSceneGraph_setInfos(self, *args)
    def getInfos(self): return HEPVis_SWIG_Python.SoSceneGraph_getInfos(self)
SoSceneGraph_swigregister = HEPVis_SWIG_Python.SoSceneGraph_swigregister
SoSceneGraph_swigregister(SoSceneGraph)

def SoSceneGraph_getClassTypeId():
  return HEPVis_SWIG_Python.SoSceneGraph_getClassTypeId()
SoSceneGraph_getClassTypeId = HEPVis_SWIG_Python.SoSceneGraph_getClassTypeId

def SoSceneGraph_initClass():
  return HEPVis_SWIG_Python.SoSceneGraph_initClass()
SoSceneGraph_initClass = HEPVis_SWIG_Python.SoSceneGraph_initClass

class HEPVis_SoMarkerSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getTypeId(self)
    PLUS_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PLUS_5_5
    ASTERISK_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_ASTERISK_5_5
    CROSS_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CROSS_5_5
    STAR_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_STAR_5_5
    CIRCLE_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_LINE_5_5
    CIRCLE_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_FILLED_5_5
    TRIANGLE_UP_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_LINE_5_5
    TRIANGLE_UP_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_FILLED_5_5
    TRIANGLE_DOWN_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_LINE_5_5
    TRIANGLE_DOWN_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_FILLED_5_5
    DAVID_STAR_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_LINE_5_5
    DAVID_STAR_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_FILLED_5_5
    SWISS_CROSS_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_LINE_5_5
    SWISS_CROSS_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_FILLED_5_5
    DIAMOND_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_LINE_5_5
    DIAMOND_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_FILLED_5_5
    SQUARE_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_LINE_5_5
    SQUARE_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_FILLED_5_5
    PENTA_STAR_LINE_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_LINE_5_5
    PENTA_STAR_FILLED_5_5 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_FILLED_5_5
    PLUS_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PLUS_7_7
    ASTERISK_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_ASTERISK_7_7
    CROSS_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CROSS_7_7
    STAR_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_STAR_7_7
    CIRCLE_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_LINE_7_7
    CIRCLE_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_FILLED_7_7
    TRIANGLE_UP_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_LINE_7_7
    TRIANGLE_UP_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_FILLED_7_7
    TRIANGLE_DOWN_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_LINE_7_7
    TRIANGLE_DOWN_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_FILLED_7_7
    DAVID_STAR_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_LINE_7_7
    DAVID_STAR_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_FILLED_7_7
    SWISS_CROSS_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_LINE_7_7
    SWISS_CROSS_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_FILLED_7_7
    DIAMOND_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_LINE_7_7
    DIAMOND_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_FILLED_7_7
    SQUARE_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_LINE_7_7
    SQUARE_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_FILLED_7_7
    PENTA_STAR_LINE_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_LINE_7_7
    PENTA_STAR_FILLED_7_7 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_FILLED_7_7
    PLUS_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PLUS_9_9
    ASTERISK_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_ASTERISK_9_9
    CROSS_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CROSS_9_9
    STAR_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_STAR_9_9
    CIRCLE_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_LINE_9_9
    CIRCLE_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_CIRCLE_FILLED_9_9
    TRIANGLE_UP_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_LINE_9_9
    TRIANGLE_UP_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_UP_FILLED_9_9
    TRIANGLE_DOWN_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_LINE_9_9
    TRIANGLE_DOWN_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_TRIANGLE_DOWN_FILLED_9_9
    DAVID_STAR_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_LINE_9_9
    DAVID_STAR_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DAVID_STAR_FILLED_9_9
    SWISS_CROSS_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_LINE_9_9
    SWISS_CROSS_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SWISS_CROSS_FILLED_9_9
    DIAMOND_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_LINE_9_9
    DIAMOND_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_DIAMOND_FILLED_9_9
    SQUARE_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_LINE_9_9
    SQUARE_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_SQUARE_FILLED_9_9
    PENTA_STAR_LINE_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_LINE_9_9
    PENTA_STAR_FILLED_9_9 = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_PENTA_STAR_FILLED_9_9
    markerIndex = _swig_property(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_markerIndex_get, HEPVis_SWIG_Python.HEPVis_SoMarkerSet_markerIndex_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_alternateRep_get, HEPVis_SWIG_Python.HEPVis_SoMarkerSet_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_HEPVis_SoMarkerSet()
        try: self.this.append(this)
        except: self.this = this
    def GLRender(self, *args): return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_GLRender(self, *args)
    def doAction(self, *args): return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_doAction(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_write(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_initClass)
    getMarkerIndex = staticmethod(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerIndex)
    getMarkerStyleSize = staticmethod(HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerStyleSize)
HEPVis_SoMarkerSet_swigregister = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_swigregister
HEPVis_SoMarkerSet_swigregister(HEPVis_SoMarkerSet)

def HEPVis_SoMarkerSet_getClassTypeId():
  return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getClassTypeId()
HEPVis_SoMarkerSet_getClassTypeId = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getClassTypeId

def HEPVis_SoMarkerSet_initClass():
  return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_initClass()
HEPVis_SoMarkerSet_initClass = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_initClass

def HEPVis_SoMarkerSet_getMarkerIndex(*args):
  return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerIndex(*args)
HEPVis_SoMarkerSet_getMarkerIndex = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerIndex

def HEPVis_SoMarkerSet_getMarkerStyleSize(*args):
  return HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerStyleSize(*args)
HEPVis_SoMarkerSet_getMarkerStyleSize = HEPVis_SWIG_Python.HEPVis_SoMarkerSet_getMarkerStyleSize

class HEPVis_SoImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.HEPVis_SoImage_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.HEPVis_SoImage_getTypeId(self)
    FITS = HEPVis_SWIG_Python.HEPVis_SoImage_FITS
    GIF = HEPVis_SWIG_Python.HEPVis_SoImage_GIF
    JPEG = HEPVis_SWIG_Python.HEPVis_SoImage_JPEG
    DVI = HEPVis_SWIG_Python.HEPVis_SoImage_DVI
    TEX = HEPVis_SWIG_Python.HEPVis_SoImage_TEX
    format = _swig_property(HEPVis_SWIG_Python.HEPVis_SoImage_format_get, HEPVis_SWIG_Python.HEPVis_SoImage_format_set)
    fileName = _swig_property(HEPVis_SWIG_Python.HEPVis_SoImage_fileName_get, HEPVis_SWIG_Python.HEPVis_SoImage_fileName_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_HEPVis_SoImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def readImage(self): return HEPVis_SWIG_Python.HEPVis_SoImage_readImage(self)
    def getSize(self, *args): return HEPVis_SWIG_Python.HEPVis_SoImage_getSize(self, *args)
    def setPixmap(self, *args): return HEPVis_SWIG_Python.HEPVis_SoImage_setPixmap(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.HEPVis_SoImage_GLRender(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.HEPVis_SoImage_initClass)
HEPVis_SoImage_swigregister = HEPVis_SWIG_Python.HEPVis_SoImage_swigregister
HEPVis_SoImage_swigregister(HEPVis_SoImage)

def HEPVis_SoImage_getClassTypeId():
  return HEPVis_SWIG_Python.HEPVis_SoImage_getClassTypeId()
HEPVis_SoImage_getClassTypeId = HEPVis_SWIG_Python.HEPVis_SoImage_getClassTypeId

def HEPVis_SoImage_initClass():
  return HEPVis_SWIG_Python.HEPVis_SoImage_initClass()
HEPVis_SoImage_initClass = HEPVis_SWIG_Python.HEPVis_SoImage_initClass

class SoImageWriter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoImageWriter_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoImageWriter_getTypeId(self)
    POST_SCRIPT = HEPVis_SWIG_Python.SoImageWriter_POST_SCRIPT
    GIF = HEPVis_SWIG_Python.SoImageWriter_GIF
    JPEG = HEPVis_SWIG_Python.SoImageWriter_JPEG
    format = _swig_property(HEPVis_SWIG_Python.SoImageWriter_format_get, HEPVis_SWIG_Python.SoImageWriter_format_set)
    fileName = _swig_property(HEPVis_SWIG_Python.SoImageWriter_fileName_get, HEPVis_SWIG_Python.SoImageWriter_fileName_set)
    quality = _swig_property(HEPVis_SWIG_Python.SoImageWriter_quality_get, HEPVis_SWIG_Python.SoImageWriter_quality_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoImageWriter_alternateRep_get, HEPVis_SWIG_Python.SoImageWriter_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoImageWriter()
        try: self.this.append(this)
        except: self.this = this
    def enable(self): return HEPVis_SWIG_Python.SoImageWriter_enable(self)
    def disable(self): return HEPVis_SWIG_Python.SoImageWriter_disable(self)
    def getStatus(self): return HEPVis_SWIG_Python.SoImageWriter_getStatus(self)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoImageWriter_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoImageWriter_clearAlternateRep(self)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoImageWriter_GLRender(self, *args)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoImageWriter_doAction(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoImageWriter_write(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoImageWriter_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoImageWriter
    __del__ = lambda self : None;
SoImageWriter_swigregister = HEPVis_SWIG_Python.SoImageWriter_swigregister
SoImageWriter_swigregister(SoImageWriter)

def SoImageWriter_getClassTypeId():
  return HEPVis_SWIG_Python.SoImageWriter_getClassTypeId()
SoImageWriter_getClassTypeId = HEPVis_SWIG_Python.SoImageWriter_getClassTypeId

def SoImageWriter_initClass():
  return HEPVis_SWIG_Python.SoImageWriter_initClass()
SoImageWriter_initClass = HEPVis_SWIG_Python.SoImageWriter_initClass

class SoViewportRegion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoViewportRegion_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoViewportRegion_getTypeId(self)
    PERCENT = HEPVis_SWIG_Python.SoViewportRegion_PERCENT
    PIXELS = HEPVis_SWIG_Python.SoViewportRegion_PIXELS
    visible = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_visible_get, HEPVis_SWIG_Python.SoViewportRegion_visible_set)
    originUnit = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_originUnit_get, HEPVis_SWIG_Python.SoViewportRegion_originUnit_set)
    sizeUnit = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_sizeUnit_get, HEPVis_SWIG_Python.SoViewportRegion_sizeUnit_set)
    origin = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_origin_get, HEPVis_SWIG_Python.SoViewportRegion_origin_set)
    size = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_size_get, HEPVis_SWIG_Python.SoViewportRegion_size_set)
    horizontalBorder = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_horizontalBorder_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalBorder_set)
    verticalBorder = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_verticalBorder_get, HEPVis_SWIG_Python.SoViewportRegion_verticalBorder_set)
    background = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_background_get, HEPVis_SWIG_Python.SoViewportRegion_background_set)
    backgroundColor = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_backgroundColor_get, HEPVis_SWIG_Python.SoViewportRegion_backgroundColor_set)
    borderColor = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_borderColor_get, HEPVis_SWIG_Python.SoViewportRegion_borderColor_set)
    highlighted = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_highlighted_get, HEPVis_SWIG_Python.SoViewportRegion_highlighted_set)
    highlightColor = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_highlightColor_get, HEPVis_SWIG_Python.SoViewportRegion_highlightColor_set)
    horizontalHighlightBorder = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_horizontalHighlightBorder_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalHighlightBorder_set)
    verticalHighlightBorder = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_verticalHighlightBorder_get, HEPVis_SWIG_Python.SoViewportRegion_verticalHighlightBorder_set)
    horizontalShadow = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_horizontalShadow_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalShadow_set)
    verticalShadow = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_verticalShadow_get, HEPVis_SWIG_Python.SoViewportRegion_verticalShadow_set)
    sensitiveBorder = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_sensitiveBorder_get, HEPVis_SWIG_Python.SoViewportRegion_sensitiveBorder_set)
    horizontalOriginOffset = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_horizontalOriginOffset_get, HEPVis_SWIG_Python.SoViewportRegion_horizontalOriginOffset_set)
    verticalOriginOffset = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_verticalOriginOffset_get, HEPVis_SWIG_Python.SoViewportRegion_verticalOriginOffset_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_alternateRep_get, HEPVis_SWIG_Python.SoViewportRegion_alternateRep_set)
    showHighlight = _swig_property(HEPVis_SWIG_Python.SoViewportRegion_showHighlight_get, HEPVis_SWIG_Python.SoViewportRegion_showHighlight_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoViewportRegion()
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return HEPVis_SWIG_Python.SoViewportRegion_reset(self)
    def setPositionPixels(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_setPositionPixels(self, *args)
    def setSizePixels(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_setSizePixels(self, *args)
    def setPositionPercent(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_setPositionPercent(self, *args)
    def setSizePercent(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_setSizePercent(self, *args)
    def getPositionPercent(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_getPositionPercent(self, *args)
    def getSizePercent(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_getSizePercent(self, *args)
    def getPositionPixels(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_getPositionPixels(self, *args)
    def getSizePixels(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_getSizePixels(self, *args)
    def setOriginUnit(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_setOriginUnit(self, *args)
    def setSizeUnit(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_setSizeUnit(self, *args)
    def getBorderSize(self): return HEPVis_SWIG_Python.SoViewportRegion_getBorderSize(self)
    def isInside(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_isInside(self, *args)
    def isResizing(self): return HEPVis_SWIG_Python.SoViewportRegion_isResizing(self)
    def isMoving(self): return HEPVis_SWIG_Python.SoViewportRegion_isMoving(self)
    def dispatchEvent(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_dispatchEvent(self, *args)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoViewportRegion_clearAlternateRep(self)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_doAction(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_GLRender(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_rayPick(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_pick(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoViewportRegion_write(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoViewportRegion_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoViewportRegion
    __del__ = lambda self : None;
SoViewportRegion_swigregister = HEPVis_SWIG_Python.SoViewportRegion_swigregister
SoViewportRegion_swigregister(SoViewportRegion)

def SoViewportRegion_getClassTypeId():
  return HEPVis_SWIG_Python.SoViewportRegion_getClassTypeId()
SoViewportRegion_getClassTypeId = HEPVis_SWIG_Python.SoViewportRegion_getClassTypeId

def SoViewportRegion_initClass():
  return HEPVis_SWIG_Python.SoViewportRegion_initClass()
SoViewportRegion_initClass = HEPVis_SWIG_Python.SoViewportRegion_initClass

class SoTextHershey(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTextHershey_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoTextHershey_getTypeId(self)
    LEFT = HEPVis_SWIG_Python.SoTextHershey_LEFT
    CENTER = HEPVis_SWIG_Python.SoTextHershey_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTextHershey_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTextHershey_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTextHershey_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTextHershey_TOP
    LATIN = HEPVis_SWIG_Python.SoTextHershey_LATIN
    GREEK = HEPVis_SWIG_Python.SoTextHershey_GREEK
    SPECIAL = HEPVis_SWIG_Python.SoTextHershey_SPECIAL
    string = _swig_property(HEPVis_SWIG_Python.SoTextHershey_string_get, HEPVis_SWIG_Python.SoTextHershey_string_set)
    encoding = _swig_property(HEPVis_SWIG_Python.SoTextHershey_encoding_get, HEPVis_SWIG_Python.SoTextHershey_encoding_set)
    font = _swig_property(HEPVis_SWIG_Python.SoTextHershey_font_get, HEPVis_SWIG_Python.SoTextHershey_font_set)
    horizontalJustification = _swig_property(HEPVis_SWIG_Python.SoTextHershey_horizontalJustification_get, HEPVis_SWIG_Python.SoTextHershey_horizontalJustification_set)
    verticalJustification = _swig_property(HEPVis_SWIG_Python.SoTextHershey_verticalJustification_get, HEPVis_SWIG_Python.SoTextHershey_verticalJustification_set)
    height = _swig_property(HEPVis_SWIG_Python.SoTextHershey_height_get, HEPVis_SWIG_Python.SoTextHershey_height_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTextHershey_alternateRep_get, HEPVis_SWIG_Python.SoTextHershey_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTextHershey()
        try: self.this.append(this)
        except: self.this = this
    def getTextBounds(self, *args): return HEPVis_SWIG_Python.SoTextHershey_getTextBounds(self, *args)
    def getAscent(self): return HEPVis_SWIG_Python.SoTextHershey_getAscent(self)
    def getDescent(self): return HEPVis_SWIG_Python.SoTextHershey_getDescent(self)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoTextHershey_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoTextHershey_clearAlternateRep(self)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoTextHershey_GLRender(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoTextHershey_rayPick(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoTextHershey_pick(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoTextHershey_write(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoTextHershey_callback(self, *args)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoTextHershey_doAction(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTextHershey_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextHershey
    __del__ = lambda self : None;
SoTextHershey_swigregister = HEPVis_SWIG_Python.SoTextHershey_swigregister
SoTextHershey_swigregister(SoTextHershey)

def SoTextHershey_getClassTypeId():
  return HEPVis_SWIG_Python.SoTextHershey_getClassTypeId()
SoTextHershey_getClassTypeId = HEPVis_SWIG_Python.SoTextHershey_getClassTypeId

def SoTextHershey_initClass():
  return HEPVis_SWIG_Python.SoTextHershey_initClass()
SoTextHershey_initClass = HEPVis_SWIG_Python.SoTextHershey_initClass

class SoTextVtk(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTextVtk_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoTextVtk_getTypeId(self)
    string = _swig_property(HEPVis_SWIG_Python.SoTextVtk_string_get, HEPVis_SWIG_Python.SoTextVtk_string_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTextVtk()
        try: self.this.append(this)
        except: self.this = this
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoTextVtk_GLRender(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoTextVtk_rayPick(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoTextVtk_pick(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTextVtk_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextVtk
    __del__ = lambda self : None;
SoTextVtk_swigregister = HEPVis_SWIG_Python.SoTextVtk_swigregister
SoTextVtk_swigregister(SoTextVtk)

def SoTextVtk_getClassTypeId():
  return HEPVis_SWIG_Python.SoTextVtk_getClassTypeId()
SoTextVtk_getClassTypeId = HEPVis_SWIG_Python.SoTextVtk_getClassTypeId

def SoTextVtk_initClass():
  return HEPVis_SWIG_Python.SoTextVtk_initClass()
SoTextVtk_initClass = HEPVis_SWIG_Python.SoTextVtk_initClass

class SoTextTTF(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTextTTF_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoTextTTF_getTypeId(self)
    LEFT = HEPVis_SWIG_Python.SoTextTTF_LEFT
    CENTER = HEPVis_SWIG_Python.SoTextTTF_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTextTTF_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTextTTF_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTextTTF_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTextTTF_TOP
    fontName = _swig_property(HEPVis_SWIG_Python.SoTextTTF_fontName_get, HEPVis_SWIG_Python.SoTextTTF_fontName_set)
    encoding = _swig_property(HEPVis_SWIG_Python.SoTextTTF_encoding_get, HEPVis_SWIG_Python.SoTextTTF_encoding_set)
    string = _swig_property(HEPVis_SWIG_Python.SoTextTTF_string_get, HEPVis_SWIG_Python.SoTextTTF_string_set)
    size = _swig_property(HEPVis_SWIG_Python.SoTextTTF_size_get, HEPVis_SWIG_Python.SoTextTTF_size_set)
    smoothing = _swig_property(HEPVis_SWIG_Python.SoTextTTF_smoothing_get, HEPVis_SWIG_Python.SoTextTTF_smoothing_set)
    hinting = _swig_property(HEPVis_SWIG_Python.SoTextTTF_hinting_get, HEPVis_SWIG_Python.SoTextTTF_hinting_set)
    horizontalJustification = _swig_property(HEPVis_SWIG_Python.SoTextTTF_horizontalJustification_get, HEPVis_SWIG_Python.SoTextTTF_horizontalJustification_set)
    verticalJustification = _swig_property(HEPVis_SWIG_Python.SoTextTTF_verticalJustification_get, HEPVis_SWIG_Python.SoTextTTF_verticalJustification_set)
    align = _swig_property(HEPVis_SWIG_Python.SoTextTTF_align_get, HEPVis_SWIG_Python.SoTextTTF_align_set)
    rotated = _swig_property(HEPVis_SWIG_Python.SoTextTTF_rotated_get, HEPVis_SWIG_Python.SoTextTTF_rotated_set)
    rescale = _swig_property(HEPVis_SWIG_Python.SoTextTTF_rescale_get, HEPVis_SWIG_Python.SoTextTTF_rescale_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTextTTF_alternateRep_get, HEPVis_SWIG_Python.SoTextTTF_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTextTTF()
        try: self.this.append(this)
        except: self.this = this
    def getTextBounds(self, *args): return HEPVis_SWIG_Python.SoTextTTF_getTextBounds(self, *args)
    def getAscent(self): return HEPVis_SWIG_Python.SoTextTTF_getAscent(self)
    def getDescent(self): return HEPVis_SWIG_Python.SoTextTTF_getDescent(self)
    def getLatin(self): return HEPVis_SWIG_Python.SoTextTTF_getLatin(self)
    def getGreek(self): return HEPVis_SWIG_Python.SoTextTTF_getGreek(self)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoTextTTF_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoTextTTF_clearAlternateRep(self)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoTextTTF_GLRender(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoTextTTF_rayPick(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoTextTTF_pick(self, *args)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoTextTTF_doAction(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoTextTTF_write(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTextTTF_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextTTF
    __del__ = lambda self : None;
SoTextTTF_swigregister = HEPVis_SWIG_Python.SoTextTTF_swigregister
SoTextTTF_swigregister(SoTextTTF)

def SoTextTTF_getClassTypeId():
  return HEPVis_SWIG_Python.SoTextTTF_getClassTypeId()
SoTextTTF_getClassTypeId = HEPVis_SWIG_Python.SoTextTTF_getClassTypeId

def SoTextTTF_initClass():
  return HEPVis_SWIG_Python.SoTextTTF_initClass()
SoTextTTF_initClass = HEPVis_SWIG_Python.SoTextTTF_initClass

class SoGrid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoGrid_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoGrid_getTypeId(self)
    position = _swig_property(HEPVis_SWIG_Python.SoGrid_position_get, HEPVis_SWIG_Python.SoGrid_position_set)
    X = _swig_property(HEPVis_SWIG_Python.SoGrid_X_get, HEPVis_SWIG_Python.SoGrid_X_set)
    Y = _swig_property(HEPVis_SWIG_Python.SoGrid_Y_get, HEPVis_SWIG_Python.SoGrid_Y_set)
    rows = _swig_property(HEPVis_SWIG_Python.SoGrid_rows_get, HEPVis_SWIG_Python.SoGrid_rows_set)
    columns = _swig_property(HEPVis_SWIG_Python.SoGrid_columns_get, HEPVis_SWIG_Python.SoGrid_columns_set)
    width = _swig_property(HEPVis_SWIG_Python.SoGrid_width_get, HEPVis_SWIG_Python.SoGrid_width_set)
    height = _swig_property(HEPVis_SWIG_Python.SoGrid_height_get, HEPVis_SWIG_Python.SoGrid_height_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoGrid_alternateRep_get, HEPVis_SWIG_Python.SoGrid_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoGrid()
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoGrid_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoGrid_clearAlternateRep(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoGrid_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoGrid
    __del__ = lambda self : None;
SoGrid_swigregister = HEPVis_SWIG_Python.SoGrid_swigregister
SoGrid_swigregister(SoGrid)

def SoGrid_getClassTypeId():
  return HEPVis_SWIG_Python.SoGrid_getClassTypeId()
SoGrid_getClassTypeId = HEPVis_SWIG_Python.SoGrid_getClassTypeId

def SoGrid_initClass():
  return HEPVis_SWIG_Python.SoGrid_initClass()
SoGrid_initClass = HEPVis_SWIG_Python.SoGrid_initClass

class SoEdgedFaceSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoEdgedFaceSet_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoEdgedFaceSet_getTypeId(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoEdgedFaceSet()
        try: self.this.append(this)
        except: self.this = this
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoEdgedFaceSet_GLRender(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoEdgedFaceSet_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEdgedFaceSet
    __del__ = lambda self : None;
SoEdgedFaceSet_swigregister = HEPVis_SWIG_Python.SoEdgedFaceSet_swigregister
SoEdgedFaceSet_swigregister(SoEdgedFaceSet)

def SoEdgedFaceSet_getClassTypeId():
  return HEPVis_SWIG_Python.SoEdgedFaceSet_getClassTypeId()
SoEdgedFaceSet_getClassTypeId = HEPVis_SWIG_Python.SoEdgedFaceSet_getClassTypeId

def SoEdgedFaceSet_initClass():
  return HEPVis_SWIG_Python.SoEdgedFaceSet_initClass()
SoEdgedFaceSet_initClass = HEPVis_SWIG_Python.SoEdgedFaceSet_initClass

class SoHighlightMaterial(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoHighlightMaterial_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoHighlightMaterial_getTypeId(self)
    highlightColor = _swig_property(HEPVis_SWIG_Python.SoHighlightMaterial_highlightColor_get, HEPVis_SWIG_Python.SoHighlightMaterial_highlightColor_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoHighlightMaterial_alternateRep_get, HEPVis_SWIG_Python.SoHighlightMaterial_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoHighlightMaterial()
        try: self.this.append(this)
        except: self.this = this
    def setSavedMaterial(self, *args): return HEPVis_SWIG_Python.SoHighlightMaterial_setSavedMaterial(self, *args)
    def getSavedMaterial(self): return HEPVis_SWIG_Python.SoHighlightMaterial_getSavedMaterial(self)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoHighlightMaterial_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoHighlightMaterial_clearAlternateRep(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoHighlightMaterial_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoHighlightMaterial
    __del__ = lambda self : None;
SoHighlightMaterial_swigregister = HEPVis_SWIG_Python.SoHighlightMaterial_swigregister
SoHighlightMaterial_swigregister(SoHighlightMaterial)

def SoHighlightMaterial_getClassTypeId():
  return HEPVis_SWIG_Python.SoHighlightMaterial_getClassTypeId()
SoHighlightMaterial_getClassTypeId = HEPVis_SWIG_Python.SoHighlightMaterial_getClassTypeId

def SoHighlightMaterial_initClass():
  return HEPVis_SWIG_Python.SoHighlightMaterial_initClass()
SoHighlightMaterial_initClass = HEPVis_SWIG_Python.SoHighlightMaterial_initClass

class SoSplineCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSplineCurve_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoSplineCurve_getTypeId(self)
    points = _swig_property(HEPVis_SWIG_Python.SoSplineCurve_points_get, HEPVis_SWIG_Python.SoSplineCurve_points_set)
    tangents = _swig_property(HEPVis_SWIG_Python.SoSplineCurve_tangents_get, HEPVis_SWIG_Python.SoSplineCurve_tangents_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSplineCurve_alternateRep_get, HEPVis_SWIG_Python.SoSplineCurve_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoSplineCurve()
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoSplineCurve_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoSplineCurve_clearAlternateRep(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSplineCurve_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSplineCurve
    __del__ = lambda self : None;
SoSplineCurve_swigregister = HEPVis_SWIG_Python.SoSplineCurve_swigregister
SoSplineCurve_swigregister(SoSplineCurve)

def SoSplineCurve_getClassTypeId():
  return HEPVis_SWIG_Python.SoSplineCurve_getClassTypeId()
SoSplineCurve_getClassTypeId = HEPVis_SWIG_Python.SoSplineCurve_getClassTypeId

def SoSplineCurve_initClass():
  return HEPVis_SWIG_Python.SoSplineCurve_initClass()
SoSplineCurve_initClass = HEPVis_SWIG_Python.SoSplineCurve_initClass

class SoPyramid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPyramid_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPyramid_getTypeId(self)
    backWidth = _swig_property(HEPVis_SWIG_Python.SoPyramid_backWidth_get, HEPVis_SWIG_Python.SoPyramid_backWidth_set)
    backHeight = _swig_property(HEPVis_SWIG_Python.SoPyramid_backHeight_get, HEPVis_SWIG_Python.SoPyramid_backHeight_set)
    frontWidth = _swig_property(HEPVis_SWIG_Python.SoPyramid_frontWidth_get, HEPVis_SWIG_Python.SoPyramid_frontWidth_set)
    frontHeight = _swig_property(HEPVis_SWIG_Python.SoPyramid_frontHeight_get, HEPVis_SWIG_Python.SoPyramid_frontHeight_set)
    depth = _swig_property(HEPVis_SWIG_Python.SoPyramid_depth_get, HEPVis_SWIG_Python.SoPyramid_depth_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPyramid()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoPyramid_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPyramid
    __del__ = lambda self : None;
SoPyramid_swigregister = HEPVis_SWIG_Python.SoPyramid_swigregister
SoPyramid_swigregister(SoPyramid)

def SoPyramid_getClassTypeId():
  return HEPVis_SWIG_Python.SoPyramid_getClassTypeId()
SoPyramid_getClassTypeId = HEPVis_SWIG_Python.SoPyramid_getClassTypeId

def SoPyramid_initClass():
  return HEPVis_SWIG_Python.SoPyramid_initClass()
SoPyramid_initClass = HEPVis_SWIG_Python.SoPyramid_initClass

class SoAxis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoAxis_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoAxis_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoAxis_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoAxis_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoAxis_alternateRep_get, HEPVis_SWIG_Python.SoAxis_alternateRep_set)
    verbose = _swig_property(HEPVis_SWIG_Python.SoAxis_verbose_get, HEPVis_SWIG_Python.SoAxis_verbose_set)
    modeling = _swig_property(HEPVis_SWIG_Python.SoAxis_modeling_get, HEPVis_SWIG_Python.SoAxis_modeling_set)
    width = _swig_property(HEPVis_SWIG_Python.SoAxis_width_get, HEPVis_SWIG_Python.SoAxis_width_set)
    minimumValue = _swig_property(HEPVis_SWIG_Python.SoAxis_minimumValue_get, HEPVis_SWIG_Python.SoAxis_minimumValue_set)
    maximumValue = _swig_property(HEPVis_SWIG_Python.SoAxis_maximumValue_get, HEPVis_SWIG_Python.SoAxis_maximumValue_set)
    divisions = _swig_property(HEPVis_SWIG_Python.SoAxis_divisions_get, HEPVis_SWIG_Python.SoAxis_divisions_set)
    logScale = _swig_property(HEPVis_SWIG_Python.SoAxis_logScale_get, HEPVis_SWIG_Python.SoAxis_logScale_set)
    tickUp = _swig_property(HEPVis_SWIG_Python.SoAxis_tickUp_get, HEPVis_SWIG_Python.SoAxis_tickUp_set)
    tickLength = _swig_property(HEPVis_SWIG_Python.SoAxis_tickLength_get, HEPVis_SWIG_Python.SoAxis_tickLength_set)
    labelToAxis = _swig_property(HEPVis_SWIG_Python.SoAxis_labelToAxis_get, HEPVis_SWIG_Python.SoAxis_labelToAxis_set)
    labelHeight = _swig_property(HEPVis_SWIG_Python.SoAxis_labelHeight_get, HEPVis_SWIG_Python.SoAxis_labelHeight_set)
    title = _swig_property(HEPVis_SWIG_Python.SoAxis_title_get, HEPVis_SWIG_Python.SoAxis_title_set)
    titleToAxis = _swig_property(HEPVis_SWIG_Python.SoAxis_titleToAxis_get, HEPVis_SWIG_Python.SoAxis_titleToAxis_set)
    titleHeight = _swig_property(HEPVis_SWIG_Python.SoAxis_titleHeight_get, HEPVis_SWIG_Python.SoAxis_titleHeight_set)
    LEFT = HEPVis_SWIG_Python.SoAxis_LEFT
    CENTER = HEPVis_SWIG_Python.SoAxis_CENTER
    RIGHT = HEPVis_SWIG_Python.SoAxis_RIGHT
    titleToAxisJustification = _swig_property(HEPVis_SWIG_Python.SoAxis_titleToAxisJustification_get, HEPVis_SWIG_Python.SoAxis_titleToAxisJustification_set)
    ttfScale = _swig_property(HEPVis_SWIG_Python.SoAxis_ttfScale_get, HEPVis_SWIG_Python.SoAxis_ttfScale_set)
    labelsEnforced = _swig_property(HEPVis_SWIG_Python.SoAxis_labelsEnforced_get, HEPVis_SWIG_Python.SoAxis_labelsEnforced_set)
    timeLabels = _swig_property(HEPVis_SWIG_Python.SoAxis_timeLabels_get, HEPVis_SWIG_Python.SoAxis_timeLabels_set)
    timeFormat = _swig_property(HEPVis_SWIG_Python.SoAxis_timeFormat_get, HEPVis_SWIG_Python.SoAxis_timeFormat_set)
    timeOffset = _swig_property(HEPVis_SWIG_Python.SoAxis_timeOffset_get, HEPVis_SWIG_Python.SoAxis_timeOffset_set)
    timeOffsetIsGMT = _swig_property(HEPVis_SWIG_Python.SoAxis_timeOffsetIsGMT_get, HEPVis_SWIG_Python.SoAxis_timeOffsetIsGMT_set)
    tickNumber = _swig_property(HEPVis_SWIG_Python.SoAxis_tickNumber_get, HEPVis_SWIG_Python.SoAxis_tickNumber_set)
    labels = _swig_property(HEPVis_SWIG_Python.SoAxis_labels_get, HEPVis_SWIG_Python.SoAxis_labels_set)
    values = _swig_property(HEPVis_SWIG_Python.SoAxis_values_get, HEPVis_SWIG_Python.SoAxis_values_set)
    coords = _swig_property(HEPVis_SWIG_Python.SoAxis_coords_get, HEPVis_SWIG_Python.SoAxis_coords_set)
    subCoords = _swig_property(HEPVis_SWIG_Python.SoAxis_subCoords_get, HEPVis_SWIG_Python.SoAxis_subCoords_set)
    magnitude = _swig_property(HEPVis_SWIG_Python.SoAxis_magnitude_get, HEPVis_SWIG_Python.SoAxis_magnitude_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoAxis_initClass)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoAxis_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoAxis_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoAxis_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoAxis_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoAxis_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoAxis_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoAxis_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoAxis_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoAxis_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoAxis_pick(self, *args)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoAxis()
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return HEPVis_SWIG_Python.SoAxis_reset(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoAxis_updateChildren(self)
    def getLineStyle(self): return HEPVis_SWIG_Python.SoAxis_getLineStyle(self)
    def getTicksStyle(self): return HEPVis_SWIG_Python.SoAxis_getTicksStyle(self)
    def getLabelsStyle(self): return HEPVis_SWIG_Python.SoAxis_getLabelsStyle(self)
    def getTitleStyle(self): return HEPVis_SWIG_Python.SoAxis_getTitleStyle(self)
    def getMagStyle(self): return HEPVis_SWIG_Python.SoAxis_getMagStyle(self)
    def setVisible(self, *args): return HEPVis_SWIG_Python.SoAxis_setVisible(self, *args)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoAxis_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoAxis_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAxis
    __del__ = lambda self : None;
SoAxis_swigregister = HEPVis_SWIG_Python.SoAxis_swigregister
SoAxis_swigregister(SoAxis)

def SoAxis_getClassTypeId():
  return HEPVis_SWIG_Python.SoAxis_getClassTypeId()
SoAxis_getClassTypeId = HEPVis_SWIG_Python.SoAxis_getClassTypeId

def SoAxis_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoAxis_getClassNodekitCatalog()
SoAxis_getClassNodekitCatalog = HEPVis_SWIG_Python.SoAxis_getClassNodekitCatalog

def SoAxis_initClass():
  return HEPVis_SWIG_Python.SoAxis_initClass()
SoAxis_initClass = HEPVis_SWIG_Python.SoAxis_initClass

class SoAxes2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoAxes2D_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoAxes2D_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoAxes2D_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoAxes2D_getNodekitCatalog(self)
    SOLID = HEPVis_SWIG_Python.SoAxes2D_SOLID
    DASHED = HEPVis_SWIG_Python.SoAxes2D_DASHED
    DOTTED = HEPVis_SWIG_Python.SoAxes2D_DOTTED
    DASH_DOTTED = HEPVis_SWIG_Python.SoAxes2D_DASH_DOTTED
    gridColor = _swig_property(HEPVis_SWIG_Python.SoAxes2D_gridColor_get, HEPVis_SWIG_Python.SoAxes2D_gridColor_set)
    gridTransparency = _swig_property(HEPVis_SWIG_Python.SoAxes2D_gridTransparency_get, HEPVis_SWIG_Python.SoAxes2D_gridTransparency_set)
    gridLinePattern = _swig_property(HEPVis_SWIG_Python.SoAxes2D_gridLinePattern_get, HEPVis_SWIG_Python.SoAxes2D_gridLinePattern_set)
    gridVisible = _swig_property(HEPVis_SWIG_Python.SoAxes2D_gridVisible_get, HEPVis_SWIG_Python.SoAxes2D_gridVisible_set)
    wallColor = _swig_property(HEPVis_SWIG_Python.SoAxes2D_wallColor_get, HEPVis_SWIG_Python.SoAxes2D_wallColor_set)
    wallTransparency = _swig_property(HEPVis_SWIG_Python.SoAxes2D_wallTransparency_get, HEPVis_SWIG_Python.SoAxes2D_wallTransparency_set)
    wallOffset = _swig_property(HEPVis_SWIG_Python.SoAxes2D_wallOffset_get, HEPVis_SWIG_Python.SoAxes2D_wallOffset_set)
    wallVisible = _swig_property(HEPVis_SWIG_Python.SoAxes2D_wallVisible_get, HEPVis_SWIG_Python.SoAxes2D_wallVisible_set)
    topAxisVisible = _swig_property(HEPVis_SWIG_Python.SoAxes2D_topAxisVisible_get, HEPVis_SWIG_Python.SoAxes2D_topAxisVisible_set)
    topAxisY = _swig_property(HEPVis_SWIG_Python.SoAxes2D_topAxisY_get, HEPVis_SWIG_Python.SoAxes2D_topAxisY_set)
    rightAxisVisible = _swig_property(HEPVis_SWIG_Python.SoAxes2D_rightAxisVisible_get, HEPVis_SWIG_Python.SoAxes2D_rightAxisVisible_set)
    rightAxisX = _swig_property(HEPVis_SWIG_Python.SoAxes2D_rightAxisX_get, HEPVis_SWIG_Python.SoAxes2D_rightAxisX_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoAxes2D_initClass)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoAxes2D_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoAxes2D_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoAxes2D_GLRender(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoAxes2D_rayPick(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoAxes2D_pick(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoAxes2D_getBoundingBox(self, *args)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoAxes2D()
        try: self.this.append(this)
        except: self.this = this
    def getXAxis(self): return HEPVis_SWIG_Python.SoAxes2D_getXAxis(self)
    def getYAxis(self): return HEPVis_SWIG_Python.SoAxes2D_getYAxis(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAxes2D
    __del__ = lambda self : None;
SoAxes2D_swigregister = HEPVis_SWIG_Python.SoAxes2D_swigregister
SoAxes2D_swigregister(SoAxes2D)

def SoAxes2D_getClassTypeId():
  return HEPVis_SWIG_Python.SoAxes2D_getClassTypeId()
SoAxes2D_getClassTypeId = HEPVis_SWIG_Python.SoAxes2D_getClassTypeId

def SoAxes2D_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoAxes2D_getClassNodekitCatalog()
SoAxes2D_getClassNodekitCatalog = HEPVis_SWIG_Python.SoAxes2D_getClassNodekitCatalog

def SoAxes2D_initClass():
  return HEPVis_SWIG_Python.SoAxes2D_initClass()
SoAxes2D_initClass = HEPVis_SWIG_Python.SoAxes2D_initClass

class SoAxes3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoAxes3D_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoAxes3D_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoAxes3D_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoAxes3D_getNodekitCatalog(self)
    gridColor = _swig_property(HEPVis_SWIG_Python.SoAxes3D_gridColor_get, HEPVis_SWIG_Python.SoAxes3D_gridColor_set)
    gridTransparency = _swig_property(HEPVis_SWIG_Python.SoAxes3D_gridTransparency_get, HEPVis_SWIG_Python.SoAxes3D_gridTransparency_set)
    gridLinePattern = _swig_property(HEPVis_SWIG_Python.SoAxes3D_gridLinePattern_get, HEPVis_SWIG_Python.SoAxes3D_gridLinePattern_set)
    gridVisible = _swig_property(HEPVis_SWIG_Python.SoAxes3D_gridVisible_get, HEPVis_SWIG_Python.SoAxes3D_gridVisible_set)
    wallColor = _swig_property(HEPVis_SWIG_Python.SoAxes3D_wallColor_get, HEPVis_SWIG_Python.SoAxes3D_wallColor_set)
    wallTransparency = _swig_property(HEPVis_SWIG_Python.SoAxes3D_wallTransparency_get, HEPVis_SWIG_Python.SoAxes3D_wallTransparency_set)
    wallOffset = _swig_property(HEPVis_SWIG_Python.SoAxes3D_wallOffset_get, HEPVis_SWIG_Python.SoAxes3D_wallOffset_set)
    wallVisible = _swig_property(HEPVis_SWIG_Python.SoAxes3D_wallVisible_get, HEPVis_SWIG_Python.SoAxes3D_wallVisible_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoAxes3D_initClass)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoAxes3D_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoAxes3D_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoAxes3D_GLRender(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoAxes3D_rayPick(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoAxes3D_pick(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoAxes3D_getBoundingBox(self, *args)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoAxes3D()
        try: self.this.append(this)
        except: self.this = this
    def getXAxis(self): return HEPVis_SWIG_Python.SoAxes3D_getXAxis(self)
    def getYAxis(self): return HEPVis_SWIG_Python.SoAxes3D_getYAxis(self)
    def getZAxis(self): return HEPVis_SWIG_Python.SoAxes3D_getZAxis(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAxes3D
    __del__ = lambda self : None;
SoAxes3D_swigregister = HEPVis_SWIG_Python.SoAxes3D_swigregister
SoAxes3D_swigregister(SoAxes3D)

def SoAxes3D_getClassTypeId():
  return HEPVis_SWIG_Python.SoAxes3D_getClassTypeId()
SoAxes3D_getClassTypeId = HEPVis_SWIG_Python.SoAxes3D_getClassTypeId

def SoAxes3D_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoAxes3D_getClassNodekitCatalog()
SoAxes3D_getClassNodekitCatalog = HEPVis_SWIG_Python.SoAxes3D_getClassNodekitCatalog

def SoAxes3D_initClass():
  return HEPVis_SWIG_Python.SoAxes3D_initClass()
SoAxes3D_initClass = HEPVis_SWIG_Python.SoAxes3D_initClass

class SoSimpleButton(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSimpleButton_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoSimpleButton_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoSimpleButton_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoSimpleButton_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSimpleButton_alternateRep_get, HEPVis_SWIG_Python.SoSimpleButton_alternateRep_set)
    verbose = _swig_property(HEPVis_SWIG_Python.SoSimpleButton_verbose_get, HEPVis_SWIG_Python.SoSimpleButton_verbose_set)
    width = _swig_property(HEPVis_SWIG_Python.SoSimpleButton_width_get, HEPVis_SWIG_Python.SoSimpleButton_width_set)
    height = _swig_property(HEPVis_SWIG_Python.SoSimpleButton_height_get, HEPVis_SWIG_Python.SoSimpleButton_height_set)
    label = _swig_property(HEPVis_SWIG_Python.SoSimpleButton_label_get, HEPVis_SWIG_Python.SoSimpleButton_label_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSimpleButton_initClass)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_pick(self, *args)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoSimpleButton()
        try: self.this.append(this)
        except: self.this = this
    def updateChildren(self): return HEPVis_SWIG_Python.SoSimpleButton_updateChildren(self)
    def getBackStyle(self): return HEPVis_SWIG_Python.SoSimpleButton_getBackStyle(self)
    def getLabelStyle(self): return HEPVis_SWIG_Python.SoSimpleButton_getLabelStyle(self)
    def addCallback(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_addCallback(self, *args)
    def removeCallback(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_removeCallback(self, *args)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoSimpleButton_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoSimpleButton_clearAlternateRep(self)
    def invokeCallbacks(self): return HEPVis_SWIG_Python.SoSimpleButton_invokeCallbacks(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSimpleButton
    __del__ = lambda self : None;
SoSimpleButton_swigregister = HEPVis_SWIG_Python.SoSimpleButton_swigregister
SoSimpleButton_swigregister(SoSimpleButton)

def SoSimpleButton_getClassTypeId():
  return HEPVis_SWIG_Python.SoSimpleButton_getClassTypeId()
SoSimpleButton_getClassTypeId = HEPVis_SWIG_Python.SoSimpleButton_getClassTypeId

def SoSimpleButton_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoSimpleButton_getClassNodekitCatalog()
SoSimpleButton_getClassNodekitCatalog = HEPVis_SWIG_Python.SoSimpleButton_getClassNodekitCatalog

def SoSimpleButton_initClass():
  return HEPVis_SWIG_Python.SoSimpleButton_initClass()
SoSimpleButton_initClass = HEPVis_SWIG_Python.SoSimpleButton_initClass

class RegionCamera(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_RegionCamera(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_RegionCamera
    __del__ = lambda self : None;
    def restore(self, *args): return HEPVis_SWIG_Python.RegionCamera_restore(self, *args)
RegionCamera_swigregister = HEPVis_SWIG_Python.RegionCamera_swigregister
RegionCamera_swigregister(RegionCamera)

class SbDoIt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbDoIt
    __del__ = lambda self : None;
    def cast(self, *args): return HEPVis_SWIG_Python.SbDoIt_cast(self, *args)
SbDoIt_swigregister = HEPVis_SWIG_Python.SbDoIt_swigregister
SbDoIt_swigregister(SbDoIt)

class SbAddNode(SbDoIt):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def cast(self, *args): return HEPVis_SWIG_Python.SbAddNode_cast(self, *args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbAddNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbAddNode
    __del__ = lambda self : None;
    def getNode(self): return HEPVis_SWIG_Python.SbAddNode_getNode(self)
    def getPlacement(self): return HEPVis_SWIG_Python.SbAddNode_getPlacement(self)
    def reset(self): return HEPVis_SWIG_Python.SbAddNode_reset(self)
SbAddNode_swigregister = HEPVis_SWIG_Python.SbAddNode_swigregister
SbAddNode_swigregister(SbAddNode)

class SoRegion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoRegion_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoRegion_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoRegion_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoRegion_getNodekitCatalog(self)
    visible = _swig_property(HEPVis_SWIG_Python.SoRegion_visible_get, HEPVis_SWIG_Python.SoRegion_visible_set)
    verbose = _swig_property(HEPVis_SWIG_Python.SoRegion_verbose_get, HEPVis_SWIG_Python.SoRegion_verbose_set)
    color = _swig_property(HEPVis_SWIG_Python.SoRegion_color_get, HEPVis_SWIG_Python.SoRegion_color_set)
    origin = _swig_property(HEPVis_SWIG_Python.SoRegion_origin_get, HEPVis_SWIG_Python.SoRegion_origin_set)
    size = _swig_property(HEPVis_SWIG_Python.SoRegion_size_get, HEPVis_SWIG_Python.SoRegion_size_set)
    horizontalMargin = _swig_property(HEPVis_SWIG_Python.SoRegion_horizontalMargin_get, HEPVis_SWIG_Python.SoRegion_horizontalMargin_set)
    verticalMargin = _swig_property(HEPVis_SWIG_Python.SoRegion_verticalMargin_get, HEPVis_SWIG_Python.SoRegion_verticalMargin_set)
    PERCENT = HEPVis_SWIG_Python.SoRegion_PERCENT
    AXIS = HEPVis_SWIG_Python.SoRegion_AXIS
    originUnit = _swig_property(HEPVis_SWIG_Python.SoRegion_originUnit_get, HEPVis_SWIG_Python.SoRegion_originUnit_set)
    LEFT = HEPVis_SWIG_Python.SoRegion_LEFT
    CENTER = HEPVis_SWIG_Python.SoRegion_CENTER
    RIGHT = HEPVis_SWIG_Python.SoRegion_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoRegion_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoRegion_MIDDLE
    TOP = HEPVis_SWIG_Python.SoRegion_TOP
    horizontalJustification = _swig_property(HEPVis_SWIG_Python.SoRegion_horizontalJustification_get, HEPVis_SWIG_Python.SoRegion_horizontalJustification_set)
    verticalJustification = _swig_property(HEPVis_SWIG_Python.SoRegion_verticalJustification_get, HEPVis_SWIG_Python.SoRegion_verticalJustification_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoRegion()
        try: self.this.append(this)
        except: self.this = this
    def getViewportRegion(self): return HEPVis_SWIG_Python.SoRegion_getViewportRegion(self)
    def pushCamera(self): return HEPVis_SWIG_Python.SoRegion_pushCamera(self)
    def popCamera(self): return HEPVis_SWIG_Python.SoRegion_popCamera(self)
    def clearCameraStack(self): return HEPVis_SWIG_Python.SoRegion_clearCameraStack(self)
    def viewRectangle(self, *args): return HEPVis_SWIG_Python.SoRegion_viewRectangle(self, *args)
    def findPart(self, *args): return HEPVis_SWIG_Python.SoRegion_findPart(self, *args)
    def findNode(self, *args): return HEPVis_SWIG_Python.SoRegion_findNode(self, *args)
    def styleCache(self): return HEPVis_SWIG_Python.SoRegion_styleCache(self)
    def clearStyleCache(self): return HEPVis_SWIG_Python.SoRegion_clearStyleCache(self)
    def setPAW_Placement(self, *args): return HEPVis_SWIG_Python.SoRegion_setPAW_Placement(self, *args)
    def getPAW_Placement(self, *args): return HEPVis_SWIG_Python.SoRegion_getPAW_Placement(self, *args)
    def raiseUpdateFlag(self): return HEPVis_SWIG_Python.SoRegion_raiseUpdateFlag(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoRegion_updateChildren(self)
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoRegion_getTopSeparator(self)
    def getCamera(self): return HEPVis_SWIG_Python.SoRegion_getCamera(self)
    def clear(self, arg2=""): return HEPVis_SWIG_Python.SoRegion_clear(self, arg2)
    def refresh(self): return HEPVis_SWIG_Python.SoRegion_refresh(self)
    def resetCamera(self): return HEPVis_SWIG_Python.SoRegion_resetCamera(self)
    def setCamera(self, *args): return HEPVis_SWIG_Python.SoRegion_setCamera(self, *args)
    def doIt(self, *args): return HEPVis_SWIG_Python.SoRegion_doIt(self, *args)
    def undo(self): return HEPVis_SWIG_Python.SoRegion_undo(self)
    def resetUndo(self): return HEPVis_SWIG_Python.SoRegion_resetUndo(self)
    def connectFrom(self, *args): return HEPVis_SWIG_Python.SoRegion_connectFrom(self, *args)
    def getNodeOfInterest(self, arg2=""): return HEPVis_SWIG_Python.SoRegion_getNodeOfInterest(self, arg2)
    def placeInPage(self, *args): return HEPVis_SWIG_Python.SoRegion_placeInPage(self, *args)
    def setNode(self, *args): return HEPVis_SWIG_Python.SoRegion_setNode(self, *args)
    def setPosition(self, *args): return HEPVis_SWIG_Python.SoRegion_setPosition(self, *args)
    def setSize(self, *args): return HEPVis_SWIG_Python.SoRegion_setSize(self, *args)
    def readScene(self, *args): return HEPVis_SWIG_Python.SoRegion_readScene(self, *args)
    def getWriteNode(self, arg2=""): return HEPVis_SWIG_Python.SoRegion_getWriteNode(self, arg2)
    initClass = staticmethod(HEPVis_SWIG_Python.SoRegion_initClass)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoRegion_GLRender(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoRegion
    __del__ = lambda self : None;
    def cast_SoDisplayRegion(self): return HEPVis_SWIG_Python.SoRegion_cast_SoDisplayRegion(self)
    def cast_SoImageRegion(self): return HEPVis_SWIG_Python.SoRegion_cast_SoImageRegion(self)
    def cast_SoTextRegion(self): return HEPVis_SWIG_Python.SoRegion_cast_SoTextRegion(self)
    def cast_SoPlotterRegion(self): return HEPVis_SWIG_Python.SoRegion_cast_SoPlotterRegion(self)
SoRegion_swigregister = HEPVis_SWIG_Python.SoRegion_swigregister
SoRegion_swigregister(SoRegion)

def SoRegion_getClassTypeId():
  return HEPVis_SWIG_Python.SoRegion_getClassTypeId()
SoRegion_getClassTypeId = HEPVis_SWIG_Python.SoRegion_getClassTypeId

def SoRegion_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoRegion_getClassNodekitCatalog()
SoRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoRegion_getClassNodekitCatalog

def SoRegion_initClass():
  return HEPVis_SWIG_Python.SoRegion_initClass()
SoRegion_initClass = HEPVis_SWIG_Python.SoRegion_initClass

class SoTextRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTextRegion_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoTextRegion_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoTextRegion_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoTextRegion_getNodekitCatalog(self)
    text = _swig_property(HEPVis_SWIG_Python.SoTextRegion_text_get, HEPVis_SWIG_Python.SoTextRegion_text_set)
    LEFT = HEPVis_SWIG_Python.SoTextRegion_LEFT
    RIGHT = HEPVis_SWIG_Python.SoTextRegion_RIGHT
    CENTER = HEPVis_SWIG_Python.SoTextRegion_CENTER
    horizontalJustification = _swig_property(HEPVis_SWIG_Python.SoTextRegion_horizontalJustification_get, HEPVis_SWIG_Python.SoTextRegion_horizontalJustification_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTextRegion_alternateRep_get, HEPVis_SWIG_Python.SoTextRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTextRegion_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTextRegion()
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoTextRegion_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoTextRegion_clearAlternateRep(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoTextRegion_updateChildren(self)
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoTextRegion_getTopSeparator(self)
    def getCamera(self): return HEPVis_SWIG_Python.SoTextRegion_getCamera(self)
    def resetCamera(self): return HEPVis_SWIG_Python.SoTextRegion_resetCamera(self)
    def clear(self, arg2=""): return HEPVis_SWIG_Python.SoTextRegion_clear(self, arg2)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoTextRegion_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoTextRegion_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoTextRegion_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoTextRegion_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoTextRegion_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoTextRegion_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoTextRegion_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoTextRegion_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoTextRegion_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoTextRegion_pick(self, *args)
    def getStyle(self, *args): return HEPVis_SWIG_Python.SoTextRegion_getStyle(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTextRegion
    __del__ = lambda self : None;
SoTextRegion_swigregister = HEPVis_SWIG_Python.SoTextRegion_swigregister
SoTextRegion_swigregister(SoTextRegion)

def SoTextRegion_getClassTypeId():
  return HEPVis_SWIG_Python.SoTextRegion_getClassTypeId()
SoTextRegion_getClassTypeId = HEPVis_SWIG_Python.SoTextRegion_getClassTypeId

def SoTextRegion_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoTextRegion_getClassNodekitCatalog()
SoTextRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoTextRegion_getClassNodekitCatalog

def SoTextRegion_initClass():
  return HEPVis_SWIG_Python.SoTextRegion_initClass()
SoTextRegion_initClass = HEPVis_SWIG_Python.SoTextRegion_initClass

class SoImageRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoImageRegion_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoImageRegion_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoImageRegion_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoImageRegion_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoImageRegion_alternateRep_get, HEPVis_SWIG_Python.SoImageRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoImageRegion_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoImageRegion()
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoImageRegion_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoImageRegion_clearAlternateRep(self)
    def getImage(self): return HEPVis_SWIG_Python.SoImageRegion_getImage(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoImageRegion_updateChildren(self)
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoImageRegion_getTopSeparator(self)
    def getCamera(self): return HEPVis_SWIG_Python.SoImageRegion_getCamera(self)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoImageRegion_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoImageRegion_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoImageRegion_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoImageRegion_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoImageRegion_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoImageRegion_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoImageRegion_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoImageRegion_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoImageRegion_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoImageRegion_pick(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoImageRegion
    __del__ = lambda self : None;
SoImageRegion_swigregister = HEPVis_SWIG_Python.SoImageRegion_swigregister
SoImageRegion_swigregister(SoImageRegion)

def SoImageRegion_getClassTypeId():
  return HEPVis_SWIG_Python.SoImageRegion_getClassTypeId()
SoImageRegion_getClassTypeId = HEPVis_SWIG_Python.SoImageRegion_getClassTypeId

def SoImageRegion_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoImageRegion_getClassNodekitCatalog()
SoImageRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoImageRegion_getClassNodekitCatalog

def SoImageRegion_initClass():
  return HEPVis_SWIG_Python.SoImageRegion_initClass()
SoImageRegion_initClass = HEPVis_SWIG_Python.SoImageRegion_initClass

class SoDisplayRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDisplayRegion_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoDisplayRegion_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoDisplayRegion_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoDisplayRegion_getNodekitCatalog(self)
    projection = _swig_property(HEPVis_SWIG_Python.SoDisplayRegion_projection_get, HEPVis_SWIG_Python.SoDisplayRegion_projection_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoDisplayRegion_alternateRep_get, HEPVis_SWIG_Python.SoDisplayRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDisplayRegion_initClass)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoDisplayRegion_doAction(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoDisplayRegion_write(self, *args)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoDisplayRegion()
        try: self.this.append(this)
        except: self.this = this
    def setCameraType(self, *args): return HEPVis_SWIG_Python.SoDisplayRegion_setCameraType(self, *args)
    def setCamera(self, *args): return HEPVis_SWIG_Python.SoDisplayRegion_setCamera(self, *args)
    def getSceneSeparator(self): return HEPVis_SWIG_Python.SoDisplayRegion_getSceneSeparator(self)
    def getStaticScene(self): return HEPVis_SWIG_Python.SoDisplayRegion_getStaticScene(self)
    def getDynamicScene(self): return HEPVis_SWIG_Python.SoDisplayRegion_getDynamicScene(self)
    def getLight(self): return HEPVis_SWIG_Python.SoDisplayRegion_getLight(self)
    def getLightModel(self): return HEPVis_SWIG_Python.SoDisplayRegion_getLightModel(self)
    def getTransform(self): return HEPVis_SWIG_Python.SoDisplayRegion_getTransform(self)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoDisplayRegion_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoDisplayRegion_clearAlternateRep(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoDisplayRegion_updateChildren(self)
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoDisplayRegion_getTopSeparator(self)
    def getCamera(self): return HEPVis_SWIG_Python.SoDisplayRegion_getCamera(self)
    def clear(self, arg2=""): return HEPVis_SWIG_Python.SoDisplayRegion_clear(self, arg2)
    def resetCamera(self): return HEPVis_SWIG_Python.SoDisplayRegion_resetCamera(self)
    def doIt(self, *args): return HEPVis_SWIG_Python.SoDisplayRegion_doIt(self, *args)
    def undo(self): return HEPVis_SWIG_Python.SoDisplayRegion_undo(self)
    def resetUndo(self): return HEPVis_SWIG_Python.SoDisplayRegion_resetUndo(self)
    def connectFrom(self, *args): return HEPVis_SWIG_Python.SoDisplayRegion_connectFrom(self, *args)
    def getNodeOfInterest(self, arg2=""): return HEPVis_SWIG_Python.SoDisplayRegion_getNodeOfInterest(self, arg2)
    def readScene(self, *args): return HEPVis_SWIG_Python.SoDisplayRegion_readScene(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDisplayRegion
    __del__ = lambda self : None;
SoDisplayRegion_swigregister = HEPVis_SWIG_Python.SoDisplayRegion_swigregister
SoDisplayRegion_swigregister(SoDisplayRegion)

def SoDisplayRegion_getClassTypeId():
  return HEPVis_SWIG_Python.SoDisplayRegion_getClassTypeId()
SoDisplayRegion_getClassTypeId = HEPVis_SWIG_Python.SoDisplayRegion_getClassTypeId

def SoDisplayRegion_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoDisplayRegion_getClassNodekitCatalog()
SoDisplayRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoDisplayRegion_getClassNodekitCatalog

def SoDisplayRegion_initClass():
  return HEPVis_SWIG_Python.SoDisplayRegion_initClass()
SoDisplayRegion_initClass = HEPVis_SWIG_Python.SoDisplayRegion_initClass

class SoRulerRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoRulerRegion_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoRulerRegion_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoRulerRegion_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoRulerRegion_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoRulerRegion_alternateRep_get, HEPVis_SWIG_Python.SoRulerRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoRulerRegion_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoRulerRegion()
        try: self.this.append(this)
        except: self.this = this
    def setMeasuredRegion(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_setMeasuredRegion(self, *args)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoRulerRegion_clearAlternateRep(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoRulerRegion_updateChildren(self)
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoRulerRegion_getTopSeparator(self)
    def getCamera(self): return HEPVis_SWIG_Python.SoRulerRegion_getCamera(self)
    def getAxis(self): return HEPVis_SWIG_Python.SoRulerRegion_getAxis(self)
    def resetCamera(self): return HEPVis_SWIG_Python.SoRulerRegion_resetCamera(self)
    def clear(self, arg2=""): return HEPVis_SWIG_Python.SoRulerRegion_clear(self, arg2)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoRulerRegion_pick(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoRulerRegion
    __del__ = lambda self : None;
SoRulerRegion_swigregister = HEPVis_SWIG_Python.SoRulerRegion_swigregister
SoRulerRegion_swigregister(SoRulerRegion)

def SoRulerRegion_getClassTypeId():
  return HEPVis_SWIG_Python.SoRulerRegion_getClassTypeId()
SoRulerRegion_getClassTypeId = HEPVis_SWIG_Python.SoRulerRegion_getClassTypeId

def SoRulerRegion_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoRulerRegion_getClassNodekitCatalog()
SoRulerRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoRulerRegion_getClassNodekitCatalog

def SoRulerRegion_initClass():
  return HEPVis_SWIG_Python.SoRulerRegion_initClass()
SoRulerRegion_initClass = HEPVis_SWIG_Python.SoRulerRegion_initClass

class SoFormRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoFormRegion_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoFormRegion_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoFormRegion_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoFormRegion_getNodekitCatalog(self)
    shapes = _swig_property(HEPVis_SWIG_Python.SoFormRegion_shapes_get, HEPVis_SWIG_Python.SoFormRegion_shapes_set)
    columns = _swig_property(HEPVis_SWIG_Python.SoFormRegion_columns_get, HEPVis_SWIG_Python.SoFormRegion_columns_set)
    rows = _swig_property(HEPVis_SWIG_Python.SoFormRegion_rows_get, HEPVis_SWIG_Python.SoFormRegion_rows_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoFormRegion_alternateRep_get, HEPVis_SWIG_Python.SoFormRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoFormRegion_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoFormRegion()
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoFormRegion_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoFormRegion_clearAlternateRep(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoFormRegion_updateChildren(self)
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoFormRegion_getTopSeparator(self)
    def getCamera(self): return HEPVis_SWIG_Python.SoFormRegion_getCamera(self)
    def resetCamera(self): return HEPVis_SWIG_Python.SoFormRegion_resetCamera(self)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoFormRegion_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoFormRegion_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoFormRegion_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoFormRegion_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoFormRegion_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoFormRegion_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoFormRegion_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoFormRegion_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoFormRegion_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoFormRegion_pick(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoFormRegion
    __del__ = lambda self : None;
SoFormRegion_swigregister = HEPVis_SWIG_Python.SoFormRegion_swigregister
SoFormRegion_swigregister(SoFormRegion)

def SoFormRegion_getClassTypeId():
  return HEPVis_SWIG_Python.SoFormRegion_getClassTypeId()
SoFormRegion_getClassTypeId = HEPVis_SWIG_Python.SoFormRegion_getClassTypeId

def SoFormRegion_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoFormRegion_getClassNodekitCatalog()
SoFormRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoFormRegion_getClassNodekitCatalog

def SoFormRegion_initClass():
  return HEPVis_SWIG_Python.SoFormRegion_initClass()
SoFormRegion_initClass = HEPVis_SWIG_Python.SoFormRegion_initClass

class SbSetRegionCallback(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbSetRegionCallback
    __del__ = lambda self : None;
    def setCamera(self, *args): return HEPVis_SWIG_Python.SbSetRegionCallback_setCamera(self, *args)
SbSetRegionCallback_swigregister = HEPVis_SWIG_Python.SbSetRegionCallback_swigregister
SbSetRegionCallback_swigregister(SbSetRegionCallback)

class SbCollectCallback(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbCollectCallback
    __del__ = lambda self : None;
    def execute(self, *args): return HEPVis_SWIG_Python.SbCollectCallback_execute(self, *args)
SbCollectCallback_swigregister = HEPVis_SWIG_Python.SbCollectCallback_swigregister
SbCollectCallback_swigregister(SbCollectCallback)

class SoCanvas(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCanvas_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoCanvas_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoCanvas_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoCanvas_getNodekitCatalog(self)
    verbose = _swig_property(HEPVis_SWIG_Python.SoCanvas_verbose_get, HEPVis_SWIG_Python.SoCanvas_verbose_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoCanvas_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoCanvas()
        try: self.this.append(this)
        except: self.this = this
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoCanvas_getTopSeparator(self)
    def setHandlePickedPoint(self, *args): return HEPVis_SWIG_Python.SoCanvas_setHandlePickedPoint(self, *args)
    def handlePickedPoint(self): return HEPVis_SWIG_Python.SoCanvas_handlePickedPoint(self)
    def setCollectCallback(self, *args): return HEPVis_SWIG_Python.SoCanvas_setCollectCallback(self, *args)
    def getCollectCallback(self): return HEPVis_SWIG_Python.SoCanvas_getCollectCallback(self)
    def collect(self, *args): return HEPVis_SWIG_Python.SoCanvas_collect(self, *args)
    def createRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_createRegion(self, *args)
    def deleteRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_deleteRegion(self, *args)
    def clearRegions(self): return HEPVis_SWIG_Python.SoCanvas_clearRegions(self)
    def deleteRegions(self): return HEPVis_SWIG_Python.SoCanvas_deleteRegions(self)
    def raiseUpdateFlagOfRegions(self): return HEPVis_SWIG_Python.SoCanvas_raiseUpdateFlagOfRegions(self)
    def refreshRegions(self): return HEPVis_SWIG_Python.SoCanvas_refreshRegions(self)
    def getNumberOfRegions(self): return HEPVis_SWIG_Python.SoCanvas_getNumberOfRegions(self)
    def setRootRegionsHighlightable(self, *args): return HEPVis_SWIG_Python.SoCanvas_setRootRegionsHighlightable(self, *args)
    def getRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_getRegion(self, *args)
    def getRegionIndex(self, *args): return HEPVis_SWIG_Python.SoCanvas_getRegionIndex(self, *args)
    def getNextRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_getNextRegion(self, *args)
    def getPreviousRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_getPreviousRegion(self, *args)
    def setRegionOnTop(self, *args): return HEPVis_SWIG_Python.SoCanvas_setRegionOnTop(self, *args)
    def getPathRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_getPathRegion(self, *args)
    def getPickedRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_getPickedRegion(self, *args)
    def setSetRegionCallback(self, *args): return HEPVis_SWIG_Python.SoCanvas_setSetRegionCallback(self, *args)
    def disableRegionCamera(self): return HEPVis_SWIG_Python.SoCanvas_disableRegionCamera(self)
    def getHighlightedRegion(self): return HEPVis_SWIG_Python.SoCanvas_getHighlightedRegion(self)
    def highlightRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_highlightRegion(self, *args)
    def highlightNextRegion(self): return HEPVis_SWIG_Python.SoCanvas_highlightNextRegion(self)
    def highlightPreviousRegion(self): return HEPVis_SWIG_Python.SoCanvas_highlightPreviousRegion(self)
    def deleteHighlightedRegion(self): return HEPVis_SWIG_Python.SoCanvas_deleteHighlightedRegion(self)
    def setRegionsCanvasVerbosity(self): return HEPVis_SWIG_Python.SoCanvas_setRegionsCanvasVerbosity(self)
    def getNumberOfRootRegions(self): return HEPVis_SWIG_Python.SoCanvas_getNumberOfRootRegions(self)
    def isRootRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_isRootRegion(self, *args)
    def getRootRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_getRootRegion(self, *args)
    def getRootRegionIndex(self, *args): return HEPVis_SWIG_Python.SoCanvas_getRootRegionIndex(self, *args)
    def getNextRootRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_getNextRootRegion(self, *args)
    def getPreviousRootRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_getPreviousRootRegion(self, *args)
    def currentRegion(self): return HEPVis_SWIG_Python.SoCanvas_currentRegion(self)
    def setCurrentRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_setCurrentRegion(self, *args)
    def connectCurrentRegion(self, *args): return HEPVis_SWIG_Python.SoCanvas_connectCurrentRegion(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCanvas
    __del__ = lambda self : None;
SoCanvas_swigregister = HEPVis_SWIG_Python.SoCanvas_swigregister
SoCanvas_swigregister(SoCanvas)

def SoCanvas_getClassTypeId():
  return HEPVis_SWIG_Python.SoCanvas_getClassTypeId()
SoCanvas_getClassTypeId = HEPVis_SWIG_Python.SoCanvas_getClassTypeId

def SoCanvas_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoCanvas_getClassNodekitCatalog()
SoCanvas_getClassNodekitCatalog = HEPVis_SWIG_Python.SoCanvas_getClassNodekitCatalog

def SoCanvas_initClass():
  return HEPVis_SWIG_Python.SoCanvas_initClass()
SoCanvas_initClass = HEPVis_SWIG_Python.SoCanvas_initClass

class SoPage(SoCanvas):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPage_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPage_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoPage_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoPage_getNodekitCatalog(self)
    title = _swig_property(HEPVis_SWIG_Python.SoPage_title_get, HEPVis_SWIG_Python.SoPage_title_set)
    titleVisible = _swig_property(HEPVis_SWIG_Python.SoPage_titleVisible_get, HEPVis_SWIG_Python.SoPage_titleVisible_set)
    titleHeight = _swig_property(HEPVis_SWIG_Python.SoPage_titleHeight_get, HEPVis_SWIG_Python.SoPage_titleHeight_set)
    titleGeometryAutomated = _swig_property(HEPVis_SWIG_Python.SoPage_titleGeometryAutomated_get, HEPVis_SWIG_Python.SoPage_titleGeometryAutomated_set)
    LEAVE_ALONE = HEPVis_SWIG_Python.SoPage_LEAVE_ALONE
    PAW_GRID = HEPVis_SWIG_Python.SoPage_PAW_GRID
    regionsResizePolicy = _swig_property(HEPVis_SWIG_Python.SoPage_regionsResizePolicy_get, HEPVis_SWIG_Python.SoPage_regionsResizePolicy_set)
    pageWidth = _swig_property(HEPVis_SWIG_Python.SoPage_pageWidth_get, HEPVis_SWIG_Python.SoPage_pageWidth_set)
    pageHeight = _swig_property(HEPVis_SWIG_Python.SoPage_pageHeight_get, HEPVis_SWIG_Python.SoPage_pageHeight_set)
    leftMargin = _swig_property(HEPVis_SWIG_Python.SoPage_leftMargin_get, HEPVis_SWIG_Python.SoPage_leftMargin_set)
    rightMargin = _swig_property(HEPVis_SWIG_Python.SoPage_rightMargin_get, HEPVis_SWIG_Python.SoPage_rightMargin_set)
    bottomMargin = _swig_property(HEPVis_SWIG_Python.SoPage_bottomMargin_get, HEPVis_SWIG_Python.SoPage_bottomMargin_set)
    topMargin = _swig_property(HEPVis_SWIG_Python.SoPage_topMargin_get, HEPVis_SWIG_Python.SoPage_topMargin_set)
    horizontalSpacing = _swig_property(HEPVis_SWIG_Python.SoPage_horizontalSpacing_get, HEPVis_SWIG_Python.SoPage_horizontalSpacing_set)
    verticalSpacing = _swig_property(HEPVis_SWIG_Python.SoPage_verticalSpacing_get, HEPVis_SWIG_Python.SoPage_verticalSpacing_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPage_alternateRep_get, HEPVis_SWIG_Python.SoPage_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPage_initClass)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoPage_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoPage_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoPage_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoPage_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoPage_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoPage_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoPage_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoPage_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoPage_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoPage_pick(self, *args)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPage()
        try: self.this.append(this)
        except: self.this = this
    def refresh(self): return HEPVis_SWIG_Python.SoPage_refresh(self)
    def raiseUpdateFlag(self): return HEPVis_SWIG_Python.SoPage_raiseUpdateFlag(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoPage_updateChildren(self)
    def getImageWriter(self): return HEPVis_SWIG_Python.SoPage_getImageWriter(self)
    def getTitleRegion(self): return HEPVis_SWIG_Python.SoPage_getTitleRegion(self)
    def setTitleVisible(self, *args): return HEPVis_SWIG_Python.SoPage_setTitleVisible(self, *args)
    def createRegions(self, *args): return HEPVis_SWIG_Python.SoPage_createRegions(self, *args)
    def addRegions(self, *args): return HEPVis_SWIG_Python.SoPage_addRegions(self, *args)
    def mapRegionToPage(self, *args): return HEPVis_SWIG_Python.SoPage_mapRegionToPage(self, *args)
    def mapHighlightedRegionToPage(self): return HEPVis_SWIG_Python.SoPage_mapHighlightedRegionToPage(self)
    def createGridRegion(self, *args): return HEPVis_SWIG_Python.SoPage_createGridRegion(self, *args)
    def resetGrid(self): return HEPVis_SWIG_Python.SoPage_resetGrid(self)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoPage_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoPage_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPage
    __del__ = lambda self : None;
SoPage_swigregister = HEPVis_SWIG_Python.SoPage_swigregister
SoPage_swigregister(SoPage)

def SoPage_getClassTypeId():
  return HEPVis_SWIG_Python.SoPage_getClassTypeId()
SoPage_getClassTypeId = HEPVis_SWIG_Python.SoPage_getClassTypeId

def SoPage_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoPage_getClassNodekitCatalog()
SoPage_getClassNodekitCatalog = HEPVis_SWIG_Python.SoPage_getClassNodekitCatalog

def SoPage_initClass():
  return HEPVis_SWIG_Python.SoPage_initClass()
SoPage_initClass = HEPVis_SWIG_Python.SoPage_initClass

class SoPainterAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self): return HEPVis_SWIG_Python.SoPainterAction_getTypeId(self)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPainterAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.SoPainterAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.SoPainterAction_enableElement)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPainterAction(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPainter(self, *args): return HEPVis_SWIG_Python.SoPainterAction_setPainter(self, *args)
    def setViewportRegion(self, *args): return HEPVis_SWIG_Python.SoPainterAction_setViewportRegion(self, *args)
    def getViewportRegion(self): return HEPVis_SWIG_Python.SoPainterAction_getViewportRegion(self)
    def setBackgroundColor(self, *args): return HEPVis_SWIG_Python.SoPainterAction_setBackgroundColor(self, *args)
    def enableSort(self, *args): return HEPVis_SWIG_Python.SoPainterAction_enableSort(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPainterAction_initClass)
    def drawPrimitive(self, *args): return HEPVis_SWIG_Python.SoPainterAction_drawPrimitive(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPainterAction
    __del__ = lambda self : None;
SoPainterAction_swigregister = HEPVis_SWIG_Python.SoPainterAction_swigregister
SoPainterAction_swigregister(SoPainterAction)

def SoPainterAction_getClassTypeId():
  return HEPVis_SWIG_Python.SoPainterAction_getClassTypeId()
SoPainterAction_getClassTypeId = HEPVis_SWIG_Python.SoPainterAction_getClassTypeId

def SoPainterAction_addMethod(*args):
  return HEPVis_SWIG_Python.SoPainterAction_addMethod(*args)
SoPainterAction_addMethod = HEPVis_SWIG_Python.SoPainterAction_addMethod

def SoPainterAction_enableElement(*args):
  return HEPVis_SWIG_Python.SoPainterAction_enableElement(*args)
SoPainterAction_enableElement = HEPVis_SWIG_Python.SoPainterAction_enableElement

def SoPainterAction_initClass():
  return HEPVis_SWIG_Python.SoPainterAction_initClass()
SoPainterAction_initClass = HEPVis_SWIG_Python.SoPainterAction_initClass

class SoGL2PSAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self): return HEPVis_SWIG_Python.SoGL2PSAction_getTypeId(self)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoGL2PSAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.SoGL2PSAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.SoGL2PSAction_enableElement)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoGL2PSAction(*args)
        try: self.this.append(this)
        except: self.this = this
    PS = HEPVis_SWIG_Python.SoGL2PSAction_PS
    EPS = HEPVis_SWIG_Python.SoGL2PSAction_EPS
    TEX = HEPVis_SWIG_Python.SoGL2PSAction_TEX
    PDF = HEPVis_SWIG_Python.SoGL2PSAction_PDF
    SVG = HEPVis_SWIG_Python.SoGL2PSAction_SVG
    PGF = HEPVis_SWIG_Python.SoGL2PSAction_PGF
    def setFileFormat(self, *args): return HEPVis_SWIG_Python.SoGL2PSAction_setFileFormat(self, *args)
    def setFileName(self, *args): return HEPVis_SWIG_Python.SoGL2PSAction_setFileName(self, *args)
    def setPageOptions(self, *args): return HEPVis_SWIG_Python.SoGL2PSAction_setPageOptions(self, *args)
    def enableFileWriting(self): return HEPVis_SWIG_Python.SoGL2PSAction_enableFileWriting(self)
    def disableFileWriting(self): return HEPVis_SWIG_Python.SoGL2PSAction_disableFileWriting(self)
    def fileWritingEnabled(self): return HEPVis_SWIG_Python.SoGL2PSAction_fileWritingEnabled(self)
    def addBitmap(self, *args): return HEPVis_SWIG_Python.SoGL2PSAction_addBitmap(self, *args)
    def beginViewport(self, draw_back=1): return HEPVis_SWIG_Python.SoGL2PSAction_beginViewport(self, draw_back)
    def endViewport(self): return HEPVis_SWIG_Python.SoGL2PSAction_endViewport(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoGL2PSAction_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoGL2PSAction
    __del__ = lambda self : None;
SoGL2PSAction_swigregister = HEPVis_SWIG_Python.SoGL2PSAction_swigregister
SoGL2PSAction_swigregister(SoGL2PSAction)

def SoGL2PSAction_getClassTypeId():
  return HEPVis_SWIG_Python.SoGL2PSAction_getClassTypeId()
SoGL2PSAction_getClassTypeId = HEPVis_SWIG_Python.SoGL2PSAction_getClassTypeId

def SoGL2PSAction_addMethod(*args):
  return HEPVis_SWIG_Python.SoGL2PSAction_addMethod(*args)
SoGL2PSAction_addMethod = HEPVis_SWIG_Python.SoGL2PSAction_addMethod

def SoGL2PSAction_enableElement(*args):
  return HEPVis_SWIG_Python.SoGL2PSAction_enableElement(*args)
SoGL2PSAction_enableElement = HEPVis_SWIG_Python.SoGL2PSAction_enableElement

def SoGL2PSAction_initClass():
  return HEPVis_SWIG_Python.SoGL2PSAction_initClass()
SoGL2PSAction_initClass = HEPVis_SWIG_Python.SoGL2PSAction_initClass

class SoCollectAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self): return HEPVis_SWIG_Python.SoCollectAction_getTypeId(self)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCollectAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.SoCollectAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.SoCollectAction_enableElement)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoCollectAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCollectAction
    __del__ = lambda self : None;
    def setSearchArea(self, *args): return HEPVis_SWIG_Python.SoCollectAction_setSearchArea(self, *args)
    def paths(self): return HEPVis_SWIG_Python.SoCollectAction_paths(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoCollectAction_initClass)
SoCollectAction_swigregister = HEPVis_SWIG_Python.SoCollectAction_swigregister
SoCollectAction_swigregister(SoCollectAction)

def SoCollectAction_getClassTypeId():
  return HEPVis_SWIG_Python.SoCollectAction_getClassTypeId()
SoCollectAction_getClassTypeId = HEPVis_SWIG_Python.SoCollectAction_getClassTypeId

def SoCollectAction_addMethod(*args):
  return HEPVis_SWIG_Python.SoCollectAction_addMethod(*args)
SoCollectAction_addMethod = HEPVis_SWIG_Python.SoCollectAction_addMethod

def SoCollectAction_enableElement(*args):
  return HEPVis_SWIG_Python.SoCollectAction_enableElement(*args)
SoCollectAction_enableElement = HEPVis_SWIG_Python.SoCollectAction_enableElement

def SoCollectAction_initClass():
  return HEPVis_SWIG_Python.SoCollectAction_initClass()
SoCollectAction_initClass = HEPVis_SWIG_Python.SoCollectAction_initClass

class SoCounterAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self): return HEPVis_SWIG_Python.SoCounterAction_getTypeId(self)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCounterAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.SoCounterAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.SoCounterAction_enableElement)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoCounterAction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCounterAction
    __del__ = lambda self : None;
    initClass = staticmethod(HEPVis_SWIG_Python.SoCounterAction_initClass)
    NODE = HEPVis_SWIG_Python.SoCounterAction_NODE
    TYPE = HEPVis_SWIG_Python.SoCounterAction_TYPE
    NAME = HEPVis_SWIG_Python.SoCounterAction_NAME
    def setLookFor(self, *args): return HEPVis_SWIG_Python.SoCounterAction_setLookFor(self, *args)
    def setType(self, *args): return HEPVis_SWIG_Python.SoCounterAction_setType(self, *args)
    def setName(self, *args): return HEPVis_SWIG_Python.SoCounterAction_setName(self, *args)
    def getCount(self): return HEPVis_SWIG_Python.SoCounterAction_getCount(self)
SoCounterAction_swigregister = HEPVis_SWIG_Python.SoCounterAction_swigregister
SoCounterAction_swigregister(SoCounterAction)

def SoCounterAction_getClassTypeId():
  return HEPVis_SWIG_Python.SoCounterAction_getClassTypeId()
SoCounterAction_getClassTypeId = HEPVis_SWIG_Python.SoCounterAction_getClassTypeId

def SoCounterAction_addMethod(*args):
  return HEPVis_SWIG_Python.SoCounterAction_addMethod(*args)
SoCounterAction_addMethod = HEPVis_SWIG_Python.SoCounterAction_addMethod

def SoCounterAction_enableElement(*args):
  return HEPVis_SWIG_Python.SoCounterAction_enableElement(*args)
SoCounterAction_enableElement = HEPVis_SWIG_Python.SoCounterAction_enableElement

def SoCounterAction_initClass():
  return HEPVis_SWIG_Python.SoCounterAction_initClass()
SoCounterAction_initClass = HEPVis_SWIG_Python.SoCounterAction_initClass

class SoAlternateRepAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self): return HEPVis_SWIG_Python.SoAlternateRepAction_getTypeId(self)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoAlternateRepAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.SoAlternateRepAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.SoAlternateRepAction_enableElement)
    DEFAULT = HEPVis_SWIG_Python.SoAlternateRepAction_DEFAULT
    VRML = HEPVis_SWIG_Python.SoAlternateRepAction_VRML
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoAlternateRepAction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoAlternateRepAction
    __del__ = lambda self : None;
    initClass = staticmethod(HEPVis_SWIG_Python.SoAlternateRepAction_initClass)
    def setGenerate(self, *args): return HEPVis_SWIG_Python.SoAlternateRepAction_setGenerate(self, *args)
    def getGenerate(self): return HEPVis_SWIG_Python.SoAlternateRepAction_getGenerate(self)
    def setForWhat(self, *args): return HEPVis_SWIG_Python.SoAlternateRepAction_setForWhat(self, *args)
    def getForWhat(self): return HEPVis_SWIG_Python.SoAlternateRepAction_getForWhat(self)
SoAlternateRepAction_swigregister = HEPVis_SWIG_Python.SoAlternateRepAction_swigregister
SoAlternateRepAction_swigregister(SoAlternateRepAction)

def SoAlternateRepAction_getClassTypeId():
  return HEPVis_SWIG_Python.SoAlternateRepAction_getClassTypeId()
SoAlternateRepAction_getClassTypeId = HEPVis_SWIG_Python.SoAlternateRepAction_getClassTypeId

def SoAlternateRepAction_addMethod(*args):
  return HEPVis_SWIG_Python.SoAlternateRepAction_addMethod(*args)
SoAlternateRepAction_addMethod = HEPVis_SWIG_Python.SoAlternateRepAction_addMethod

def SoAlternateRepAction_enableElement(*args):
  return HEPVis_SWIG_Python.SoAlternateRepAction_enableElement(*args)
SoAlternateRepAction_enableElement = HEPVis_SWIG_Python.SoAlternateRepAction_enableElement

def SoAlternateRepAction_initClass():
  return HEPVis_SWIG_Python.SoAlternateRepAction_initClass()
SoAlternateRepAction_initClass = HEPVis_SWIG_Python.SoAlternateRepAction_initClass

class HEPVis_SoIntersectingPrimitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    path = _swig_property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_path_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_path_set)
    SEGMENT = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_SEGMENT
    LINE_SEGMENT = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_LINE_SEGMENT
    TRIANGLE = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_TRIANGLE
    type = _swig_property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_type_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_type_set)
    vertex = _swig_property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_vertex_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_vertex_set)
    xf_vertex = _swig_property(HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_xf_vertex_get, HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_xf_vertex_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_HEPVis_SoIntersectingPrimitive()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_HEPVis_SoIntersectingPrimitive
    __del__ = lambda self : None;
HEPVis_SoIntersectingPrimitive_swigregister = HEPVis_SWIG_Python.HEPVis_SoIntersectingPrimitive_swigregister
HEPVis_SoIntersectingPrimitive_swigregister(HEPVis_SoIntersectingPrimitive)

class HEPVis_SoIntersectionDetectionAction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getTypeId(self): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getTypeId(self)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getClassTypeId)
    addMethod = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addMethod)
    enableElement = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_enableElement)
    initClass = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_HEPVis_SoIntersectionDetectionAction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_HEPVis_SoIntersectionDetectionAction
    __del__ = lambda self : None;
    NEXT_PRIMITIVE = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_NEXT_PRIMITIVE
    NEXT_SHAPE = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_NEXT_SHAPE
    ABORT = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_ABORT
    def setIntersectionDetectionEpsilon(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setIntersectionDetectionEpsilon(self, *args)
    def getIntersectionDetectionEpsilon(self): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getIntersectionDetectionEpsilon(self)
    setIntersectionEpsilon = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon)
    getIntersectionEpsilon = staticmethod(HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon)
    def setTypeEnabled(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setTypeEnabled(self, *args)
    def isTypeEnabled(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isTypeEnabled(self, *args)
    def setManipsEnabled(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setManipsEnabled(self, *args)
    def isManipsEnabled(self): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isManipsEnabled(self)
    def setDraggersEnabled(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setDraggersEnabled(self, *args)
    def isDraggersEnabled(self): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isDraggersEnabled(self)
    def setShapeInternalsEnabled(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setShapeInternalsEnabled(self, *args)
    def isShapeInternalsEnabled(self): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_isShapeInternalsEnabled(self)
    def addVisitationCallback(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addVisitationCallback(self, *args)
    def removeVisitationCallback(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_removeVisitationCallback(self, *args)
    def apply(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_apply(self, *args)
    def setFilterCallback(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setFilterCallback(self, *args)
    def addIntersectionCallback(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addIntersectionCallback(self, *args)
    def removeIntersectionCallback(self, *args): return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_removeIntersectionCallback(self, *args)
HEPVis_SoIntersectionDetectionAction_swigregister = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_swigregister
HEPVis_SoIntersectionDetectionAction_swigregister(HEPVis_SoIntersectionDetectionAction)

def HEPVis_SoIntersectionDetectionAction_getClassTypeId():
  return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getClassTypeId()
HEPVis_SoIntersectionDetectionAction_getClassTypeId = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getClassTypeId

def HEPVis_SoIntersectionDetectionAction_addMethod(*args):
  return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addMethod(*args)
HEPVis_SoIntersectionDetectionAction_addMethod = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_addMethod

def HEPVis_SoIntersectionDetectionAction_enableElement(*args):
  return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_enableElement(*args)
HEPVis_SoIntersectionDetectionAction_enableElement = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_enableElement

def HEPVis_SoIntersectionDetectionAction_initClass():
  return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_initClass()
HEPVis_SoIntersectionDetectionAction_initClass = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_initClass

def HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon(*args):
  return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon(*args)
HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_setIntersectionEpsilon

def HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon():
  return HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon()
HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon = HEPVis_SWIG_Python.HEPVis_SoIntersectionDetectionAction_getIntersectionEpsilon

class SoSFPolyhedron(SoSField):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoSFPolyhedron()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSFPolyhedron
    __del__ = lambda self : None;
    createInstance = staticmethod(HEPVis_SWIG_Python.SoSFPolyhedron_createInstance)
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSFPolyhedron_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoSFPolyhedron_getTypeId(self)
    def copyFrom(self, *args): return HEPVis_SWIG_Python.SoSFPolyhedron_copyFrom(self, *args)
    def isSame(self, *args): return HEPVis_SWIG_Python.SoSFPolyhedron_isSame(self, *args)
    def getValue(self): return HEPVis_SWIG_Python.SoSFPolyhedron_getValue(self)
    def setValue(self, *args): return HEPVis_SWIG_Python.SoSFPolyhedron_setValue(self, *args)
    def __eq__(self, *args): return HEPVis_SWIG_Python.SoSFPolyhedron___eq__(self, *args)
    def __ne__(self, *args): return HEPVis_SWIG_Python.SoSFPolyhedron___ne__(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSFPolyhedron_initClass)
SoSFPolyhedron_swigregister = HEPVis_SWIG_Python.SoSFPolyhedron_swigregister
SoSFPolyhedron_swigregister(SoSFPolyhedron)

def SoSFPolyhedron_createInstance():
  return HEPVis_SWIG_Python.SoSFPolyhedron_createInstance()
SoSFPolyhedron_createInstance = HEPVis_SWIG_Python.SoSFPolyhedron_createInstance

def SoSFPolyhedron_getClassTypeId():
  return HEPVis_SWIG_Python.SoSFPolyhedron_getClassTypeId()
SoSFPolyhedron_getClassTypeId = HEPVis_SWIG_Python.SoSFPolyhedron_getClassTypeId

def SoSFPolyhedron_initClass():
  return HEPVis_SWIG_Python.SoSFPolyhedron_initClass()
SoSFPolyhedron_initClass = HEPVis_SWIG_Python.SoSFPolyhedron_initClass

class SoPolyhedron(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPolyhedron_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPolyhedron_getTypeId(self)
    solid = _swig_property(HEPVis_SWIG_Python.SoPolyhedron_solid_get, HEPVis_SWIG_Python.SoPolyhedron_solid_set)
    reducedWireFrame = _swig_property(HEPVis_SWIG_Python.SoPolyhedron_reducedWireFrame_get, HEPVis_SWIG_Python.SoPolyhedron_reducedWireFrame_set)
    projection = _swig_property(HEPVis_SWIG_Python.SoPolyhedron_projection_get, HEPVis_SWIG_Python.SoPolyhedron_projection_set)
    polyhedron = _swig_property(HEPVis_SWIG_Python.SoPolyhedron_polyhedron_get, HEPVis_SWIG_Python.SoPolyhedron_polyhedron_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPolyhedron_alternateRep_get, HEPVis_SWIG_Python.SoPolyhedron_alternateRep_set)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SoPolyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoPolyhedron_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoPolyhedron_clearAlternateRep(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPolyhedron_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPolyhedron
    __del__ = lambda self : None;
SoPolyhedron_swigregister = HEPVis_SWIG_Python.SoPolyhedron_swigregister
SoPolyhedron_swigregister(SoPolyhedron)

def SoPolyhedron_getClassTypeId():
  return HEPVis_SWIG_Python.SoPolyhedron_getClassTypeId()
SoPolyhedron_getClassTypeId = HEPVis_SWIG_Python.SoPolyhedron_getClassTypeId

def SoPolyhedron_initClass():
  return HEPVis_SWIG_Python.SoPolyhedron_initClass()
SoPolyhedron_initClass = HEPVis_SWIG_Python.SoPolyhedron_initClass

class SoTubs(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTubs_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoTubs_getTypeId(self)
    pRMin = _swig_property(HEPVis_SWIG_Python.SoTubs_pRMin_get, HEPVis_SWIG_Python.SoTubs_pRMin_set)
    pRMax = _swig_property(HEPVis_SWIG_Python.SoTubs_pRMax_get, HEPVis_SWIG_Python.SoTubs_pRMax_set)
    pDz = _swig_property(HEPVis_SWIG_Python.SoTubs_pDz_get, HEPVis_SWIG_Python.SoTubs_pDz_set)
    pSPhi = _swig_property(HEPVis_SWIG_Python.SoTubs_pSPhi_get, HEPVis_SWIG_Python.SoTubs_pSPhi_set)
    pDPhi = _swig_property(HEPVis_SWIG_Python.SoTubs_pDPhi_get, HEPVis_SWIG_Python.SoTubs_pDPhi_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTubs_alternateRep_get, HEPVis_SWIG_Python.SoTubs_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTubs()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoTubs_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoTubs_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoTubs_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTubs
    __del__ = lambda self : None;
SoTubs_swigregister = HEPVis_SWIG_Python.SoTubs_swigregister
SoTubs_swigregister(SoTubs)

def SoTubs_getClassTypeId():
  return HEPVis_SWIG_Python.SoTubs_getClassTypeId()
SoTubs_getClassTypeId = HEPVis_SWIG_Python.SoTubs_getClassTypeId

def SoTubs_initClass():
  return HEPVis_SWIG_Python.SoTubs_initClass()
SoTubs_initClass = HEPVis_SWIG_Python.SoTubs_initClass

class SoBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoBox_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoBox_getTypeId(self)
    fDx = _swig_property(HEPVis_SWIG_Python.SoBox_fDx_get, HEPVis_SWIG_Python.SoBox_fDx_set)
    fDy = _swig_property(HEPVis_SWIG_Python.SoBox_fDy_get, HEPVis_SWIG_Python.SoBox_fDy_set)
    fDz = _swig_property(HEPVis_SWIG_Python.SoBox_fDz_get, HEPVis_SWIG_Python.SoBox_fDz_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoBox_alternateRep_get, HEPVis_SWIG_Python.SoBox_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoBox()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoBox_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoBox_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoBox_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoBox
    __del__ = lambda self : None;
SoBox_swigregister = HEPVis_SWIG_Python.SoBox_swigregister
SoBox_swigregister(SoBox)

def SoBox_getClassTypeId():
  return HEPVis_SWIG_Python.SoBox_getClassTypeId()
SoBox_getClassTypeId = HEPVis_SWIG_Python.SoBox_getClassTypeId

def SoBox_initClass():
  return HEPVis_SWIG_Python.SoBox_initClass()
SoBox_initClass = HEPVis_SWIG_Python.SoBox_initClass

class SoTrd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTrd_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoTrd_getTypeId(self)
    fDx1 = _swig_property(HEPVis_SWIG_Python.SoTrd_fDx1_get, HEPVis_SWIG_Python.SoTrd_fDx1_set)
    fDx2 = _swig_property(HEPVis_SWIG_Python.SoTrd_fDx2_get, HEPVis_SWIG_Python.SoTrd_fDx2_set)
    fDy1 = _swig_property(HEPVis_SWIG_Python.SoTrd_fDy1_get, HEPVis_SWIG_Python.SoTrd_fDy1_set)
    fDy2 = _swig_property(HEPVis_SWIG_Python.SoTrd_fDy2_get, HEPVis_SWIG_Python.SoTrd_fDy2_set)
    fDz = _swig_property(HEPVis_SWIG_Python.SoTrd_fDz_get, HEPVis_SWIG_Python.SoTrd_fDz_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTrd_alternateRep_get, HEPVis_SWIG_Python.SoTrd_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTrd()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoTrd_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoTrd_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoTrd_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTrd
    __del__ = lambda self : None;
SoTrd_swigregister = HEPVis_SWIG_Python.SoTrd_swigregister
SoTrd_swigregister(SoTrd)

def SoTrd_getClassTypeId():
  return HEPVis_SWIG_Python.SoTrd_getClassTypeId()
SoTrd_getClassTypeId = HEPVis_SWIG_Python.SoTrd_getClassTypeId

def SoTrd_initClass():
  return HEPVis_SWIG_Python.SoTrd_initClass()
SoTrd_initClass = HEPVis_SWIG_Python.SoTrd_initClass

class SoCons(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCons_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoCons_getTypeId(self)
    fRmin1 = _swig_property(HEPVis_SWIG_Python.SoCons_fRmin1_get, HEPVis_SWIG_Python.SoCons_fRmin1_set)
    fRmin2 = _swig_property(HEPVis_SWIG_Python.SoCons_fRmin2_get, HEPVis_SWIG_Python.SoCons_fRmin2_set)
    fRmax1 = _swig_property(HEPVis_SWIG_Python.SoCons_fRmax1_get, HEPVis_SWIG_Python.SoCons_fRmax1_set)
    fRmax2 = _swig_property(HEPVis_SWIG_Python.SoCons_fRmax2_get, HEPVis_SWIG_Python.SoCons_fRmax2_set)
    fDz = _swig_property(HEPVis_SWIG_Python.SoCons_fDz_get, HEPVis_SWIG_Python.SoCons_fDz_set)
    fSPhi = _swig_property(HEPVis_SWIG_Python.SoCons_fSPhi_get, HEPVis_SWIG_Python.SoCons_fSPhi_set)
    fDPhi = _swig_property(HEPVis_SWIG_Python.SoCons_fDPhi_get, HEPVis_SWIG_Python.SoCons_fDPhi_set)
    smoothDraw = _swig_property(HEPVis_SWIG_Python.SoCons_smoothDraw_get, HEPVis_SWIG_Python.SoCons_smoothDraw_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoCons_alternateRep_get, HEPVis_SWIG_Python.SoCons_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoCons()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoCons_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoCons_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoCons_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCons
    __del__ = lambda self : None;
SoCons_swigregister = HEPVis_SWIG_Python.SoCons_swigregister
SoCons_swigregister(SoCons)

def SoCons_getClassTypeId():
  return HEPVis_SWIG_Python.SoCons_getClassTypeId()
SoCons_getClassTypeId = HEPVis_SWIG_Python.SoCons_getClassTypeId

def SoCons_initClass():
  return HEPVis_SWIG_Python.SoCons_initClass()
SoCons_initClass = HEPVis_SWIG_Python.SoCons_initClass

class SoTrap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTrap_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoTrap_getTypeId(self)
    pDz = _swig_property(HEPVis_SWIG_Python.SoTrap_pDz_get, HEPVis_SWIG_Python.SoTrap_pDz_set)
    pTheta = _swig_property(HEPVis_SWIG_Python.SoTrap_pTheta_get, HEPVis_SWIG_Python.SoTrap_pTheta_set)
    pPhi = _swig_property(HEPVis_SWIG_Python.SoTrap_pPhi_get, HEPVis_SWIG_Python.SoTrap_pPhi_set)
    pDy1 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDy1_get, HEPVis_SWIG_Python.SoTrap_pDy1_set)
    pDx1 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDx1_get, HEPVis_SWIG_Python.SoTrap_pDx1_set)
    pDx2 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDx2_get, HEPVis_SWIG_Python.SoTrap_pDx2_set)
    pDy2 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDy2_get, HEPVis_SWIG_Python.SoTrap_pDy2_set)
    pDx3 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDx3_get, HEPVis_SWIG_Python.SoTrap_pDx3_set)
    pDx4 = _swig_property(HEPVis_SWIG_Python.SoTrap_pDx4_get, HEPVis_SWIG_Python.SoTrap_pDx4_set)
    pAlp1 = _swig_property(HEPVis_SWIG_Python.SoTrap_pAlp1_get, HEPVis_SWIG_Python.SoTrap_pAlp1_set)
    pAlp2 = _swig_property(HEPVis_SWIG_Python.SoTrap_pAlp2_get, HEPVis_SWIG_Python.SoTrap_pAlp2_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTrap_alternateRep_get, HEPVis_SWIG_Python.SoTrap_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTrap()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoTrap_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoTrap_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoTrap_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTrap
    __del__ = lambda self : None;
SoTrap_swigregister = HEPVis_SWIG_Python.SoTrap_swigregister
SoTrap_swigregister(SoTrap)

def SoTrap_getClassTypeId():
  return HEPVis_SWIG_Python.SoTrap_getClassTypeId()
SoTrap_getClassTypeId = HEPVis_SWIG_Python.SoTrap_getClassTypeId

def SoTrap_initClass():
  return HEPVis_SWIG_Python.SoTrap_initClass()
SoTrap_initClass = HEPVis_SWIG_Python.SoTrap_initClass

class SoArrow(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoArrow_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoArrow_getTypeId(self)
    tip = _swig_property(HEPVis_SWIG_Python.SoArrow_tip_get, HEPVis_SWIG_Python.SoArrow_tip_set)
    tail = _swig_property(HEPVis_SWIG_Python.SoArrow_tail_get, HEPVis_SWIG_Python.SoArrow_tail_set)
    size = _swig_property(HEPVis_SWIG_Python.SoArrow_size_get, HEPVis_SWIG_Python.SoArrow_size_set)
    conicalShaft = _swig_property(HEPVis_SWIG_Python.SoArrow_conicalShaft_get, HEPVis_SWIG_Python.SoArrow_conicalShaft_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoArrow_alternateRep_get, HEPVis_SWIG_Python.SoArrow_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoArrow()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoArrow_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoArrow_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoArrow_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoArrow
    __del__ = lambda self : None;
SoArrow_swigregister = HEPVis_SWIG_Python.SoArrow_swigregister
SoArrow_swigregister(SoArrow)

def SoArrow_getClassTypeId():
  return HEPVis_SWIG_Python.SoArrow_getClassTypeId()
SoArrow_getClassTypeId = HEPVis_SWIG_Python.SoArrow_getClassTypeId

def SoArrow_initClass():
  return HEPVis_SWIG_Python.SoArrow_initClass()
SoArrow_initClass = HEPVis_SWIG_Python.SoArrow_initClass

class SoEllipsoid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoEllipsoid_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoEllipsoid_getTypeId(self)
    eigenvalues = _swig_property(HEPVis_SWIG_Python.SoEllipsoid_eigenvalues_get, HEPVis_SWIG_Python.SoEllipsoid_eigenvalues_set)
    rotation = _swig_property(HEPVis_SWIG_Python.SoEllipsoid_rotation_get, HEPVis_SWIG_Python.SoEllipsoid_rotation_set)
    center = _swig_property(HEPVis_SWIG_Python.SoEllipsoid_center_get, HEPVis_SWIG_Python.SoEllipsoid_center_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoEllipsoid_alternateRep_get, HEPVis_SWIG_Python.SoEllipsoid_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoEllipsoid()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoEllipsoid_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoEllipsoid_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoEllipsoid_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEllipsoid
    __del__ = lambda self : None;
SoEllipsoid_swigregister = HEPVis_SWIG_Python.SoEllipsoid_swigregister
SoEllipsoid_swigregister(SoEllipsoid)

def SoEllipsoid_getClassTypeId():
  return HEPVis_SWIG_Python.SoEllipsoid_getClassTypeId()
SoEllipsoid_getClassTypeId = HEPVis_SWIG_Python.SoEllipsoid_getClassTypeId

def SoEllipsoid_initClass():
  return HEPVis_SWIG_Python.SoEllipsoid_initClass()
SoEllipsoid_initClass = HEPVis_SWIG_Python.SoEllipsoid_initClass

class SoEllipsoidSegment(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoEllipsoidSegment_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoEllipsoidSegment_getTypeId(self)
    ax = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_ax_get, HEPVis_SWIG_Python.SoEllipsoidSegment_ax_set)
    by = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_by_get, HEPVis_SWIG_Python.SoEllipsoidSegment_by_set)
    cz = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_cz_get, HEPVis_SWIG_Python.SoEllipsoidSegment_cz_set)
    fSPhi = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_fSPhi_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fSPhi_set)
    fDPhi = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_fDPhi_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fDPhi_set)
    fSTheta = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_fSTheta_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fSTheta_set)
    fDTheta = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_fDTheta_get, HEPVis_SWIG_Python.SoEllipsoidSegment_fDTheta_set)
    nSides = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_nSides_get, HEPVis_SWIG_Python.SoEllipsoidSegment_nSides_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoEllipsoidSegment_alternateRep_get, HEPVis_SWIG_Python.SoEllipsoidSegment_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoEllipsoidSegment()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoEllipsoidSegment_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoEllipsoidSegment_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoEllipsoidSegment_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEllipsoidSegment
    __del__ = lambda self : None;
SoEllipsoidSegment_swigregister = HEPVis_SWIG_Python.SoEllipsoidSegment_swigregister
SoEllipsoidSegment_swigregister(SoEllipsoidSegment)

def SoEllipsoidSegment_getClassTypeId():
  return HEPVis_SWIG_Python.SoEllipsoidSegment_getClassTypeId()
SoEllipsoidSegment_getClassTypeId = HEPVis_SWIG_Python.SoEllipsoidSegment_getClassTypeId

def SoEllipsoidSegment_initClass():
  return HEPVis_SWIG_Python.SoEllipsoidSegment_initClass()
SoEllipsoidSegment_initClass = HEPVis_SWIG_Python.SoEllipsoidSegment_initClass

class SoEllipticalPrism(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoEllipticalPrism_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoEllipticalPrism_getTypeId(self)
    eigenvalues = _swig_property(HEPVis_SWIG_Python.SoEllipticalPrism_eigenvalues_get, HEPVis_SWIG_Python.SoEllipticalPrism_eigenvalues_set)
    extent = _swig_property(HEPVis_SWIG_Python.SoEllipticalPrism_extent_get, HEPVis_SWIG_Python.SoEllipticalPrism_extent_set)
    rotation = _swig_property(HEPVis_SWIG_Python.SoEllipticalPrism_rotation_get, HEPVis_SWIG_Python.SoEllipticalPrism_rotation_set)
    center = _swig_property(HEPVis_SWIG_Python.SoEllipticalPrism_center_get, HEPVis_SWIG_Python.SoEllipticalPrism_center_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoEllipticalPrism_alternateRep_get, HEPVis_SWIG_Python.SoEllipticalPrism_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoEllipticalPrism()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoEllipticalPrism_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoEllipticalPrism_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoEllipticalPrism_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoEllipticalPrism
    __del__ = lambda self : None;
SoEllipticalPrism_swigregister = HEPVis_SWIG_Python.SoEllipticalPrism_swigregister
SoEllipticalPrism_swigregister(SoEllipticalPrism)

def SoEllipticalPrism_getClassTypeId():
  return HEPVis_SWIG_Python.SoEllipticalPrism_getClassTypeId()
SoEllipticalPrism_getClassTypeId = HEPVis_SWIG_Python.SoEllipticalPrism_getClassTypeId

def SoEllipticalPrism_initClass():
  return HEPVis_SWIG_Python.SoEllipticalPrism_initClass()
SoEllipticalPrism_initClass = HEPVis_SWIG_Python.SoEllipticalPrism_initClass

SO_TORUS_U_DIM = HEPVis_SWIG_Python.SO_TORUS_U_DIM
SO_TORUS_V_DIM = HEPVis_SWIG_Python.SO_TORUS_V_DIM
SO_TORUS_U_ORDER = HEPVis_SWIG_Python.SO_TORUS_U_ORDER
SO_TORUS_V_ORDER = HEPVis_SWIG_Python.SO_TORUS_V_ORDER
class SoTorus(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTorus_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoTorus_getTypeId(self)
    rMinor = _swig_property(HEPVis_SWIG_Python.SoTorus_rMinor_get, HEPVis_SWIG_Python.SoTorus_rMinor_set)
    rMajor = _swig_property(HEPVis_SWIG_Python.SoTorus_rMajor_get, HEPVis_SWIG_Python.SoTorus_rMajor_set)
    center = _swig_property(HEPVis_SWIG_Python.SoTorus_center_get, HEPVis_SWIG_Python.SoTorus_center_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoTorus_alternateRep_get, HEPVis_SWIG_Python.SoTorus_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTorus()
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoTorus_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoTorus_clearAlternateRep(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTorus_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTorus
    __del__ = lambda self : None;
SoTorus_swigregister = HEPVis_SWIG_Python.SoTorus_swigregister
SoTorus_swigregister(SoTorus)

def SoTorus_getClassTypeId():
  return HEPVis_SWIG_Python.SoTorus_getClassTypeId()
SoTorus_getClassTypeId = HEPVis_SWIG_Python.SoTorus_getClassTypeId

def SoTorus_initClass():
  return HEPVis_SWIG_Python.SoTorus_initClass()
SoTorus_initClass = HEPVis_SWIG_Python.SoTorus_initClass

class SoPcon(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPcon_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPcon_getTypeId(self)
    vtxPts = _swig_property(HEPVis_SWIG_Python.SoPcon_vtxPts_get, HEPVis_SWIG_Python.SoPcon_vtxPts_set)
    center = _swig_property(HEPVis_SWIG_Python.SoPcon_center_get, HEPVis_SWIG_Python.SoPcon_center_set)
    startAngle = _swig_property(HEPVis_SWIG_Python.SoPcon_startAngle_get, HEPVis_SWIG_Python.SoPcon_startAngle_set)
    deltaAngle = _swig_property(HEPVis_SWIG_Python.SoPcon_deltaAngle_get, HEPVis_SWIG_Python.SoPcon_deltaAngle_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPcon_alternateRep_get, HEPVis_SWIG_Python.SoPcon_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPcon()
        try: self.this.append(this)
        except: self.this = this
    def setPconPts(self, *args): return HEPVis_SWIG_Python.SoPcon_setPconPts(self, *args)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoPcon_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoPcon_clearAlternateRep(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPcon_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPcon
    __del__ = lambda self : None;
SoPcon_swigregister = HEPVis_SWIG_Python.SoPcon_swigregister
SoPcon_swigregister(SoPcon)

def SoPcon_getClassTypeId():
  return HEPVis_SWIG_Python.SoPcon_getClassTypeId()
SoPcon_getClassTypeId = HEPVis_SWIG_Python.SoPcon_getClassTypeId

def SoPcon_initClass():
  return HEPVis_SWIG_Python.SoPcon_initClass()
SoPcon_initClass = HEPVis_SWIG_Python.SoPcon_initClass

class SoPcons(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPcons_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPcons_getTypeId(self)
    fRmin = _swig_property(HEPVis_SWIG_Python.SoPcons_fRmin_get, HEPVis_SWIG_Python.SoPcons_fRmin_set)
    fRmax = _swig_property(HEPVis_SWIG_Python.SoPcons_fRmax_get, HEPVis_SWIG_Python.SoPcons_fRmax_set)
    fDz = _swig_property(HEPVis_SWIG_Python.SoPcons_fDz_get, HEPVis_SWIG_Python.SoPcons_fDz_set)
    fSPhi = _swig_property(HEPVis_SWIG_Python.SoPcons_fSPhi_get, HEPVis_SWIG_Python.SoPcons_fSPhi_set)
    fDPhi = _swig_property(HEPVis_SWIG_Python.SoPcons_fDPhi_get, HEPVis_SWIG_Python.SoPcons_fDPhi_set)
    smoothDraw = _swig_property(HEPVis_SWIG_Python.SoPcons_smoothDraw_get, HEPVis_SWIG_Python.SoPcons_smoothDraw_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPcons_alternateRep_get, HEPVis_SWIG_Python.SoPcons_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPcons()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoPcons_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoPcons_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoPcons_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPcons
    __del__ = lambda self : None;
SoPcons_swigregister = HEPVis_SWIG_Python.SoPcons_swigregister
SoPcons_swigregister(SoPcons)

def SoPcons_getClassTypeId():
  return HEPVis_SWIG_Python.SoPcons_getClassTypeId()
SoPcons_getClassTypeId = HEPVis_SWIG_Python.SoPcons_getClassTypeId

def SoPcons_initClass():
  return HEPVis_SWIG_Python.SoPcons_initClass()
SoPcons_initClass = HEPVis_SWIG_Python.SoPcons_initClass

class SoPolyVol(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPolyVol_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPolyVol_getTypeId(self)
    vtxPts = _swig_property(HEPVis_SWIG_Python.SoPolyVol_vtxPts_get, HEPVis_SWIG_Python.SoPolyVol_vtxPts_set)
    center = _swig_property(HEPVis_SWIG_Python.SoPolyVol_center_get, HEPVis_SWIG_Python.SoPolyVol_center_set)
    dZ = _swig_property(HEPVis_SWIG_Python.SoPolyVol_dZ_get, HEPVis_SWIG_Python.SoPolyVol_dZ_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPolyVol_alternateRep_get, HEPVis_SWIG_Python.SoPolyVol_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPolyVol()
        try: self.this.append(this)
        except: self.this = this
    def setPolyVolPts(self, *args): return HEPVis_SWIG_Python.SoPolyVol_setPolyVolPts(self, *args)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoPolyVol_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoPolyVol_clearAlternateRep(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPolyVol_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPolyVol
    __del__ = lambda self : None;
SoPolyVol_swigregister = HEPVis_SWIG_Python.SoPolyVol_swigregister
SoPolyVol_swigregister(SoPolyVol)

def SoPolyVol_getClassTypeId():
  return HEPVis_SWIG_Python.SoPolyVol_getClassTypeId()
SoPolyVol_getClassTypeId = HEPVis_SWIG_Python.SoPolyVol_getClassTypeId

def SoPolyVol_initClass():
  return HEPVis_SWIG_Python.SoPolyVol_initClass()
SoPolyVol_initClass = HEPVis_SWIG_Python.SoPolyVol_initClass

class So3DErrorBar(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.So3DErrorBar_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.So3DErrorBar_getTypeId(self)
    lineWidth = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_lineWidth_get, HEPVis_SWIG_Python.So3DErrorBar_lineWidth_set)
    u1 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_u1_get, HEPVis_SWIG_Python.So3DErrorBar_u1_set)
    u2 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_u2_get, HEPVis_SWIG_Python.So3DErrorBar_u2_set)
    v1 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_v1_get, HEPVis_SWIG_Python.So3DErrorBar_v1_set)
    v2 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_v2_get, HEPVis_SWIG_Python.So3DErrorBar_v2_set)
    w1 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_w1_get, HEPVis_SWIG_Python.So3DErrorBar_w1_set)
    w2 = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_w2_get, HEPVis_SWIG_Python.So3DErrorBar_w2_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.So3DErrorBar_alternateRep_get, HEPVis_SWIG_Python.So3DErrorBar_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_So3DErrorBar()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.So3DErrorBar_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.So3DErrorBar_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.So3DErrorBar_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_So3DErrorBar
    __del__ = lambda self : None;
So3DErrorBar_swigregister = HEPVis_SWIG_Python.So3DErrorBar_swigregister
So3DErrorBar_swigregister(So3DErrorBar)

def So3DErrorBar_getClassTypeId():
  return HEPVis_SWIG_Python.So3DErrorBar_getClassTypeId()
So3DErrorBar_getClassTypeId = HEPVis_SWIG_Python.So3DErrorBar_getClassTypeId

def So3DErrorBar_initClass():
  return HEPVis_SWIG_Python.So3DErrorBar_initClass()
So3DErrorBar_initClass = HEPVis_SWIG_Python.So3DErrorBar_initClass

class SoCoordinateAxis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCoordinateAxis_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoCoordinateAxis_getTypeId(self)
    fNDivision = _swig_property(HEPVis_SWIG_Python.SoCoordinateAxis_fNDivision_get, HEPVis_SWIG_Python.SoCoordinateAxis_fNDivision_set)
    fDivisionLength = _swig_property(HEPVis_SWIG_Python.SoCoordinateAxis_fDivisionLength_get, HEPVis_SWIG_Python.SoCoordinateAxis_fDivisionLength_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoCoordinateAxis_alternateRep_get, HEPVis_SWIG_Python.SoCoordinateAxis_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoCoordinateAxis()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoCoordinateAxis_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoCoordinateAxis_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoCoordinateAxis_clearAlternateRep(self)
    def getInfo(self): return HEPVis_SWIG_Python.SoCoordinateAxis_getInfo(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCoordinateAxis
    __del__ = lambda self : None;
SoCoordinateAxis_swigregister = HEPVis_SWIG_Python.SoCoordinateAxis_swigregister
SoCoordinateAxis_swigregister(SoCoordinateAxis)

def SoCoordinateAxis_getClassTypeId():
  return HEPVis_SWIG_Python.SoCoordinateAxis_getClassTypeId()
SoCoordinateAxis_getClassTypeId = HEPVis_SWIG_Python.SoCoordinateAxis_getClassTypeId

def SoCoordinateAxis_initClass():
  return HEPVis_SWIG_Python.SoCoordinateAxis_initClass()
SoCoordinateAxis_initClass = HEPVis_SWIG_Python.SoCoordinateAxis_initClass

class SoWedge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoWedge_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoWedge_getTypeId(self)
    halfWidth1 = _swig_property(HEPVis_SWIG_Python.SoWedge_halfWidth1_get, HEPVis_SWIG_Python.SoWedge_halfWidth1_set)
    halfWidth2 = _swig_property(HEPVis_SWIG_Python.SoWedge_halfWidth2_get, HEPVis_SWIG_Python.SoWedge_halfWidth2_set)
    halfHeight = _swig_property(HEPVis_SWIG_Python.SoWedge_halfHeight_get, HEPVis_SWIG_Python.SoWedge_halfHeight_set)
    thickness = _swig_property(HEPVis_SWIG_Python.SoWedge_thickness_get, HEPVis_SWIG_Python.SoWedge_thickness_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoWedge_alternateRep_get, HEPVis_SWIG_Python.SoWedge_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoWedge()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoWedge_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoWedge_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoWedge_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoWedge
    __del__ = lambda self : None;
SoWedge_swigregister = HEPVis_SWIG_Python.SoWedge_swigregister
SoWedge_swigregister(SoWedge)

def SoWedge_getClassTypeId():
  return HEPVis_SWIG_Python.SoWedge_getClassTypeId()
SoWedge_getClassTypeId = HEPVis_SWIG_Python.SoWedge_getClassTypeId

def SoWedge_initClass():
  return HEPVis_SWIG_Python.SoWedge_initClass()
SoWedge_initClass = HEPVis_SWIG_Python.SoWedge_initClass

class So2DArrow(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.So2DArrow_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.So2DArrow_getTypeId(self)
    length = _swig_property(HEPVis_SWIG_Python.So2DArrow_length_get, HEPVis_SWIG_Python.So2DArrow_length_set)
    lengthRatio = _swig_property(HEPVis_SWIG_Python.So2DArrow_lengthRatio_get, HEPVis_SWIG_Python.So2DArrow_lengthRatio_set)
    headHeight = _swig_property(HEPVis_SWIG_Python.So2DArrow_headHeight_get, HEPVis_SWIG_Python.So2DArrow_headHeight_set)
    initClass = staticmethod(HEPVis_SWIG_Python.So2DArrow_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_So2DArrow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_So2DArrow
    __del__ = lambda self : None;
So2DArrow_swigregister = HEPVis_SWIG_Python.So2DArrow_swigregister
So2DArrow_swigregister(So2DArrow)

def So2DArrow_getClassTypeId():
  return HEPVis_SWIG_Python.So2DArrow_getClassTypeId()
So2DArrow_getClassTypeId = HEPVis_SWIG_Python.So2DArrow_getClassTypeId

def So2DArrow_initClass():
  return HEPVis_SWIG_Python.So2DArrow_initClass()
So2DArrow_initClass = HEPVis_SWIG_Python.So2DArrow_initClass

class SoCircleArc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCircleArc_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoCircleArc_getTypeId(self)
    center = _swig_property(HEPVis_SWIG_Python.SoCircleArc_center_get, HEPVis_SWIG_Python.SoCircleArc_center_set)
    radius = _swig_property(HEPVis_SWIG_Python.SoCircleArc_radius_get, HEPVis_SWIG_Python.SoCircleArc_radius_set)
    sweepAngle = _swig_property(HEPVis_SWIG_Python.SoCircleArc_sweepAngle_get, HEPVis_SWIG_Python.SoCircleArc_sweepAngle_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoCircleArc_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoCircleArc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCircleArc
    __del__ = lambda self : None;
SoCircleArc_swigregister = HEPVis_SWIG_Python.SoCircleArc_swigregister
SoCircleArc_swigregister(SoCircleArc)

def SoCircleArc_getClassTypeId():
  return HEPVis_SWIG_Python.SoCircleArc_getClassTypeId()
SoCircleArc_getClassTypeId = HEPVis_SWIG_Python.SoCircleArc_getClassTypeId

def SoCircleArc_initClass():
  return HEPVis_SWIG_Python.SoCircleArc_initClass()
SoCircleArc_initClass = HEPVis_SWIG_Python.SoCircleArc_initClass

class SoDisk(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDisk_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoDisk_getTypeId(self)
    center = _swig_property(HEPVis_SWIG_Python.SoDisk_center_get, HEPVis_SWIG_Python.SoDisk_center_set)
    radius = _swig_property(HEPVis_SWIG_Python.SoDisk_radius_get, HEPVis_SWIG_Python.SoDisk_radius_set)
    sweepAngle = _swig_property(HEPVis_SWIG_Python.SoDisk_sweepAngle_get, HEPVis_SWIG_Python.SoDisk_sweepAngle_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDisk_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoDisk()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDisk
    __del__ = lambda self : None;
SoDisk_swigregister = HEPVis_SWIG_Python.SoDisk_swigregister
SoDisk_swigregister(SoDisk)

def SoDisk_getClassTypeId():
  return HEPVis_SWIG_Python.SoDisk_getClassTypeId()
SoDisk_getClassTypeId = HEPVis_SWIG_Python.SoDisk_getClassTypeId

def SoDisk_initClass():
  return HEPVis_SWIG_Python.SoDisk_initClass()
SoDisk_initClass = HEPVis_SWIG_Python.SoDisk_initClass

class SoPolygon(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPolygon_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPolygon_getTypeId(self)
    corners = _swig_property(HEPVis_SWIG_Python.SoPolygon_corners_get, HEPVis_SWIG_Python.SoPolygon_corners_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPolygon_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPolygon()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPolygon
    __del__ = lambda self : None;
SoPolygon_swigregister = HEPVis_SWIG_Python.SoPolygon_swigregister
SoPolygon_swigregister(SoPolygon)

def SoPolygon_getClassTypeId():
  return HEPVis_SWIG_Python.SoPolygon_getClassTypeId()
SoPolygon_getClassTypeId = HEPVis_SWIG_Python.SoPolygon_getClassTypeId

def SoPolygon_initClass():
  return HEPVis_SWIG_Python.SoPolygon_initClass()
SoPolygon_initClass = HEPVis_SWIG_Python.SoPolygon_initClass

class SoQuad(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoQuad_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoQuad_getTypeId(self)
    LLCornerOffset = _swig_property(HEPVis_SWIG_Python.SoQuad_LLCornerOffset_get, HEPVis_SWIG_Python.SoQuad_LLCornerOffset_set)
    LRCornerOffset = _swig_property(HEPVis_SWIG_Python.SoQuad_LRCornerOffset_get, HEPVis_SWIG_Python.SoQuad_LRCornerOffset_set)
    URCornerOffset = _swig_property(HEPVis_SWIG_Python.SoQuad_URCornerOffset_get, HEPVis_SWIG_Python.SoQuad_URCornerOffset_set)
    ULCornerOffset = _swig_property(HEPVis_SWIG_Python.SoQuad_ULCornerOffset_get, HEPVis_SWIG_Python.SoQuad_ULCornerOffset_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoQuad_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoQuad()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoQuad
    __del__ = lambda self : None;
SoQuad_swigregister = HEPVis_SWIG_Python.SoQuad_swigregister
SoQuad_swigregister(SoQuad)

def SoQuad_getClassTypeId():
  return HEPVis_SWIG_Python.SoQuad_getClassTypeId()
SoQuad_getClassTypeId = HEPVis_SWIG_Python.SoQuad_getClassTypeId

def SoQuad_initClass():
  return HEPVis_SWIG_Python.SoQuad_initClass()
SoQuad_initClass = HEPVis_SWIG_Python.SoQuad_initClass

class SoRing(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoRing_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoRing_getTypeId(self)
    center = _swig_property(HEPVis_SWIG_Python.SoRing_center_get, HEPVis_SWIG_Python.SoRing_center_set)
    innerRadius = _swig_property(HEPVis_SWIG_Python.SoRing_innerRadius_get, HEPVis_SWIG_Python.SoRing_innerRadius_set)
    outerRadius = _swig_property(HEPVis_SWIG_Python.SoRing_outerRadius_get, HEPVis_SWIG_Python.SoRing_outerRadius_set)
    sweepAngle = _swig_property(HEPVis_SWIG_Python.SoRing_sweepAngle_get, HEPVis_SWIG_Python.SoRing_sweepAngle_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoRing_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoRing()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoRing
    __del__ = lambda self : None;
SoRing_swigregister = HEPVis_SWIG_Python.SoRing_swigregister
SoRing_swigregister(SoRing)

def SoRing_getClassTypeId():
  return HEPVis_SWIG_Python.SoRing_getClassTypeId()
SoRing_getClassTypeId = HEPVis_SWIG_Python.SoRing_getClassTypeId

def SoRing_initClass():
  return HEPVis_SWIG_Python.SoRing_initClass()
SoRing_initClass = HEPVis_SWIG_Python.SoRing_initClass

class SoTriangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoTriangle_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoTriangle_getTypeId(self)
    Corner1Offset = _swig_property(HEPVis_SWIG_Python.SoTriangle_Corner1Offset_get, HEPVis_SWIG_Python.SoTriangle_Corner1Offset_set)
    Corner2Offset = _swig_property(HEPVis_SWIG_Python.SoTriangle_Corner2Offset_get, HEPVis_SWIG_Python.SoTriangle_Corner2Offset_set)
    Corner3Offset = _swig_property(HEPVis_SWIG_Python.SoTriangle_Corner3Offset_get, HEPVis_SWIG_Python.SoTriangle_Corner3Offset_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoTriangle_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTriangle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTriangle
    __del__ = lambda self : None;
SoTriangle_swigregister = HEPVis_SWIG_Python.SoTriangle_swigregister
SoTriangle_swigregister(SoTriangle)

def SoTriangle_getClassTypeId():
  return HEPVis_SWIG_Python.SoTriangle_getClassTypeId()
SoTriangle_getClassTypeId = HEPVis_SWIG_Python.SoTriangle_getClassTypeId

def SoTriangle_initClass():
  return HEPVis_SWIG_Python.SoTriangle_initClass()
SoTriangle_initClass = HEPVis_SWIG_Python.SoTriangle_initClass

class SoHelicalTrack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoHelicalTrack_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoHelicalTrack_getTypeId(self)
    inverseRadius = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_inverseRadius_get, HEPVis_SWIG_Python.SoHelicalTrack_inverseRadius_set)
    cotTheta = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_cotTheta_get, HEPVis_SWIG_Python.SoHelicalTrack_cotTheta_set)
    phi0 = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_phi0_get, HEPVis_SWIG_Python.SoHelicalTrack_phi0_set)
    d0 = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_d0_get, HEPVis_SWIG_Python.SoHelicalTrack_d0_set)
    z0 = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_z0_get, HEPVis_SWIG_Python.SoHelicalTrack_z0_set)
    s0 = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_s0_get, HEPVis_SWIG_Python.SoHelicalTrack_s0_set)
    s1 = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_s1_get, HEPVis_SWIG_Python.SoHelicalTrack_s1_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoHelicalTrack_alternateRep_get, HEPVis_SWIG_Python.SoHelicalTrack_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoHelicalTrack()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoHelicalTrack_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoHelicalTrack_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoHelicalTrack_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoHelicalTrack
    __del__ = lambda self : None;
SoHelicalTrack_swigregister = HEPVis_SWIG_Python.SoHelicalTrack_swigregister
SoHelicalTrack_swigregister(SoHelicalTrack)

def SoHelicalTrack_getClassTypeId():
  return HEPVis_SWIG_Python.SoHelicalTrack_getClassTypeId()
SoHelicalTrack_getClassTypeId = HEPVis_SWIG_Python.SoHelicalTrack_getClassTypeId

def SoHelicalTrack_initClass():
  return HEPVis_SWIG_Python.SoHelicalTrack_initClass()
SoHelicalTrack_initClass = HEPVis_SWIG_Python.SoHelicalTrack_initClass

class SoCrystalHit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCrystalHit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoCrystalHit_getTypeId(self)
    Energy = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Energy_get, HEPVis_SWIG_Python.SoCrystalHit_Energy_set)
    MinimumEnergy = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_MinimumEnergy_get, HEPVis_SWIG_Python.SoCrystalHit_MinimumEnergy_set)
    Scale = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Scale_get, HEPVis_SWIG_Python.SoCrystalHit_Scale_set)
    RelativeWidth = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_RelativeWidth_get, HEPVis_SWIG_Python.SoCrystalHit_RelativeWidth_set)
    DrawCrystal = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_DrawCrystal_get, HEPVis_SWIG_Python.SoCrystalHit_DrawCrystal_set)
    DrawHit = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_DrawHit_get, HEPVis_SWIG_Python.SoCrystalHit_DrawHit_set)
    Front1 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Front1_get, HEPVis_SWIG_Python.SoCrystalHit_Front1_set)
    Front2 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Front2_get, HEPVis_SWIG_Python.SoCrystalHit_Front2_set)
    Front3 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Front3_get, HEPVis_SWIG_Python.SoCrystalHit_Front3_set)
    Front4 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Front4_get, HEPVis_SWIG_Python.SoCrystalHit_Front4_set)
    Back1 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Back1_get, HEPVis_SWIG_Python.SoCrystalHit_Back1_set)
    Back2 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Back2_get, HEPVis_SWIG_Python.SoCrystalHit_Back2_set)
    Back3 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Back3_get, HEPVis_SWIG_Python.SoCrystalHit_Back3_set)
    Back4 = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_Back4_get, HEPVis_SWIG_Python.SoCrystalHit_Back4_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoCrystalHit_alternateRep_get, HEPVis_SWIG_Python.SoCrystalHit_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoCrystalHit()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoCrystalHit_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoCrystalHit_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoCrystalHit_clearAlternateRep(self)
    def getInfo(self): return HEPVis_SWIG_Python.SoCrystalHit_getInfo(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCrystalHit
    __del__ = lambda self : None;
SoCrystalHit_swigregister = HEPVis_SWIG_Python.SoCrystalHit_swigregister
SoCrystalHit_swigregister(SoCrystalHit)

def SoCrystalHit_getClassTypeId():
  return HEPVis_SWIG_Python.SoCrystalHit_getClassTypeId()
SoCrystalHit_getClassTypeId = HEPVis_SWIG_Python.SoCrystalHit_getClassTypeId

def SoCrystalHit_initClass():
  return HEPVis_SWIG_Python.SoCrystalHit_initClass()
SoCrystalHit_initClass = HEPVis_SWIG_Python.SoCrystalHit_initClass

class SoJet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoJet_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoJet_getTypeId(self)
    fEnergy = _swig_property(HEPVis_SWIG_Python.SoJet_fEnergy_get, HEPVis_SWIG_Python.SoJet_fEnergy_set)
    fTheta = _swig_property(HEPVis_SWIG_Python.SoJet_fTheta_get, HEPVis_SWIG_Python.SoJet_fTheta_set)
    fPhi = _swig_property(HEPVis_SWIG_Python.SoJet_fPhi_get, HEPVis_SWIG_Python.SoJet_fPhi_set)
    fThrust = _swig_property(HEPVis_SWIG_Python.SoJet_fThrust_get, HEPVis_SWIG_Python.SoJet_fThrust_set)
    fMaxZ = _swig_property(HEPVis_SWIG_Python.SoJet_fMaxZ_get, HEPVis_SWIG_Python.SoJet_fMaxZ_set)
    fMaxR = _swig_property(HEPVis_SWIG_Python.SoJet_fMaxR_get, HEPVis_SWIG_Python.SoJet_fMaxR_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoJet_alternateRep_get, HEPVis_SWIG_Python.SoJet_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoJet()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoJet_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoJet_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoJet_clearAlternateRep(self)
    def getInfo(self): return HEPVis_SWIG_Python.SoJet_getInfo(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoJet
    __del__ = lambda self : None;
SoJet_swigregister = HEPVis_SWIG_Python.SoJet_swigregister
SoJet_swigregister(SoJet)

def SoJet_getClassTypeId():
  return HEPVis_SWIG_Python.SoJet_getClassTypeId()
SoJet_getClassTypeId = HEPVis_SWIG_Python.SoJet_getClassTypeId

def SoJet_initClass():
  return HEPVis_SWIG_Python.SoJet_initClass()
SoJet_initClass = HEPVis_SWIG_Python.SoJet_initClass

class SoReconTrack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoReconTrack_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoReconTrack_getTypeId(self)
    cotTheta = _swig_property(HEPVis_SWIG_Python.SoReconTrack_cotTheta_get, HEPVis_SWIG_Python.SoReconTrack_cotTheta_set)
    phi0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_phi0_get, HEPVis_SWIG_Python.SoReconTrack_phi0_set)
    d0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_d0_get, HEPVis_SWIG_Python.SoReconTrack_d0_set)
    z0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_z0_get, HEPVis_SWIG_Python.SoReconTrack_z0_set)
    sigD0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_sigD0_get, HEPVis_SWIG_Python.SoReconTrack_sigD0_set)
    sigZ0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_sigZ0_get, HEPVis_SWIG_Python.SoReconTrack_sigZ0_set)
    correlation = _swig_property(HEPVis_SWIG_Python.SoReconTrack_correlation_get, HEPVis_SWIG_Python.SoReconTrack_correlation_set)
    s0 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_s0_get, HEPVis_SWIG_Python.SoReconTrack_s0_set)
    s1 = _swig_property(HEPVis_SWIG_Python.SoReconTrack_s1_get, HEPVis_SWIG_Python.SoReconTrack_s1_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoReconTrack_alternateRep_get, HEPVis_SWIG_Python.SoReconTrack_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoReconTrack()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoReconTrack_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoReconTrack_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoReconTrack_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoReconTrack
    __del__ = lambda self : None;
SoReconTrack_swigregister = HEPVis_SWIG_Python.SoReconTrack_swigregister
SoReconTrack_swigregister(SoReconTrack)

def SoReconTrack_getClassTypeId():
  return HEPVis_SWIG_Python.SoReconTrack_getClassTypeId()
SoReconTrack_getClassTypeId = HEPVis_SWIG_Python.SoReconTrack_getClassTypeId

def SoReconTrack_initClass():
  return HEPVis_SWIG_Python.SoReconTrack_initClass()
SoReconTrack_initClass = HEPVis_SWIG_Python.SoReconTrack_initClass

class SoSiStrips(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSiStrips_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoSiStrips_getTypeId(self)
    length = _swig_property(HEPVis_SWIG_Python.SoSiStrips_length_get, HEPVis_SWIG_Python.SoSiStrips_length_set)
    width = _swig_property(HEPVis_SWIG_Python.SoSiStrips_width_get, HEPVis_SWIG_Python.SoSiStrips_width_set)
    thickness = _swig_property(HEPVis_SWIG_Python.SoSiStrips_thickness_get, HEPVis_SWIG_Python.SoSiStrips_thickness_set)
    pitch = _swig_property(HEPVis_SWIG_Python.SoSiStrips_pitch_get, HEPVis_SWIG_Python.SoSiStrips_pitch_set)
    offset = _swig_property(HEPVis_SWIG_Python.SoSiStrips_offset_get, HEPVis_SWIG_Python.SoSiStrips_offset_set)
    strip = _swig_property(HEPVis_SWIG_Python.SoSiStrips_strip_get, HEPVis_SWIG_Python.SoSiStrips_strip_set)
    adc = _swig_property(HEPVis_SWIG_Python.SoSiStrips_adc_get, HEPVis_SWIG_Python.SoSiStrips_adc_set)
    gain = _swig_property(HEPVis_SWIG_Python.SoSiStrips_gain_get, HEPVis_SWIG_Python.SoSiStrips_gain_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSiStrips_alternateRep_get, HEPVis_SWIG_Python.SoSiStrips_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoSiStrips()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoSiStrips_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoSiStrips_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoSiStrips_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiStrips
    __del__ = lambda self : None;
SoSiStrips_swigregister = HEPVis_SWIG_Python.SoSiStrips_swigregister
SoSiStrips_swigregister(SoSiStrips)

def SoSiStrips_getClassTypeId():
  return HEPVis_SWIG_Python.SoSiStrips_getClassTypeId()
SoSiStrips_getClassTypeId = HEPVis_SWIG_Python.SoSiStrips_getClassTypeId

def SoSiStrips_initClass():
  return HEPVis_SWIG_Python.SoSiStrips_initClass()
SoSiStrips_initClass = HEPVis_SWIG_Python.SoSiStrips_initClass

class SoSiWedgeStrips(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSiWedgeStrips_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoSiWedgeStrips_getTypeId(self)
    length = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_length_get, HEPVis_SWIG_Python.SoSiWedgeStrips_length_set)
    width = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_width_get, HEPVis_SWIG_Python.SoSiWedgeStrips_width_set)
    thickness = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_thickness_get, HEPVis_SWIG_Python.SoSiWedgeStrips_thickness_set)
    pitch = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_pitch_get, HEPVis_SWIG_Python.SoSiWedgeStrips_pitch_set)
    offset = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_offset_get, HEPVis_SWIG_Python.SoSiWedgeStrips_offset_set)
    strip = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_strip_get, HEPVis_SWIG_Python.SoSiWedgeStrips_strip_set)
    adc = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_adc_get, HEPVis_SWIG_Python.SoSiWedgeStrips_adc_set)
    gain = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_gain_get, HEPVis_SWIG_Python.SoSiWedgeStrips_gain_set)
    cutoff = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_cutoff_get, HEPVis_SWIG_Python.SoSiWedgeStrips_cutoff_set)
    slope = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_slope_get, HEPVis_SWIG_Python.SoSiWedgeStrips_slope_set)
    tilt = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_tilt_get, HEPVis_SWIG_Python.SoSiWedgeStrips_tilt_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSiWedgeStrips_alternateRep_get, HEPVis_SWIG_Python.SoSiWedgeStrips_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoSiWedgeStrips()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoSiWedgeStrips_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoSiWedgeStrips_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoSiWedgeStrips_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiWedgeStrips
    __del__ = lambda self : None;
SoSiWedgeStrips_swigregister = HEPVis_SWIG_Python.SoSiWedgeStrips_swigregister
SoSiWedgeStrips_swigregister(SoSiWedgeStrips)

def SoSiWedgeStrips_getClassTypeId():
  return HEPVis_SWIG_Python.SoSiWedgeStrips_getClassTypeId()
SoSiWedgeStrips_getClassTypeId = HEPVis_SWIG_Python.SoSiWedgeStrips_getClassTypeId

def SoSiWedgeStrips_initClass():
  return HEPVis_SWIG_Python.SoSiWedgeStrips_initClass()
SoSiWedgeStrips_initClass = HEPVis_SWIG_Python.SoSiWedgeStrips_initClass

class SoVtxReconTrack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoVtxReconTrack_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoVtxReconTrack_getTypeId(self)
    cotTheta = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_cotTheta_get, HEPVis_SWIG_Python.SoVtxReconTrack_cotTheta_set)
    phi0 = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_phi0_get, HEPVis_SWIG_Python.SoVtxReconTrack_phi0_set)
    ellipsoid = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_ellipsoid_get, HEPVis_SWIG_Python.SoVtxReconTrack_ellipsoid_set)
    s0 = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_s0_get, HEPVis_SWIG_Python.SoVtxReconTrack_s0_set)
    s1 = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_s1_get, HEPVis_SWIG_Python.SoVtxReconTrack_s1_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoVtxReconTrack_alternateRep_get, HEPVis_SWIG_Python.SoVtxReconTrack_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoVtxReconTrack()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoVtxReconTrack_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoVtxReconTrack_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoVtxReconTrack_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoVtxReconTrack
    __del__ = lambda self : None;
SoVtxReconTrack_swigregister = HEPVis_SWIG_Python.SoVtxReconTrack_swigregister
SoVtxReconTrack_swigregister(SoVtxReconTrack)

def SoVtxReconTrack_getClassTypeId():
  return HEPVis_SWIG_Python.SoVtxReconTrack_getClassTypeId()
SoVtxReconTrack_getClassTypeId = HEPVis_SWIG_Python.SoVtxReconTrack_getClassTypeId

def SoVtxReconTrack_initClass():
  return HEPVis_SWIG_Python.SoVtxReconTrack_initClass()
SoVtxReconTrack_initClass = HEPVis_SWIG_Python.SoVtxReconTrack_initClass

class SoHadEmCrystalHit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoHadEmCrystalHit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoHadEmCrystalHit_getTypeId(self)
    EnergyHad = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyHad_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyHad_set)
    EnergyEm = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyEm_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_EnergyEm_set)
    MinimumEnergyTot = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_MinimumEnergyTot_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_MinimumEnergyTot_set)
    Scale = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Scale_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Scale_set)
    RelativeWidth = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_RelativeWidth_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_RelativeWidth_set)
    Front1 = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front1_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front1_set)
    Front2 = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front2_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front2_set)
    Front3 = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front3_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front3_set)
    Front4 = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_Front4_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_Front4_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoHadEmCrystalHit_alternateRep_get, HEPVis_SWIG_Python.SoHadEmCrystalHit_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoHadEmCrystalHit()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoHadEmCrystalHit_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoHadEmCrystalHit_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoHadEmCrystalHit_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoHadEmCrystalHit
    __del__ = lambda self : None;
SoHadEmCrystalHit_swigregister = HEPVis_SWIG_Python.SoHadEmCrystalHit_swigregister
SoHadEmCrystalHit_swigregister(SoHadEmCrystalHit)

def SoHadEmCrystalHit_getClassTypeId():
  return HEPVis_SWIG_Python.SoHadEmCrystalHit_getClassTypeId()
SoHadEmCrystalHit_getClassTypeId = HEPVis_SWIG_Python.SoHadEmCrystalHit_getClassTypeId

def SoHadEmCrystalHit_initClass():
  return HEPVis_SWIG_Python.SoHadEmCrystalHit_initClass()
SoHadEmCrystalHit_initClass = HEPVis_SWIG_Python.SoHadEmCrystalHit_initClass

class SoDetectorTreeKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDetectorTreeKit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoDetectorTreeKit_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoDetectorTreeKit_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoDetectorTreeKit_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoDetectorTreeKit_alternateRep_get, HEPVis_SWIG_Python.SoDetectorTreeKit_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoDetectorTreeKit()
        try: self.this.append(this)
        except: self.this = this
    def affectsState(self): return HEPVis_SWIG_Python.SoDetectorTreeKit_affectsState(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDetectorTreeKit_initClass)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoDetectorTreeKit_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoDetectorTreeKit_callback(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoDetectorTreeKit_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoDetectorTreeKit_getMatrix(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoDetectorTreeKit_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoDetectorTreeKit_write(self, *args)
    def setPreview(self, *args): return HEPVis_SWIG_Python.SoDetectorTreeKit_setPreview(self, *args)
    def getPreview(self): return HEPVis_SWIG_Python.SoDetectorTreeKit_getPreview(self)
    def setPreviewAndFull(self): return HEPVis_SWIG_Python.SoDetectorTreeKit_setPreviewAndFull(self)
    def getPreviewSeparator(self): return HEPVis_SWIG_Python.SoDetectorTreeKit_getPreviewSeparator(self)
    def getFullSeparator(self): return HEPVis_SWIG_Python.SoDetectorTreeKit_getFullSeparator(self)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoDetectorTreeKit_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoDetectorTreeKit_clearAlternateRep(self)
    def addPickCallback(self, *args): return HEPVis_SWIG_Python.SoDetectorTreeKit_addPickCallback(self, *args)
    def removePickCallback(self, *args): return HEPVis_SWIG_Python.SoDetectorTreeKit_removePickCallback(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDetectorTreeKit
    __del__ = lambda self : None;
SoDetectorTreeKit_swigregister = HEPVis_SWIG_Python.SoDetectorTreeKit_swigregister
SoDetectorTreeKit_swigregister(SoDetectorTreeKit)

def SoDetectorTreeKit_getClassTypeId():
  return HEPVis_SWIG_Python.SoDetectorTreeKit_getClassTypeId()
SoDetectorTreeKit_getClassTypeId = HEPVis_SWIG_Python.SoDetectorTreeKit_getClassTypeId

def SoDetectorTreeKit_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoDetectorTreeKit_getClassNodekitCatalog()
SoDetectorTreeKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoDetectorTreeKit_getClassNodekitCatalog

def SoDetectorTreeKit_initClass():
  return HEPVis_SWIG_Python.SoDetectorTreeKit_initClass()
SoDetectorTreeKit_initClass = HEPVis_SWIG_Python.SoDetectorTreeKit_initClass

class SoMeterStickKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoMeterStickKit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoMeterStickKit_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoMeterStickKit_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoMeterStickKit_getNodekitCatalog(self)
    RULER = HEPVis_SWIG_Python.SoMeterStickKit_RULER
    METER_STICK = HEPVis_SWIG_Python.SoMeterStickKit_METER_STICK
    type = _swig_property(HEPVis_SWIG_Python.SoMeterStickKit_type_get, HEPVis_SWIG_Python.SoMeterStickKit_type_set)
    rotationSnap = _swig_property(HEPVis_SWIG_Python.SoMeterStickKit_rotationSnap_get, HEPVis_SWIG_Python.SoMeterStickKit_rotationSnap_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoMeterStickKit_alternateRep_get, HEPVis_SWIG_Python.SoMeterStickKit_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoMeterStickKit()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoMeterStickKit_initClass)
    def affectsState(self): return HEPVis_SWIG_Python.SoMeterStickKit_affectsState(self)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoMeterStickKit_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoMeterStickKit_clearAlternateRep(self)
    motionFinished = staticmethod(HEPVis_SWIG_Python.SoMeterStickKit_motionFinished)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoMeterStickKit
    __del__ = lambda self : None;
SoMeterStickKit_swigregister = HEPVis_SWIG_Python.SoMeterStickKit_swigregister
SoMeterStickKit_swigregister(SoMeterStickKit)

def SoMeterStickKit_getClassTypeId():
  return HEPVis_SWIG_Python.SoMeterStickKit_getClassTypeId()
SoMeterStickKit_getClassTypeId = HEPVis_SWIG_Python.SoMeterStickKit_getClassTypeId

def SoMeterStickKit_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoMeterStickKit_getClassNodekitCatalog()
SoMeterStickKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoMeterStickKit_getClassNodekitCatalog

def SoMeterStickKit_initClass():
  return HEPVis_SWIG_Python.SoMeterStickKit_initClass()
SoMeterStickKit_initClass = HEPVis_SWIG_Python.SoMeterStickKit_initClass

def SoMeterStickKit_motionFinished(*args):
  return HEPVis_SWIG_Python.SoMeterStickKit_motionFinished(*args)
SoMeterStickKit_motionFinished = HEPVis_SWIG_Python.SoMeterStickKit_motionFinished

class ParticleChar(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getGeantCode(self): return HEPVis_SWIG_Python.ParticleChar_getGeantCode(self)
    def getMaterial(self): return HEPVis_SWIG_Python.ParticleChar_getMaterial(self)
    def getStyle(self): return HEPVis_SWIG_Python.ParticleChar_getStyle(self)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_ParticleChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def setMaterial(self, *args): return HEPVis_SWIG_Python.ParticleChar_setMaterial(self, *args)
    def setStyle(self, *args): return HEPVis_SWIG_Python.ParticleChar_setStyle(self, *args)
    def getName(self): return HEPVis_SWIG_Python.ParticleChar_getName(self)
    def getMass(self): return HEPVis_SWIG_Python.ParticleChar_getMass(self)
    def getCharge(self): return HEPVis_SWIG_Python.ParticleChar_getCharge(self)
    initParticles = staticmethod(HEPVis_SWIG_Python.ParticleChar_initParticles)
    deleteParticles = staticmethod(HEPVis_SWIG_Python.ParticleChar_deleteParticles)
    getByName = staticmethod(HEPVis_SWIG_Python.ParticleChar_getByName)
    getByGeantID = staticmethod(HEPVis_SWIG_Python.ParticleChar_getByGeantID)
    getByPythiaID = staticmethod(HEPVis_SWIG_Python.ParticleChar_getByPythiaID)
    getByIsajetID = staticmethod(HEPVis_SWIG_Python.ParticleChar_getByIsajetID)
ParticleChar_swigregister = HEPVis_SWIG_Python.ParticleChar_swigregister
ParticleChar_swigregister(ParticleChar)

def ParticleChar_initParticles():
  return HEPVis_SWIG_Python.ParticleChar_initParticles()
ParticleChar_initParticles = HEPVis_SWIG_Python.ParticleChar_initParticles

def ParticleChar_deleteParticles():
  return HEPVis_SWIG_Python.ParticleChar_deleteParticles()
ParticleChar_deleteParticles = HEPVis_SWIG_Python.ParticleChar_deleteParticles

def ParticleChar_getByName(*args):
  return HEPVis_SWIG_Python.ParticleChar_getByName(*args)
ParticleChar_getByName = HEPVis_SWIG_Python.ParticleChar_getByName

def ParticleChar_getByGeantID(*args):
  return HEPVis_SWIG_Python.ParticleChar_getByGeantID(*args)
ParticleChar_getByGeantID = HEPVis_SWIG_Python.ParticleChar_getByGeantID

def ParticleChar_getByPythiaID(*args):
  return HEPVis_SWIG_Python.ParticleChar_getByPythiaID(*args)
ParticleChar_getByPythiaID = HEPVis_SWIG_Python.ParticleChar_getByPythiaID

def ParticleChar_getByIsajetID(*args):
  return HEPVis_SWIG_Python.ParticleChar_getByIsajetID(*args)
ParticleChar_getByIsajetID = HEPVis_SWIG_Python.ParticleChar_getByIsajetID

class SoIdealTrackKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoIdealTrackKit_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoIdealTrackKit_getNodekitCatalog(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoIdealTrackKit()
        try: self.this.append(this)
        except: self.this = this
    Phi = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_Phi_get, HEPVis_SWIG_Python.SoIdealTrackKit_Phi_set)
    Radius = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_Radius_get, HEPVis_SWIG_Python.SoIdealTrackKit_Radius_set)
    Zeta = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_Zeta_get, HEPVis_SWIG_Python.SoIdealTrackKit_Zeta_set)
    Vertex = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_Vertex_get, HEPVis_SWIG_Python.SoIdealTrackKit_Vertex_set)
    T0 = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_T0_get, HEPVis_SWIG_Python.SoIdealTrackKit_T0_set)
    DeltaT = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_DeltaT_get, HEPVis_SWIG_Python.SoIdealTrackKit_DeltaT_set)
    T_0 = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_T_0_get, HEPVis_SWIG_Python.SoIdealTrackKit_T_0_set)
    T_1 = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_T_1_get, HEPVis_SWIG_Python.SoIdealTrackKit_T_1_set)
    ParticleType = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_ParticleType_get, HEPVis_SWIG_Python.SoIdealTrackKit_ParticleType_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoIdealTrackKit_alternateRep_get, HEPVis_SWIG_Python.SoIdealTrackKit_alternateRep_set)
    def updateTrack(self): return HEPVis_SWIG_Python.SoIdealTrackKit_updateTrack(self)
    set_bfield = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_set_bfield)
    set_rExtent = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_set_rExtent)
    set_zExtent = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_set_zExtent)
    def initTrack(self, *args): return HEPVis_SWIG_Python.SoIdealTrackKit_initTrack(self, *args)
    def print_me(self): return HEPVis_SWIG_Python.SoIdealTrackKit_print_me(self)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoIdealTrackKit_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoIdealTrackKit_clearAlternateRep(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoIdealTrackKit_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoIdealTrackKit
    __del__ = lambda self : None;
SoIdealTrackKit_swigregister = HEPVis_SWIG_Python.SoIdealTrackKit_swigregister
SoIdealTrackKit_swigregister(SoIdealTrackKit)

def SoIdealTrackKit_getClassTypeId():
  return HEPVis_SWIG_Python.SoIdealTrackKit_getClassTypeId()
SoIdealTrackKit_getClassTypeId = HEPVis_SWIG_Python.SoIdealTrackKit_getClassTypeId

def SoIdealTrackKit_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoIdealTrackKit_getClassNodekitCatalog()
SoIdealTrackKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoIdealTrackKit_getClassNodekitCatalog

def SoIdealTrackKit_set_bfield(*args):
  return HEPVis_SWIG_Python.SoIdealTrackKit_set_bfield(*args)
SoIdealTrackKit_set_bfield = HEPVis_SWIG_Python.SoIdealTrackKit_set_bfield

def SoIdealTrackKit_set_rExtent(*args):
  return HEPVis_SWIG_Python.SoIdealTrackKit_set_rExtent(*args)
SoIdealTrackKit_set_rExtent = HEPVis_SWIG_Python.SoIdealTrackKit_set_rExtent

def SoIdealTrackKit_set_zExtent(*args):
  return HEPVis_SWIG_Python.SoIdealTrackKit_set_zExtent(*args)
SoIdealTrackKit_set_zExtent = HEPVis_SWIG_Python.SoIdealTrackKit_set_zExtent

def SoIdealTrackKit_initClass():
  return HEPVis_SWIG_Python.SoIdealTrackKit_initClass()
SoIdealTrackKit_initClass = HEPVis_SWIG_Python.SoIdealTrackKit_initClass

class SoIdealBeamTrackKit(SoIdealTrackKit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getNodekitCatalog(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoIdealBeamTrackKit()
        try: self.this.append(this)
        except: self.this = this
    def initTrack(self, *args): return HEPVis_SWIG_Python.SoIdealBeamTrackKit_initTrack(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoIdealBeamTrackKit_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoIdealBeamTrackKit
    __del__ = lambda self : None;
SoIdealBeamTrackKit_swigregister = HEPVis_SWIG_Python.SoIdealBeamTrackKit_swigregister
SoIdealBeamTrackKit_swigregister(SoIdealBeamTrackKit)

def SoIdealBeamTrackKit_getClassTypeId():
  return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassTypeId()
SoIdealBeamTrackKit_getClassTypeId = HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassTypeId

def SoIdealBeamTrackKit_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassNodekitCatalog()
SoIdealBeamTrackKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoIdealBeamTrackKit_getClassNodekitCatalog

def SoIdealBeamTrackKit_initClass():
  return HEPVis_SWIG_Python.SoIdealBeamTrackKit_initClass()
SoIdealBeamTrackKit_initClass = HEPVis_SWIG_Python.SoIdealBeamTrackKit_initClass

class SoDblSiStripDetKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoDblSiStripDetKit_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoDblSiStripDetKit_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoDblSiStripDetKit_alternateRep_get, HEPVis_SWIG_Python.SoDblSiStripDetKit_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoDblSiStripDetKit()
        try: self.this.append(this)
        except: self.this = this
    def affectsState(self): return HEPVis_SWIG_Python.SoDblSiStripDetKit_affectsState(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDblSiStripDetKit_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoDblSiStripDetKit_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoDblSiStripDetKit_clearAlternateRep(self)
    def setAlignable(self, *args): return HEPVis_SWIG_Python.SoDblSiStripDetKit_setAlignable(self, *args)
    def getLocalTransform(self): return HEPVis_SWIG_Python.SoDblSiStripDetKit_getLocalTransform(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDblSiStripDetKit
    __del__ = lambda self : None;
SoDblSiStripDetKit_swigregister = HEPVis_SWIG_Python.SoDblSiStripDetKit_swigregister
SoDblSiStripDetKit_swigregister(SoDblSiStripDetKit)

def SoDblSiStripDetKit_getClassTypeId():
  return HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassTypeId()
SoDblSiStripDetKit_getClassTypeId = HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassTypeId

def SoDblSiStripDetKit_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassNodekitCatalog()
SoDblSiStripDetKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoDblSiStripDetKit_getClassNodekitCatalog

def SoDblSiStripDetKit_initClass():
  return HEPVis_SWIG_Python.SoDblSiStripDetKit_initClass()
SoDblSiStripDetKit_initClass = HEPVis_SWIG_Python.SoDblSiStripDetKit_initClass

class SoSiStripDetKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSiStripDetKit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoSiStripDetKit_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoSiStripDetKit_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoSiStripDetKit_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSiStripDetKit_alternateRep_get, HEPVis_SWIG_Python.SoSiStripDetKit_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoSiStripDetKit()
        try: self.this.append(this)
        except: self.this = this
    def affectsState(self): return HEPVis_SWIG_Python.SoSiStripDetKit_affectsState(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSiStripDetKit_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoSiStripDetKit_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoSiStripDetKit_clearAlternateRep(self)
    def setAlignable(self, *args): return HEPVis_SWIG_Python.SoSiStripDetKit_setAlignable(self, *args)
    def getLocalTransform(self): return HEPVis_SWIG_Python.SoSiStripDetKit_getLocalTransform(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiStripDetKit
    __del__ = lambda self : None;
SoSiStripDetKit_swigregister = HEPVis_SWIG_Python.SoSiStripDetKit_swigregister
SoSiStripDetKit_swigregister(SoSiStripDetKit)

def SoSiStripDetKit_getClassTypeId():
  return HEPVis_SWIG_Python.SoSiStripDetKit_getClassTypeId()
SoSiStripDetKit_getClassTypeId = HEPVis_SWIG_Python.SoSiStripDetKit_getClassTypeId

def SoSiStripDetKit_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoSiStripDetKit_getClassNodekitCatalog()
SoSiStripDetKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoSiStripDetKit_getClassNodekitCatalog

def SoSiStripDetKit_initClass():
  return HEPVis_SWIG_Python.SoSiStripDetKit_initClass()
SoSiStripDetKit_initClass = HEPVis_SWIG_Python.SoSiStripDetKit_initClass

class SoStereoSiStripDetKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getNodekitCatalog(self)
    stereoAngle = _swig_property(HEPVis_SWIG_Python.SoStereoSiStripDetKit_stereoAngle_get, HEPVis_SWIG_Python.SoStereoSiStripDetKit_stereoAngle_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoStereoSiStripDetKit_alternateRep_get, HEPVis_SWIG_Python.SoStereoSiStripDetKit_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoStereoSiStripDetKit()
        try: self.this.append(this)
        except: self.this = this
    def affectsState(self): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_affectsState(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoStereoSiStripDetKit_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_clearAlternateRep(self)
    def setAlignable(self, *args): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_setAlignable(self, *args)
    def getLocalTransform(self): return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getLocalTransform(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoStereoSiStripDetKit
    __del__ = lambda self : None;
SoStereoSiStripDetKit_swigregister = HEPVis_SWIG_Python.SoStereoSiStripDetKit_swigregister
SoStereoSiStripDetKit_swigregister(SoStereoSiStripDetKit)

def SoStereoSiStripDetKit_getClassTypeId():
  return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassTypeId()
SoStereoSiStripDetKit_getClassTypeId = HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassTypeId

def SoStereoSiStripDetKit_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassNodekitCatalog()
SoStereoSiStripDetKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoStereoSiStripDetKit_getClassNodekitCatalog

def SoStereoSiStripDetKit_initClass():
  return HEPVis_SWIG_Python.SoStereoSiStripDetKit_initClass()
SoStereoSiStripDetKit_initClass = HEPVis_SWIG_Python.SoStereoSiStripDetKit_initClass

class SoSiStripWedgeDetKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getNodekitCatalog(self)
    halfHeight = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfHeight_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfHeight_set)
    halfWidth1 = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth1_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth1_set)
    halfWidth2 = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth2_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_halfWidth2_set)
    thickness = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_thickness_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_thickness_set)
    myHalfHeight = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfHeight_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfHeight_set)
    myHalfWidth1 = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth1_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth1_set)
    myHalfWidth2 = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth2_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myHalfWidth2_set)
    myThickness = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myThickness_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_myThickness_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_alternateRep_get, HEPVis_SWIG_Python.SoSiStripWedgeDetKit_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoSiStripWedgeDetKit()
        try: self.this.append(this)
        except: self.this = this
    def affectsState(self): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_affectsState(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSiStripWedgeDetKit_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_clearAlternateRep(self)
    def setAlignable(self, *args): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_setAlignable(self, *args)
    def getLocalTransform(self): return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getLocalTransform(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSiStripWedgeDetKit
    __del__ = lambda self : None;
SoSiStripWedgeDetKit_swigregister = HEPVis_SWIG_Python.SoSiStripWedgeDetKit_swigregister
SoSiStripWedgeDetKit_swigregister(SoSiStripWedgeDetKit)

def SoSiStripWedgeDetKit_getClassTypeId():
  return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassTypeId()
SoSiStripWedgeDetKit_getClassTypeId = HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassTypeId

def SoSiStripWedgeDetKit_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassNodekitCatalog()
SoSiStripWedgeDetKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoSiStripWedgeDetKit_getClassNodekitCatalog

def SoSiStripWedgeDetKit_initClass():
  return HEPVis_SWIG_Python.SoSiStripWedgeDetKit_initClass()
SoSiStripWedgeDetKit_initClass = HEPVis_SWIG_Python.SoSiStripWedgeDetKit_initClass

class SoDblSiStripWedgeDetKit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getNodekitCatalog(self)
    halfHeight = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfHeight_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfHeight_set)
    halfWidth1 = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth1_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth1_set)
    halfWidth2 = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth2_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_halfWidth2_set)
    thickness = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_thickness_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_thickness_set)
    myHalfHeight = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfHeight_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfHeight_set)
    myHalfWidth1 = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth1_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth1_set)
    myHalfWidth2 = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth2_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myHalfWidth2_set)
    myThickness = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myThickness_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_myThickness_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_alternateRep_get, HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_alternateRep_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoDblSiStripWedgeDetKit()
        try: self.this.append(this)
        except: self.this = this
    def affectsState(self): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_affectsState(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_initClass)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_clearAlternateRep(self)
    def setAlignable(self, *args): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_setAlignable(self, *args)
    def getLocalTransform(self): return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getLocalTransform(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDblSiStripWedgeDetKit
    __del__ = lambda self : None;
SoDblSiStripWedgeDetKit_swigregister = HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_swigregister
SoDblSiStripWedgeDetKit_swigregister(SoDblSiStripWedgeDetKit)

def SoDblSiStripWedgeDetKit_getClassTypeId():
  return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassTypeId()
SoDblSiStripWedgeDetKit_getClassTypeId = HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassTypeId

def SoDblSiStripWedgeDetKit_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassNodekitCatalog()
SoDblSiStripWedgeDetKit_getClassNodekitCatalog = HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_getClassNodekitCatalog

def SoDblSiStripWedgeDetKit_initClass():
  return HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_initClass()
SoDblSiStripWedgeDetKit_initClass = HEPVis_SWIG_Python.SoDblSiStripWedgeDetKit_initClass

class SoDetectorExample(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoDetectorExample_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoDetectorExample_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoDetectorExample_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoDetectorExample_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoDetectorExample_alternateRep_get, HEPVis_SWIG_Python.SoDetectorExample_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoDetectorExample_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoDetectorExample()
        try: self.this.append(this)
        except: self.this = this
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoDetectorExample_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoDetectorExample_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoDetectorExample
    __del__ = lambda self : None;
SoDetectorExample_swigregister = HEPVis_SWIG_Python.SoDetectorExample_swigregister
SoDetectorExample_swigregister(SoDetectorExample)

def SoDetectorExample_getClassTypeId():
  return HEPVis_SWIG_Python.SoDetectorExample_getClassTypeId()
SoDetectorExample_getClassTypeId = HEPVis_SWIG_Python.SoDetectorExample_getClassTypeId

def SoDetectorExample_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoDetectorExample_getClassNodekitCatalog()
SoDetectorExample_getClassNodekitCatalog = HEPVis_SWIG_Python.SoDetectorExample_getClassNodekitCatalog

def SoDetectorExample_initClass():
  return HEPVis_SWIG_Python.SoDetectorExample_initClass()
SoDetectorExample_initClass = HEPVis_SWIG_Python.SoDetectorExample_initClass

class SbRepBin1D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbRepBin1D(*args)
        try: self.this.append(this)
        except: self.this = this
    fXmin = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fXmin_get, HEPVis_SWIG_Python.SbRepBin1D_fXmin_set)
    fXmax = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fXmax_get, HEPVis_SWIG_Python.SbRepBin1D_fXmax_set)
    fVmin = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fVmin_get, HEPVis_SWIG_Python.SbRepBin1D_fVmin_set)
    fVal = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fVal_get, HEPVis_SWIG_Python.SbRepBin1D_fVal_set)
    fRatio = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fRatio_get, HEPVis_SWIG_Python.SbRepBin1D_fRatio_set)
    fSeparator = _swig_property(HEPVis_SWIG_Python.SbRepBin1D_fSeparator_get, HEPVis_SWIG_Python.SbRepBin1D_fSeparator_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepBin1D
    __del__ = lambda self : None;
SbRepBin1D_swigregister = HEPVis_SWIG_Python.SbRepBin1D_swigregister
SbRepBin1D_swigregister(SbRepBin1D)

class SbRepBin2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbRepBin2D(*args)
        try: self.this.append(this)
        except: self.this = this
    fXmin = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fXmin_get, HEPVis_SWIG_Python.SbRepBin2D_fXmin_set)
    fXmax = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fXmax_get, HEPVis_SWIG_Python.SbRepBin2D_fXmax_set)
    fYmin = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fYmin_get, HEPVis_SWIG_Python.SbRepBin2D_fYmin_set)
    fYmax = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fYmax_get, HEPVis_SWIG_Python.SbRepBin2D_fYmax_set)
    fVal = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fVal_get, HEPVis_SWIG_Python.SbRepBin2D_fVal_set)
    fRatio = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fRatio_get, HEPVis_SWIG_Python.SbRepBin2D_fRatio_set)
    fI = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fI_get, HEPVis_SWIG_Python.SbRepBin2D_fI_set)
    fJ = _swig_property(HEPVis_SWIG_Python.SbRepBin2D_fJ_get, HEPVis_SWIG_Python.SbRepBin2D_fJ_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepBin2D
    __del__ = lambda self : None;
SbRepBin2D_swigregister = HEPVis_SWIG_Python.SbRepBin2D_swigregister
SbRepBin2D_swigregister(SbRepBin2D)

class SbRepTopFace2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbRepTopFace2D(*args)
        try: self.this.append(this)
        except: self.this = this
    fXmin = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fXmin_get, HEPVis_SWIG_Python.SbRepTopFace2D_fXmin_set)
    fXmax = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fXmax_get, HEPVis_SWIG_Python.SbRepTopFace2D_fXmax_set)
    fYmin = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fYmin_get, HEPVis_SWIG_Python.SbRepTopFace2D_fYmin_set)
    fYmax = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fYmax_get, HEPVis_SWIG_Python.SbRepTopFace2D_fYmax_set)
    fVal1 = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal1_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal1_set)
    fVal2 = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal2_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal2_set)
    fVal3 = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal3_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal3_set)
    fVal4 = _swig_property(HEPVis_SWIG_Python.SbRepTopFace2D_fVal4_get, HEPVis_SWIG_Python.SbRepTopFace2D_fVal4_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepTopFace2D
    __del__ = lambda self : None;
SbRepTopFace2D_swigregister = HEPVis_SWIG_Python.SbRepTopFace2D_swigregister
SbRepTopFace2D_swigregister(SbRepTopFace2D)

class SbRepBox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbRepBox(*args)
        try: self.this.append(this)
        except: self.this = this
    fPos = _swig_property(HEPVis_SWIG_Python.SbRepBox_fPos_get, HEPVis_SWIG_Python.SbRepBox_fPos_set)
    fWidth = _swig_property(HEPVis_SWIG_Python.SbRepBox_fWidth_get, HEPVis_SWIG_Python.SbRepBox_fWidth_set)
    fLog = _swig_property(HEPVis_SWIG_Python.SbRepBox_fLog_get, HEPVis_SWIG_Python.SbRepBox_fLog_set)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbRepBox
    __del__ = lambda self : None;
SbRepBox_swigregister = HEPVis_SWIG_Python.SbRepBox_swigregister
SbRepBox_swigregister(SbRepBox)

class SoPlotter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPlotter_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPlotter_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoPlotter_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoPlotter_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPlotter_alternateRep_get, HEPVis_SWIG_Python.SoPlotter_alternateRep_set)
    verbose = _swig_property(HEPVis_SWIG_Python.SoPlotter_verbose_get, HEPVis_SWIG_Python.SoPlotter_verbose_set)
    width = _swig_property(HEPVis_SWIG_Python.SoPlotter_width_get, HEPVis_SWIG_Python.SoPlotter_width_set)
    height = _swig_property(HEPVis_SWIG_Python.SoPlotter_height_get, HEPVis_SWIG_Python.SoPlotter_height_set)
    leftMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_leftMargin_get, HEPVis_SWIG_Python.SoPlotter_leftMargin_set)
    rightMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_rightMargin_get, HEPVis_SWIG_Python.SoPlotter_rightMargin_set)
    bottomMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_bottomMargin_get, HEPVis_SWIG_Python.SoPlotter_bottomMargin_set)
    topMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_topMargin_get, HEPVis_SWIG_Python.SoPlotter_topMargin_set)
    depth = _swig_property(HEPVis_SWIG_Python.SoPlotter_depth_get, HEPVis_SWIG_Python.SoPlotter_depth_set)
    downMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_downMargin_get, HEPVis_SWIG_Python.SoPlotter_downMargin_set)
    upMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_upMargin_get, HEPVis_SWIG_Python.SoPlotter_upMargin_set)
    titleUp = _swig_property(HEPVis_SWIG_Python.SoPlotter_titleUp_get, HEPVis_SWIG_Python.SoPlotter_titleUp_set)
    titleToAxis = _swig_property(HEPVis_SWIG_Python.SoPlotter_titleToAxis_get, HEPVis_SWIG_Python.SoPlotter_titleToAxis_set)
    titleHeight = _swig_property(HEPVis_SWIG_Python.SoPlotter_titleHeight_get, HEPVis_SWIG_Python.SoPlotter_titleHeight_set)
    titleAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotter_titleAutomated_get, HEPVis_SWIG_Python.SoPlotter_titleAutomated_set)
    title = _swig_property(HEPVis_SWIG_Python.SoPlotter_title_get, HEPVis_SWIG_Python.SoPlotter_title_set)
    superposeBins = _swig_property(HEPVis_SWIG_Python.SoPlotter_superposeBins_get, HEPVis_SWIG_Python.SoPlotter_superposeBins_set)
    colorMappingVisible = _swig_property(HEPVis_SWIG_Python.SoPlotter_colorMappingVisible_get, HEPVis_SWIG_Python.SoPlotter_colorMappingVisible_set)
    CELLS = HEPVis_SWIG_Python.SoPlotter_CELLS
    MIN_MAX = HEPVis_SWIG_Python.SoPlotter_MIN_MAX
    colorMappingAxisLabeling = _swig_property(HEPVis_SWIG_Python.SoPlotter_colorMappingAxisLabeling_get, HEPVis_SWIG_Python.SoPlotter_colorMappingAxisLabeling_set)
    colorMappingAttached = _swig_property(HEPVis_SWIG_Python.SoPlotter_colorMappingAttached_get, HEPVis_SWIG_Python.SoPlotter_colorMappingAttached_set)
    wallEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_wallEnforced_get, HEPVis_SWIG_Python.SoPlotter_wallEnforced_set)
    gridEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_gridEnforced_get, HEPVis_SWIG_Python.SoPlotter_gridEnforced_set)
    primitivesEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_primitivesEnforced_get, HEPVis_SWIG_Python.SoPlotter_primitivesEnforced_set)
    innerFrameEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_innerFrameEnforced_get, HEPVis_SWIG_Python.SoPlotter_innerFrameEnforced_set)
    xAxisEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_xAxisEnforced_get, HEPVis_SWIG_Python.SoPlotter_xAxisEnforced_set)
    xAxisAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotter_xAxisAutomated_get, HEPVis_SWIG_Python.SoPlotter_xAxisAutomated_set)
    xAxisMinimum = _swig_property(HEPVis_SWIG_Python.SoPlotter_xAxisMinimum_get, HEPVis_SWIG_Python.SoPlotter_xAxisMinimum_set)
    xAxisMaximum = _swig_property(HEPVis_SWIG_Python.SoPlotter_xAxisMaximum_get, HEPVis_SWIG_Python.SoPlotter_xAxisMaximum_set)
    xAxisLogScale = _swig_property(HEPVis_SWIG_Python.SoPlotter_xAxisLogScale_get, HEPVis_SWIG_Python.SoPlotter_xAxisLogScale_set)
    yAxisEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_yAxisEnforced_get, HEPVis_SWIG_Python.SoPlotter_yAxisEnforced_set)
    yAxisAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotter_yAxisAutomated_get, HEPVis_SWIG_Python.SoPlotter_yAxisAutomated_set)
    yAxisMinimum = _swig_property(HEPVis_SWIG_Python.SoPlotter_yAxisMinimum_get, HEPVis_SWIG_Python.SoPlotter_yAxisMinimum_set)
    yAxisMaximum = _swig_property(HEPVis_SWIG_Python.SoPlotter_yAxisMaximum_get, HEPVis_SWIG_Python.SoPlotter_yAxisMaximum_set)
    yAxisLogScale = _swig_property(HEPVis_SWIG_Python.SoPlotter_yAxisLogScale_get, HEPVis_SWIG_Python.SoPlotter_yAxisLogScale_set)
    zAxisEnforced = _swig_property(HEPVis_SWIG_Python.SoPlotter_zAxisEnforced_get, HEPVis_SWIG_Python.SoPlotter_zAxisEnforced_set)
    zAxisAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotter_zAxisAutomated_get, HEPVis_SWIG_Python.SoPlotter_zAxisAutomated_set)
    zAxisMinimum = _swig_property(HEPVis_SWIG_Python.SoPlotter_zAxisMinimum_get, HEPVis_SWIG_Python.SoPlotter_zAxisMinimum_set)
    zAxisMaximum = _swig_property(HEPVis_SWIG_Python.SoPlotter_zAxisMaximum_get, HEPVis_SWIG_Python.SoPlotter_zAxisMaximum_set)
    zAxisLogScale = _swig_property(HEPVis_SWIG_Python.SoPlotter_zAxisLogScale_get, HEPVis_SWIG_Python.SoPlotter_zAxisLogScale_set)
    valueTopMargin = _swig_property(HEPVis_SWIG_Python.SoPlotter_valueTopMargin_get, HEPVis_SWIG_Python.SoPlotter_valueTopMargin_set)
    topAxisVisible = _swig_property(HEPVis_SWIG_Python.SoPlotter_topAxisVisible_get, HEPVis_SWIG_Python.SoPlotter_topAxisVisible_set)
    rightAxisVisible = _swig_property(HEPVis_SWIG_Python.SoPlotter_rightAxisVisible_get, HEPVis_SWIG_Python.SoPlotter_rightAxisVisible_set)
    numberOfLevels = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfLevels_get, HEPVis_SWIG_Python.SoPlotter_numberOfLevels_set)
    levels = _swig_property(HEPVis_SWIG_Python.SoPlotter_levels_get, HEPVis_SWIG_Python.SoPlotter_levels_set)
    shapeAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotter_shapeAutomated_get, HEPVis_SWIG_Python.SoPlotter_shapeAutomated_set)
    frozen = _swig_property(HEPVis_SWIG_Python.SoPlotter_frozen_get, HEPVis_SWIG_Python.SoPlotter_frozen_set)
    ttfScale = _swig_property(HEPVis_SWIG_Python.SoPlotter_ttfScale_get, HEPVis_SWIG_Python.SoPlotter_ttfScale_set)
    theta = _swig_property(HEPVis_SWIG_Python.SoPlotter_theta_get, HEPVis_SWIG_Python.SoPlotter_theta_set)
    phi = _swig_property(HEPVis_SWIG_Python.SoPlotter_phi_get, HEPVis_SWIG_Python.SoPlotter_phi_set)
    XY = HEPVis_SWIG_Python.SoPlotter_XY
    XYZ = HEPVis_SWIG_Python.SoPlotter_XYZ
    shape = _swig_property(HEPVis_SWIG_Python.SoPlotter_shape_get, HEPVis_SWIG_Python.SoPlotter_shape_set)
    infos = _swig_property(HEPVis_SWIG_Python.SoPlotter_infos_get, HEPVis_SWIG_Python.SoPlotter_infos_set)
    legend = _swig_property(HEPVis_SWIG_Python.SoPlotter_legend_get, HEPVis_SWIG_Python.SoPlotter_legend_set)
    numberOfPlottedObject = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedObject_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedObject_set)
    numberOfPlottedBins1D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins1D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins1D_set)
    numberOfPlottedBins2D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins2D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedBins2D_set)
    numberOfPlottedPoints2D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints2D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints2D_set)
    numberOfPlottedPoints3D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints3D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedPoints3D_set)
    numberOfPlottedFunction1D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction1D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction1D_set)
    numberOfPlottedFunction2D = _swig_property(HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction2D_get, HEPVis_SWIG_Python.SoPlotter_numberOfPlottedFunction2D_set)
    plottedObjectNames = _swig_property(HEPVis_SWIG_Python.SoPlotter_plottedObjectNames_get, HEPVis_SWIG_Python.SoPlotter_plottedObjectNames_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPlotter()
        try: self.this.append(this)
        except: self.this = this
    def setPlottableObject(self, *args): return HEPVis_SWIG_Python.SoPlotter_setPlottableObject(self, *args)
    def addPlottableObject(self, *args): return HEPVis_SWIG_Python.SoPlotter_addPlottableObject(self, *args)
    def removePlottableObject(self, *args): return HEPVis_SWIG_Python.SoPlotter_removePlottableObject(self, *args)
    def removePlottableObjectsOfClass(self, *args): return HEPVis_SWIG_Python.SoPlotter_removePlottableObjectsOfClass(self, *args)
    def isEmpty(self): return HEPVis_SWIG_Python.SoPlotter_isEmpty(self)
    NONE = HEPVis_SWIG_Python.SoPlotter_NONE
    ALL = HEPVis_SWIG_Python.SoPlotter_ALL
    RESET = HEPVis_SWIG_Python.SoPlotter_RESET
    SHAPE = HEPVis_SWIG_Python.SoPlotter_SHAPE
    BINS = HEPVis_SWIG_Python.SoPlotter_BINS
    POINTS = HEPVis_SWIG_Python.SoPlotter_POINTS
    FUNCTION = HEPVis_SWIG_Python.SoPlotter_FUNCTION
    WALL = HEPVis_SWIG_Python.SoPlotter_WALL
    GRID = HEPVis_SWIG_Python.SoPlotter_GRID
    PRIMITIVES = HEPVis_SWIG_Python.SoPlotter_PRIMITIVES
    INNER_FRAME = HEPVis_SWIG_Python.SoPlotter_INNER_FRAME
    TITLE = HEPVis_SWIG_Python.SoPlotter_TITLE
    X_AXIS = HEPVis_SWIG_Python.SoPlotter_X_AXIS
    Y_AXIS = HEPVis_SWIG_Python.SoPlotter_Y_AXIS
    Z_AXIS = HEPVis_SWIG_Python.SoPlotter_Z_AXIS
    COLOR_MAPPING = HEPVis_SWIG_Python.SoPlotter_COLOR_MAPPING
    LAYOUT = HEPVis_SWIG_Python.SoPlotter_LAYOUT
    TTF_SCALE = HEPVis_SWIG_Python.SoPlotter_TTF_SCALE
    def raiseUpdateFlag(self, *args): return HEPVis_SWIG_Python.SoPlotter_raiseUpdateFlag(self, *args)
    def raiseAllUpdateFlags(self): return HEPVis_SWIG_Python.SoPlotter_raiseAllUpdateFlags(self)
    def resetAllUpdateFlags(self): return HEPVis_SWIG_Python.SoPlotter_resetAllUpdateFlags(self)
    def isUpdateFlagRaised(self, *args): return HEPVis_SWIG_Python.SoPlotter_isUpdateFlagRaised(self, *args)
    def someFlagRaised(self): return HEPVis_SWIG_Python.SoPlotter_someFlagRaised(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoPlotter_updateChildren(self)
    def getShape(self): return HEPVis_SWIG_Python.SoPlotter_getShape(self)
    def getPlottableObjects(self): return HEPVis_SWIG_Python.SoPlotter_getPlottableObjects(self)
    def getLayout(self): return HEPVis_SWIG_Python.SoPlotter_getLayout(self)
    def getDataScale(self): return HEPVis_SWIG_Python.SoPlotter_getDataScale(self)
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoPlotter_getTopSeparator(self)
    def getEtcSeparator(self): return HEPVis_SWIG_Python.SoPlotter_getEtcSeparator(self)
    def getEtcDataSeparator(self): return HEPVis_SWIG_Python.SoPlotter_getEtcDataSeparator(self)
    def getXAxis(self): return HEPVis_SWIG_Python.SoPlotter_getXAxis(self)
    def getYAxis(self): return HEPVis_SWIG_Python.SoPlotter_getYAxis(self)
    def getZAxis(self): return HEPVis_SWIG_Python.SoPlotter_getZAxis(self)
    def getLegendStyleList(self): return HEPVis_SWIG_Python.SoPlotter_getLegendStyleList(self)
    def getWallStyle(self): return HEPVis_SWIG_Python.SoPlotter_getWallStyle(self)
    def getGridStyle(self): return HEPVis_SWIG_Python.SoPlotter_getGridStyle(self)
    def getInnerFrameStyle(self): return HEPVis_SWIG_Python.SoPlotter_getInnerFrameStyle(self)
    def getInfosStyle(self): return HEPVis_SWIG_Python.SoPlotter_getInfosStyle(self)
    def getTitleStyle(self): return HEPVis_SWIG_Python.SoPlotter_getTitleStyle(self)
    def getBinsStyle(self, *args): return HEPVis_SWIG_Python.SoPlotter_getBinsStyle(self, *args)
    def getPointsStyle(self, *args): return HEPVis_SWIG_Python.SoPlotter_getPointsStyle(self, *args)
    def getFunctionStyle(self, *args): return HEPVis_SWIG_Python.SoPlotter_getFunctionStyle(self, *args)
    def getRightHatchStyle(self, *args): return HEPVis_SWIG_Python.SoPlotter_getRightHatchStyle(self, *args)
    def getLeftHatchStyle(self, *args): return HEPVis_SWIG_Python.SoPlotter_getLeftHatchStyle(self, *args)
    def getErrorsStyle(self, *args): return HEPVis_SWIG_Python.SoPlotter_getErrorsStyle(self, *args)
    def getStyleCache(self): return HEPVis_SWIG_Python.SoPlotter_getStyleCache(self)
    def resetStyles(self): return HEPVis_SWIG_Python.SoPlotter_resetStyles(self)
    def setAxesModeling(self, *args): return HEPVis_SWIG_Python.SoPlotter_setAxesModeling(self, *args)
    def setAxesColor(self, *args): return HEPVis_SWIG_Python.SoPlotter_setAxesColor(self, *args)
    def setAxesTextScale(self, *args): return HEPVis_SWIG_Python.SoPlotter_setAxesTextScale(self, *args)
    def setAxesLinePattern(self, *args): return HEPVis_SWIG_Python.SoPlotter_setAxesLinePattern(self, *args)
    def setAxesLineWidth(self, *args): return HEPVis_SWIG_Python.SoPlotter_setAxesLineWidth(self, *args)
    def setAxesTickLength(self, *args): return HEPVis_SWIG_Python.SoPlotter_setAxesTickLength(self, *args)
    def setAxesLabelHeight(self, *args): return HEPVis_SWIG_Python.SoPlotter_setAxesLabelHeight(self, *args)
    def setAxesTitleHeight(self, *args): return HEPVis_SWIG_Python.SoPlotter_setAxesTitleHeight(self, *args)
    def setFont(self, *args): return HEPVis_SWIG_Python.SoPlotter_setFont(self, *args)
    def setPAW_AxesTextSize(self, *args): return HEPVis_SWIG_Python.SoPlotter_setPAW_AxesTextSize(self, *args)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoPlotter_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoPlotter_clearAlternateRep(self)
    def dataFrame2vp(self, *args): return HEPVis_SWIG_Python.SoPlotter_dataFrame2vp(self, *args)
    def vp2dataFrame(self, *args): return HEPVis_SWIG_Python.SoPlotter_vp2dataFrame(self, *args)
    def dataFrame2axis(self, *args): return HEPVis_SWIG_Python.SoPlotter_dataFrame2axis(self, *args)
    def axis2dataFrame(self, *args): return HEPVis_SWIG_Python.SoPlotter_axis2dataFrame(self, *args)
    def axis2vp(self, *args): return HEPVis_SWIG_Python.SoPlotter_axis2vp(self, *args)
    def vp2axis(self, *args): return HEPVis_SWIG_Python.SoPlotter_vp2axis(self, *args)
    def addPlottablePrimitive(self, *args): return HEPVis_SWIG_Python.SoPlotter_addPlottablePrimitive(self, *args)
    def clearPlottablePrimitives(self): return HEPVis_SWIG_Python.SoPlotter_clearPlottablePrimitives(self)
    def clear(self): return HEPVis_SWIG_Python.SoPlotter_clear(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPlotter_initClass)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoPlotter_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoPlotter_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoPlotter_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoPlotter_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoPlotter_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoPlotter_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoPlotter_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoPlotter_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoPlotter_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoPlotter_pick(self, *args)
    project2D = staticmethod(HEPVis_SWIG_Python.SoPlotter_project2D)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPlotter
    __del__ = lambda self : None;
SoPlotter_swigregister = HEPVis_SWIG_Python.SoPlotter_swigregister
SoPlotter_swigregister(SoPlotter)

def SoPlotter_getClassTypeId():
  return HEPVis_SWIG_Python.SoPlotter_getClassTypeId()
SoPlotter_getClassTypeId = HEPVis_SWIG_Python.SoPlotter_getClassTypeId

def SoPlotter_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoPlotter_getClassNodekitCatalog()
SoPlotter_getClassNodekitCatalog = HEPVis_SWIG_Python.SoPlotter_getClassNodekitCatalog

def SoPlotter_initClass():
  return HEPVis_SWIG_Python.SoPlotter_initClass()
SoPlotter_initClass = HEPVis_SWIG_Python.SoPlotter_initClass

def SoPlotter_project2D(*args):
  return HEPVis_SWIG_Python.SoPlotter_project2D(*args)
SoPlotter_project2D = HEPVis_SWIG_Python.SoPlotter_project2D

class SoLegendRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoLegendRegion_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoLegendRegion_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoLegendRegion_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoLegendRegion_getNodekitCatalog(self)
    text = _swig_property(HEPVis_SWIG_Python.SoLegendRegion_text_get, HEPVis_SWIG_Python.SoLegendRegion_text_set)
    markerOnLeftBorder = _swig_property(HEPVis_SWIG_Python.SoLegendRegion_markerOnLeftBorder_get, HEPVis_SWIG_Python.SoLegendRegion_markerOnLeftBorder_set)
    textInBlack = _swig_property(HEPVis_SWIG_Python.SoLegendRegion_textInBlack_get, HEPVis_SWIG_Python.SoLegendRegion_textInBlack_set)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoLegendRegion_alternateRep_get, HEPVis_SWIG_Python.SoLegendRegion_alternateRep_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoLegendRegion_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoLegendRegion()
        try: self.this.append(this)
        except: self.this = this
    def getStyle(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_getStyle(self, *args)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoLegendRegion_clearAlternateRep(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoLegendRegion_updateChildren(self)
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoLegendRegion_getTopSeparator(self)
    def getCamera(self): return HEPVis_SWIG_Python.SoLegendRegion_getCamera(self)
    def resetCamera(self): return HEPVis_SWIG_Python.SoLegendRegion_resetCamera(self)
    def clear(self, arg2=""): return HEPVis_SWIG_Python.SoLegendRegion_clear(self, arg2)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoLegendRegion_pick(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoLegendRegion
    __del__ = lambda self : None;
SoLegendRegion_swigregister = HEPVis_SWIG_Python.SoLegendRegion_swigregister
SoLegendRegion_swigregister(SoLegendRegion)

def SoLegendRegion_getClassTypeId():
  return HEPVis_SWIG_Python.SoLegendRegion_getClassTypeId()
SoLegendRegion_getClassTypeId = HEPVis_SWIG_Python.SoLegendRegion_getClassTypeId

def SoLegendRegion_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoLegendRegion_getClassNodekitCatalog()
SoLegendRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoLegendRegion_getClassNodekitCatalog

def SoLegendRegion_initClass():
  return HEPVis_SWIG_Python.SoLegendRegion_initClass()
SoLegendRegion_initClass = HEPVis_SWIG_Python.SoLegendRegion_initClass

class SoInfosRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoInfosRegion_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoInfosRegion_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoInfosRegion_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoInfosRegion_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoInfosRegion_alternateRep_get, HEPVis_SWIG_Python.SoInfosRegion_alternateRep_set)
    title = _swig_property(HEPVis_SWIG_Python.SoInfosRegion_title_get, HEPVis_SWIG_Python.SoInfosRegion_title_set)
    text = _swig_property(HEPVis_SWIG_Python.SoInfosRegion_text_get, HEPVis_SWIG_Python.SoInfosRegion_text_set)
    inBetweenSpaces = _swig_property(HEPVis_SWIG_Python.SoInfosRegion_inBetweenSpaces_get, HEPVis_SWIG_Python.SoInfosRegion_inBetweenSpaces_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoInfosRegion_initClass)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoInfosRegion()
        try: self.this.append(this)
        except: self.this = this
    def getLineStyle(self): return HEPVis_SWIG_Python.SoInfosRegion_getLineStyle(self)
    def getTextStyle(self): return HEPVis_SWIG_Python.SoInfosRegion_getTextStyle(self)
    def getContentSize(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_getContentSize(self, *args)
    def matchViewport(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_matchViewport(self, *args)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoInfosRegion_clearAlternateRep(self)
    def updateChildren(self): return HEPVis_SWIG_Python.SoInfosRegion_updateChildren(self)
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoInfosRegion_getTopSeparator(self)
    def getCamera(self): return HEPVis_SWIG_Python.SoInfosRegion_getCamera(self)
    def resetCamera(self): return HEPVis_SWIG_Python.SoInfosRegion_resetCamera(self)
    def clear(self, arg2=""): return HEPVis_SWIG_Python.SoInfosRegion_clear(self, arg2)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoInfosRegion_pick(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoInfosRegion
    __del__ = lambda self : None;
SoInfosRegion_swigregister = HEPVis_SWIG_Python.SoInfosRegion_swigregister
SoInfosRegion_swigregister(SoInfosRegion)

def SoInfosRegion_getClassTypeId():
  return HEPVis_SWIG_Python.SoInfosRegion_getClassTypeId()
SoInfosRegion_getClassTypeId = HEPVis_SWIG_Python.SoInfosRegion_getClassTypeId

def SoInfosRegion_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoInfosRegion_getClassNodekitCatalog()
SoInfosRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoInfosRegion_getClassNodekitCatalog

def SoInfosRegion_initClass():
  return HEPVis_SWIG_Python.SoInfosRegion_initClass()
SoInfosRegion_initClass = HEPVis_SWIG_Python.SoInfosRegion_initClass

class SbPlotterDoIt(SbDoIt):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def cast(self, *args): return HEPVis_SWIG_Python.SbPlotterDoIt_cast(self, *args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_SbPlotterDoIt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbPlotterDoIt
    __del__ = lambda self : None;
    def getPlottableObject(self): return HEPVis_SWIG_Python.SbPlotterDoIt_getPlottableObject(self)
    def getPlotter(self): return HEPVis_SWIG_Python.SbPlotterDoIt_getPlotter(self)
    def reset(self): return HEPVis_SWIG_Python.SbPlotterDoIt_reset(self)
SbPlotterDoIt_swigregister = HEPVis_SWIG_Python.SbPlotterDoIt_swigregister
SbPlotterDoIt_swigregister(SbPlotterDoIt)

class SoPlotterRegion(SoRegion):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPlotterRegion_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPlotterRegion_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoPlotterRegion_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoPlotterRegion_getNodekitCatalog(self)
    alternateRep = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_alternateRep_get, HEPVis_SWIG_Python.SoPlotterRegion_alternateRep_set)
    titleRegionVisible = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_titleRegionVisible_get, HEPVis_SWIG_Python.SoPlotterRegion_titleRegionVisible_set)
    infosRegionVisible = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionVisible_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionVisible_set)
    legendRegionVisible = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionVisible_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionVisible_set)
    titleRegionOrigin = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_titleRegionOrigin_get, HEPVis_SWIG_Python.SoPlotterRegion_titleRegionOrigin_set)
    titleRegionSize = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_titleRegionSize_get, HEPVis_SWIG_Python.SoPlotterRegion_titleRegionSize_set)
    infosRegionAttachedToDataFrame = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionAttachedToDataFrame_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionAttachedToDataFrame_set)
    legendRegionAttachedToInfosRegion = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionAttachedToInfosRegion_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionAttachedToInfosRegion_set)
    infosRegionOrigin = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionOrigin_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionOrigin_set)
    infosRegionSize = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionSize_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionSize_set)
    legendRegionOrigin = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOrigin_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOrigin_set)
    PERCENT = HEPVis_SWIG_Python.SoPlotterRegion_PERCENT
    AXIS = HEPVis_SWIG_Python.SoPlotterRegion_AXIS
    legendRegionOriginUnit = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOriginUnit_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionOriginUnit_set)
    legendRegionSize = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendRegionSize_get, HEPVis_SWIG_Python.SoPlotterRegion_legendRegionSize_set)
    infosRegionStyle = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionStyle_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionStyle_set)
    ADJUST_VIEWPORT = HEPVis_SWIG_Python.SoPlotterRegion_ADJUST_VIEWPORT
    LEAVE_ALONE = HEPVis_SWIG_Python.SoPlotterRegion_LEAVE_ALONE
    plotterViewportMapping = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_plotterViewportMapping_get, HEPVis_SWIG_Python.SoPlotterRegion_plotterViewportMapping_set)
    RESIZE_HEIGHT = HEPVis_SWIG_Python.SoPlotterRegion_RESIZE_HEIGHT
    ASPECT_RATIO = HEPVis_SWIG_Python.SoPlotterRegion_ASPECT_RATIO
    infosRegionResizePolicy = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_infosRegionResizePolicy_get, HEPVis_SWIG_Python.SoPlotterRegion_infosRegionResizePolicy_set)
    legendAutomated = _swig_property(HEPVis_SWIG_Python.SoPlotterRegion_legendAutomated_get, HEPVis_SWIG_Python.SoPlotterRegion_legendAutomated_set)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPlotterRegion_initClass)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_GLRender(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_getBoundingBox(self, *args)
    def getMatrix(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_getMatrix(self, *args)
    def handleEvent(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_handleEvent(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_rayPick(self, *args)
    def search(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_search(self, *args)
    def write(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_write(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_pick(self, *args)
    def updateChildren(self): return HEPVis_SWIG_Python.SoPlotterRegion_updateChildren(self)
    def getTopSeparator(self): return HEPVis_SWIG_Python.SoPlotterRegion_getTopSeparator(self)
    def getCamera(self): return HEPVis_SWIG_Python.SoPlotterRegion_getCamera(self)
    def clear(self, arg2=""): return HEPVis_SWIG_Python.SoPlotterRegion_clear(self, arg2)
    def resetCamera(self): return HEPVis_SWIG_Python.SoPlotterRegion_resetCamera(self)
    def setCamera(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_setCamera(self, *args)
    def refresh(self): return HEPVis_SWIG_Python.SoPlotterRegion_refresh(self)
    def doIt(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_doIt(self, *args)
    def undo(self): return HEPVis_SWIG_Python.SoPlotterRegion_undo(self)
    def resetUndo(self): return HEPVis_SWIG_Python.SoPlotterRegion_resetUndo(self)
    def getNodeOfInterest(self, arg2=""): return HEPVis_SWIG_Python.SoPlotterRegion_getNodeOfInterest(self, arg2)
    def placeInPage(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_placeInPage(self, *args)
    def setStyle(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_setStyle(self, *args)
    def setStyleLab_Default(self): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleLab_Default(self)
    def setStyleHippo_Default(self): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleHippo_Default(self)
    def setStylePAW_Default(self): return HEPVis_SWIG_Python.SoPlotterRegion_setStylePAW_Default(self)
    def setStyleROOT_Default(self): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Default(self)
    def setStyleROOT_Plain(self): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Plain(self)
    def setStyleROOT_Bold(self): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Bold(self)
    def setStyleROOT_Video(self): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Video(self)
    def setStyleROOT_Pub(self): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_Pub(self)
    def setStyleROOT_LHCb(self): return HEPVis_SWIG_Python.SoPlotterRegion_setStyleROOT_LHCb(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPlotterRegion()
        try: self.this.append(this)
        except: self.this = this
    def getPlotter(self): return HEPVis_SWIG_Python.SoPlotterRegion_getPlotter(self)
    def getTitleRegion(self): return HEPVis_SWIG_Python.SoPlotterRegion_getTitleRegion(self)
    def getInfosRegion(self): return HEPVis_SWIG_Python.SoPlotterRegion_getInfosRegion(self)
    def getLegendRegion(self): return HEPVis_SWIG_Python.SoPlotterRegion_getLegendRegion(self)
    def getEtcSeparator(self): return HEPVis_SWIG_Python.SoPlotterRegion_getEtcSeparator(self)
    def getNumberOfLegendRegions(self): return HEPVis_SWIG_Python.SoPlotterRegion_getNumberOfLegendRegions(self)
    def getNumberOfOverlays(self): return HEPVis_SWIG_Python.SoPlotterRegion_getNumberOfOverlays(self)
    def getOverlay(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_getOverlay(self, *args)
    def generateAlternateRep(self, *args): return HEPVis_SWIG_Python.SoPlotterRegion_generateAlternateRep(self, *args)
    def clearAlternateRep(self): return HEPVis_SWIG_Python.SoPlotterRegion_clearAlternateRep(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPlotterRegion
    __del__ = lambda self : None;
SoPlotterRegion_swigregister = HEPVis_SWIG_Python.SoPlotterRegion_swigregister
SoPlotterRegion_swigregister(SoPlotterRegion)

def SoPlotterRegion_getClassTypeId():
  return HEPVis_SWIG_Python.SoPlotterRegion_getClassTypeId()
SoPlotterRegion_getClassTypeId = HEPVis_SWIG_Python.SoPlotterRegion_getClassTypeId

def SoPlotterRegion_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoPlotterRegion_getClassNodekitCatalog()
SoPlotterRegion_getClassNodekitCatalog = HEPVis_SWIG_Python.SoPlotterRegion_getClassNodekitCatalog

def SoPlotterRegion_initClass():
  return HEPVis_SWIG_Python.SoPlotterRegion_initClass()
SoPlotterRegion_initClass = HEPVis_SWIG_Python.SoPlotterRegion_initClass

class SoBackPrimitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoBackPrimitive_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoBackPrimitive_getTypeId(self)
    dx1 = _swig_property(HEPVis_SWIG_Python.SoBackPrimitive_dx1_get, HEPVis_SWIG_Python.SoBackPrimitive_dx1_set)
    dx2 = _swig_property(HEPVis_SWIG_Python.SoBackPrimitive_dx2_get, HEPVis_SWIG_Python.SoBackPrimitive_dx2_set)
    dy1 = _swig_property(HEPVis_SWIG_Python.SoBackPrimitive_dy1_get, HEPVis_SWIG_Python.SoBackPrimitive_dy1_set)
    dy2 = _swig_property(HEPVis_SWIG_Python.SoBackPrimitive_dy2_get, HEPVis_SWIG_Python.SoBackPrimitive_dy2_set)
    dz = _swig_property(HEPVis_SWIG_Python.SoBackPrimitive_dz_get, HEPVis_SWIG_Python.SoBackPrimitive_dz_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoBackPrimitive()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoBackPrimitive_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoBackPrimitive
    __del__ = lambda self : None;
SoBackPrimitive_swigregister = HEPVis_SWIG_Python.SoBackPrimitive_swigregister
SoBackPrimitive_swigregister(SoBackPrimitive)

def SoBackPrimitive_getClassTypeId():
  return HEPVis_SWIG_Python.SoBackPrimitive_getClassTypeId()
SoBackPrimitive_getClassTypeId = HEPVis_SWIG_Python.SoBackPrimitive_getClassTypeId

def SoBackPrimitive_initClass():
  return HEPVis_SWIG_Python.SoBackPrimitive_initClass()
SoBackPrimitive_initClass = HEPVis_SWIG_Python.SoBackPrimitive_initClass

class SoPrimitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPrimitive_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPrimitive_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoPrimitive_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoPrimitive_getNodekitCatalog(self)
    background = _swig_property(HEPVis_SWIG_Python.SoPrimitive_background_get, HEPVis_SWIG_Python.SoPrimitive_background_set)
    foreground = _swig_property(HEPVis_SWIG_Python.SoPrimitive_foreground_get, HEPVis_SWIG_Python.SoPrimitive_foreground_set)
    shadowThickness = _swig_property(HEPVis_SWIG_Python.SoPrimitive_shadowThickness_get, HEPVis_SWIG_Python.SoPrimitive_shadowThickness_set)
    marginWidth = _swig_property(HEPVis_SWIG_Python.SoPrimitive_marginWidth_get, HEPVis_SWIG_Python.SoPrimitive_marginWidth_set)
    marginHeight = _swig_property(HEPVis_SWIG_Python.SoPrimitive_marginHeight_get, HEPVis_SWIG_Python.SoPrimitive_marginHeight_set)
    width = _swig_property(HEPVis_SWIG_Python.SoPrimitive_width_get, HEPVis_SWIG_Python.SoPrimitive_width_set)
    height = _swig_property(HEPVis_SWIG_Python.SoPrimitive_height_get, HEPVis_SWIG_Python.SoPrimitive_height_set)
    ATTACH_NONE = HEPVis_SWIG_Python.SoPrimitive_ATTACH_NONE
    ATTACH_NODE = HEPVis_SWIG_Python.SoPrimitive_ATTACH_NODE
    ATTACH_OPPOSITE_NODE = HEPVis_SWIG_Python.SoPrimitive_ATTACH_OPPOSITE_NODE
    leftAttachment = _swig_property(HEPVis_SWIG_Python.SoPrimitive_leftAttachment_get, HEPVis_SWIG_Python.SoPrimitive_leftAttachment_set)
    rightAttachment = _swig_property(HEPVis_SWIG_Python.SoPrimitive_rightAttachment_get, HEPVis_SWIG_Python.SoPrimitive_rightAttachment_set)
    topAttachment = _swig_property(HEPVis_SWIG_Python.SoPrimitive_topAttachment_get, HEPVis_SWIG_Python.SoPrimitive_topAttachment_set)
    bottomAttachment = _swig_property(HEPVis_SWIG_Python.SoPrimitive_bottomAttachment_get, HEPVis_SWIG_Python.SoPrimitive_bottomAttachment_set)
    leftNode = _swig_property(HEPVis_SWIG_Python.SoPrimitive_leftNode_get, HEPVis_SWIG_Python.SoPrimitive_leftNode_set)
    rightNode = _swig_property(HEPVis_SWIG_Python.SoPrimitive_rightNode_get, HEPVis_SWIG_Python.SoPrimitive_rightNode_set)
    topNode = _swig_property(HEPVis_SWIG_Python.SoPrimitive_topNode_get, HEPVis_SWIG_Python.SoPrimitive_topNode_set)
    bottomNode = _swig_property(HEPVis_SWIG_Python.SoPrimitive_bottomNode_get, HEPVis_SWIG_Python.SoPrimitive_bottomNode_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPrimitive()
        try: self.this.append(this)
        except: self.this = this
    def compellSize(self, *args): return HEPVis_SWIG_Python.SoPrimitive_compellSize(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPrimitive_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPrimitive
    __del__ = lambda self : None;
SoPrimitive_swigregister = HEPVis_SWIG_Python.SoPrimitive_swigregister
SoPrimitive_swigregister(SoPrimitive)

def SoPrimitive_getClassTypeId():
  return HEPVis_SWIG_Python.SoPrimitive_getClassTypeId()
SoPrimitive_getClassTypeId = HEPVis_SWIG_Python.SoPrimitive_getClassTypeId

def SoPrimitive_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoPrimitive_getClassNodekitCatalog()
SoPrimitive_getClassNodekitCatalog = HEPVis_SWIG_Python.SoPrimitive_getClassNodekitCatalog

def SoPrimitive_initClass():
  return HEPVis_SWIG_Python.SoPrimitive_initClass()
SoPrimitive_initClass = HEPVis_SWIG_Python.SoPrimitive_initClass

class SoForm(SoPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoForm_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoForm_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoForm_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoForm_getNodekitCatalog(self)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoForm()
        try: self.this.append(this)
        except: self.this = this
    def addChild(self, *args): return HEPVis_SWIG_Python.SoForm_addChild(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoForm_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoForm
    __del__ = lambda self : None;
SoForm_swigregister = HEPVis_SWIG_Python.SoForm_swigregister
SoForm_swigregister(SoForm)

def SoForm_getClassTypeId():
  return HEPVis_SWIG_Python.SoForm_getClassTypeId()
SoForm_getClassTypeId = HEPVis_SWIG_Python.SoForm_getClassTypeId

def SoForm_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoForm_getClassNodekitCatalog()
SoForm_getClassNodekitCatalog = HEPVis_SWIG_Python.SoForm_getClassNodekitCatalog

def SoForm_initClass():
  return HEPVis_SWIG_Python.SoForm_initClass()
SoForm_initClass = HEPVis_SWIG_Python.SoForm_initClass

class SoPushButton(SoPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoPushButton_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoPushButton_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoPushButton_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoPushButton_getNodekitCatalog(self)
    fontList = _swig_property(HEPVis_SWIG_Python.SoPushButton_fontList_get, HEPVis_SWIG_Python.SoPushButton_fontList_set)
    labelString = _swig_property(HEPVis_SWIG_Python.SoPushButton_labelString_get, HEPVis_SWIG_Python.SoPushButton_labelString_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoPushButton()
        try: self.this.append(this)
        except: self.this = this
    def addActivateCallback(self, *args): return HEPVis_SWIG_Python.SoPushButton_addActivateCallback(self, *args)
    def removeActivateCallback(self, *args): return HEPVis_SWIG_Python.SoPushButton_removeActivateCallback(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoPushButton_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoPushButton
    __del__ = lambda self : None;
SoPushButton_swigregister = HEPVis_SWIG_Python.SoPushButton_swigregister
SoPushButton_swigregister(SoPushButton)

def SoPushButton_getClassTypeId():
  return HEPVis_SWIG_Python.SoPushButton_getClassTypeId()
SoPushButton_getClassTypeId = HEPVis_SWIG_Python.SoPushButton_getClassTypeId

def SoPushButton_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoPushButton_getClassNodekitCatalog()
SoPushButton_getClassNodekitCatalog = HEPVis_SWIG_Python.SoPushButton_getClassNodekitCatalog

def SoPushButton_initClass():
  return HEPVis_SWIG_Python.SoPushButton_initClass()
SoPushButton_initClass = HEPVis_SWIG_Python.SoPushButton_initClass

class SoArrowButton(SoPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoArrowButton_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoArrowButton_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoArrowButton_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoArrowButton_getNodekitCatalog(self)
    ARROW_UP = HEPVis_SWIG_Python.SoArrowButton_ARROW_UP
    ARROW_LEFT = HEPVis_SWIG_Python.SoArrowButton_ARROW_LEFT
    ARROW_DOWN = HEPVis_SWIG_Python.SoArrowButton_ARROW_DOWN
    ARROW_RIGHT = HEPVis_SWIG_Python.SoArrowButton_ARROW_RIGHT
    arrowDirection = _swig_property(HEPVis_SWIG_Python.SoArrowButton_arrowDirection_get, HEPVis_SWIG_Python.SoArrowButton_arrowDirection_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoArrowButton()
        try: self.this.append(this)
        except: self.this = this
    def addActivateCallback(self, *args): return HEPVis_SWIG_Python.SoArrowButton_addActivateCallback(self, *args)
    def removeActivateCallback(self, *args): return HEPVis_SWIG_Python.SoArrowButton_removeActivateCallback(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoArrowButton_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoArrowButton
    __del__ = lambda self : None;
SoArrowButton_swigregister = HEPVis_SWIG_Python.SoArrowButton_swigregister
SoArrowButton_swigregister(SoArrowButton)

def SoArrowButton_getClassTypeId():
  return HEPVis_SWIG_Python.SoArrowButton_getClassTypeId()
SoArrowButton_getClassTypeId = HEPVis_SWIG_Python.SoArrowButton_getClassTypeId

def SoArrowButton_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoArrowButton_getClassNodekitCatalog()
SoArrowButton_getClassNodekitCatalog = HEPVis_SWIG_Python.SoArrowButton_getClassNodekitCatalog

def SoArrowButton_initClass():
  return HEPVis_SWIG_Python.SoArrowButton_initClass()
SoArrowButton_initClass = HEPVis_SWIG_Python.SoArrowButton_initClass

class SoList(SoPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoList_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoList_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoList_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoList_getNodekitCatalog(self)
    fontList = _swig_property(HEPVis_SWIG_Python.SoList_fontList_get, HEPVis_SWIG_Python.SoList_fontList_set)
    items = _swig_property(HEPVis_SWIG_Python.SoList_items_get, HEPVis_SWIG_Python.SoList_items_set)
    visibleItemCount = _swig_property(HEPVis_SWIG_Python.SoList_visibleItemCount_get, HEPVis_SWIG_Python.SoList_visibleItemCount_set)
    topItemPosition = _swig_property(HEPVis_SWIG_Python.SoList_topItemPosition_get, HEPVis_SWIG_Python.SoList_topItemPosition_set)
    CONSTANT = HEPVis_SWIG_Python.SoList_CONSTANT
    VARIABLE = HEPVis_SWIG_Python.SoList_VARIABLE
    listSizePolicy = _swig_property(HEPVis_SWIG_Python.SoList_listSizePolicy_get, HEPVis_SWIG_Python.SoList_listSizePolicy_set)
    listWidth = _swig_property(HEPVis_SWIG_Python.SoList_listWidth_get, HEPVis_SWIG_Python.SoList_listWidth_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoList()
        try: self.this.append(this)
        except: self.this = this
    def addSingleSelectionCallback(self, *args): return HEPVis_SWIG_Python.SoList_addSingleSelectionCallback(self, *args)
    def removeSingleSelectionCallback(self, *args): return HEPVis_SWIG_Python.SoList_removeSingleSelectionCallback(self, *args)
    def getSelectedItem(self): return HEPVis_SWIG_Python.SoList_getSelectedItem(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoList_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoList
    __del__ = lambda self : None;
SoList_swigregister = HEPVis_SWIG_Python.SoList_swigregister
SoList_swigregister(SoList)

def SoList_getClassTypeId():
  return HEPVis_SWIG_Python.SoList_getClassTypeId()
SoList_getClassTypeId = HEPVis_SWIG_Python.SoList_getClassTypeId

def SoList_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoList_getClassNodekitCatalog()
SoList_getClassNodekitCatalog = HEPVis_SWIG_Python.SoList_getClassNodekitCatalog

def SoList_initClass():
  return HEPVis_SWIG_Python.SoList_initClass()
SoList_initClass = HEPVis_SWIG_Python.SoList_initClass

class SoScrolledList(SoForm):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoScrolledList_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoScrolledList_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoScrolledList_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoScrolledList_getNodekitCatalog(self)
    fontList = _swig_property(HEPVis_SWIG_Python.SoScrolledList_fontList_get, HEPVis_SWIG_Python.SoScrolledList_fontList_set)
    items = _swig_property(HEPVis_SWIG_Python.SoScrolledList_items_get, HEPVis_SWIG_Python.SoScrolledList_items_set)
    visibleItemCount = _swig_property(HEPVis_SWIG_Python.SoScrolledList_visibleItemCount_get, HEPVis_SWIG_Python.SoScrolledList_visibleItemCount_set)
    topItemPosition = _swig_property(HEPVis_SWIG_Python.SoScrolledList_topItemPosition_get, HEPVis_SWIG_Python.SoScrolledList_topItemPosition_set)
    listWidth = _swig_property(HEPVis_SWIG_Python.SoScrolledList_listWidth_get, HEPVis_SWIG_Python.SoScrolledList_listWidth_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoScrolledList()
        try: self.this.append(this)
        except: self.this = this
    def addSingleSelectionCallback(self, *args): return HEPVis_SWIG_Python.SoScrolledList_addSingleSelectionCallback(self, *args)
    def removeSingleSelectionCallback(self, *args): return HEPVis_SWIG_Python.SoScrolledList_removeSingleSelectionCallback(self, *args)
    def getSelectedItem(self): return HEPVis_SWIG_Python.SoScrolledList_getSelectedItem(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoScrolledList_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoScrolledList
    __del__ = lambda self : None;
SoScrolledList_swigregister = HEPVis_SWIG_Python.SoScrolledList_swigregister
SoScrolledList_swigregister(SoScrolledList)

def SoScrolledList_getClassTypeId():
  return HEPVis_SWIG_Python.SoScrolledList_getClassTypeId()
SoScrolledList_getClassTypeId = HEPVis_SWIG_Python.SoScrolledList_getClassTypeId

def SoScrolledList_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoScrolledList_getClassNodekitCatalog()
SoScrolledList_getClassNodekitCatalog = HEPVis_SWIG_Python.SoScrolledList_getClassNodekitCatalog

def SoScrolledList_initClass():
  return HEPVis_SWIG_Python.SoScrolledList_initClass()
SoScrolledList_initClass = HEPVis_SWIG_Python.SoScrolledList_initClass

class SoSelectionBox(SoForm):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoSelectionBox_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoSelectionBox_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoSelectionBox_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoSelectionBox_getNodekitCatalog(self)
    items = _swig_property(HEPVis_SWIG_Python.SoSelectionBox_items_get, HEPVis_SWIG_Python.SoSelectionBox_items_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoSelectionBox()
        try: self.this.append(this)
        except: self.this = this
    def addOkCallback(self, *args): return HEPVis_SWIG_Python.SoSelectionBox_addOkCallback(self, *args)
    def removeOkCallback(self, *args): return HEPVis_SWIG_Python.SoSelectionBox_removeOkCallback(self, *args)
    def getSelection(self): return HEPVis_SWIG_Python.SoSelectionBox_getSelection(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoSelectionBox_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoSelectionBox
    __del__ = lambda self : None;
SoSelectionBox_swigregister = HEPVis_SWIG_Python.SoSelectionBox_swigregister
SoSelectionBox_swigregister(SoSelectionBox)

def SoSelectionBox_getClassTypeId():
  return HEPVis_SWIG_Python.SoSelectionBox_getClassTypeId()
SoSelectionBox_getClassTypeId = HEPVis_SWIG_Python.SoSelectionBox_getClassTypeId

def SoSelectionBox_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoSelectionBox_getClassNodekitCatalog()
SoSelectionBox_getClassNodekitCatalog = HEPVis_SWIG_Python.SoSelectionBox_getClassNodekitCatalog

def SoSelectionBox_initClass():
  return HEPVis_SWIG_Python.SoSelectionBox_initClass()
SoSelectionBox_initClass = HEPVis_SWIG_Python.SoSelectionBox_initClass

class SoText(SoPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoText_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoText_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoText_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoText_getNodekitCatalog(self)
    ENGLISH = HEPVis_SWIG_Python.SoText_ENGLISH
    FRENCH = HEPVis_SWIG_Python.SoText_FRENCH
    fontList = _swig_property(HEPVis_SWIG_Python.SoText_fontList_get, HEPVis_SWIG_Python.SoText_fontList_set)
    value = _swig_property(HEPVis_SWIG_Python.SoText_value_get, HEPVis_SWIG_Python.SoText_value_set)
    rows = _swig_property(HEPVis_SWIG_Python.SoText_rows_get, HEPVis_SWIG_Python.SoText_rows_set)
    topPosition = _swig_property(HEPVis_SWIG_Python.SoText_topPosition_get, HEPVis_SWIG_Python.SoText_topPosition_set)
    editable = _swig_property(HEPVis_SWIG_Python.SoText_editable_get, HEPVis_SWIG_Python.SoText_editable_set)
    cursorPosition = _swig_property(HEPVis_SWIG_Python.SoText_cursorPosition_get, HEPVis_SWIG_Python.SoText_cursorPosition_set)
    textWidth = _swig_property(HEPVis_SWIG_Python.SoText_textWidth_get, HEPVis_SWIG_Python.SoText_textWidth_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoText()
        try: self.this.append(this)
        except: self.this = this
    def addActivateCallback(self, *args): return HEPVis_SWIG_Python.SoText_addActivateCallback(self, *args)
    def removeActivateCallback(self, *args): return HEPVis_SWIG_Python.SoText_removeActivateCallback(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoText_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoText
    __del__ = lambda self : None;
SoText_swigregister = HEPVis_SWIG_Python.SoText_swigregister
SoText_swigregister(SoText)

def SoText_getClassTypeId():
  return HEPVis_SWIG_Python.SoText_getClassTypeId()
SoText_getClassTypeId = HEPVis_SWIG_Python.SoText_getClassTypeId

def SoText_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoText_getClassNodekitCatalog()
SoText_getClassNodekitCatalog = HEPVis_SWIG_Python.SoText_getClassNodekitCatalog

def SoText_initClass():
  return HEPVis_SWIG_Python.SoText_initClass()
SoText_initClass = HEPVis_SWIG_Python.SoText_initClass

class SoCommand(SoText):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoCommand_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoCommand_getTypeId(self)
    historyItems = _swig_property(HEPVis_SWIG_Python.SoCommand_historyItems_get, HEPVis_SWIG_Python.SoCommand_historyItems_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoCommand()
        try: self.this.append(this)
        except: self.this = this
    initClass = staticmethod(HEPVis_SWIG_Python.SoCommand_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoCommand
    __del__ = lambda self : None;
SoCommand_swigregister = HEPVis_SWIG_Python.SoCommand_swigregister
SoCommand_swigregister(SoCommand)

def SoCommand_getClassTypeId():
  return HEPVis_SWIG_Python.SoCommand_getClassTypeId()
SoCommand_getClassTypeId = HEPVis_SWIG_Python.SoCommand_getClassTypeId

def SoCommand_initClass():
  return HEPVis_SWIG_Python.SoCommand_initClass()
SoCommand_initClass = HEPVis_SWIG_Python.SoCommand_initClass

class SoFileSelectionBox(SoForm):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoFileSelectionBox_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoFileSelectionBox_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoFileSelectionBox_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoFileSelectionBox_getNodekitCatalog(self)
    directory = _swig_property(HEPVis_SWIG_Python.SoFileSelectionBox_directory_get, HEPVis_SWIG_Python.SoFileSelectionBox_directory_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoFileSelectionBox()
        try: self.this.append(this)
        except: self.this = this
    def addOkCallback(self, *args): return HEPVis_SWIG_Python.SoFileSelectionBox_addOkCallback(self, *args)
    def removeOkCallback(self, *args): return HEPVis_SWIG_Python.SoFileSelectionBox_removeOkCallback(self, *args)
    def getSelectedFile(self): return HEPVis_SWIG_Python.SoFileSelectionBox_getSelectedFile(self)
    initClass = staticmethod(HEPVis_SWIG_Python.SoFileSelectionBox_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoFileSelectionBox
    __del__ = lambda self : None;
SoFileSelectionBox_swigregister = HEPVis_SWIG_Python.SoFileSelectionBox_swigregister
SoFileSelectionBox_swigregister(SoFileSelectionBox)

def SoFileSelectionBox_getClassTypeId():
  return HEPVis_SWIG_Python.SoFileSelectionBox_getClassTypeId()
SoFileSelectionBox_getClassTypeId = HEPVis_SWIG_Python.SoFileSelectionBox_getClassTypeId

def SoFileSelectionBox_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoFileSelectionBox_getClassNodekitCatalog()
SoFileSelectionBox_getClassNodekitCatalog = HEPVis_SWIG_Python.SoFileSelectionBox_getClassNodekitCatalog

def SoFileSelectionBox_initClass():
  return HEPVis_SWIG_Python.SoFileSelectionBox_initClass()
SoFileSelectionBox_initClass = HEPVis_SWIG_Python.SoFileSelectionBox_initClass

class SoShell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getClassTypeId = staticmethod(HEPVis_SWIG_Python.SoShell_getClassTypeId)
    def getTypeId(self): return HEPVis_SWIG_Python.SoShell_getTypeId(self)
    getClassNodekitCatalog = staticmethod(HEPVis_SWIG_Python.SoShell_getClassNodekitCatalog)
    def getNodekitCatalog(self): return HEPVis_SWIG_Python.SoShell_getNodekitCatalog(self)
    background = _swig_property(HEPVis_SWIG_Python.SoShell_background_get, HEPVis_SWIG_Python.SoShell_background_set)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoShell()
        try: self.this.append(this)
        except: self.this = this
    def addChild(self, *args): return HEPVis_SWIG_Python.SoShell_addChild(self, *args)
    def doAction(self, *args): return HEPVis_SWIG_Python.SoShell_doAction(self, *args)
    def callback(self, *args): return HEPVis_SWIG_Python.SoShell_callback(self, *args)
    def GLRender(self, *args): return HEPVis_SWIG_Python.SoShell_GLRender(self, *args)
    def rayPick(self, *args): return HEPVis_SWIG_Python.SoShell_rayPick(self, *args)
    def pick(self, *args): return HEPVis_SWIG_Python.SoShell_pick(self, *args)
    def getBoundingBox(self, *args): return HEPVis_SWIG_Python.SoShell_getBoundingBox(self, *args)
    initClass = staticmethod(HEPVis_SWIG_Python.SoShell_initClass)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoShell
    __del__ = lambda self : None;
SoShell_swigregister = HEPVis_SWIG_Python.SoShell_swigregister
SoShell_swigregister(SoShell)

def SoShell_getClassTypeId():
  return HEPVis_SWIG_Python.SoShell_getClassTypeId()
SoShell_getClassTypeId = HEPVis_SWIG_Python.SoShell_getClassTypeId

def SoShell_getClassNodekitCatalog():
  return HEPVis_SWIG_Python.SoShell_getClassNodekitCatalog()
SoShell_getClassNodekitCatalog = HEPVis_SWIG_Python.SoShell_getClassNodekitCatalog

def SoShell_initClass():
  return HEPVis_SWIG_Python.SoShell_initClass()
SoShell_initClass = HEPVis_SWIG_Python.SoShell_initClass

class SbVisitor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SbVisitor
    __del__ = lambda self : None;
    def visit(self, *args): return HEPVis_SWIG_Python.SbVisitor_visit(self, *args)
SbVisitor_swigregister = HEPVis_SWIG_Python.SbVisitor_swigregister
SbVisitor_swigregister(SbVisitor)

class SoTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LEFT = HEPVis_SWIG_Python.SoTools_LEFT
    CENTER = HEPVis_SWIG_Python.SoTools_CENTER
    RIGHT = HEPVis_SWIG_Python.SoTools_RIGHT
    BOTTOM = HEPVis_SWIG_Python.SoTools_BOTTOM
    MIDDLE = HEPVis_SWIG_Python.SoTools_MIDDLE
    TOP = HEPVis_SWIG_Python.SoTools_TOP
    getSceneGraphs = staticmethod(HEPVis_SWIG_Python.SoTools_getSceneGraphs)
    searchNode = staticmethod(HEPVis_SWIG_Python.SoTools_searchNode)
    isChildOf = staticmethod(HEPVis_SWIG_Python.SoTools_isChildOf)
    addPolygonToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addPolygonToNode)
    addBoxCoords = staticmethod(HEPVis_SWIG_Python.SoTools_addBoxCoords)
    addLinesToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addLinesToNode)
    addSegmentsToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addSegmentsToNode)
    addNurbsCurveToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addNurbsCurveToNode)
    addSplineCurveToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addSplineCurveToNode)
    addLagrangePolynomialCurveToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addLagrangePolynomialCurveToNode)
    addPointsToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addPointsToNode)
    addAlignedStringToNode = staticmethod(HEPVis_SWIG_Python.SoTools_addAlignedStringToNode)
    setKitPart = staticmethod(HEPVis_SWIG_Python.SoTools_setKitPart)
    getKitPart = staticmethod(HEPVis_SWIG_Python.SoTools_getKitPart)
    toggleKitPart = staticmethod(HEPVis_SWIG_Python.SoTools_toggleKitPart)
    setKitPartValue = staticmethod(HEPVis_SWIG_Python.SoTools_setKitPartValue)
    getKitPartValue = staticmethod(HEPVis_SWIG_Python.SoTools_getKitPartValue)
    toggleKitPartValue = staticmethod(HEPVis_SWIG_Python.SoTools_toggleKitPartValue)
    resetHighlight = staticmethod(HEPVis_SWIG_Python.SoTools_resetHighlight)
    highlight = staticmethod(HEPVis_SWIG_Python.SoTools_highlight)
    highlightName = staticmethod(HEPVis_SWIG_Python.SoTools_highlightName)
    pointAt = staticmethod(HEPVis_SWIG_Python.SoTools_pointAt)
    lookAt = staticmethod(HEPVis_SWIG_Python.SoTools_lookAt)
    write = staticmethod(HEPVis_SWIG_Python.SoTools_write)
    setManip = staticmethod(HEPVis_SWIG_Python.SoTools_setManip)
    removeManips = staticmethod(HEPVis_SWIG_Python.SoTools_removeManips)
    setManips = staticmethod(HEPVis_SWIG_Python.SoTools_setManips)
    setDraggerColor = staticmethod(HEPVis_SWIG_Python.SoTools_setDraggerColor)
    addDraggersToPolygon = staticmethod(HEPVis_SWIG_Python.SoTools_addDraggersToPolygon)
    visit = staticmethod(HEPVis_SWIG_Python.SoTools_visit)
    detectIntersection = staticmethod(HEPVis_SWIG_Python.SoTools_detectIntersection)
    count = staticmethod(HEPVis_SWIG_Python.SoTools_count)
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoTools()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoTools
    __del__ = lambda self : None;
SoTools_swigregister = HEPVis_SWIG_Python.SoTools_swigregister
SoTools_swigregister(SoTools)

def SoTools_getSceneGraphs(*args):
  return HEPVis_SWIG_Python.SoTools_getSceneGraphs(*args)
SoTools_getSceneGraphs = HEPVis_SWIG_Python.SoTools_getSceneGraphs

def SoTools_searchNode(*args):
  return HEPVis_SWIG_Python.SoTools_searchNode(*args)
SoTools_searchNode = HEPVis_SWIG_Python.SoTools_searchNode

def SoTools_isChildOf(*args):
  return HEPVis_SWIG_Python.SoTools_isChildOf(*args)
SoTools_isChildOf = HEPVis_SWIG_Python.SoTools_isChildOf

def SoTools_addPolygonToNode(*args):
  return HEPVis_SWIG_Python.SoTools_addPolygonToNode(*args)
SoTools_addPolygonToNode = HEPVis_SWIG_Python.SoTools_addPolygonToNode

def SoTools_addBoxCoords(*args):
  return HEPVis_SWIG_Python.SoTools_addBoxCoords(*args)
SoTools_addBoxCoords = HEPVis_SWIG_Python.SoTools_addBoxCoords

def SoTools_addLinesToNode(*args):
  return HEPVis_SWIG_Python.SoTools_addLinesToNode(*args)
SoTools_addLinesToNode = HEPVis_SWIG_Python.SoTools_addLinesToNode

def SoTools_addSegmentsToNode(*args):
  return HEPVis_SWIG_Python.SoTools_addSegmentsToNode(*args)
SoTools_addSegmentsToNode = HEPVis_SWIG_Python.SoTools_addSegmentsToNode

def SoTools_addNurbsCurveToNode(*args):
  return HEPVis_SWIG_Python.SoTools_addNurbsCurveToNode(*args)
SoTools_addNurbsCurveToNode = HEPVis_SWIG_Python.SoTools_addNurbsCurveToNode

def SoTools_addSplineCurveToNode(*args):
  return HEPVis_SWIG_Python.SoTools_addSplineCurveToNode(*args)
SoTools_addSplineCurveToNode = HEPVis_SWIG_Python.SoTools_addSplineCurveToNode

def SoTools_addLagrangePolynomialCurveToNode(*args):
  return HEPVis_SWIG_Python.SoTools_addLagrangePolynomialCurveToNode(*args)
SoTools_addLagrangePolynomialCurveToNode = HEPVis_SWIG_Python.SoTools_addLagrangePolynomialCurveToNode

def SoTools_addPointsToNode(*args):
  return HEPVis_SWIG_Python.SoTools_addPointsToNode(*args)
SoTools_addPointsToNode = HEPVis_SWIG_Python.SoTools_addPointsToNode

def SoTools_addAlignedStringToNode(*args):
  return HEPVis_SWIG_Python.SoTools_addAlignedStringToNode(*args)
SoTools_addAlignedStringToNode = HEPVis_SWIG_Python.SoTools_addAlignedStringToNode

def SoTools_setKitPart(*args):
  return HEPVis_SWIG_Python.SoTools_setKitPart(*args)
SoTools_setKitPart = HEPVis_SWIG_Python.SoTools_setKitPart

def SoTools_getKitPart(*args):
  return HEPVis_SWIG_Python.SoTools_getKitPart(*args)
SoTools_getKitPart = HEPVis_SWIG_Python.SoTools_getKitPart

def SoTools_toggleKitPart(*args):
  return HEPVis_SWIG_Python.SoTools_toggleKitPart(*args)
SoTools_toggleKitPart = HEPVis_SWIG_Python.SoTools_toggleKitPart

def SoTools_setKitPartValue(*args):
  return HEPVis_SWIG_Python.SoTools_setKitPartValue(*args)
SoTools_setKitPartValue = HEPVis_SWIG_Python.SoTools_setKitPartValue

def SoTools_getKitPartValue(*args):
  return HEPVis_SWIG_Python.SoTools_getKitPartValue(*args)
SoTools_getKitPartValue = HEPVis_SWIG_Python.SoTools_getKitPartValue

def SoTools_toggleKitPartValue(*args):
  return HEPVis_SWIG_Python.SoTools_toggleKitPartValue(*args)
SoTools_toggleKitPartValue = HEPVis_SWIG_Python.SoTools_toggleKitPartValue

def SoTools_resetHighlight(*args):
  return HEPVis_SWIG_Python.SoTools_resetHighlight(*args)
SoTools_resetHighlight = HEPVis_SWIG_Python.SoTools_resetHighlight

def SoTools_highlight(*args):
  return HEPVis_SWIG_Python.SoTools_highlight(*args)
SoTools_highlight = HEPVis_SWIG_Python.SoTools_highlight

def SoTools_highlightName():
  return HEPVis_SWIG_Python.SoTools_highlightName()
SoTools_highlightName = HEPVis_SWIG_Python.SoTools_highlightName

def SoTools_pointAt(*args):
  return HEPVis_SWIG_Python.SoTools_pointAt(*args)
SoTools_pointAt = HEPVis_SWIG_Python.SoTools_pointAt

def SoTools_lookAt(*args):
  return HEPVis_SWIG_Python.SoTools_lookAt(*args)
SoTools_lookAt = HEPVis_SWIG_Python.SoTools_lookAt

def SoTools_write(*args):
  return HEPVis_SWIG_Python.SoTools_write(*args)
SoTools_write = HEPVis_SWIG_Python.SoTools_write

def SoTools_setManip(*args):
  return HEPVis_SWIG_Python.SoTools_setManip(*args)
SoTools_setManip = HEPVis_SWIG_Python.SoTools_setManip

def SoTools_removeManips(*args):
  return HEPVis_SWIG_Python.SoTools_removeManips(*args)
SoTools_removeManips = HEPVis_SWIG_Python.SoTools_removeManips

def SoTools_setManips(*args):
  return HEPVis_SWIG_Python.SoTools_setManips(*args)
SoTools_setManips = HEPVis_SWIG_Python.SoTools_setManips

def SoTools_setDraggerColor(*args):
  return HEPVis_SWIG_Python.SoTools_setDraggerColor(*args)
SoTools_setDraggerColor = HEPVis_SWIG_Python.SoTools_setDraggerColor

def SoTools_addDraggersToPolygon(*args):
  return HEPVis_SWIG_Python.SoTools_addDraggersToPolygon(*args)
SoTools_addDraggersToPolygon = HEPVis_SWIG_Python.SoTools_addDraggersToPolygon

def SoTools_visit(*args):
  return HEPVis_SWIG_Python.SoTools_visit(*args)
SoTools_visit = HEPVis_SWIG_Python.SoTools_visit

def SoTools_detectIntersection(*args):
  return HEPVis_SWIG_Python.SoTools_detectIntersection(*args)
SoTools_detectIntersection = HEPVis_SWIG_Python.SoTools_detectIntersection

def SoTools_count(*args):
  return HEPVis_SWIG_Python.SoTools_count(*args)
SoTools_count = HEPVis_SWIG_Python.SoTools_count

class SoStyleCache(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = HEPVis_SWIG_Python.new_SoStyleCache()
        try: self.this.append(this)
        except: self.this = this
    cachedName = staticmethod(HEPVis_SWIG_Python.SoStyleCache_cachedName)
    def getMaterial(self, *args): return HEPVis_SWIG_Python.SoStyleCache_getMaterial(self, *args)
    def getHighlightMaterial(self, *args): return HEPVis_SWIG_Python.SoStyleCache_getHighlightMaterial(self, *args)
    def getLineStyle(self, arg2=0xFFFF, arg3=0): return HEPVis_SWIG_Python.SoStyleCache_getLineStyle(self, arg2, arg3)
    def getFilled(self): return HEPVis_SWIG_Python.SoStyleCache_getFilled(self)
    def getPoints(self): return HEPVis_SWIG_Python.SoStyleCache_getPoints(self)
    def getLightModelPhong(self): return HEPVis_SWIG_Python.SoStyleCache_getLightModelPhong(self)
    def getLightModelBaseColor(self): return HEPVis_SWIG_Python.SoStyleCache_getLightModelBaseColor(self)
    def getResetTransform(self): return HEPVis_SWIG_Python.SoStyleCache_getResetTransform(self)
    def getNormalBindingOverall(self): return HEPVis_SWIG_Python.SoStyleCache_getNormalBindingOverall(self)
    def getNormalBindingPerFace(self): return HEPVis_SWIG_Python.SoStyleCache_getNormalBindingPerFace(self)
    def getNormalBindingPerFaceIndexed(self): return HEPVis_SWIG_Python.SoStyleCache_getNormalBindingPerFaceIndexed(self)
    def getNormalZ(self): return HEPVis_SWIG_Python.SoStyleCache_getNormalZ(self)
    def getMaterialBindingOverall(self): return HEPVis_SWIG_Python.SoStyleCache_getMaterialBindingOverall(self)
    def getMaterialBindingPerFace(self): return HEPVis_SWIG_Python.SoStyleCache_getMaterialBindingPerFace(self)
    def getMaterialBindingPerFaceIndexed(self): return HEPVis_SWIG_Python.SoStyleCache_getMaterialBindingPerFaceIndexed(self)
    def clearCache(self): return HEPVis_SWIG_Python.SoStyleCache_clearCache(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_SoStyleCache
    __del__ = lambda self : None;
SoStyleCache_swigregister = HEPVis_SWIG_Python.SoStyleCache_swigregister
SoStyleCache_swigregister(SoStyleCache)

def SoStyleCache_cachedName():
  return HEPVis_SWIG_Python.SoStyleCache_cachedName()
SoStyleCache_cachedName = HEPVis_SWIG_Python.SoStyleCache_cachedName


def HEPVisUtils_initClasses():
  return HEPVis_SWIG_Python.HEPVisUtils_initClasses()
HEPVisUtils_initClasses = HEPVis_SWIG_Python.HEPVisUtils_initClasses

def HEPVisGeometry_initClasses():
  return HEPVis_SWIG_Python.HEPVisGeometry_initClasses()
HEPVisGeometry_initClasses = HEPVis_SWIG_Python.HEPVisGeometry_initClasses

def HEPVisDetector_initClasses():
  return HEPVis_SWIG_Python.HEPVisDetector_initClasses()
HEPVisDetector_initClasses = HEPVis_SWIG_Python.HEPVisDetector_initClasses

def HEPVisPlotter_initClasses():
  return HEPVis_SWIG_Python.HEPVisPlotter_initClasses()
HEPVisPlotter_initClasses = HEPVis_SWIG_Python.HEPVisPlotter_initClasses

def HEPVisGUI_initClasses():
  return HEPVis_SWIG_Python.HEPVisGUI_initClasses()
HEPVisGUI_initClasses = HEPVis_SWIG_Python.HEPVisGUI_initClasses

def SoPlotter_initClasses():
  return HEPVis_SWIG_Python.SoPlotter_initClasses()
SoPlotter_initClasses = HEPVis_SWIG_Python.SoPlotter_initClasses

def initClasses():
  return HEPVis_SWIG_Python.initClasses()
initClasses = HEPVis_SWIG_Python.initClasses
class base_histo_duidd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def dac(self): return HEPVis_SWIG_Python.base_histo_duidd_dac(self)
    def title(self): return HEPVis_SWIG_Python.base_histo_duidd_title(self)
    def set_title(self, *args): return HEPVis_SWIG_Python.base_histo_duidd_set_title(self, *args)
    def dimension(self): return HEPVis_SWIG_Python.base_histo_duidd_dimension(self)
    def number_of_planes(self): return HEPVis_SWIG_Python.base_histo_duidd_number_of_planes(self)
    def entries(self): return HEPVis_SWIG_Python.base_histo_duidd_entries(self)
    def all_entries(self): return HEPVis_SWIG_Python.base_histo_duidd_all_entries(self)
    def extra_entries(self): return HEPVis_SWIG_Python.base_histo_duidd_extra_entries(self)
    def equivalent_bin_entries(self): return HEPVis_SWIG_Python.base_histo_duidd_equivalent_bin_entries(self)
    def sum_bin_heights(self): return HEPVis_SWIG_Python.base_histo_duidd_sum_bin_heights(self)
    def sum_all_bin_heights(self): return HEPVis_SWIG_Python.base_histo_duidd_sum_all_bin_heights(self)
    def sum_extra_bin_heights(self): return HEPVis_SWIG_Python.base_histo_duidd_sum_extra_bin_heights(self)
    def min_bin_height(self): return HEPVis_SWIG_Python.base_histo_duidd_min_bin_height(self)
    def max_bin_height(self): return HEPVis_SWIG_Python.base_histo_duidd_max_bin_height(self)
    def has_entries_per_bin(self): return HEPVis_SWIG_Python.base_histo_duidd_has_entries_per_bin(self)
    def get_ith_axis_Sxw(self, *args): return HEPVis_SWIG_Python.base_histo_duidd_get_ith_axis_Sxw(self, *args)
    def get_ith_axis_Sx2w(self, *args): return HEPVis_SWIG_Python.base_histo_duidd_get_ith_axis_Sx2w(self, *args)
    def get_in_range_Sw(self): return HEPVis_SWIG_Python.base_histo_duidd_get_in_range_Sw(self)
    def get_in_range_Sw2(self): return HEPVis_SWIG_Python.base_histo_duidd_get_in_range_Sw2(self)
    def bins_entries(self): return HEPVis_SWIG_Python.base_histo_duidd_bins_entries(self)
    def bins_sum_w(self): return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_w(self)
    def bins_sum_w2(self): return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_w2(self)
    def bins_sum_xw(self): return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_xw(self)
    def bins_sum_x2w(self): return HEPVis_SWIG_Python.base_histo_duidd_bins_sum_x2w(self)
    def in_range_planes_xyw(self): return HEPVis_SWIG_Python.base_histo_duidd_in_range_planes_xyw(self)
    def get_axis(self, *args): return HEPVis_SWIG_Python.base_histo_duidd_get_axis(self, *args)
    def get_bins(self): return HEPVis_SWIG_Python.base_histo_duidd_get_bins(self)
    def get_title(self): return HEPVis_SWIG_Python.base_histo_duidd_get_title(self)
    def get_dimension(self): return HEPVis_SWIG_Python.base_histo_duidd_get_dimension(self)
    def is_valid(self): return HEPVis_SWIG_Python.base_histo_duidd_is_valid(self)
    def annotations(self, *args): return HEPVis_SWIG_Python.base_histo_duidd_annotations(self, *args)
    def add_annotation(self, *args): return HEPVis_SWIG_Python.base_histo_duidd_add_annotation(self, *args)
    def annotation(self, *args): return HEPVis_SWIG_Python.base_histo_duidd_annotation(self, *args)
base_histo_duidd_swigregister = HEPVis_SWIG_Python.base_histo_duidd_swigregister
base_histo_duidd_swigregister(base_histo_duidd)

class b1_duidd(base_histo_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def bin_error(self, *args): return HEPVis_SWIG_Python.b1_duidd_bin_error(self, *args)
    def coord_to_index(self, *args): return HEPVis_SWIG_Python.b1_duidd_coord_to_index(self, *args)
    def mean(self): return HEPVis_SWIG_Python.b1_duidd_mean(self)
    def rms(self): return HEPVis_SWIG_Python.b1_duidd_rms(self)
    def bin_entries(self, *args): return HEPVis_SWIG_Python.b1_duidd_bin_entries(self, *args)
    def bin_Sw(self, *args): return HEPVis_SWIG_Python.b1_duidd_bin_Sw(self, *args)
    def bin_Sw2(self, *args): return HEPVis_SWIG_Python.b1_duidd_bin_Sw2(self, *args)
    def bin_Sxw(self, *args): return HEPVis_SWIG_Python.b1_duidd_bin_Sxw(self, *args)
    def bin_Sx2w(self, *args): return HEPVis_SWIG_Python.b1_duidd_bin_Sx2w(self, *args)
    def bin_height(self, *args): return HEPVis_SWIG_Python.b1_duidd_bin_height(self, *args)
    def bin_center(self, *args): return HEPVis_SWIG_Python.b1_duidd_bin_center(self, *args)
    def bin_mean(self, *args): return HEPVis_SWIG_Python.b1_duidd_bin_mean(self, *args)
    def bin_rms(self, *args): return HEPVis_SWIG_Python.b1_duidd_bin_rms(self, *args)
    def axis(self, *args): return HEPVis_SWIG_Python.b1_duidd_axis(self, *args)
    def hprint(self, *args): return HEPVis_SWIG_Python.b1_duidd_hprint(self, *args)
    def configure(self, *args): return HEPVis_SWIG_Python.b1_duidd_configure(self, *args)
b1_duidd_swigregister = HEPVis_SWIG_Python.b1_duidd_swigregister
b1_duidd_swigregister(b1_duidd)

class b2_duidd(base_histo_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def bin_error(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_error(self, *args)
    def mean_x(self): return HEPVis_SWIG_Python.b2_duidd_mean_x(self)
    def mean_y(self): return HEPVis_SWIG_Python.b2_duidd_mean_y(self)
    def rms_x(self): return HEPVis_SWIG_Python.b2_duidd_rms_x(self)
    def rms_y(self): return HEPVis_SWIG_Python.b2_duidd_rms_y(self)
    def coord_to_index_x(self, *args): return HEPVis_SWIG_Python.b2_duidd_coord_to_index_x(self, *args)
    def coord_to_index_y(self, *args): return HEPVis_SWIG_Python.b2_duidd_coord_to_index_y(self, *args)
    def bin_entries(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_entries(self, *args)
    def bin_Sw(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_Sw(self, *args)
    def bin_Sw2(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_Sw2(self, *args)
    def bin_Sxw(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_Sxw(self, *args)
    def bin_Sx2w(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_Sx2w(self, *args)
    def bin_Syw(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_Syw(self, *args)
    def bin_Sy2w(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_Sy2w(self, *args)
    def bin_height(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_height(self, *args)
    def bin_center_x(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_center_x(self, *args)
    def bin_center_y(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_center_y(self, *args)
    def bin_mean_x(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_mean_x(self, *args)
    def bin_mean_y(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_mean_y(self, *args)
    def bin_rms_x(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_rms_x(self, *args)
    def bin_rms_y(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_rms_y(self, *args)
    def axis_x(self, *args): return HEPVis_SWIG_Python.b2_duidd_axis_x(self, *args)
    def axis_y(self, *args): return HEPVis_SWIG_Python.b2_duidd_axis_y(self, *args)
    def bin_entries_x(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_entries_x(self, *args)
    def bin_height_x(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_height_x(self, *args)
    def bin_entries_y(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_entries_y(self, *args)
    def bin_height_y(self, *args): return HEPVis_SWIG_Python.b2_duidd_bin_height_y(self, *args)
    def Sxyw(self): return HEPVis_SWIG_Python.b2_duidd_Sxyw(self)
    def hprint(self, *args): return HEPVis_SWIG_Python.b2_duidd_hprint(self, *args)
    def configure(self, *args): return HEPVis_SWIG_Python.b2_duidd_configure(self, *args)
b2_duidd_swigregister = HEPVis_SWIG_Python.b2_duidd_swigregister
b2_duidd_swigregister(b2_duidd)

class h1_duidd(b1_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(self, *args): return HEPVis_SWIG_Python.h1_duidd_bin_error(self, *args)
    def scale(self, *args): return HEPVis_SWIG_Python.h1_duidd_scale(self, *args)
    def copy_from_data(self, *args): return HEPVis_SWIG_Python.h1_duidd_copy_from_data(self, *args)
    def get_histo_data(self): return HEPVis_SWIG_Python.h1_duidd_get_histo_data(self)
    def reset(self): return HEPVis_SWIG_Python.h1_duidd_reset(self)
    def fill(self, *args): return HEPVis_SWIG_Python.h1_duidd_fill(self, *args)
    def set_bin_content(self, *args): return HEPVis_SWIG_Python.h1_duidd_set_bin_content(self, *args)
    def add(self, *args): return HEPVis_SWIG_Python.h1_duidd_add(self, *args)
    def subtract(self, *args): return HEPVis_SWIG_Python.h1_duidd_subtract(self, *args)
    def multiply(self, *args): return HEPVis_SWIG_Python.h1_duidd_multiply(self, *args)
    def divide(self, *args): return HEPVis_SWIG_Python.h1_duidd_divide(self, *args)
    def gather_bins(self, *args): return HEPVis_SWIG_Python.h1_duidd_gather_bins(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h1_duidd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_h1_duidd(*args)
        try: self.this.append(this)
        except: self.this = this
h1_duidd_swigregister = HEPVis_SWIG_Python.h1_duidd_swigregister
h1_duidd_swigregister(h1_duidd)

class h2_duidd(b2_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(self, *args): return HEPVis_SWIG_Python.h2_duidd_bin_error(self, *args)
    def scale(self, *args): return HEPVis_SWIG_Python.h2_duidd_scale(self, *args)
    def copy_from_data(self, *args): return HEPVis_SWIG_Python.h2_duidd_copy_from_data(self, *args)
    def get_histo_data(self): return HEPVis_SWIG_Python.h2_duidd_get_histo_data(self)
    def reset(self): return HEPVis_SWIG_Python.h2_duidd_reset(self)
    def fill(self, *args): return HEPVis_SWIG_Python.h2_duidd_fill(self, *args)
    def set_bin_content(self, *args): return HEPVis_SWIG_Python.h2_duidd_set_bin_content(self, *args)
    def add(self, *args): return HEPVis_SWIG_Python.h2_duidd_add(self, *args)
    def subtract(self, *args): return HEPVis_SWIG_Python.h2_duidd_subtract(self, *args)
    def multiply(self, *args): return HEPVis_SWIG_Python.h2_duidd_multiply(self, *args)
    def divide(self, *args): return HEPVis_SWIG_Python.h2_duidd_divide(self, *args)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h2_duidd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_h2_duidd(*args)
        try: self.this.append(this)
        except: self.this = this
h2_duidd_swigregister = HEPVis_SWIG_Python.h2_duidd_swigregister
h2_duidd_swigregister(h2_duidd)

class p1_duiddd(b1_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(self, *args): return HEPVis_SWIG_Python.p1_duiddd_bin_error(self, *args)
    def multiply(self, *args): return HEPVis_SWIG_Python.p1_duiddd_multiply(self, *args)
    def scale(self, *args): return HEPVis_SWIG_Python.p1_duiddd_scale(self, *args)
    def bin_Svw(self, *args): return HEPVis_SWIG_Python.p1_duiddd_bin_Svw(self, *args)
    def bin_Sv2w(self, *args): return HEPVis_SWIG_Python.p1_duiddd_bin_Sv2w(self, *args)
    def reset(self): return HEPVis_SWIG_Python.p1_duiddd_reset(self)
    def copy_from_data(self, *args): return HEPVis_SWIG_Python.p1_duiddd_copy_from_data(self, *args)
    def get_histo_data(self): return HEPVis_SWIG_Python.p1_duiddd_get_histo_data(self)
    def fill(self, *args): return HEPVis_SWIG_Python.p1_duiddd_fill(self, *args)
    def bin_rms_value(self, *args): return HEPVis_SWIG_Python.p1_duiddd_bin_rms_value(self, *args)
    def add(self, *args): return HEPVis_SWIG_Python.p1_duiddd_add(self, *args)
    def subtract(self, *args): return HEPVis_SWIG_Python.p1_duiddd_subtract(self, *args)
    def gather_bins(self, *args): return HEPVis_SWIG_Python.p1_duiddd_gather_bins(self, *args)
    def cut_v(self): return HEPVis_SWIG_Python.p1_duiddd_cut_v(self)
    def min_v(self): return HEPVis_SWIG_Python.p1_duiddd_min_v(self)
    def max_v(self): return HEPVis_SWIG_Python.p1_duiddd_max_v(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p1_duiddd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_p1_duiddd(*args)
        try: self.this.append(this)
        except: self.this = this
    def configure(self, *args): return HEPVis_SWIG_Python.p1_duiddd_configure(self, *args)
    def bins_sum_vw(self): return HEPVis_SWIG_Python.p1_duiddd_bins_sum_vw(self)
    def bins_sum_v2w(self): return HEPVis_SWIG_Python.p1_duiddd_bins_sum_v2w(self)
    def get_Svw(self): return HEPVis_SWIG_Python.p1_duiddd_get_Svw(self)
    def get_Sv2w(self): return HEPVis_SWIG_Python.p1_duiddd_get_Sv2w(self)
p1_duiddd_swigregister = HEPVis_SWIG_Python.p1_duiddd_swigregister
p1_duiddd_swigregister(p1_duiddd)

class p2_duiddd(b2_duidd):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def bin_error(self, *args): return HEPVis_SWIG_Python.p2_duiddd_bin_error(self, *args)
    def multiply(self, *args): return HEPVis_SWIG_Python.p2_duiddd_multiply(self, *args)
    def scale(self, *args): return HEPVis_SWIG_Python.p2_duiddd_scale(self, *args)
    def bin_Svw(self, *args): return HEPVis_SWIG_Python.p2_duiddd_bin_Svw(self, *args)
    def bin_Sv2w(self, *args): return HEPVis_SWIG_Python.p2_duiddd_bin_Sv2w(self, *args)
    def reset(self): return HEPVis_SWIG_Python.p2_duiddd_reset(self)
    def copy_from_data(self, *args): return HEPVis_SWIG_Python.p2_duiddd_copy_from_data(self, *args)
    def get_histo_data(self): return HEPVis_SWIG_Python.p2_duiddd_get_histo_data(self)
    def fill(self, *args): return HEPVis_SWIG_Python.p2_duiddd_fill(self, *args)
    def bin_rms_value(self, *args): return HEPVis_SWIG_Python.p2_duiddd_bin_rms_value(self, *args)
    def add(self, *args): return HEPVis_SWIG_Python.p2_duiddd_add(self, *args)
    def subtract(self, *args): return HEPVis_SWIG_Python.p2_duiddd_subtract(self, *args)
    def cut_v(self): return HEPVis_SWIG_Python.p2_duiddd_cut_v(self)
    def min_v(self): return HEPVis_SWIG_Python.p2_duiddd_min_v(self)
    def max_v(self): return HEPVis_SWIG_Python.p2_duiddd_max_v(self)
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p2_duiddd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_p2_duiddd(*args)
        try: self.this.append(this)
        except: self.this = this
    def configure(self, *args): return HEPVis_SWIG_Python.p2_duiddd_configure(self, *args)
    def bins_sum_vw(self): return HEPVis_SWIG_Python.p2_duiddd_bins_sum_vw(self)
    def bins_sum_v2w(self): return HEPVis_SWIG_Python.p2_duiddd_bins_sum_v2w(self)
    def get_Svw(self): return HEPVis_SWIG_Python.p2_duiddd_get_Svw(self)
    def get_Sv2w(self): return HEPVis_SWIG_Python.p2_duiddd_get_Sv2w(self)
p2_duiddd_swigregister = HEPVis_SWIG_Python.p2_duiddd_swigregister
p2_duiddd_swigregister(p2_duiddd)


def words(*args):
  return HEPVis_SWIG_Python.words(*args)
words = HEPVis_SWIG_Python.words

def destTo(*args):
  return HEPVis_SWIG_Python.destTo(*args)
destTo = HEPVis_SWIG_Python.destTo
class h1d2plot(SbPlottableBins1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(self): return HEPVis_SWIG_Python.h1d2plot_isValid(self)
    def getName(self): return HEPVis_SWIG_Python.h1d2plot_getName(self)
    def getLegend(self): return HEPVis_SWIG_Python.h1d2plot_getLegend(self)
    def cast(self, *args): return HEPVis_SWIG_Python.h1d2plot_cast(self, *args)
    def getDimension(self): return HEPVis_SWIG_Python.h1d2plot_getDimension(self)
    def getLabel(self): return HEPVis_SWIG_Python.h1d2plot_getLabel(self)
    def getBinsSumOfWeightsRange(self, *args): return HEPVis_SWIG_Python.h1d2plot_getBinsSumOfWeightsRange(self, *args)
    def getAxisNumberOfBins(self): return HEPVis_SWIG_Python.h1d2plot_getAxisNumberOfBins(self)
    def getAxisMinimum(self): return HEPVis_SWIG_Python.h1d2plot_getAxisMinimum(self)
    def getAxisMaximum(self): return HEPVis_SWIG_Python.h1d2plot_getAxisMaximum(self)
    def getBinLowerEdge(self, *args): return HEPVis_SWIG_Python.h1d2plot_getBinLowerEdge(self, *args)
    def getBinUpperEdge(self, *args): return HEPVis_SWIG_Python.h1d2plot_getBinUpperEdge(self, *args)
    def getBinNumberOfEntries(self, *args): return HEPVis_SWIG_Python.h1d2plot_getBinNumberOfEntries(self, *args)
    def getBinSumOfWeights(self, *args): return HEPVis_SWIG_Python.h1d2plot_getBinSumOfWeights(self, *args)
    def getBinBar(self, *args): return HEPVis_SWIG_Python.h1d2plot_getBinBar(self, *args)
    def getInfos(self, *args): return HEPVis_SWIG_Python.h1d2plot_getInfos(self, *args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_h1d2plot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h1d2plot
    __del__ = lambda self : None;
h1d2plot_swigregister = HEPVis_SWIG_Python.h1d2plot_swigregister
h1d2plot_swigregister(h1d2plot)

class h2d2plot(SbPlottableBins2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(self): return HEPVis_SWIG_Python.h2d2plot_isValid(self)
    def getName(self): return HEPVis_SWIG_Python.h2d2plot_getName(self)
    def getLegend(self): return HEPVis_SWIG_Python.h2d2plot_getLegend(self)
    def cast(self, *args): return HEPVis_SWIG_Python.h2d2plot_cast(self, *args)
    def getDimension(self): return HEPVis_SWIG_Python.h2d2plot_getDimension(self)
    def getLabel(self): return HEPVis_SWIG_Python.h2d2plot_getLabel(self)
    def getBinsSumOfWeightsRange(self, *args): return HEPVis_SWIG_Python.h2d2plot_getBinsSumOfWeightsRange(self, *args)
    def getAxisNumberOfBinsX(self): return HEPVis_SWIG_Python.h2d2plot_getAxisNumberOfBinsX(self)
    def getAxisNumberOfBinsY(self): return HEPVis_SWIG_Python.h2d2plot_getAxisNumberOfBinsY(self)
    def getAxisMinimumX(self): return HEPVis_SWIG_Python.h2d2plot_getAxisMinimumX(self)
    def getAxisMaximumX(self): return HEPVis_SWIG_Python.h2d2plot_getAxisMaximumX(self)
    def getAxisMinimumY(self): return HEPVis_SWIG_Python.h2d2plot_getAxisMinimumY(self)
    def getAxisMaximumY(self): return HEPVis_SWIG_Python.h2d2plot_getAxisMaximumY(self)
    def getBinLowerEdgeX(self, *args): return HEPVis_SWIG_Python.h2d2plot_getBinLowerEdgeX(self, *args)
    def getBinUpperEdgeX(self, *args): return HEPVis_SWIG_Python.h2d2plot_getBinUpperEdgeX(self, *args)
    def getBinLowerEdgeY(self, *args): return HEPVis_SWIG_Python.h2d2plot_getBinLowerEdgeY(self, *args)
    def getBinUpperEdgeY(self, *args): return HEPVis_SWIG_Python.h2d2plot_getBinUpperEdgeY(self, *args)
    def getBinNumberOfEntries(self, *args): return HEPVis_SWIG_Python.h2d2plot_getBinNumberOfEntries(self, *args)
    def getBinSumOfWeights(self, *args): return HEPVis_SWIG_Python.h2d2plot_getBinSumOfWeights(self, *args)
    def getBinBar(self, *args): return HEPVis_SWIG_Python.h2d2plot_getBinBar(self, *args)
    def getInfos(self, *args): return HEPVis_SWIG_Python.h2d2plot_getInfos(self, *args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_h2d2plot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h2d2plot
    __del__ = lambda self : None;
h2d2plot_swigregister = HEPVis_SWIG_Python.h2d2plot_swigregister
h2d2plot_swigregister(h2d2plot)

class p1d2plot(SbPlottableBins1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(self): return HEPVis_SWIG_Python.p1d2plot_isValid(self)
    def getName(self): return HEPVis_SWIG_Python.p1d2plot_getName(self)
    def getLegend(self): return HEPVis_SWIG_Python.p1d2plot_getLegend(self)
    def cast(self, *args): return HEPVis_SWIG_Python.p1d2plot_cast(self, *args)
    def getDimension(self): return HEPVis_SWIG_Python.p1d2plot_getDimension(self)
    def getLabel(self): return HEPVis_SWIG_Python.p1d2plot_getLabel(self)
    def getBinsSumOfWeightsRange(self, *args): return HEPVis_SWIG_Python.p1d2plot_getBinsSumOfWeightsRange(self, *args)
    def getAxisNumberOfBins(self): return HEPVis_SWIG_Python.p1d2plot_getAxisNumberOfBins(self)
    def getAxisMinimum(self): return HEPVis_SWIG_Python.p1d2plot_getAxisMinimum(self)
    def getAxisMaximum(self): return HEPVis_SWIG_Python.p1d2plot_getAxisMaximum(self)
    def getBinLowerEdge(self, *args): return HEPVis_SWIG_Python.p1d2plot_getBinLowerEdge(self, *args)
    def getBinUpperEdge(self, *args): return HEPVis_SWIG_Python.p1d2plot_getBinUpperEdge(self, *args)
    def getBinNumberOfEntries(self, *args): return HEPVis_SWIG_Python.p1d2plot_getBinNumberOfEntries(self, *args)
    def getBinSumOfWeights(self, *args): return HEPVis_SWIG_Python.p1d2plot_getBinSumOfWeights(self, *args)
    def getBinBar(self, *args): return HEPVis_SWIG_Python.p1d2plot_getBinBar(self, *args)
    def getInfos(self, *args): return HEPVis_SWIG_Python.p1d2plot_getInfos(self, *args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_p1d2plot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p1d2plot
    __del__ = lambda self : None;
p1d2plot_swigregister = HEPVis_SWIG_Python.p1d2plot_swigregister
p1d2plot_swigregister(p1d2plot)

class p2d2plot(SbPlottableBins2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def isValid(self): return HEPVis_SWIG_Python.p2d2plot_isValid(self)
    def getName(self): return HEPVis_SWIG_Python.p2d2plot_getName(self)
    def getLegend(self): return HEPVis_SWIG_Python.p2d2plot_getLegend(self)
    def cast(self, *args): return HEPVis_SWIG_Python.p2d2plot_cast(self, *args)
    def getDimension(self): return HEPVis_SWIG_Python.p2d2plot_getDimension(self)
    def getLabel(self): return HEPVis_SWIG_Python.p2d2plot_getLabel(self)
    def getBinsSumOfWeightsRange(self, *args): return HEPVis_SWIG_Python.p2d2plot_getBinsSumOfWeightsRange(self, *args)
    def getAxisNumberOfBinsX(self): return HEPVis_SWIG_Python.p2d2plot_getAxisNumberOfBinsX(self)
    def getAxisNumberOfBinsY(self): return HEPVis_SWIG_Python.p2d2plot_getAxisNumberOfBinsY(self)
    def getAxisMinimumX(self): return HEPVis_SWIG_Python.p2d2plot_getAxisMinimumX(self)
    def getAxisMaximumX(self): return HEPVis_SWIG_Python.p2d2plot_getAxisMaximumX(self)
    def getAxisMinimumY(self): return HEPVis_SWIG_Python.p2d2plot_getAxisMinimumY(self)
    def getAxisMaximumY(self): return HEPVis_SWIG_Python.p2d2plot_getAxisMaximumY(self)
    def getBinLowerEdgeX(self, *args): return HEPVis_SWIG_Python.p2d2plot_getBinLowerEdgeX(self, *args)
    def getBinUpperEdgeX(self, *args): return HEPVis_SWIG_Python.p2d2plot_getBinUpperEdgeX(self, *args)
    def getBinLowerEdgeY(self, *args): return HEPVis_SWIG_Python.p2d2plot_getBinLowerEdgeY(self, *args)
    def getBinUpperEdgeY(self, *args): return HEPVis_SWIG_Python.p2d2plot_getBinUpperEdgeY(self, *args)
    def getBinNumberOfEntries(self, *args): return HEPVis_SWIG_Python.p2d2plot_getBinNumberOfEntries(self, *args)
    def getBinSumOfWeights(self, *args): return HEPVis_SWIG_Python.p2d2plot_getBinSumOfWeights(self, *args)
    def getBinBar(self, *args): return HEPVis_SWIG_Python.p2d2plot_getBinBar(self, *args)
    def getInfos(self, *args): return HEPVis_SWIG_Python.p2d2plot_getInfos(self, *args)
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_p2d2plot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_p2d2plot
    __del__ = lambda self : None;
p2d2plot_swigregister = HEPVis_SWIG_Python.p2d2plot_swigregister
p2d2plot_swigregister(p2d2plot)

class h1d2plot_cp(h1d2plot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = HEPVis_SWIG_Python.new_h1d2plot_cp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = HEPVis_SWIG_Python.delete_h1d2plot_cp
    __del__ = lambda self : None;
h1d2plot_cp_swigregister = HEPVis_SWIG_Python.h1d2plot_cp_swigregister
h1d2plot_cp_swigregister(h1d2plot_cp)


def cast_SoRegion(*args):
  return HEPVis_SWIG_Python.cast_SoRegion(*args)
cast_SoRegion = HEPVis_SWIG_Python.cast_SoRegion

def cast_SoPage(*args):
  return HEPVis_SWIG_Python.cast_SoPage(*args)
cast_SoPage = HEPVis_SWIG_Python.cast_SoPage
import CoinPython as Inventor
for x in locals().values():
  if isinstance(x, type) and issubclass(x, Inventor.SoFieldContainer):
    for name, thing in x.__dict__.items():
      if isinstance(thing, property):
        delattr(x, name)



