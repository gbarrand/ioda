// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_waxml_file
#define inlib_waxml_file

// for python.

#include "begend"
#include "histos"

#include <fstream>

namespace inlib {
namespace waxml {

class file {
public:
  file():m_writer(0){}
  virtual ~file(){close();}
protected:
  file(const file&):m_writer(0){}
  file& operator=(const file&){return *this;}
public:
  bool open(const std::string& a_file) {
    if(m_writer) return false; //already opened.

    //exlib::ogzip fout(fullName,out());
    //if(!fout.opened()) return false;
    //file_write(fout);
    //fout.close();

    m_writer = new std::ofstream(a_file.c_str());
    if(m_writer->fail()) {
      delete m_writer;
      m_writer = 0;
      return false;
    }

    waxml::begin(*m_writer);
    
    return true;
  }
  bool close(){
    if(!m_writer) return false;
    waxml::end(*m_writer);
    m_writer->close();
    delete m_writer;
    m_writer = 0;
    return true;
  }
  std::ofstream* writer() {return m_writer;}
public:
  bool write(const histo::h1d& a_o,
             const std::string& a_path,
             const std::string& a_name){
    if(!m_writer) return false;
    return waxml::write(*m_writer,a_o,a_path,a_name);    
  }
  bool write(const histo::h2d& a_o,
             const std::string& a_path,
             const std::string& a_name){
    if(!m_writer) return false;
    return waxml::write(*m_writer,a_o,a_path,a_name);    
  }
  bool write(const histo::h3d& a_o,
             const std::string& a_path,
             const std::string& a_name){
    if(!m_writer) return false;
    return waxml::write(*m_writer,a_o,a_path,a_name);    
  }
  bool write(const histo::p1d& a_o,
             const std::string& a_path,
             const std::string& a_name){
    if(!m_writer) return false;
    return waxml::write(*m_writer,a_o,a_path,a_name);    
  }
  bool write(const histo::p2d& a_o,
             const std::string& a_path,
             const std::string& a_name){
    if(!m_writer) return false;
    return waxml::write(*m_writer,a_o,a_path,a_name);    
  }
protected:
  std::ofstream* m_writer;
};

}}

#endif
