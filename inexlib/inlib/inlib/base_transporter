// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_base_transporter
#define inlib_base_transporter

/*
  Basic equations are :
    a
  du      a          b  c
  --  + C   (x(s))  u  u   = 0
  ds     b c 

    a
  dx     a
  --  = u (x(s))
  ds 

  If space-time is metric, on the curve we must have :

             a   b
           dx  dx
    g  (x) --  --   = +-1
     ab    ds  ds

  
  Tracking is done according to the algorithm :

    given x0, u0;
    un1 = un - step * christoffeln(xn) * un * un 
    xn1 = xn + step * un
*/

#include "itransporter"
#include "cvec"

#include "mnmx"

#ifdef INLIB_MEM
#include "mem"
#endif

#include <ostream>

namespace inlib {

template <class REAL> 
inline void zero_christo(REAL a_to[4][4][4]) {
  unsigned int a,b,c;
  for(a=0;a<4;a++) {
    for(b=0;b<4;b++) {
      for(c=0;c<4;c++) a_to[a][b][c] = REAL(0);
    }
  }
}

template <class REAL>
inline void set_christo(REAL a_to[4][4][4],unsigned int a_a,unsigned int a_b,unsigned int a_c,const REAL& a_v) {
  a_to[a_a][a_b][a_c] = a_v;
}

template <class REAL>
inline void set_mtx(REAL a_to[4][4],unsigned int a_a,unsigned int a_b,const REAL& a_v) {
  a_to[a_a][a_b] = a_v;
}

template <class REAL>
class base_transporter : public virtual itransporter<REAL> {
  typedef itransporter<REAL> parent;
private:
  typedef typename parent::X X;
  typedef typename parent::U U;
  typedef REAL G[4][4];
  typedef REAL CHR[4][4][4];
protected:  
  typedef REAL(*fabs_func)(const REAL&);
  typedef REAL(*sqrt_func)(const REAL&);
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::base_transporter");
    return s_v;
  }
public:
  virtual bool set_metric(const X&,G&) const = 0;
  virtual bool set_christoffel(const X&,CHR&) const = 0;
  // for EM :
  virtual bool set_extra_acceleration(const X&,const U&,U& a_a) const {
    zero_vec(a_a);
    return true;
  }
public: //itransporter.
  virtual bool initialize(const X& a_x,const U& a_u) {
    cp_vec(m_x,a_x);
    cp_vec(m_u,a_u);
    m_s = REAL(0);
    m_step = REAL(0);
    m_mx_du2 = REAL(0);
    m_count = 0;

    // normalize u :
   {if(!set_metric(m_x,m_g)) return false;
    l2(m_g,m_u,m_l2);
    if(m_l2<=REAL(0)) {
      m_out << "base_transporter::initialize :"
            << " given u is space-like (l2(u)=" << m_l2 << ")."
            << std::endl;
      return false;
    }
    mul_vec(m_u,REAL(1)/m_sqrt(m_l2));}

    zero_christo(m_christo); //in case working with a constant metric.

    if(m_verbose) {
      out_vec(m_out,m_x,"x beg :");
      out_vec(m_out,m_u,"u beg :");
    }

    return true;
  }
      
  virtual bool do_step() {
    if(!set_metric(m_x,m_g)) {
      m_out << "base_transporter::do_step :"
            << " set_metric() failed."
            << std::endl;
      reset_step();
      return false;
    }
    
    if(!set_christoffel(m_x,m_christo)) {
      m_out << "base_transporter::do_step :"
            << " set_christoffel() failed."
            << std::endl;
      reset_step();
      return false;
    }

    return do_step_constant_metric();
  }

  virtual void get_step(X& a_x,U& a_u,
                        REAL& a_s,REAL& a_step,REAL& a_mx_du2,
                        uint64& a_count) {
    cp_vec(a_x,m_x);
    cp_vec(a_u,m_u);
    a_s = m_s;
    a_step = m_step;
    a_mx_du2 = m_mx_du2;
    a_count = m_count;
  }

public:
  base_transporter(std::ostream& a_out,sqrt_func a_sqrt,fabs_func a_fabs,bool a_verbose)
  :parent()
  ,m_out(a_out)
  ,m_verbose(a_verbose)
  ,m_sqrt(a_sqrt)
  ,m_fabs(a_fabs)
  ,m_u2_tolerance(REAL(1e-4))
  ,m_step_factor(REAL(1e-7))
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~base_transporter(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  base_transporter(const base_transporter& a_from)
  :parent(a_from)
  ,m_out(a_from.m_out)
  ,m_verbose(a_from.m_verbose)
  ,m_sqrt(a_from.m_sqrt)
  ,m_fabs(a_from.m_fabs)
  ,m_u2_tolerance(a_from.m_u2_tolerance)
  ,m_step_factor(a_from.m_step_factor)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  base_transporter& operator=(const base_transporter& a_from) {
    m_verbose = a_from.m_verbose;
    m_sqrt = a_from.m_sqrt;
    m_fabs = a_from.m_fabs;
    m_u2_tolerance = a_from.m_u2_tolerance;
    m_step_factor = a_from.m_step_factor;
    return *this;
  }
public:
  bool do_step_constant_metric() {
    if(!set_extra_acceleration(m_x,m_u,m_extra_acc)) {
      m_out << "base_transporter::do_step_constant_metric :"
            << " can't get extra acceleration."
            << std::endl;
      reset_step();
      return false;
    }

    // check norme of u here and not after new step
    // to avoid to refetch the metric (at new x).
    // The norme of u must be a 1 :
  //if(10000*uint64(m_count/10000)==m_count)
   {l2(m_g,m_u,m_l2);
    m_du2 = m_fabs(REAL(1)-m_l2);
    m_mx_du2 = mx<REAL>(m_mx_du2,m_du2);
    if(m_du2>=m_u2_tolerance) {
      m_out << "base_transporter::do_step_constant_metric :"
            << " l2(u) too far from 1."
            << " l2(u) = " << m_l2
            << ". count = " << m_count
//            << ". rad = " << rad
//            << ". step = " << step
            << std::endl;
      out_vec(m_out,m_x,"x :");
      reset_step();
      return false;
    }}
    
    christo_u_u(m_christo,m_u,m_acc);
    add_vec(m_acc,m_extra_acc);

    l2(m_g,m_acc,m_l2);
    REAL rad = REAL(1)/m_sqrt(m_fabs(m_l2));
    REAL step = rad*m_step_factor;      

    //x = x + step*u;
    cp_vec(m_tmp,m_u);
    mul_vec(m_tmp,step);
    add_vec(m_x,m_tmp);

    //u = u + step*acc;
    mul_vec(m_acc,step);      
    add_vec(m_u,m_acc);

    m_s += step;    

    if(m_verbose) {
      m_count++;
      if(10000*uint64(m_count/10000)==m_count) {
        m_out << "-----------------" << std::endl;
        out_vec(m_out,m_x,"x :");
        out_vec(m_out,m_u,"u :");
        m_out << "count = " << m_count
              << ", rad = " << rad
              << ", step = " << step
              << ", s = " << m_s
              << std::endl;
      }
    }

    return true;
  }

  bool process(const X& a_x,const U& a_u,uint64 a_max) {
    if(!initialize(a_x,a_u)) return false;

    for(uint64 count=0;count<a_max;count++) {
      if(!do_step()) return false;
    }

    if(m_verbose) {
      X x;
      U u;
      REAL s;
      REAL step;
      REAL du2;
      uint64 count;
      get_step(x,u,s,step,du2,count);

      m_out << "end s : " << s << std::endl;
      m_out << "du2 : " << du2 << std::endl;
      out_vec(m_out,x,"end x :");
      out_vec(m_out,u,"end u :");
    }

    return true;
  }
protected:
  static void l2(const G& a_g,const U& a_u,REAL& a_l2) {
    a_l2 = REAL(0);
    REAL _ua;
    unsigned int a,b;
    for(a=0;a<4;a++) {
      _ua = a_u[a];
      for(b=0;b<4;b++) {
        a_l2 += a_g[a][b]*_ua*a_u[b];
      }
    }
  }
  static void christo_u_u(const CHR& a_chr,const U& a_u,U& a_acc) {
    REAL value,_ub;
    unsigned int a,b,c;
    for(a=0;a<4;a++) {
      value = REAL(0);
      for(b=0;b<4;b++) {
        _ub = a_u[b];
        for(c=0;c<4;c++) value += a_chr[b][a][c]*_ub*a_u[c];
      }
      a_acc[a] = -REAL(1)*value; //do the -1 here.
    }
  }
protected:
  void reset_step() {
    zero_vec(m_x);
    zero_vec(m_u);
    m_s = REAL(0);
    m_step = REAL(0);
    m_count = 0;
  }    
protected:
  std::ostream& m_out;
  bool m_verbose;
  sqrt_func m_sqrt;
  fabs_func m_fabs;
public:
  REAL m_u2_tolerance;
  REAL m_step_factor;
protected: //step :
  X m_x;
  U m_u;
  REAL m_s;
  REAL m_step;
  uint64 m_count;
  REAL m_mx_du2;
private:
  G m_g;
  CHR m_christo;
  U m_acc;
  U m_extra_acc;
  X m_tmp;
  REAL m_l2;
  REAL m_du2;
};

}

#endif
