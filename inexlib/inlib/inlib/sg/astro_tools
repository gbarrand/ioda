// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_astro_tools
#define inlib_sg_astro_tools

#include "normal"
#include "event_dispatcher"
#include "base_camera"
#include "holder"
#include "strings"
#include "cfitsio_stars"

#include "../picmap"

namespace inlib {
namespace sg {

inline separator* create_sg_cfitsio_flat(
 const char* a_buffer
,unsigned int a_width,unsigned int a_height,unsigned int a_sz,int a_bitpix
,const SOPI::cmap& a_cmap
,base_camera& a_camera
,bool a_camera_in_front = false
) {

  float height = 1;
  float width = height*float(a_width)/float(a_height);
  float h2 = height*0.5f;
  float w2 = width*0.5f;
  std::vector<vec3f> vcs;
  vcs.push_back(vec3f(-w2,-h2,0));
  vcs.push_back(vec3f( w2,-h2,0));
  vcs.push_back(vec3f( w2, h2,0));
  vcs.push_back(vec3f(-w2, h2,0));

  //::printf("debug : center : %g %g %g\n",center.x(),center.y(),center.z());

  separator* sep = new separator;

  matrix* tsf = new matrix;
  sep->add(tsf);

  rgba* mat = new rgba;
  mat->color = colorf_white();
  sep->add(mat);

  sep->add(new normal);
  sep->add(new event_dispatcher()); //for image_manip.

  // We can't position stars, then we do not use a cfitsio_stars.
  //cfitsio_stars* img = new cfitsio_stars(a_wget,a_catalog);

  cfitsio* img = new cfitsio;
  img->buffer.setValues(0,a_sz,a_buffer);
  img->columns = a_width;
  img->rows = a_height;
  img->bitpix = cfitsio_bitpix_code(a_bitpix);
  img->back_color = colorf_lightgrey();
  img->expand = true;
  img->corners.set_values(vcs);
  img->auto_lut = auto_lut_min_max;
  img->colors.clear();
 {for(unsigned int index=0;index<a_cmap.size();index++) {
    const SOPI::color& _col = a_cmap.get_color(index);
    img->colors.add(colorf(_col.r(),_col.g(),_col.b()));
  }}

  // stars :
  ////img->show_stars = true;
  //img->radecs.setValues(0,8,a_radecs);

  sep->add(img);

  if(a_camera_in_front) {
    a_camera.orientation = rotf(vec3f(0,0,1),0);
    a_camera.position = vec3f(0,0,1);
    a_camera.focal = 1;
    a_camera.znear = 0.1f;
    a_camera.zfar = 100.0f;
  }

  return sep;
}

inline separator* create_sg_cfitsio_sphere(
 const char* a_buffer
,unsigned int a_width,unsigned int a_height,size_t a_sz,int a_bitpix
,const SOPI::cmap& a_cmap
,double a_sky_radius,double a_stars_radius
,double a_ra,double a_dec //requested
,double a_radecs[8]
,const wget& a_simbad_wget
,bool a_stars_local
,const wget& a_stars_wget,const std::string& a_stars_host,unsigned int a_stars_port
,const std::string& a_stars_dir
,SDSS::catalog& a_stars_catalog
,base_camera& a_camera
,base_freetype& a_ttf //template ttf node.
) {

  std::vector<vec3f> vcs;
  vec3f center;
  radecs_center(a_radecs,a_sky_radius,vcs,center);

  //::printf("debug : center : %g %g %g\n",center.x(),center.y(),center.z());

  separator* sep = new separator;

  matrix* tsf = new matrix;
  tsf->mul_translate(center.x(),center.y(),center.z());
  sep->add(tsf);

  rgba* mat = new rgba;
  mat->color = colorf_white();
  sep->add(mat);

  sep->add(new normal);
  sep->add(new event_dispatcher()); //for image_manip.

//tft->font = font_arialbd_ttf();
  a_ttf.font = font_helvetica_ttf();

  cfitsio_stars* img = new cfitsio_stars
    (a_ttf,a_simbad_wget,a_stars_local,a_stars_wget,a_stars_host,a_stars_port,a_stars_dir,a_stars_catalog);
  img->sky_radius = a_sky_radius;
  img->stars_radius = a_stars_radius;
  img->buffer.setValues(0,a_sz,a_buffer);
  img->columns = a_width;
  img->rows = a_height;
  img->bitpix = cfitsio_bitpix_code(a_bitpix);
  img->back_color = colorf_lightgrey();
  img->expand = true;
  img->corners.set_values(vcs);
  img->auto_lut = auto_lut_min_max;
  img->colors.clear();
 {for(unsigned int index=0;index<a_cmap.size();index++) {
    const SOPI::color& _col = a_cmap.get_color(index);
    img->colors.add(colorf(_col.r(),_col.g(),_col.b()));
  }}
  // stars :
  //img->show_stars = true;
  img->radecs.setValues(0,8,a_radecs);

  sep->add(img);

  bool camera_in_front = true;
  if(camera_in_front) a_camera.astro_orientation(float(a_ra),float(a_dec));

  return sep;
}

template <class STAR>
inline separator* create_sg_stars(const std::vector<STAR>& a_stars,double a_sky_radius,const colorf& a_color) {
  // same positioning logic as in exlib/sg/SDSS_image.

  separator* stars = new separator;

  double d2r = deg2rad();
  double _ra,_dec,x,y,z;
  float circle_sz = 0.05f;
  float ring_size_factor = 1.3f;

  vec3f vz(0,0,1);

  inlib_typename_vforcit(STAR,a_stars,it) {
    double ra,dec;
    (*it).radec(ra,dec);
    //::printf("debug : star : ra %g dec %g\n",ra,dec);

    separator* sep = new separator;
    stars->add(sep);

    _ra  = ra*d2r;
    _dec = dec*d2r;

    radec2xyz(_ra,_dec,a_sky_radius,x,y,z);

    matrix* tsf = new matrix();
    tsf->set_translate(x,y,z);
    tsf->mul_rotate(vz,vec3f(-x,-y,-z));
    sep->add(tsf);

    rgba* mat = new rgba();
    mat->color = a_color;
    sep->add(mat);

/*
    float rmin = circle_sz;
    float rmax = circle_sz*ring_size_factor;
    float dz = 0.1f;
   {sg::polyhedron* node = new sg::polyhedron;
    node->ph = hep::polyhedron_tubs(rmin,rmax,dz,0,two_pi());
    sep->add(node);}
*/

   {ring* node = new ring;
    node->rmin = circle_sz;
    node->rmax = circle_sz*ring_size_factor;
    sep->add(node);}
  }

  return stars;
}

}}

#endif
