// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_arrow
#define inlib_sg_arrow

#include "separator"
#include "noderef"
#include "rgba"
#include "matrix"
//#include "tube"
#include "cone_hat"
#include "nodekit"

namespace inlib {
namespace sg {

class arrow : public node {
  INLIB_NODE(arrow,inlib::sg::arrow,node)
public:
  sf<float> length_base;
  sf<float> length_head;
  sf<float> radius;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::arrow)
    static const desc_fields s_v(parent::node_desc_fields(),3, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(length_base),
      INLIB_ARG_FIELD_DESC(length_head),
      INLIB_ARG_FIELD_DESC(radius)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&length_base);
    add_field(&length_head);
    add_field(&radius);
  }

public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_group.render(a_action);
  }
  virtual void pick(pick_action& a_action) { 
    if(touched()) {
      update_sg();
      reset_touched();
    }
    nodekit_pick(a_action,m_group,this);
  }
  virtual void search(search_action& a_action) { 
    node::search(a_action);
    if(a_action.done()) return;
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_group.search(a_action);
  }
  virtual void bbox(bbox_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_group.bbox(a_action);
  }

  virtual bool write(write_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    //if(!write_fields(a_action)) return false;
    return m_group.write(a_action);
  }
public:
  arrow()
  :parent()
  ,length_base(0.9f)
  ,length_head(0.1f)
  ,radius(0.05f)
  {
    add_fields();
    init_sg(); // skeleton of scene graph.
  }
  virtual ~arrow(){}
public:
  arrow(const arrow& a_from)
  :parent(a_from)
  ,length_base(a_from.length_base)
  ,length_head(a_from.length_head)
  ,radius(a_from.radius)
  {
    add_fields();
    init_sg(); // skeleton of scene graph.
  }
  arrow& operator=(const arrow& a_from){
    parent::operator=(a_from);
    if(&a_from==this) return *this;
    length_base = a_from.length_base;
    length_head = a_from.length_head;
    radius = a_from.radius;
    return *this;
  }
public:

protected:
  void init_sg(){
    m_group.add(new noderef(m_sep_body));
    m_sep_body.add(new noderef(m_body_matrix));
    
    m_sep_body.add(new noderef(m_body));

    m_group.add(new noderef(m_sep_hat));
    m_sep_hat.add(new noderef(m_hat_matrix));

    m_sep_hat.add(new noderef(m_hat));

    update_sg();
  }
  
  void update_sg(){
    m_body_matrix.set_translate(0,0,length_base.value()*0.5f); //first
    m_body_matrix.mul_rotate(0,1,0,fpi());
    m_body.height = length_base.value();
    m_body.rmin = 0;
    m_body.rmax = radius;
    
    m_hat_matrix.set_translate(0,0,length_base.value()+length_head*0.5f);
    m_hat.height = length_head;
    m_hat.rmin = 0;
    m_hat.rmax = 2*radius;  
  }

protected:
  group m_group;

  separator m_sep_body;
  matrix m_body_matrix;
  //tube m_body;
  cone_hat m_body;

  separator m_sep_hat;
  matrix m_hat_matrix;
  cone_hat m_hat;
};

}}

#endif
