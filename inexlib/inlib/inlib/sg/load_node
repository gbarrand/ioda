// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_load_node
#define inlib_sg_load_node

#include "strings"
#include "separator"
#include "base_camera"
#include "matrix"
#include "search"

#include "../args"
#include "../wall/strings"

#include "view_evd"

namespace inlib {

inline void load_node(sg::gui_viewer& a_gv,sg::node* a_node,const args& a_args) {
  sg::view_evd* _evd = cast_view_evd(a_gv);
  if(!_evd) {delete a_node;return;}

  bool enable_anim = false;
 {sg::search_action action(a_gv.out());
  action.set_class(sg::base_anim::s_class());
  //look all children in _switch ?
  a_node->search(action);
  enable_anim = (action.objs().size()?true:false);}

  std::string placement;
  a_args.find(wall::s_placement(),placement);

  if(placement.empty()) {

    sg::base_camera* cam_in_file = 0;

   {sg::search_action action(a_gv.out());
    action.set_class(sg::base_camera::s_class());
    a_node->search(action);
    const std::vector<void*>& objs = action.objs();
    std::vector<void*>::const_iterator it;
    for(it=objs.begin();it!=objs.end();++it) {
      cam_in_file = (sg::base_camera*)(*it);
      break;
    }}      
  
    if(!_evd->is_evd()) _evd->create_sg_evd();

    if(cam_in_file) {
      // have to remove cam_in_file from within a_node :
      sg::group* grp = sg::find_container<sg::group>(a_gv.out(),*a_node,*cam_in_file,a_gv.verbose());
      if(!grp) {
        a_gv.map_warn("search of camera parent failed.");
        return;     
      }
      if(!grp->remove(cam_in_file)) {
        a_gv.map_warn("bad camera parent failed.");
        return;     
      }

      if(a_gv.is_wall_screen_app()) {
        sg::base_camera* camera = a_gv.create_camera(*cam_in_file);
        if(camera) _evd->replace_camera(camera);
        delete cam_in_file;
      } else {
        _evd->replace_camera(cam_in_file);
      }
    }

    sg::separator& dsep = _evd->detector_sg();

    //if(a_args.is_arg(sg::s_clear_scene())) dsep.clear();

    //bool was_empty = dsep.size()?false:true;

    bool movable;
    if(a_args.find(sg::s_movable(),movable,false)&&movable) { //for pmx.scenarios.
      sg::separator* sep = new sg::separator;
      sep->add(new sg::matrix);
      sep->add(a_node);
      dsep.add(sep);
    } else {
      dsep.add(a_node);
    }
  
    //if(!a_args.is_arg(sg::s_no_hide_menu())) a_gv.hide_main_menu();
    a_gv.hide_main_menu();

    //if(a_args.is_arg(sg::s_adapt_camera_sg_was_empty()) && was_empty) a_gv.adapt_camera(dsep);

  } else {
    // case of wall : 
    // could be a sg (det,event,plots) coming from exlib/geant4/session
    // or plots from ioda.
  
    if(!_evd->is_evd()) _evd->create_sg_evd();
  
    //must reflect the exlib/geant/session logic.
    if(placement==wall::s_static()) {
      float radius;
      if(a_args.find(wall::s_radius(),radius)){
        sg::base_camera* camera = a_gv.create_3D_camera(radius);
        _evd->replace_camera(camera);
      }

      sg::separator& dsep = _evd->static_sg();
      //if(a_args.is_arg(sg::s_clear_scene())) dsep.clear();

      dsep.add(a_node);

      a_gv.hide_main_menu();

    } else if(placement==wall::s_dynamic()) {
      float radius;
      if(a_args.find(wall::s_radius(),radius)){
        sg::base_camera* camera = a_gv.create_3D_camera(radius);
        _evd->replace_camera(camera);
      }

      sg::separator& sep = _evd->dynamic_sg();
      sep.clear();
      sep.add(a_node);
      //don't hide main menu to be able
      //to get menu when receiving events.

    } else if(placement==wall::s_screen()) {

/* do not touch the screen_sg camera :
      float hcam;
      //if(a_args.find(wall::s_height(),hcam)){
      a_args.find(wall::s_height(),hcam,a_gv.gui_camera_height());
      sg::base_camera* camera = a_gv.create_2D_camera(hcam);
      _evd->replace_screen_camera(camera);
*/
      float scale;
      a_args.find<float>(wall::s_scale(),scale,1);

      unsigned int col = 0;
      a_args.find(sg::s_col(),col);
      unsigned int row = 0;
      a_args.find(sg::s_row(),row);
      std::string what;
      a_args.find(wall::s_clear(),what,"");

      sg::separator& screen_sep = _evd->screen_sg();
      if(what==wall::s_screen()) screen_sep.clear();

      sg::separator* sep = new sg::separator;
      screen_sep.add(sep);

      sg::matrix* mtx = new sg::matrix();
      sep->add(mtx);
      _evd->set_col_row_screen_matrix(col,row,*mtx);
      mtx->mul_scale(scale,scale,scale); //applied first.

      sep->add(a_node);

      //wall : in case of "wall cam anim + periodic send plot",
      //       the below line induces a "cam fight" and the
      //       plot starts also to move.
      //_evd->set_net_sg(); //it changes the current camera.

      a_gv.hide_main_menu();

    } else {
      a_gv.out() << "inlib::opener::load_node :"
                 << " unknown placement " << sout(placement) << "."
                 << std::endl;
      delete a_node;
      //a_node = 0;
      enable_anim = false;
    }
  }

  if(enable_anim) a_gv.enable_anim();


}

}

//inlib_build_use kernel

#endif
