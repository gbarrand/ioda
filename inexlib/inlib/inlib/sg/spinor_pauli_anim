// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_spinor_pauli_anim
#define inlib_sg_spinor_pauli_anim

#include "base_anim"
#include "spinor_pauli"

#include "sf_vec3f"

namespace inlib {
namespace sg {

class spinor_pauli_anim : public base_anim, public spinor_pauli {
  INLIB_NODE_NO_CAST(spinor_pauli_anim,inlib::sg::spinor_pauli_anim,spinor_pauli)
public:
  virtual void* cast(const std::string& a_class) const {
    {if(void* p = cmp_cast<spinor_pauli_anim>(this,a_class)) return p;}
    {if(void* p = base_anim::cast(a_class)) return p;}
    return parent::cast(a_class);
  }
public:
  virtual bool action(std::ostream& /*a_out*/,const atime& a_now) {
    vec3f _axis(axis.value());
    if(!_axis.normalize()) return true;
    //::printf("debug : spinor_pauli_anim::action : axis : %g %g %g\n",axis.value().x(),axis.value().y(),axis.value().z());
    //a_out << "debug : spinor_pauli_anim::action : axis : "
    //      << axis.value().x() << ", " << axis.value().y() << ", " << axis.value().z() << std::endl;
    float t = float(atime::diff(a_now,m_start).value());
    float tp = float(atime::diff(m_prev,m_start).value());
    float angle = (t-tp)*omega.value();
    //float angle = 0.01f*omega.value();
    //m_angle += angle;
    //::printf("debug : angle %g\n",m_angle*frad2deg());
    float _phi_x = parent::phi_x.value();
    float _phi_y = parent::phi_y.value();
    float _xi_x = parent::xi_x.value();
    float _xi_y = parent::xi_y.value();
    if(rotation.value()) {
      rotate(_axis.x(),_axis.y(),_axis.z(),angle,_phi_x,_phi_y,_xi_x,_xi_y);
    } else {
      boost(_axis.x(),_axis.y(),_axis.z(),angle,_phi_x,_phi_y,_xi_x,_xi_y);
    }
  //::printf("debug : %g : %g %g %g %g\n",angle,_phi_x,_phi_y,_xi_x,_xi_y);
    parent::phi_x = _phi_x;
    parent::phi_y = _phi_y;
    parent::xi_x = _xi_x;
    parent::xi_y = _xi_y;
    m_vec_rot_matrix.mul_rotate(_axis.x(),_axis.y(),_axis.z(),angle);
    return true;
  }
public:
  virtual void event(event_action& a_action) {
    parent::event(a_action);
    do_event(a_action);
  }
public:
  sf_vec3f axis; //must be normalized.
  sf<float> omega; //rad/sec
  sf<bool> rotation; //false=boost
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::spinor_pauli_anim)
    static const desc_fields s_v(parent::node_desc_fields(),4, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(delay),
      INLIB_ARG_FIELD_DESC(axis),
      INLIB_ARG_FIELD_DESC(omega),
      INLIB_ARG_FIELD_DESC(rotation)
    );
    return s_v;
  }
protected:
  void add_fields(){
    add_field(&delay);
    add_field(&axis);
    add_field(&omega);
    add_field(&rotation);
  }
public:
  spinor_pauli_anim(const atime& a_start)
  :base_anim(a_start)
  ,parent()
  
  ,axis(vec3f(0,0,1))
  ,omega(ftwo_pi()/1.0f)  // turn/s  (one turn per second).
  ,rotation(true) //false=boost

  //,m_angle(0)
  {
    add_fields();
    init_sg();
    m_phi_x = phi_x;
    m_phi_y = phi_y;
    m_xi_x = xi_x;
    m_xi_y = xi_y;
  }
  virtual ~spinor_pauli_anim(){}
public:
  spinor_pauli_anim(const spinor_pauli_anim& a_from)
  :base_anim(a_from)
  ,parent(a_from)

  ,axis(a_from.axis)
  ,omega(a_from.omega)
  ,rotation(a_from.rotation)
  
  //,m_angle(0)
  {
    add_fields();
    init_sg();
    m_phi_x = phi_x;
    m_phi_y = phi_y;
    m_xi_x = xi_x;
    m_xi_y = xi_y;
  }
  spinor_pauli_anim& operator=(const spinor_pauli_anim& a_from){
    base_anim::operator=(a_from);
    parent::operator=(a_from);
    axis = a_from.axis;
    omega = a_from.omega;
    rotation = a_from.rotation;
    return *this;
  }
public:
  void reset_anim() {
    phi_x = m_phi_x;
    phi_y = m_phi_y;
    xi_x = m_xi_x;
    xi_y = m_xi_y;
    set_start(atime::now());
    m_vec_rot_matrix.set_identity();
  }
protected:  
  void init_sg(){
    parent::m_group.add(new noderef(m_vec_sep));
    m_vec_sep.add(new noderef(m_vec_rot_matrix));
    m_vec_sep.add(new noderef(m_vec_matrix));
    m_vec_sep.add(new noderef(m_vec_color));
    m_vec_sep.add(new noderef(m_vec));

    m_vec_matrix.set_rotate(0,1,0,fhalf_pi());
    m_vec_color.color = colorf_green();
  }
protected:
  //float m_angle;
  float m_phi_x,m_phi_y,m_xi_x,m_xi_y;
  // vector :
  separator m_vec_sep;
  matrix m_vec_rot_matrix;
  matrix m_vec_matrix;
  rgba m_vec_color;
  arrow m_vec;
};

}}

#endif
