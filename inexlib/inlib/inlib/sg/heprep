// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_heprep1
#define inlib_sg_heprep1

#include "separator"
#include "matrix"
#include "atb_vertices"
#include "draw_style"
#include "rgba"
#include "polyhedron"
#include "markers"

#include "../heprep"

namespace inlib {
namespace sg {

inline bool visualize(std::ostream& a_out,group& a_group,bool a_solid,const std::vector<heprep::volume>& a_vols) {
  size_t i1,i2,i3,i4;

  //a_solid = true;

  inlib_vforcit(heprep::volume,a_vols,itv) {
    const heprep::volume& _volume = *itv;
    if(!_volume.m_Visibility) continue;

  //a_out << "inlib::sg::visualize(heprep) :"
  //      << " volume " << _volume.m_DrawAs << ". Number of prims " << _volume.m_prims.size() << "."
  //      << std::endl;

    const std::string& DrawAs = _volume.m_DrawAs;      

    if(DrawAs==heprep::s_Prism()) {
      //| Prism            | 2n              | Draws a prism. 
      //|                  |                 | First half of the Points define inner face, second half define outer face.
      //|                  |                 | Faces are connected from point 0 to point n/2, point 1 to point n/2+1, etc.
      if(_volume.m_prims.size()!=1) {
        a_out << "inlib::sg::visualize(heprep) :"
                       << " volume " << _volume.m_DrawAs << " : only one primitive expected."
                       << std::endl;
      } else {
        const heprep::primitive& _prim = _volume.m_prims[0];
        const std::vector<heprep::point>& pts = _prim.m_pts;

        //inlib_vforcit(heprep::point,pts,itp) {
        //  a_out << " " << (*itp).m_x << " " << (*itp).m_y << " " << (*itp).m_z << std::endl;
        //}

        size_t npt = pts.size()/2;
        if((npt*2!=pts.size())||!npt) {
          a_out << "inlib::sg::visualize(heprep) :"
                         << " volume " << _volume.m_DrawAs << " : an even number of points is expected."
                         << std::endl;
        } else { //npt>=1         
          separator* sep = new separator;
          a_group.add(sep);

          sep->add(new matrix); //for manip.

          rgba* mat = new rgba();
          mat->color = _volume.m_color;
          sep->add(mat);

          draw_style* ds = new draw_style();
          ds->style = a_solid?draw_style::filled:draw_style::lines;
    //      ds->cull_face = false;
          sep->add(ds);
    
          atb_vertices* vtxs = new atb_vertices;
          vtxs->mode = a_solid?gl::triangles():gl::lines(); //lines = segments.
          sep->add(vtxs);

          if(a_solid) {
            vec3f p1,p2,p3,p4,normal;
           {for(size_t index=1;index<(npt-1);index++) {
              i1 = 0;
              i2 = index;
              i3 = index+1;
              p1.set_value(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
              p2.set_value(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));
              p3.set_value(float(pts[i3].m_x),float(pts[i3].m_y),float(pts[i3].m_z));
              (p2-p1).cross(p3-p2,normal);
              vtxs->add_pos_normal(p1,normal);
              vtxs->add_pos_normal(p2,normal);
              vtxs->add_pos_normal(p3,normal);
            }}

           {for(size_t index=npt+1;index<(pts.size()-1);index++) {
              i1 = npt;
              i2 = index;
              i3 = index+1;
              p1.set_value(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
              p2.set_value(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));
              p3.set_value(float(pts[i3].m_x),float(pts[i3].m_y),float(pts[i3].m_z));
              (p2-p1).cross(p3-p2,normal);
              vtxs->add_pos_normal(p1,-normal);
              vtxs->add_pos_normal(p3,-normal);
              vtxs->add_pos_normal(p2,-normal);
            }}

           {for(size_t index=0;index<(npt-1);index++) {              
              i1 = index;
              i2 = npt+index;
              i3 = npt+index+1;
              i4 = index+1;
              p1.set_value(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
              p2.set_value(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));
              p3.set_value(float(pts[i3].m_x),float(pts[i3].m_y),float(pts[i3].m_z));
              p4.set_value(float(pts[i4].m_x),float(pts[i4].m_y),float(pts[i4].m_z));

              (p2-p1).cross(p3-p2,normal);
              vtxs->add_pos_normal(p1,normal);
              vtxs->add_pos_normal(p2,normal);
              vtxs->add_pos_normal(p3,normal);

              (p3-p1).cross(p4-p3,normal);
              vtxs->add_pos_normal(p1,normal);
              vtxs->add_pos_normal(p3,normal);
              vtxs->add_pos_normal(p4,normal);
            }
            i1 = npt-1;
            i2 = 2*npt-1;
            i3 = npt;
            i4 = 0;
            p1.set_value(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
            p2.set_value(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));
            p3.set_value(float(pts[i3].m_x),float(pts[i3].m_y),float(pts[i3].m_z));
            p4.set_value(float(pts[i4].m_x),float(pts[i4].m_y),float(pts[i4].m_z));

            (p2-p1).cross(p3-p2,normal);
            vtxs->add_pos_normal(p1,normal);
            vtxs->add_pos_normal(p2,normal);
            vtxs->add_pos_normal(p3,normal);

            (p3-p1).cross(p4-p3,normal);
            vtxs->add_pos_normal(p1,normal);
            vtxs->add_pos_normal(p3,normal);
            vtxs->add_pos_normal(p4,normal);}

          } else {
           {for(size_t index=0;index<(npt-1);index++) {
              i1 = index;
              i2 = index+1;
              vtxs->add(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
              vtxs->add(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));
            }
            i1 = npt-1;
            i2 = 0;
            vtxs->add(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
            vtxs->add(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));}

           {for(size_t index=npt;index<(pts.size()-1);index++) {
              i1 = index;
              i2 = index+1;
              vtxs->add(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
              vtxs->add(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));
            }
            i1 = pts.size()-1;
            i2 = npt;
            vtxs->add(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
            vtxs->add(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));}
  
           {for(size_t index=0;index<npt;index++) {
              i1 = index;
              i2 = npt+index;
              vtxs->add(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
              vtxs->add(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));
            }}
          }
        }
      }

    } else if(DrawAs==heprep::s_Cylinder()) {
      if(_volume.m_prims.size()!=1) {
        a_out << "inlib::sg::visualize(heprep) :"
                       << " volume " << _volume.m_DrawAs << " : only one primitive expected."
                       << std::endl;
      } else {
        const heprep::primitive& _prim = _volume.m_prims[0];
        const std::vector<heprep::point>& pts = _prim.m_pts;
        if(pts.size()!=2) {
          a_out << "inlib::sg::visualize(heprep) :"
                         << " volume " << _volume.m_DrawAs << " : two points expected."
                         << std::endl;
        } else {            
          separator* sep = new separator;
          a_group.add(sep);

          sep->add(new matrix); //for manip.

          rgba* mat = new rgba();
          mat->color = _volume.m_color;
          sep->add(mat);

          vec3d beg(pts[0].m_x,pts[0].m_y,pts[0].m_z);
          vec3d end(pts[1].m_x,pts[1].m_y,pts[1].m_z);
          vec3d dir = end-beg;
          vec3d center = 0.5*(end+beg);

          hep::polyhedron_cone ph(0,_prim.m_Radius1,0,_prim.m_Radius2,0.5*dir.length());
          ph.Transform(rotd(vec3d(0,0,1),dir),center);

          polyhedron* node = new polyhedron;
          node->ph = ph;
          node->solid = a_solid;
          node->reduced_wire_frame = false;
          sep->add(node);
        }
      }

    } else if(DrawAs==heprep::s_Polygon()) {
 
      separator* sep = new separator;
      a_group.add(sep);
  
      sep->add(new matrix); //for manip.

      rgba* mat = new rgba();
      mat->color = _volume.m_color;
      sep->add(mat);

      draw_style* ds = new draw_style();
      ds->style = a_solid?draw_style::filled:draw_style::lines;
//      ds->cull_face = false;
      sep->add(ds);
    
      atb_vertices* vtxs = new atb_vertices;
      vtxs->mode = a_solid?gl::triangles():gl::lines();
      sep->add(vtxs);

      inlib_vforcit(heprep::primitive,_volume.m_prims,itpr) {
        const std::vector<heprep::point>& pts = (*itpr).m_pts;
        //inlib_vforcit(heprep::point,pts,itp) {
        //  a_out << " " << (*itp).m_x << " " << (*itp).m_y << " " << (*itp).m_z << std::endl;
        //}
        //a_out << "inlib::sg::visualize(heprep) : npts " << pts.size() << std::endl;
        if(a_solid) {
          if(pts.size()<=2) {
          } else {
            vec3f p1,p2,p3,normal,d21,d32,bp1,bp2,bp3;
            float epsil;
            for(size_t index=1;index<(pts.size()-1);index++) {
              i1 = 0;
              i2 = index;
              i3 = index+1;
              p1.set_value(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
              p2.set_value(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));
              p3.set_value(float(pts[i3].m_x),float(pts[i3].m_y),float(pts[i3].m_z));
              d21 = p2-p1;
              d32 = p3-p2;
              d21.cross(d32,normal);
              vtxs->add_pos_normal(p1,normal);
              vtxs->add_pos_normal(p2,normal);
              vtxs->add_pos_normal(p3,normal);

              if(normal.normalize()) { //back face :
                epsil = mn(d21.length(),d32.length())*0.01f;
                bp1 = p1 - epsil * normal;
                bp2 = p2 - epsil * normal;
                bp3 = p3 - epsil * normal;
                vtxs->add_pos_normal(bp1,-normal);
                vtxs->add_pos_normal(bp3,-normal);
                vtxs->add_pos_normal(bp2,-normal);
              }

            }
          }
        } else {
          if(pts.size()<=1) {
          } else if(pts.size()==2) {
            i1 = 0;
            i2 = 1;
            vtxs->add(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
            vtxs->add(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));
          } else {
           {for(size_t index=0;index<(pts.size()-1);index++) {
              i1 = index;
              i2 = index+1;
              vtxs->add(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
              vtxs->add(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));
            }
            i1 = pts.size()-1;
            i2 = 0;
            vtxs->add(float(pts[i1].m_x),float(pts[i1].m_y),float(pts[i1].m_z));
            vtxs->add(float(pts[i2].m_x),float(pts[i2].m_y),float(pts[i2].m_z));}
          }
        }
      }

    } else if(DrawAs==heprep::s_Line()) {
 
      if(_volume.m_prims.size()!=1) {
        a_out << "inlib::sg::visualize(heprep) :"
                       << " volume " << _volume.m_DrawAs << " : only one primitive expected."
                       << std::endl;
      } else {
        separator* sep = new separator;
        a_group.add(sep);
  
        sep->add(new matrix); //for manip.

        rgba* mat = new rgba();
        mat->color = _volume.m_color;
        sep->add(mat);
    
        vertices* vtxs = new vertices;
        vtxs->mode = gl::line_strip();
        sep->add(vtxs);

        inlib_vforcit(heprep::point,_volume.m_prims[0].m_pts,itp) {
          vtxs->add(float((*itp).m_x),float((*itp).m_y),float((*itp).m_z));
        }
      }

    } else if(DrawAs==heprep::s_Point()) {
 
      if(_volume.m_prims.size()!=1) {
        a_out << "inlib::sg::visualize(heprep) :"
                       << " volume " << _volume.m_DrawAs << " : only one primitive expected."
                       << std::endl;
      } else {
        separator* sep = new separator;
        a_group.add(sep);
  
        sep->add(new matrix); //for manip.

        rgba* mat = new rgba();
        mat->color = _volume.m_color;
        sep->add(mat);

/*
        vertices* vtxs = new vertices;
        vtxs->mode = gl::points();
        sep->add(vtxs);
*/

        markers* vtxs = new markers;
        vtxs->size = float(_volume.m_MarkSize);
        vtxs->style = _volume.m_MarkName;
        sep->add(vtxs);

        inlib_vforcit(heprep::point,_volume.m_prims[0].m_pts,itp) {
          vtxs->add(float((*itp).m_x),float((*itp).m_y),float((*itp).m_z));
        }
      }

    } else {
      a_out << "inlib::sg::visualize(heprep) : volume " << _volume.m_DrawAs << " not yet handled." << std::endl;
    }

  }

  return true;
}

}}

#endif
