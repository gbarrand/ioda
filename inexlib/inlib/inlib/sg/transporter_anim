// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_transporter_anim
#define inlib_sg_transporter_anim

#include "base_anim"
#include "matrix"
#include "ui"
#include "cbks"
#include "sf_vec4f"

#include "../edep/physical_constants"
#include "../itransporter"
#include "../cvec"

namespace inlib {
namespace sg {

template <class REAL>
class transporter_anim : public base_anim, public matrix {
  typedef matrix parent;
public:
  INLIB_T_SCLASS(REAL,inlib::sg::transporter_anim)
public:
  virtual void* cast(const std::string& a_class) const {
    {if(void* p = cmp_cast<transporter_anim>(this,a_class)) return p;}
    {if(void* p = base_anim::cast(a_class)) return p;}
    return parent::cast(a_class);
  }
public: //node
  virtual node* copy() const {return new transporter_anim(*this);}
  virtual const std::string& s_cls() const {return s_class();}
private:
  typedef REAL X[4];
  typedef REAL U[4];
public:
  virtual void project(const X& a_X,float& a_x,float& a_y,float& a_z) const {
  //a_t = a_X[0];
    a_x = float(a_X[1]);
    a_y = float(a_X[2]);
    a_z = float(a_X[3]);
  }
public:
  virtual bool action(std::ostream&,const atime& /*a_now*/) {
  //float t = float(atime::diff(a_now,m_start).value());
  //float tp = float(atime::diff(m_prev,m_start).value());

   {for(uint64 count=0;count<m_steps;count++) {
      if(!m_transporter.do_step()) {
        stop();
        return true;        
      }
    }}

    X x;
    U u;
    REAL s;
    REAL step;
    REAL mx_du2;
    uint64 count;
    m_transporter.get_step(x,u,s,step,mx_du2,count);

    float x1,y1,z1;
    project(m_x,x1,y1,z1);
    float x2,y2,z2;
    project(x,x2,y2,z2);
    mul_translate(x2-x1,y2-y1,z2-z1);
    
    cp_vec(m_x,x);

    return true;
  }
public:
  virtual void event(event_action& a_action) {
    matrix::event(a_action);
    do_event(a_action);
  }
  virtual void begin_anim() {
    X x;
    x[0] = x0.value()[0];
    x[1] = x0.value()[1];
    x[2] = x0.value()[2];
    x[3] = x0.value()[3];

    U u;
    u[0] = u0.value()[0];
    u[1] = u0.value()[1];
    u[2] = u0.value()[2];
    u[3] = u0.value()[3];

    m_transporter.initialize(x,u);
    cp_vec(m_x,x);

    float _x,_y,_z;
    project(x,_x,_y,_z);
    set_translate(_x,_y,_z);
  }
  virtual void end_anim() {
    m_ui.add_work_cbks(m_end_cbks.callbacks(),true);    
  }
public:
  sf_vec4f x0;
  sf_vec4f u0;
  uint64 m_steps;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::transporter_anim)
    static const desc_fields s_v(parent::node_desc_fields(),3, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(delay),
      INLIB_ARG_FIELD_DESC(x0),
      INLIB_ARG_FIELD_DESC(u0)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&delay);
    add_field(&x0);
    add_field(&u0);
  }
public:
  transporter_anim(ui& a_ui,const atime& a_start,itransporter<REAL>& a_transporter)
  :base_anim(a_start)
  ,parent()

  ,x0(vec4f(0,0,0,0))
  ,u0(vec4f(1,0,0,0)) //Tr(u*eta*u)=1
  ,m_steps(1)

  ,m_ui(a_ui)
  ,m_end_cbks()
  ,m_transporter(a_transporter)
  {
    add_fields();
  }
  virtual ~transporter_anim(){}
public:
  transporter_anim(const transporter_anim& a_from)
  :base_anim(a_from)
  ,parent(a_from)

  ,x0(a_from.x0)
  ,u0(a_from.u0)
  ,m_steps(a_from.m_steps)

  ,m_ui(a_from.m_ui)
  ,m_end_cbks(a_from.m_end_cbks)
  ,m_transporter(a_from.m_transporter)
  {
    add_fields();
  }
  transporter_anim& operator=(const transporter_anim& a_from){
    base_anim::operator=(a_from);
    parent::operator=(a_from);

    x0 = a_from.x0;
    u0 = a_from.u0;
    m_steps = a_from.m_steps;

    m_end_cbks = a_from.m_end_cbks;
    return *this;
  }
public:
  const sg::cbks& end_cbks() const {return m_end_cbks;}
  void add_end_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_end_cbks.add(a_cbk);
  }
protected:
  ui& m_ui;
  sg::cbks m_end_cbks;
  itransporter<REAL>& m_transporter;
  X m_x;
};

template <class REAL>
class gr_anim : public transporter_anim<REAL> {
  INLIB_T_HEADER(REAL,gr_anim,inlib::sg::gr_anim,transporter_anim<REAL>)
public: //node
  virtual node* copy() const {return new gr_anim(*this);}
private:
  typedef REAL X[4];
  typedef REAL U[4];
public:
  virtual void project(const X& a_X,float& a_x,float& a_y,float& a_z) const {
    // 4D (ct,r,theta,phi) to 3D (x,y,z) :

    double r = a_X[1];
    double theta = a_X[2];
    double phi = a_X[3];
    
    a_x = float(r*::sin(theta)*::cos(phi));
    a_y = float(r*::sin(theta)*::sin(phi));
    a_z = float(r*::cos(theta));
  }
public:
  gr_anim(ui& a_ui,const atime& a_start,itransporter<REAL>& a_transporter):parent(a_ui,a_start,a_transporter){}
  virtual ~gr_anim(){}
public:
  gr_anim(const gr_anim& a_from):parent(a_from){}
  gr_anim& operator=(const gr_anim& a_from){parent::operator=(a_from);return *this;}
};


}}

#endif
