// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cast_deprec
#define inlib_cast_deprec

// for back compatibility to compile osc.

#define INLIB_CAST(a__obj,a__cls) (a__cls*)(a__obj).cast(#a__cls)
#define INLIB_CONST_CAST(a__obj,a__cls) (const a__cls*)(a__obj).cast(#a__cls)

#define INLIB_SAFE_CAST(a__obj,a__cls) (a__cls*)(a__obj).cast(#a__cls)

// Used in implementations of interfaces cast methods.
#define INLIB_SCAST(a__cls) (void*)static_cast<const a__cls*>(this)

// To break const :
#define INLIB_SELF(a__cls) a__cls& self = const_cast<a__cls&>(*this)

#define INLIB_IF_CAST(a__cls) \
  if(a_class==#a__cls) {return (void*)static_cast<const a__cls*>(this);}


namespace inlib {

template <class FROM,class TO>
inline TO* cast(FROM& a_o) {
  return (TO*)a_o.cast(TO::s_class());
}

template <class FROM,class TO>
inline const TO* cast(const FROM& a_o) {
  return (const TO*)a_o.cast(TO::s_class());
}

}

#endif
