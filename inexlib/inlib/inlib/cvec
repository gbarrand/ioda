// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cvec
#define inlib_cvec

namespace inlib {

template <class REAL>
inline void cp_vec(REAL a_to[4],const REAL a_from[4]) {
  a_to[0] = a_from[0];
  a_to[1] = a_from[1];
  a_to[2] = a_from[2];
  a_to[3] = a_from[3];
}

template <class REAL>
inline void mul_vec(REAL a_to[4],const REAL& a_v) {
  a_to[0] *= a_v;
  a_to[1] *= a_v;
  a_to[2] *= a_v;
  a_to[3] *= a_v;
}

template <class REAL>
inline void add_vec(REAL a_to[4],const REAL a_from[4]) {
  a_to[0] += a_from[0];
  a_to[1] += a_from[1];
  a_to[2] += a_from[2];
  a_to[3] += a_from[3];
}

template <class REAL>
inline void sub_vec(REAL a_to[4],const REAL a_from[4]) {
  a_to[0] -= a_from[0];
  a_to[1] -= a_from[1];
  a_to[2] -= a_from[2];
  a_to[3] -= a_from[3];
}

template <class REAL>
inline void set_vec(REAL a_to[4],const REAL& a_0,const REAL& a_1,const REAL& a_2,const REAL& a_3) {
  a_to[0] = a_0;
  a_to[1] = a_1;
  a_to[2] = a_2;
  a_to[3] = a_3;
}

template <class REAL>
inline void zero_vec(REAL a_to[4]) {
  a_to[0] = REAL(0);
  a_to[1] = REAL(0);
  a_to[2] = REAL(0);
  a_to[3] = REAL(0);
}

}

#include <ostream>
#include <string>

namespace inlib {

template <class REAL> 
inline void out_vec(std::ostream& a_out,const REAL a_from[4],const std::string& a_title){
  if(a_title.size()) a_out << a_title << std::endl;
  a_out << a_from[0] << std::endl;
  a_out << a_from[1] << std::endl;
  a_out << a_from[2] << std::endl;
  a_out << a_from[3] << std::endl;
}

}

#endif
