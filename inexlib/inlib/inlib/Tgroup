// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_Tgroup
#define inlib_Tgroup

#ifdef INLIB_MEM
#include "mem"
#endif

namespace inlib {

template <class T,unsigned int D>
class gcsts {
  static const unsigned int _D2 = D*D;
  static const unsigned int _D3 = D*D*D;
#ifdef INLIB_MEM
  static const std::string& s_class() {
    static const std::string s_v("inlib::gcsts");
    return s_v;
  }
#endif
public:
  gcsts(){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    m_vec = new T[_D3];
    for(unsigned int i=0;i<_D3;i++) m_vec[i] = T();
  }
  virtual ~gcsts(){
    delete [] m_vec;
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  gcsts(const gcsts& a_from){ //WARNING : we assume that this and a_from have same D.
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif    
    m_vec = new T[_D3];
    _copy(a_from.m_vec);
  }
  gcsts& operator=(const gcsts& a_from) { //WARNING : we assume that this and a_from have same D.
    if(&a_from==this) return *this;
    //delete [] m_vec;
    //m_vec = new T[_D3];
    _copy(a_from.m_vec);
    return *this;
  }
public:
//  T& operator()(unsigned int a_1,unsigned int a_2,unsigned int a_3) { // WARNING : no check on a_r,a_c.
//    return m_vec[a_1 + a_2 * D + a_3 * _D2];
//  }
//  const T& operator()(unsigned int a_1,unsigned int a_2,unsigned int a_3) const { // WARNING : no check on a_r,a_c.
//    return m_vec[a_1 + a_2 * D + a_3 * _D2];
//  }
public:
  unsigned int dimension() const {return D;}
  void set_value(unsigned int a_1,unsigned int a_2,unsigned int a_3,const T& a_value) {
    m_vec[a_1 + a_2 * D + a_3 * _D2] = a_value;
  }
  const T& value(unsigned int a_1,unsigned int a_2,unsigned int a_3) const {
    return m_vec[a_1 + a_2 * D + a_3 * _D2];
  }
protected:
  void _copy(const T a_a[]) {
    T* tp = (T*)m_vec;T* ap = (T*)a_a;
    for(unsigned int i=0;i<_D3;i++,tp++,ap++) *tp = *ap;
  }
protected:
  T* m_vec;
  //T m_vec[D*D*D]; //crash with MSC_VER and D=60.
};

/////////////////////////////////////////////////////////////////////////
/// D=2 /////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set_e2(T a_a[2][2]) {
  a_a[0][0] =  0;
  a_a[1][1] =  0;
  
  a_a[0][1] =  1;
  a_a[1][0] =  -1;
}

/////////////////////////////////////////////////////////////////////////
/// U(2) group //////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
template <class T>
inline void set_U2_group_constants(T a_a[4][4][4]) {
  // [1-3][1-3][1-3] = rotation group constants.
  for(unsigned int i=0;i<4;i++) {
    for(unsigned int j=0;j<4;j++) {
      for(unsigned int k=0;k<4;k++) {
        a_a[i][j][k] = T();
      }
    }
  }
  a_a[1+2][1+1][1+0] =  1;
  a_a[1+1][1+2][1+0] = -1;
  a_a[1+2][1+0][1+1] = -1;
  a_a[1+0][1+2][1+1] =  1;
  a_a[1+1][1+0][1+2] =  1;
  a_a[1+0][1+1][1+2] = -1;
}

template <class T>
inline void set_A22_group_constants(T a_V,T a_csts[3][3][3]) {
  // a_V a 1 dim vector (for an antisymmetric A22 matrix).

  // A = a_V*e2
  // Sa = (D1,D2,P1)
  // [S[j]*A,S[k]*A] = c[A](j,k,l)*S[l]*A

 {for(unsigned int a=0;a<3;a++) {
  for(unsigned int b=0;b<3;b++) {
  for(unsigned int c=0;c<3;c++) {
    a_csts[a][b][c] = 0;
  }}}}

  a_csts[0][1][2] = a_V;
  a_csts[0][2][0] = 2*a_V;
  a_csts[1][2][1] = -2*a_V;

 {for(unsigned int a=0;a<3;a++) {
  for(unsigned int b=a;b<3;b++) {
    for(unsigned int c=0;c<3;c++) {
      a_csts[b][a][c] = -a_csts[a][b][c];
    }
  }}}
}

/////////////////////////////////////////////////////////////////////////
/// D=3 /////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set_e3(T a_a[3][3][3]) {
  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[i][j][k] = T();
      }
    }
  }
  a_a[2][1][0] = -1;
  a_a[1][2][0] =  1;
  a_a[2][0][1] =  1;
  a_a[0][2][1] = -1;
  a_a[1][0][2] = -1;
  a_a[0][1][2] =  1;
}

template <class T>
inline void set_A33_group_constants(const T a_V[3],T a_csts[6][6][6]) {
  // a_V a 3 dim vector (for an antisymmetric A33 matrix).

  // A = V[0]*R1+V[1]*R2+V[2]*R3;
  // Sa = (D1,D2,D3,S1,S2,S3)
  // [S[a]*A,S[b]*A] = c[A](a,b,c)*S[c]*A

 {for(unsigned int a=0;a<6;a++) {
  for(unsigned int b=0;b<6;b++) {
  for(unsigned int c=0;c<6;c++) {
    a_csts[a][b][c] = 0;
  }}}}

  a_csts[0][1][5] = a_V[2];
  a_csts[0][2][4] = -a_V[1];
  a_csts[1][2][3] = a_V[0];

  a_csts[3][4][2] = -2*a_V[2];
  a_csts[3][4][3] = a_V[1];
  a_csts[3][4][4] = a_V[0];

  a_csts[3][5][1] = 2*a_V[1];
  a_csts[3][5][3] = -a_V[2];
  a_csts[3][5][5] = -a_V[0];

  a_csts[4][5][0] = -2*a_V[0];
  a_csts[4][5][4] = a_V[2];
  a_csts[4][5][5] = a_V[1];

  a_csts[0][3][4] = a_V[2];
  a_csts[0][3][5] = -a_V[1];
  a_csts[0][4][0] = -2*a_V[1];
  a_csts[0][5][0] = 2*a_V[2];

  a_csts[1][3][1] = 2*a_V[0];
  a_csts[1][4][3] = -a_V[2];
  a_csts[1][4][5] = a_V[0];
  a_csts[1][5][1] = -2*a_V[2];

  a_csts[2][3][2] = -2*a_V[0];
  a_csts[2][4][2] = 2*a_V[1];
  a_csts[2][5][3] = a_V[1];
  a_csts[2][5][4] = -a_V[0];

 {for(unsigned int a=0;a<6;a++) {
  for(unsigned int b=a;b<6;b++) {
    for(unsigned int c=0;c<6;c++) {
      a_csts[b][a][c] = -a_csts[a][b][c];
    }
  }}}
}

template <class T>
inline void set_d3(T a_a[3][3][3]) {
  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[i][j][k] = 0;
      }
    }
  }
  a_a[0][0][0] = 1;
  a_a[1][1][1] = 1;
  a_a[2][2][2] = 1;
}

/////////////////////////////////////////////////////////////////////////
/// rotation group //////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set_rotation_group_constants(T a_a[3][3][3]) {
  // it is -1*set_e3()
  // Si M[a].set_value(j,k) = csts[a][j][k]   M three 3x3 matrices.
  // M1,2,3 = -e1,2,3

  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[i][j][k] = T();
      }
    }
  }
  a_a[0][1][2] = -1;
  a_a[0][2][1] =  1;
  a_a[1][2][0] = -1;
  
  a_a[1][0][2] =  1;
  a_a[2][0][1] = -1;
  a_a[2][1][0] =  1;
}

template <class MAT>
inline void set_rotation_adjoint_rep_metric(MAT& a_m){
  a_m.set_constant(0);
  a_m.set_value(0,0,-2);
  a_m.set_value(1,1,-2);
  a_m.set_value(2,2,-2);
}

/////////////////////////////////////////////////////////////////////////
/// SU(3) group /////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// see after include <cmath>

/////////////////////////////////////////////////////////////////////////
/// D=4 /////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set_SO4_group_constants(T a_a[6][6][6]) {
  // [Es(a),Es(b)] = C(a,b,c) Es[c]

  // SO4 adjs :
  //  |-e123     0|  |    0 -e123|
  //  |    0 -e123|  |-e123     0|

  //Es = E1,E2,E3,E6,E5,E4
  //      0  1  2  3  4  5

  for(unsigned int i=0;i<6;i++) {
    for(unsigned int j=0;j<6;j++) {
      for(unsigned int k=0;k<6;k++) {
        a_a[i][j][k] = T();
      }
    }
  }

  a_a[0][1][2] = -1;
  a_a[0][2][1] =  1;
  a_a[0][4][5] = -1;
  a_a[0][5][4] =  1;

  a_a[1][2][0] = -1;
  a_a[1][3][5] =  1;
  a_a[1][5][3] = -1;

  a_a[2][3][4] = -1;
  a_a[2][4][3] =  1;

  a_a[3][4][2] = -1;
  a_a[3][5][1] =  1;

  a_a[4][5][0] = -1;

  //////////////////////
  a_a[1][0][2] =  1;
  a_a[2][0][1] = -1;
  a_a[4][0][5] =  1;
  a_a[5][0][4] = -1;

  a_a[2][1][0] =  1;
  a_a[3][1][5] = -1;
  a_a[5][1][3] =  1;

  a_a[3][2][4] =  1;
  a_a[4][2][3] = -1;

  a_a[4][3][2] =  1;
  a_a[5][3][1] = -1;

  a_a[5][4][0] =  1;
  
  //for(unsigned int i=0;i<6;i++) {
  //  for(unsigned int j=i+1;j<6;j++) {
  //    for(unsigned int k=0;k<6;k++) {      
  //      a_a[j][i][k] = T(-1)*a_a[i][j][k];
  //    }
  //  }
  //}
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set_e4(T a_a[4][4][4][4]) {
  for(unsigned int i=0;i<4;i++) {
    for(unsigned int j=0;j<4;j++) {
      for(unsigned int k=0;k<4;k++) {
        for(unsigned int l=0;l<4;l++) {
          a_a[i][j][k][l] = T();
        }
      }
    }
  }
  // 24 values :
  a_a[0][1][2][3] =  1;
  a_a[0][1][3][2] = -1;
  a_a[0][2][1][3] = -1;
  a_a[0][2][3][1] =  1;
  a_a[0][3][1][2] =  1;
  a_a[0][3][2][1] = -1;

  a_a[1][0][2][3] = -1;
  a_a[1][0][3][2] =  1;
  a_a[1][2][0][3] =  1;
  a_a[1][2][3][0] = -1;
  a_a[1][3][0][2] = -1;
  a_a[1][3][2][0] =  1;

  a_a[2][0][1][3] =  1;
  a_a[2][0][3][1] = -1;
  a_a[2][1][0][3] = -1;
  a_a[2][1][3][0] =  1;
  a_a[2][3][0][1] =  1;
  a_a[2][3][1][0] = -1;

  a_a[3][0][1][2] = -1;
  a_a[3][0][2][1] =  1;
  a_a[3][1][0][2] =  1;
  a_a[3][1][2][0] = -1;
  a_a[3][2][0][1] = -1;
  a_a[3][2][1][0] =  1;
}

/////////////////////////////////////////////////////////////////////////
/// lorentz group ///////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set_Es_eta_group_constants(T a_a[6][6][6]) {
  // Si M[a].set_value(j,k) = csts[a][j][k]
  // M 6 6x6 matrices :
  //  M123 = |   e123     0 |
  //         |      0  e123 |
  //  M456 = |      0  e123 |
  //         |  -e123     0 |
  //
  // adjs :
  //   |-e123      0|    |    0 -e123|
  //   |   0   -e123|    | e123     0|
  // with : e123  e123=e3

  // e1 | 0  0  0 |  e2 | 0  0 -1 | e3 | 0  1  0 |
  //    | 0  0  1 |     | 0  0  0 |    |-1  0  0 |
  //    | 0 -1  0 |     | 1  0  0 |    | 0  0  0 |

  //E1,E2,E3,E6,E5,E4
  // 0  1  2  3  4  5

  // We must have : [Es(a)*eta,Es(b)*eta] = a_a(a,b,c) * Es(c)*eta
  
  for(unsigned int i=0;i<6;i++) {
    for(unsigned int j=0;j<6;j++) {
      for(unsigned int k=0;k<6;k++) {
        a_a[i][j][k] = T();
      }
    }
  }

  a_a[0][1][2] = 1;
  a_a[0][2][1] = -1;
  a_a[0][4][5] = 1;
  a_a[0][5][4] = -1;
  a_a[1][0][2] = -1;
  a_a[1][2][0] = 1;
  a_a[1][3][5] = -1;
  a_a[1][5][3] = 1;
  a_a[2][0][1] = 1;
  a_a[2][1][0] = -1;
  a_a[2][3][4] = 1;
  a_a[2][4][3] = -1;
  a_a[3][1][5] = 1;
  a_a[3][2][4] = -1;
  a_a[3][4][2] = -1;
  a_a[3][5][1] = 1;
  a_a[4][0][5] = -1;
  a_a[4][2][3] = 1;
  a_a[4][3][2] = 1;
  a_a[4][5][0] = -1;
  a_a[5][0][4] = 1;
  a_a[5][1][3] = -1;
  a_a[5][3][1] = -1;
  a_a[5][4][0] = 1;

}

template <class MAT>
inline void set_Es_eta_adjoint_rep_metric(MAT& a_m){
  // a_m = -4*G6
  a_m.set_constant(0);  
  a_m.set_value(0,0,-4);
  a_m.set_value(1,1,-4);
  a_m.set_value(2,2,-4);
  a_m.set_value(3,3, 4);
  a_m.set_value(4,4, 4);
  a_m.set_value(5,5, 4);
}

template <class T>
inline void set_e123_minus_e123_constants(T a_a[6][6][6]) {
  // used in check_Es for {Es*eta,Es*eta}.
  // Si M[a].set_value(j,k) = csts[a][j][k]
  // M 6 6x6 matrices :
  //  M123 = |   e123     0 |
  //         |      0  e123 |
  //  M456 = |      0 -e123 |
  //         |  -e123     0 |
  //
  // e1 | 0  0  0 |  e2 | 0  0 -1 | e3 | 0  1  0 |
  //    | 0  0  1 |     | 0  0  0 |    |-1  0  0 |
  //    | 0 -1  0 |     | 1  0  0 |    | 0  0  0 |

  for(unsigned int i=0;i<6;i++) {
    for(unsigned int j=0;j<6;j++) {
      for(unsigned int k=0;k<6;k++) {
        a_a[i][j][k] = T();
      }
    }
  }

  a_a[0][1][2] = 1;
  a_a[0][2][1] = -1;
  a_a[0][4][5] = 1;
  a_a[0][5][4] = -1;
  a_a[1][0][2] = -1;
  a_a[1][2][0] = 1;
  a_a[1][3][5] = -1;
  a_a[1][5][3] = 1;
  a_a[2][0][1] = 1;
  a_a[2][1][0] = -1;
  a_a[2][3][4] = 1;
  a_a[2][4][3] = -1;
  
  a_a[3][1][5] = -1; //reverse relative to lorentz
  a_a[3][2][4] =  1; //
  a_a[3][4][2] = -1;
  a_a[3][5][1] = 1;
  a_a[4][0][5] =  1; //
  a_a[4][2][3] = -1; //
  a_a[4][3][2] = 1;
  a_a[4][5][0] = -1;
  a_a[5][0][4] = -1; //
  a_a[5][1][3] =  1; //
  a_a[5][3][1] = -1;
  a_a[5][4][0] = 1;

}

/////////////////////////////////////////////////////////////////////////
/// poincare group //////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set_poincare_group_constants(T a_a[10][10][10]) {
  for(unsigned int i=0;i<10;i++) {
    for(unsigned int j=0;j<10;j++) {
      for(unsigned int k=0;k<10;k++) {
        a_a[i][j][k] = T();
      }
    }
  }

  double csts[6][6][6];
  set_Es_eta_group_constants(csts);

 {for(unsigned int j=4;j<10;j++) {
    for(unsigned int k=4;k<10;k++) {
      for(unsigned int l=4;l<10;l++) {
        a_a[j][k][l] = csts[j-4][k-4][l-4];
      }
    }
  }}

/* NOTE : the below numbers had been produced with :
 {for(unsigned int j=0;j<4;j++) {
    for(unsigned int k=4;k<10;k++) {
      for(unsigned int l=0;l<4;l++) {
        a_a[j][k][l] =  Es_eta[k-4].value(j,l);
        a_a[k][j][l] = -Es_eta[k-4].value(j,l);
      }
    
  }}
*/  

  a_a[0][7][1] = -1;
  a_a[7][0][1] = 1;
  a_a[0][8][2] = -1;
  a_a[8][0][2] = 1;
  a_a[0][9][3] = -1;
  a_a[9][0][3] = 1;
  a_a[1][5][3] = 1;
  a_a[5][1][3] = -1;
  a_a[1][6][2] = -1;
  a_a[6][1][2] = 1;
  a_a[1][7][0] = -1;
  a_a[7][1][0] = 1;
  a_a[2][4][3] = -1;
  a_a[4][2][3] = 1;
  a_a[2][6][1] = 1;
  a_a[6][2][1] = -1;
  a_a[2][8][0] = -1;
  a_a[8][2][0] = 1;
  a_a[3][4][2] = 1;
  a_a[4][3][2] = -1;
  a_a[3][5][1] = -1;
  a_a[5][3][1] = 1;
  a_a[3][9][0] = -1;
  a_a[9][3][0] = 1;

}

template <class MAT>
inline void set_poincare_adjoint_rep_metric(MAT& a_m){
  //WARNING : it is not invertible.
  a_m.set_constant(0);
  a_m.set_value(4,4,-6);
  a_m.set_value(5,5,-6);
  a_m.set_value(6,6,-6);
  a_m.set_value(7,7, 6);
  a_m.set_value(8,8, 6);
  a_m.set_value(9,9, 6);
}
 
/////////////////////////////////////////////////////////////////////////
/// symplectic 4D group (Sp4) ///////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set__Sp4_group_constants(T a_a[10][10][10]) {
  for(unsigned int i=0;i<10;i++) {
    for(unsigned int j=0;j<10;j++) {
      for(unsigned int k=0;k<10;k++) {
        a_a[i][j][k] = T();
      }
    }
  }
  a_a[0][1][7] = 4;
  a_a[0][2][8] = 4;
  a_a[0][3][9] = 4;
  a_a[0][7][1] = -1;
  a_a[0][8][2] = -1;
  a_a[0][9][3] = -1;
  a_a[1][0][7] = -4;
  a_a[1][2][6] = -4;
  a_a[1][3][5] = 4;
  a_a[1][5][3] = 1;
  a_a[1][6][2] = -1;
  a_a[1][7][0] = -1;
  a_a[2][0][8] = -4;
  a_a[2][1][6] = 4;
  a_a[2][3][4] = -4;
  a_a[2][4][3] = -1;
  a_a[2][6][1] = 1;
  a_a[2][8][0] = -1;
  a_a[3][0][9] = -4;
  a_a[3][1][5] = -4;
  a_a[3][2][4] = 4;
  a_a[3][4][2] = 1;
  a_a[3][5][1] = -1;
  a_a[3][9][0] = -1;
  a_a[4][2][3] = 1;
  a_a[4][3][2] = -1;
  a_a[4][5][6] = 1;
  a_a[4][6][5] = -1;
  a_a[4][8][9] = 1;
  a_a[4][9][8] = -1;
  a_a[5][1][3] = -1;
  a_a[5][3][1] = 1;
  a_a[5][4][6] = -1;
  a_a[5][6][4] = 1;
  a_a[5][7][9] = -1;
  a_a[5][9][7] = 1;
  a_a[6][1][2] = 1;
  a_a[6][2][1] = -1;
  a_a[6][4][5] = 1;
  a_a[6][5][4] = -1;
  a_a[6][7][8] = 1;
  a_a[6][8][7] = -1;
  a_a[7][0][1] = 1;
  a_a[7][1][0] = 1;
  a_a[7][5][9] = 1;
  a_a[7][6][8] = -1;
  a_a[7][8][6] = -1;
  a_a[7][9][5] = 1;
  a_a[8][0][2] = 1;
  a_a[8][2][0] = 1;
  a_a[8][4][9] = -1;
  a_a[8][6][7] = 1;
  a_a[8][7][6] = 1;
  a_a[8][9][4] = -1;
  a_a[9][0][3] = 1;
  a_a[9][3][0] = 1;
  a_a[9][4][8] = 1;
  a_a[9][5][7] = -1;
  a_a[9][7][5] = -1;
  a_a[9][8][4] = 1;
}

template <class MAT>
inline void set__Sp4_adjoint_rep_metric(MAT& a_m){
  // = -24 * GSp4
  // = -24 * |eta     |
  //         |    G6/4|
  a_m.set_constant(0);
  a_m.set_value(0,0,-24);
  a_m.set_value(1,1, 24);
  a_m.set_value(2,2, 24);
  a_m.set_value(3,3, 24);
  a_m.set_value(4,4, -6);
  a_m.set_value(5,5, -6);
  a_m.set_value(6,6, -6);
  a_m.set_value(7,7,  6);
  a_m.set_value(8,8,  6);
  a_m.set_value(9,9,  6);
}

/////////////////////////////////////////////////////////////////////////
/// {Ts,TDs,T4*Ts,T4} group : ///////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
template <class T>
inline void set_dirac_decomplex_clifford_group_constants(T a_a[15][15][15]) {
  // see check_dirac decomplexification.

  for(unsigned int i=0;i<15;i++) {
    for(unsigned int j=0;j<15;j++) {
      for(unsigned int k=0;k<15;k++) {
        a_a[i][j][k] = T();
      }
    }
  }

 a_a[0][1][7] = 4;
 a_a[0][2][8] = 4;
 a_a[0][3][9] = 4;
 a_a[0][7][1] = -1;
 a_a[0][8][2] = -1;
 a_a[0][9][3] = -1;
 a_a[0][10][14] = 2;
 a_a[0][14][10] = -2;
 a_a[1][0][7] = -4;
 a_a[1][2][6] = -4;
 a_a[1][3][5] = 4;
 a_a[1][5][3] = 1;
 a_a[1][6][2] = -1;
 a_a[1][7][0] = -1;
 a_a[1][11][14] = -2;
 a_a[1][14][11] = -2;
 a_a[2][0][8] = -4;
 a_a[2][1][6] = 4;
 a_a[2][3][4] = -4;
 a_a[2][4][3] = -1;
 a_a[2][6][1] = 1;
 a_a[2][8][0] = -1;
 a_a[2][12][14] = -2;
 a_a[2][14][12] = -2;
 a_a[3][0][9] = -4;
 a_a[3][1][5] = -4;
 a_a[3][2][4] = 4;
 a_a[3][4][2] = 1;
 a_a[3][5][1] = -1;
 a_a[3][9][0] = -1;
 a_a[3][13][14] = -2;
 a_a[3][14][13] = -2;
 a_a[4][2][3] = 1;
 a_a[4][3][2] = -1;
 a_a[4][5][6] = 1;
 a_a[4][6][5] = -1;
 a_a[4][8][9] = 1;
 a_a[4][9][8] = -1;
 a_a[4][12][13] = 1;
 a_a[4][13][12] = -1;
 a_a[5][1][3] = -1;
 a_a[5][3][1] = 1;
 a_a[5][4][6] = -1;
 a_a[5][6][4] = 1;
 a_a[5][7][9] = -1;
 a_a[5][9][7] = 1;
 a_a[5][11][13] = -1;
 a_a[5][13][11] = 1;
 a_a[6][1][2] = 1;
 a_a[6][2][1] = -1;
 a_a[6][4][5] = 1;
 a_a[6][5][4] = -1;
 a_a[6][7][8] = 1;
 a_a[6][8][7] = -1;
 a_a[6][11][12] = 1;
 a_a[6][12][11] = -1;
 a_a[7][0][1] = 1;
 a_a[7][1][0] = 1;
 a_a[7][5][9] = 1;
 a_a[7][6][8] = -1;
 a_a[7][8][6] = -1;
 a_a[7][9][5] = 1;
 a_a[7][10][11] = 1;
 a_a[7][11][10] = 1;
 a_a[8][0][2] = 1;
 a_a[8][2][0] = 1;
 a_a[8][4][9] = -1;
 a_a[8][6][7] = 1;
 a_a[8][7][6] = 1;
 a_a[8][9][4] = -1;
 a_a[8][10][12] = 1;
 a_a[8][12][10] = 1;
 a_a[9][0][3] = 1;
 a_a[9][3][0] = 1;
 a_a[9][4][8] = 1;
 a_a[9][5][7] = -1;
 a_a[9][7][5] = -1;
 a_a[9][8][4] = 1;
 a_a[9][10][13] = 1;
 a_a[9][13][10] = 1;
 a_a[10][0][14] = -2;
 a_a[10][7][11] = -1;
 a_a[10][8][12] = -1;
 a_a[10][9][13] = -1;
 a_a[10][11][7] = 4;
 a_a[10][12][8] = 4;
 a_a[10][13][9] = 4;
 a_a[10][14][0] = 2;
 a_a[11][1][14] = 2;
 a_a[11][5][13] = 1;
 a_a[11][6][12] = -1;
 a_a[11][7][10] = -1;
 a_a[11][10][7] = -4;
 a_a[11][12][6] = -4;
 a_a[11][13][5] = 4;
 a_a[11][14][1] = 2;
 a_a[12][2][14] = 2;
 a_a[12][4][13] = -1;
 a_a[12][6][11] = 1;
 a_a[12][8][10] = -1;
 a_a[12][10][8] = -4;
 a_a[12][11][6] = 4;
 a_a[12][13][4] = -4;
 a_a[12][14][2] = 2;
 a_a[13][3][14] = 2;
 a_a[13][4][12] = 1;
 a_a[13][5][11] = -1;
 a_a[13][9][10] = -1;
 a_a[13][10][9] = -4;
 a_a[13][11][5] = -4;
 a_a[13][12][4] = 4;
 a_a[13][14][3] = 2;
 a_a[14][0][10] = 2;
 a_a[14][1][11] = 2;
 a_a[14][2][12] = 2;
 a_a[14][3][13] = 2;
 a_a[14][10][0] = -2;
 a_a[14][11][1] = -2;
 a_a[14][12][2] = -2;
 a_a[14][13][3] = -2;

}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/*
template <class T>
inline void set_no_i_Sp4_group_constants(T a_a[10][10][10]) {
  set__Sp4_group_constants(a_a);
 {for(unsigned int mu=0;mu<4;mu++) {
    for(unsigned int nu=0;nu<4;nu++) {
      for(unsigned int B=0;B<10;B++) {
        a_a[mu][nu][B] *= T(-1);
      }
    }
  }}
}
*/

/////////////////////////////////////////////////////////////////////////
/// Ss*A group : ////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set_Ss_A_group_constants(const T a_V[3],const T a_W[3],T a_csts[10][10][10]) {
  // a_V,a_W are 3 dim vectors (to set an antisymmetric A44 matrix).

  // see : tests/test/check_A4_SA/search_A44_group_constants :
  // A(V,W) = V*(E1,2,3) + W*(E6,5,4)
  // Ss = (D1,D2,D3,D4, abs(E1),abs(E2),abs(E3), abs(E6),abs(E5),abs(E4))
  // If reps[B] = Ss[B]*A (10 matrices) we have :
  //   [reps(A),reps(B)] = csts(A,B,C) reps(C)

  for(unsigned int i=0;i<10;i++) {
    for(unsigned int j=0;j<10;j++) {
      for(unsigned int k=0;k<10;k++) {
        a_csts[i][j][k] = T();
      }
    }
  }
  // a_csts[r][t>r] :
  a_csts[0][1][7] = a_W[0];
  a_csts[0][2][8] = a_W[1];
  a_csts[0][3][9] = a_W[2];
  a_csts[0][4][8] = a_W[2];
  a_csts[0][4][9] = a_W[1];
  a_csts[0][5][7] = a_W[2];
  a_csts[0][5][9] = a_W[0];
  a_csts[0][6][7] = a_W[1];
  a_csts[0][6][8] = a_W[0];
  a_csts[0][7][0] = 2*a_W[0];
  a_csts[0][8][0] = 2*a_W[1];
  a_csts[0][9][0] = 2*a_W[2];
  a_csts[1][2][6] = a_V[2];
  a_csts[1][3][5] = -a_V[1];
  a_csts[1][4][5] = a_V[2];
  a_csts[1][4][6] = -a_V[1];
  a_csts[1][5][1] = -2*a_V[1];
  a_csts[1][6][1] = 2*a_V[2];
  a_csts[1][7][1] = -2*a_W[0];
  a_csts[1][8][6] = -a_W[0];
  a_csts[1][8][7] = a_V[2];
  a_csts[1][9][5] = -a_W[0];
  a_csts[1][9][7] = -a_V[1];
  a_csts[2][3][4] = a_V[0];
  a_csts[2][4][2] = 2*a_V[0];
  a_csts[2][5][4] = -a_V[2];
  a_csts[2][5][6] = a_V[0];
  a_csts[2][6][2] = -2*a_V[2];
  a_csts[2][7][6] = -a_W[1];
  a_csts[2][7][8] = -a_V[2];
  a_csts[2][8][2] = -2*a_W[1];
  a_csts[2][9][4] = -a_W[1];
  a_csts[2][9][8] = a_V[0];
  a_csts[3][4][3] = -2*a_V[0];
  a_csts[3][5][3] = 2*a_V[1];
  a_csts[3][6][4] = a_V[1];
  a_csts[3][6][5] = -a_V[0];
  a_csts[3][7][5] = -a_W[2];
  a_csts[3][7][9] = a_V[1];
  a_csts[3][8][4] = -a_W[2];
  a_csts[3][8][9] = -a_V[0];
  a_csts[3][9][3] = -2*a_W[2];
  a_csts[4][5][3] = -2*a_V[2];
  a_csts[4][5][4] = a_V[1];
  a_csts[4][5][5] = a_V[0];
  a_csts[4][6][2] = 2*a_V[1];
  a_csts[4][6][4] = -a_V[2];
  a_csts[4][6][6] = -a_V[0];
  a_csts[4][7][5] = -a_W[1];
  a_csts[4][7][6] = -a_W[2];
  a_csts[4][7][8] = a_V[1];
  a_csts[4][7][9] = -a_V[2];
  a_csts[4][8][2] = -2*a_W[2];
  a_csts[4][8][4] = -a_W[1];
  a_csts[4][8][8] = -a_V[0];
  a_csts[4][9][3] = -2*a_W[1];
  a_csts[4][9][4] = -a_W[2];
  a_csts[4][9][9] = a_V[0];
  a_csts[5][6][1] = -2*a_V[0];
  a_csts[5][6][5] = a_V[2];
  a_csts[5][6][6] = a_V[1];
  a_csts[5][7][1] = -2*a_W[2];
  a_csts[5][7][5] = -a_W[0];
  a_csts[5][7][7] = a_V[1];
  a_csts[5][8][4] = -a_W[0];
  a_csts[5][8][6] = -a_W[2];
  a_csts[5][8][7] = -a_V[0];
  a_csts[5][8][9] = a_V[2];
  a_csts[5][9][3] = -2*a_W[0];
  a_csts[5][9][5] = -a_W[2];
  a_csts[5][9][9] = -a_V[1];
  a_csts[6][7][1] = -2*a_W[1];
  a_csts[6][7][6] = -a_W[0];
  a_csts[6][7][7] = -a_V[2];
  a_csts[6][8][2] = -2*a_W[0];
  a_csts[6][8][6] = -a_W[1];
  a_csts[6][8][8] = a_V[2];
  a_csts[6][9][4] = -a_W[0];
  a_csts[6][9][5] = -a_W[1];
  a_csts[6][9][7] = a_V[0];
  a_csts[6][9][8] = -a_V[1];
  a_csts[7][8][0] = 2*a_V[2];
  a_csts[7][8][7] = a_W[1];
  a_csts[7][8][8] = -a_W[0];
  a_csts[7][9][0] = -2*a_V[1];
  a_csts[7][9][7] = a_W[2];
  a_csts[7][9][9] = -a_W[0];
  a_csts[8][9][0] = 2*a_V[0];
  a_csts[8][9][8] = a_W[2];
  a_csts[8][9][9] = -a_W[1];

  for(unsigned int i=0;i<10;i++) {
    for(unsigned int j=i+1;j<10;j++) {
      for(unsigned int k=0;k<10;k++) {
        a_csts[j][i][k] = T(-1)*a_csts[i][j][k];
      }
    }
  }
}

/////////////////////////////////////////////////////////////////////////
/// Es*S group : ////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set_Es_S_group_constants(const T a_U[4],const T a_V[3],const T a_W[3],T a_csts[6][6][6]) {
  // a_U,a_V,a_W are 4,3 dim vectors (to set a symmetric S44 matrix).

  // If reps[a] = Es[a]*S (6 matrices) we have :
  //   [reps(a),reps(b)] = csts(a,b,c) reps(c)

  for(unsigned int i=0;i<6;i++) {
    for(unsigned int j=0;j<6;j++) {
      for(unsigned int k=0;k<6;k++) {
        a_csts[i][j][k] = T();
      }
    }
  }
  
  // a_csts[r][t>r] :
  a_csts[0][1][0] = -a_V[1];
  a_csts[0][1][1] = -a_V[0];
  a_csts[0][1][2] = -a_U[3];
  a_csts[0][2][0] = a_V[2];
  a_csts[0][2][1] = a_U[2];
  a_csts[0][2][2] = a_V[0];
  a_csts[0][3][1] = -a_W[1];
  a_csts[0][3][2] = -a_W[2];
  a_csts[0][3][4] = a_V[1];
  a_csts[0][3][5] = -a_V[2];
  a_csts[0][4][0] = a_W[1];
  a_csts[0][4][4] = a_V[0];
  a_csts[0][4][5] = -a_U[2];
  a_csts[0][5][0] = a_W[2];
  a_csts[0][5][4] = a_U[3];
  a_csts[0][5][5] = -a_V[0];
  
  a_csts[1][2][0] = -a_U[1];
  a_csts[1][2][1] = -a_V[2];
  a_csts[1][2][2] = -a_V[1];
  a_csts[1][3][1] = a_W[0];
  a_csts[1][3][3] = -a_V[1];
  a_csts[1][3][5] = a_U[1];
  a_csts[1][4][0] = -a_W[0];
  a_csts[1][4][2] = -a_W[2];
  a_csts[1][4][3] = -a_V[0];
  a_csts[1][4][5] = a_V[2];
  a_csts[1][5][1] = a_W[2];
  a_csts[1][5][3] = -a_U[3];
  a_csts[1][5][5] = a_V[1];
  
  a_csts[2][3][2] = a_W[0];
  a_csts[2][3][3] = a_V[2];
  a_csts[2][3][4] = -a_U[1];
  a_csts[2][4][2] = a_W[1];
  a_csts[2][4][3] = a_U[2];
  a_csts[2][4][4] = -a_V[2];
  a_csts[2][5][0] = -a_W[0];
  a_csts[2][5][1] = -a_W[1];
  a_csts[2][5][3] = a_V[0];
  a_csts[2][5][4] = -a_V[1];
  
  a_csts[3][4][2] = -a_U[0];
  a_csts[3][4][3] = -a_W[1];
  a_csts[3][4][4] = a_W[0];
  a_csts[3][5][1] = a_U[0];
  a_csts[3][5][3] = -a_W[2];
  a_csts[3][5][5] = a_W[0];
  
  a_csts[4][5][0] = -a_U[0];
  a_csts[4][5][4] = -a_W[2];
  a_csts[4][5][5] = a_W[1];

  for(unsigned int i=0;i<6;i++) {
    for(unsigned int j=i+1;j<6;j++) {
      for(unsigned int k=0;k<6;k++) {
        a_csts[j][i][k] = T(-1)*a_csts[i][j][k];
      }
    }
  }
}

/////////////////////////////////////////////////////////////////////////
/// SsEs group : ////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

template <class T>
inline void set_Ss_Es_group_constants(T a_csts[60][60][60]) {
  // see : tests/test/check_A4_SA/search_SE_group_constants :
  // If reps[B*6+b] = Ss[B]*Es[b] (60 matrices) we have :
  //   [reps(A),reps(B)] = csts(A,B,C) reps(C)

  for(unsigned int i=0;i<60;i++) {
    for(unsigned int j=0;j<60;j++) {
      for(unsigned int k=0;k<60;k++) {
        a_csts[i][j][k] = T();
      }
    }
  }
  // a_csts[r][t>r] :
  a_csts[3][7][5] = -1;
  a_csts[3][8][4] = 1;
  a_csts[3][9][45] = 1;
  a_csts[3][16][14] = -1;
  a_csts[3][23][19] = 1;
  a_csts[3][28][19] = 1;
  a_csts[3][29][14] = -1;
  a_csts[3][30][4] = -1;
  a_csts[3][31][3] = 1;
  a_csts[3][33][19] = 1;
  a_csts[3][35][45] = 1;
  a_csts[3][36][5] = 1;
  a_csts[3][38][3] = -1;
  a_csts[3][39][14] = -1;
  a_csts[3][40][45] = 1;
  a_csts[3][45][3] = 2;
  a_csts[3][46][4] = 1;
  a_csts[3][47][5] = 1;
  a_csts[3][52][3] = 1;
  a_csts[3][59][3] = 1;
  a_csts[4][9][8] = 1;
  a_csts[4][12][5] = 1;
  a_csts[4][14][3] = -1;
  a_csts[4][16][52] = 1;
  a_csts[4][23][18] = -1;
  a_csts[4][24][4] = -1;
  a_csts[4][25][3] = 1;
  a_csts[4][28][18] = -1;
  a_csts[4][29][52] = 1;
  a_csts[4][33][18] = -1;
  a_csts[4][35][8] = 1;
  a_csts[4][37][5] = -1;
  a_csts[4][38][4] = 1;
  a_csts[4][39][52] = 1;
  a_csts[4][40][8] = 1;
  a_csts[4][45][4] = 1;
  a_csts[4][51][3] = 1;
  a_csts[4][52][4] = 2;
  a_csts[4][53][5] = 1;
  a_csts[4][59][4] = 1;
  a_csts[5][9][7] = -1;
  a_csts[5][16][12] = 1;
  a_csts[5][18][4] = -1;
  a_csts[5][19][3] = 1;
  a_csts[5][23][59] = 1;
  a_csts[5][24][5] = 1;
  a_csts[5][26][3] = -1;
  a_csts[5][28][59] = 1;
  a_csts[5][29][12] = 1;
  a_csts[5][31][5] = -1;
  a_csts[5][32][4] = 1;
  a_csts[5][33][59] = 1;
  a_csts[5][35][7] = -1;
  a_csts[5][39][12] = 1;
  a_csts[5][40][7] = -1;
  a_csts[5][45][5] = 1;
  a_csts[5][52][5] = 1;
  a_csts[5][57][3] = 1;
  a_csts[5][58][4] = 1;
  a_csts[5][59][5] = 2;
  a_csts[7][14][12] = -1;
  a_csts[7][18][8] = 1;
  a_csts[7][19][31] = -1;
  a_csts[7][23][9] = -1;
  a_csts[7][24][7] = 1;
  a_csts[7][25][12] = 1;
  a_csts[7][26][31] = 1;
  a_csts[7][28][9] = -1;
  a_csts[7][31][7] = -2;
  a_csts[7][32][8] = -1;
  a_csts[7][33][9] = -1;
  a_csts[7][38][7] = 1;
  a_csts[7][45][7] = -1;
  a_csts[7][50][5] = -1;
  a_csts[7][51][12] = 1;
  a_csts[7][55][5] = 1;
  a_csts[7][57][31] = -1;
  a_csts[7][58][8] = -1;
  a_csts[7][59][7] = 1;
  a_csts[8][12][7] = -1;
  a_csts[8][14][38] = 1;
  a_csts[8][16][9] = 1;
  a_csts[8][19][18] = 1;
  a_csts[8][24][8] = -1;
  a_csts[8][25][38] = -1;
  a_csts[8][26][18] = -1;
  a_csts[8][29][9] = 1;
  a_csts[8][31][8] = -1;
  a_csts[8][37][7] = 1;
  a_csts[8][38][8] = 2;
  a_csts[8][39][9] = 1;
  a_csts[8][45][8] = -1;
  a_csts[8][50][4] = 1;
  a_csts[8][51][38] = -1;
  a_csts[8][52][8] = 1;
  a_csts[8][53][7] = -1;
  a_csts[8][55][4] = -1;
  a_csts[8][57][18] = 1;
  a_csts[9][14][16] = 1;
  a_csts[9][19][23] = -1;
  a_csts[9][25][16] = -1;
  a_csts[9][26][23] = 1;
  a_csts[9][31][9] = -1;
  a_csts[9][38][9] = 1;
  a_csts[9][43][7] = -1;
  a_csts[9][44][8] = -1;
  a_csts[9][45][9] = -2;
  a_csts[9][48][7] = 1;
  a_csts[9][50][45] = 1;
  a_csts[9][51][16] = -1;
  a_csts[9][52][9] = -1;
  a_csts[9][54][8] = 1;
  a_csts[9][55][45] = -1;
  a_csts[9][57][23] = -1;
  a_csts[9][59][9] = -1;
  a_csts[12][18][24] = 1;
  a_csts[12][19][14] = -1;
  a_csts[12][23][16] = 1;
  a_csts[12][24][12] = 2;
  a_csts[12][26][14] = 1;
  a_csts[12][28][16] = 1;
  a_csts[12][30][7] = -1;
  a_csts[12][31][12] = -1;
  a_csts[12][32][24] = -1;
  a_csts[12][33][16] = 1;
  a_csts[12][38][12] = -1;
  a_csts[12][44][5] = -1;
  a_csts[12][46][7] = 1;
  a_csts[12][52][12] = -1;
  a_csts[12][54][5] = 1;
  a_csts[12][57][14] = -1;
  a_csts[12][58][24] = -1;
  a_csts[12][59][12] = 1;
  a_csts[14][18][19] = -1;
  a_csts[14][24][14] = 1;
  a_csts[14][30][38] = 1;
  a_csts[14][31][14] = 1;
  a_csts[14][32][19] = 1;
  a_csts[14][35][16] = -1;
  a_csts[14][36][12] = -1;
  a_csts[14][38][14] = -2;
  a_csts[14][40][16] = -1;
  a_csts[14][44][3] = 1;
  a_csts[14][45][14] = 1;
  a_csts[14][46][38] = -1;
  a_csts[14][47][12] = -1;
  a_csts[14][52][14] = -1;
  a_csts[14][54][3] = -1;
  a_csts[14][58][19] = 1;
  a_csts[16][18][23] = 1;
  a_csts[16][24][16] = 1;
  a_csts[16][30][9] = 1;
  a_csts[16][32][23] = -1;
  a_csts[16][38][16] = -1;
  a_csts[16][43][12] = 1;
  a_csts[16][44][52] = -1;
  a_csts[16][45][16] = -1;
  a_csts[16][46][9] = -1;
  a_csts[16][48][12] = -1;
  a_csts[16][50][14] = -1;
  a_csts[16][52][16] = -2;
  a_csts[16][54][52] = 1;
  a_csts[16][55][14] = 1;
  a_csts[16][58][23] = -1;
  a_csts[16][59][16] = -1;
  a_csts[18][24][18] = -2;
  a_csts[18][25][19] = -1;
  a_csts[18][29][23] = -1;
  a_csts[18][31][18] = 1;
  a_csts[18][36][8] = 1;
  a_csts[18][37][24] = 1;
  a_csts[18][38][18] = 1;
  a_csts[18][39][23] = -1;
  a_csts[18][43][4] = -1;
  a_csts[18][47][8] = 1;
  a_csts[18][48][4] = 1;
  a_csts[18][51][19] = -1;
  a_csts[18][52][18] = 1;
  a_csts[18][53][24] = -1;
  a_csts[18][59][18] = -1;
  a_csts[19][24][19] = -1;
  a_csts[19][30][18] = 1;
  a_csts[19][31][19] = 2;
  a_csts[19][35][23] = 1;
  a_csts[19][36][31] = -1;
  a_csts[19][37][14] = -1;
  a_csts[19][38][19] = -1;
  a_csts[19][40][23] = 1;
  a_csts[19][43][3] = 1;
  a_csts[19][45][19] = 1;
  a_csts[19][46][18] = -1;
  a_csts[19][47][31] = -1;
  a_csts[19][48][3] = -1;
  a_csts[19][53][14] = 1;
  a_csts[19][59][19] = -1;
  a_csts[23][24][23] = -1;
  a_csts[23][31][23] = 1;
  a_csts[23][36][9] = -1;
  a_csts[23][37][16] = 1;
  a_csts[23][43][59] = 1;
  a_csts[23][44][18] = 1;
  a_csts[23][45][23] = -1;
  a_csts[23][47][9] = -1;
  a_csts[23][48][59] = -1;
  a_csts[23][50][19] = 1;
  a_csts[23][52][23] = -1;
  a_csts[23][53][16] = -1;
  a_csts[23][54][18] = -1;
  a_csts[23][55][19] = -1;
  a_csts[23][59][23] = -2;
  a_csts[24][25][14] = 1;
  a_csts[24][26][19] = -1;
  a_csts[24][28][23] = 1;
  a_csts[24][29][16] = -1;
  a_csts[24][30][8] = -1;
  a_csts[24][32][18] = -2;
  a_csts[24][33][23] = 1;
  a_csts[24][36][7] = 1;
  a_csts[24][37][12] = 2;
  a_csts[24][39][16] = -1;
  a_csts[24][43][5] = 1;
  a_csts[24][44][4] = 1;
  a_csts[24][46][8] = 1;
  a_csts[24][47][7] = 1;
  a_csts[24][48][5] = -1;
  a_csts[24][51][14] = 1;
  a_csts[24][53][12] = -2;
  a_csts[24][54][4] = -1;
  a_csts[24][57][19] = 1;
  a_csts[24][58][18] = -2;
  a_csts[25][30][38] = -1;
  a_csts[25][31][14] = -1;
  a_csts[25][32][19] = -1;
  a_csts[25][35][16] = 1;
  a_csts[25][36][12] = 1;
  a_csts[25][38][14] = 2;
  a_csts[25][40][16] = 1;
  a_csts[25][44][3] = -1;
  a_csts[25][45][14] = -1;
  a_csts[25][46][38] = 1;
  a_csts[25][47][12] = 1;
  a_csts[25][52][14] = 1;
  a_csts[25][54][3] = 1;
  a_csts[25][58][19] = -1;
  a_csts[26][30][18] = -1;
  a_csts[26][31][19] = -2;
  a_csts[26][35][23] = -1;
  a_csts[26][36][31] = 1;
  a_csts[26][37][14] = 1;
  a_csts[26][38][19] = 1;
  a_csts[26][40][23] = -1;
  a_csts[26][43][3] = -1;
  a_csts[26][45][19] = -1;
  a_csts[26][46][18] = 1;
  a_csts[26][47][31] = 1;
  a_csts[26][48][3] = 1;
  a_csts[26][53][14] = -1;
  a_csts[26][59][19] = 1;
  a_csts[28][31][23] = 1;
  a_csts[28][36][9] = -1;
  a_csts[28][37][16] = 1;
  a_csts[28][43][59] = 1;
  a_csts[28][44][18] = 1;
  a_csts[28][45][23] = -1;
  a_csts[28][47][9] = -1;
  a_csts[28][48][59] = -1;
  a_csts[28][50][19] = 1;
  a_csts[28][52][23] = -1;
  a_csts[28][53][16] = -1;
  a_csts[28][54][18] = -1;
  a_csts[28][55][19] = -1;
  a_csts[28][59][23] = -2;
  a_csts[29][30][9] = 1;
  a_csts[29][32][23] = -1;
  a_csts[29][38][16] = -1;
  a_csts[29][43][12] = 1;
  a_csts[29][44][52] = -1;
  a_csts[29][45][16] = -1;
  a_csts[29][46][9] = -1;
  a_csts[29][48][12] = -1;
  a_csts[29][50][14] = -1;
  a_csts[29][52][16] = -2;
  a_csts[29][54][52] = 1;
  a_csts[29][55][14] = 1;
  a_csts[29][58][23] = -1;
  a_csts[29][59][16] = -1;
  a_csts[30][31][8] = 1;
  a_csts[30][37][7] = -1;
  a_csts[30][38][8] = -2;
  a_csts[30][39][9] = -1;
  a_csts[30][45][8] = 1;
  a_csts[30][50][4] = -1;
  a_csts[30][51][38] = 1;
  a_csts[30][52][8] = -1;
  a_csts[30][53][7] = 1;
  a_csts[30][55][4] = 1;
  a_csts[30][57][18] = -1;
  a_csts[31][32][18] = 1;
  a_csts[31][33][23] = -1;
  a_csts[31][35][9] = 1;
  a_csts[31][36][7] = -2;
  a_csts[31][37][12] = -1;
  a_csts[31][40][9] = 1;
  a_csts[31][43][5] = -1;
  a_csts[31][46][8] = 1;
  a_csts[31][47][7] = -2;
  a_csts[31][48][5] = 1;
  a_csts[31][50][3] = 1;
  a_csts[31][51][14] = 1;
  a_csts[31][53][12] = 1;
  a_csts[31][55][3] = -1;
  a_csts[31][57][19] = -2;
  a_csts[31][58][18] = 1;
  a_csts[32][36][8] = -1;
  a_csts[32][37][24] = -1;
  a_csts[32][38][18] = -1;
  a_csts[32][39][23] = 1;
  a_csts[32][43][4] = 1;
  a_csts[32][47][8] = -1;
  a_csts[32][48][4] = -1;
  a_csts[32][51][19] = 1;
  a_csts[32][52][18] = -1;
  a_csts[32][53][24] = 1;
  a_csts[32][59][18] = 1;
  a_csts[33][36][9] = -1;
  a_csts[33][37][16] = 1;
  a_csts[33][43][59] = 1;
  a_csts[33][44][18] = 1;
  a_csts[33][45][23] = -1;
  a_csts[33][47][9] = -1;
  a_csts[33][48][59] = -1;
  a_csts[33][50][19] = 1;
  a_csts[33][52][23] = -1;
  a_csts[33][53][16] = -1;
  a_csts[33][54][18] = -1;
  a_csts[33][55][19] = -1;
  a_csts[33][59][23] = -2;
  a_csts[35][38][9] = 1;
  a_csts[35][43][7] = -1;
  a_csts[35][44][8] = -1;
  a_csts[35][45][9] = -2;
  a_csts[35][48][7] = 1;
  a_csts[35][50][45] = 1;
  a_csts[35][51][16] = -1;
  a_csts[35][52][9] = -1;
  a_csts[35][54][8] = 1;
  a_csts[35][55][45] = -1;
  a_csts[35][57][23] = -1;
  a_csts[35][59][9] = -1;
  a_csts[36][38][7] = -1;
  a_csts[36][45][7] = 1;
  a_csts[36][50][5] = 1;
  a_csts[36][51][12] = -1;
  a_csts[36][55][5] = -1;
  a_csts[36][57][31] = 1;
  a_csts[36][58][8] = 1;
  a_csts[36][59][7] = -1;
  a_csts[37][38][12] = 1;
  a_csts[37][44][5] = 1;
  a_csts[37][46][7] = -1;
  a_csts[37][52][12] = 1;
  a_csts[37][54][5] = -1;
  a_csts[37][57][14] = 1;
  a_csts[37][58][24] = 1;
  a_csts[37][59][12] = -1;
  a_csts[38][39][16] = 1;
  a_csts[38][40][9] = -1;
  a_csts[38][44][4] = -1;
  a_csts[38][46][8] = -2;
  a_csts[38][47][7] = 1;
  a_csts[38][50][3] = -1;
  a_csts[38][51][14] = -2;
  a_csts[38][53][12] = 1;
  a_csts[38][54][4] = 1;
  a_csts[38][55][3] = 1;
  a_csts[38][57][19] = 1;
  a_csts[38][58][18] = 1;
  a_csts[39][43][12] = 1;
  a_csts[39][44][52] = -1;
  a_csts[39][45][16] = -1;
  a_csts[39][46][9] = -1;
  a_csts[39][48][12] = -1;
  a_csts[39][50][14] = -1;
  a_csts[39][52][16] = -2;
  a_csts[39][54][52] = 1;
  a_csts[39][55][14] = 1;
  a_csts[39][58][23] = -1;
  a_csts[39][59][16] = -1;
  a_csts[40][43][7] = -1;
  a_csts[40][44][8] = -1;
  a_csts[40][45][9] = -2;
  a_csts[40][48][7] = 1;
  a_csts[40][50][45] = 1;
  a_csts[40][51][16] = -1;
  a_csts[40][52][9] = -1;
  a_csts[40][54][8] = 1;
  a_csts[40][55][45] = -1;
  a_csts[40][57][23] = -1;
  a_csts[40][59][9] = -1;
  a_csts[43][45][5] = -1;
  a_csts[43][52][5] = -1;
  a_csts[43][57][3] = -1;
  a_csts[43][58][4] = -1;
  a_csts[43][59][5] = -2;
  a_csts[44][45][4] = 1;
  a_csts[44][51][3] = 1;
  a_csts[44][52][4] = 2;
  a_csts[44][53][5] = 1;
  a_csts[44][59][4] = 1;
  a_csts[45][46][8] = 1;
  a_csts[45][47][7] = -1;
  a_csts[45][48][5] = -1;
  a_csts[45][50][3] = 2;
  a_csts[45][51][14] = 1;
  a_csts[45][54][4] = 1;
  a_csts[45][55][3] = -2;
  a_csts[45][57][19] = -1;
  a_csts[46][50][4] = 1;
  a_csts[46][51][38] = -1;
  a_csts[46][52][8] = 1;
  a_csts[46][53][7] = -1;
  a_csts[46][55][4] = -1;
  a_csts[46][57][18] = 1;
  a_csts[47][50][5] = 1;
  a_csts[47][51][12] = -1;
  a_csts[47][55][5] = -1;
  a_csts[47][57][31] = 1;
  a_csts[47][58][8] = 1;
  a_csts[47][59][7] = -1;
  a_csts[48][52][5] = 1;
  a_csts[48][57][3] = 1;
  a_csts[48][58][4] = 1;
  a_csts[48][59][5] = 2;
  a_csts[50][52][3] = -1;
  a_csts[50][59][3] = -1;
  a_csts[51][52][14] = 1;
  a_csts[51][54][3] = 1;
  a_csts[51][58][19] = -1;
  a_csts[52][53][12] = 1;
  a_csts[52][54][4] = 2;
  a_csts[52][55][3] = -1;
  a_csts[52][58][18] = 1;
  a_csts[53][54][5] = 1;
  a_csts[53][57][14] = -1;
  a_csts[53][58][24] = -1;
  a_csts[53][59][12] = 1;
  a_csts[54][59][4] = -1;
  a_csts[55][59][3] = 1;
  a_csts[57][59][19] = -1;
  a_csts[58][59][18] = 1;

  for(unsigned int i=0;i<60;i++) {
    for(unsigned int j=i+1;j<60;j++) {
      for(unsigned int k=0;k<60;k++) {
        a_csts[j][i][k] = T(-1)*a_csts[i][j][k];
      }
    }
  }
}


template <class T>
inline void set_Ss_Es_group_constants(gcsts<T,60>& a_csts) {
  // see : tests/test/check_A4_SA/search_SE_group_constants :
  // If reps[B*6+b] = Ss[B]*Es[b] (60 matrices) we have :
  //   [reps(A),reps(B)] = csts(A,B,C) reps(C)

  for(unsigned int i=0;i<60;i++) {
    for(unsigned int j=0;j<60;j++) {
      for(unsigned int k=0;k<60;k++) {
        a_csts.set_value(i,j,k,T());
      }
    }
  }
  // a_csts.set_value(r,t>r] :
  a_csts.set_value(3,7,5,-1);
  a_csts.set_value(3,8,4,1);
  a_csts.set_value(3,9,45,1);
  a_csts.set_value(3,16,14,-1);
  a_csts.set_value(3,23,19,1);
  a_csts.set_value(3,28,19,1);
  a_csts.set_value(3,29,14,-1);
  a_csts.set_value(3,30,4,-1);
  a_csts.set_value(3,31,3,1);
  a_csts.set_value(3,33,19,1);
  a_csts.set_value(3,35,45,1);
  a_csts.set_value(3,36,5,1);
  a_csts.set_value(3,38,3,-1);
  a_csts.set_value(3,39,14,-1);
  a_csts.set_value(3,40,45,1);
  a_csts.set_value(3,45,3,2);
  a_csts.set_value(3,46,4,1);
  a_csts.set_value(3,47,5,1);
  a_csts.set_value(3,52,3,1);
  a_csts.set_value(3,59,3,1);
  a_csts.set_value(4,9,8,1);
  a_csts.set_value(4,12,5,1);
  a_csts.set_value(4,14,3,-1);
  a_csts.set_value(4,16,52,1);
  a_csts.set_value(4,23,18,-1);
  a_csts.set_value(4,24,4,-1);
  a_csts.set_value(4,25,3,1);
  a_csts.set_value(4,28,18,-1);
  a_csts.set_value(4,29,52,1);
  a_csts.set_value(4,33,18,-1);
  a_csts.set_value(4,35,8,1);
  a_csts.set_value(4,37,5,-1);
  a_csts.set_value(4,38,4,1);
  a_csts.set_value(4,39,52,1);
  a_csts.set_value(4,40,8,1);
  a_csts.set_value(4,45,4,1);
  a_csts.set_value(4,51,3,1);
  a_csts.set_value(4,52,4,2);
  a_csts.set_value(4,53,5,1);
  a_csts.set_value(4,59,4,1);
  a_csts.set_value(5,9,7,-1);
  a_csts.set_value(5,16,12,1);
  a_csts.set_value(5,18,4,-1);
  a_csts.set_value(5,19,3,1);
  a_csts.set_value(5,23,59,1);
  a_csts.set_value(5,24,5,1);
  a_csts.set_value(5,26,3,-1);
  a_csts.set_value(5,28,59,1);
  a_csts.set_value(5,29,12,1);
  a_csts.set_value(5,31,5,-1);
  a_csts.set_value(5,32,4,1);
  a_csts.set_value(5,33,59,1);
  a_csts.set_value(5,35,7,-1);
  a_csts.set_value(5,39,12,1);
  a_csts.set_value(5,40,7,-1);
  a_csts.set_value(5,45,5,1);
  a_csts.set_value(5,52,5,1);
  a_csts.set_value(5,57,3,1);
  a_csts.set_value(5,58,4,1);
  a_csts.set_value(5,59,5,2);
  a_csts.set_value(7,14,12,-1);
  a_csts.set_value(7,18,8,1);
  a_csts.set_value(7,19,31,-1);
  a_csts.set_value(7,23,9,-1);
  a_csts.set_value(7,24,7,1);
  a_csts.set_value(7,25,12,1);
  a_csts.set_value(7,26,31,1);
  a_csts.set_value(7,28,9,-1);
  a_csts.set_value(7,31,7,-2);
  a_csts.set_value(7,32,8,-1);
  a_csts.set_value(7,33,9,-1);
  a_csts.set_value(7,38,7,1);
  a_csts.set_value(7,45,7,-1);
  a_csts.set_value(7,50,5,-1);
  a_csts.set_value(7,51,12,1);
  a_csts.set_value(7,55,5,1);
  a_csts.set_value(7,57,31,-1);
  a_csts.set_value(7,58,8,-1);
  a_csts.set_value(7,59,7,1);
  a_csts.set_value(8,12,7,-1);
  a_csts.set_value(8,14,38,1);
  a_csts.set_value(8,16,9,1);
  a_csts.set_value(8,19,18,1);
  a_csts.set_value(8,24,8,-1);
  a_csts.set_value(8,25,38,-1);
  a_csts.set_value(8,26,18,-1);
  a_csts.set_value(8,29,9,1);
  a_csts.set_value(8,31,8,-1);
  a_csts.set_value(8,37,7,1);
  a_csts.set_value(8,38,8,2);
  a_csts.set_value(8,39,9,1);
  a_csts.set_value(8,45,8,-1);
  a_csts.set_value(8,50,4,1);
  a_csts.set_value(8,51,38,-1);
  a_csts.set_value(8,52,8,1);
  a_csts.set_value(8,53,7,-1);
  a_csts.set_value(8,55,4,-1);
  a_csts.set_value(8,57,18,1);
  a_csts.set_value(9,14,16,1);
  a_csts.set_value(9,19,23,-1);
  a_csts.set_value(9,25,16,-1);
  a_csts.set_value(9,26,23,1);
  a_csts.set_value(9,31,9,-1);
  a_csts.set_value(9,38,9,1);
  a_csts.set_value(9,43,7,-1);
  a_csts.set_value(9,44,8,-1);
  a_csts.set_value(9,45,9,-2);
  a_csts.set_value(9,48,7,1);
  a_csts.set_value(9,50,45,1);
  a_csts.set_value(9,51,16,-1);
  a_csts.set_value(9,52,9,-1);
  a_csts.set_value(9,54,8,1);
  a_csts.set_value(9,55,45,-1);
  a_csts.set_value(9,57,23,-1);
  a_csts.set_value(9,59,9,-1);
  a_csts.set_value(12,18,24,1);
  a_csts.set_value(12,19,14,-1);
  a_csts.set_value(12,23,16,1);
  a_csts.set_value(12,24,12,2);
  a_csts.set_value(12,26,14,1);
  a_csts.set_value(12,28,16,1);
  a_csts.set_value(12,30,7,-1);
  a_csts.set_value(12,31,12,-1);
  a_csts.set_value(12,32,24,-1);
  a_csts.set_value(12,33,16,1);
  a_csts.set_value(12,38,12,-1);
  a_csts.set_value(12,44,5,-1);
  a_csts.set_value(12,46,7,1);
  a_csts.set_value(12,52,12,-1);
  a_csts.set_value(12,54,5,1);
  a_csts.set_value(12,57,14,-1);
  a_csts.set_value(12,58,24,-1);
  a_csts.set_value(12,59,12,1);
  a_csts.set_value(14,18,19,-1);
  a_csts.set_value(14,24,14,1);
  a_csts.set_value(14,30,38,1);
  a_csts.set_value(14,31,14,1);
  a_csts.set_value(14,32,19,1);
  a_csts.set_value(14,35,16,-1);
  a_csts.set_value(14,36,12,-1);
  a_csts.set_value(14,38,14,-2);
  a_csts.set_value(14,40,16,-1);
  a_csts.set_value(14,44,3,1);
  a_csts.set_value(14,45,14,1);
  a_csts.set_value(14,46,38,-1);
  a_csts.set_value(14,47,12,-1);
  a_csts.set_value(14,52,14,-1);
  a_csts.set_value(14,54,3,-1);
  a_csts.set_value(14,58,19,1);
  a_csts.set_value(16,18,23,1);
  a_csts.set_value(16,24,16,1);
  a_csts.set_value(16,30,9,1);
  a_csts.set_value(16,32,23,-1);
  a_csts.set_value(16,38,16,-1);
  a_csts.set_value(16,43,12,1);
  a_csts.set_value(16,44,52,-1);
  a_csts.set_value(16,45,16,-1);
  a_csts.set_value(16,46,9,-1);
  a_csts.set_value(16,48,12,-1);
  a_csts.set_value(16,50,14,-1);
  a_csts.set_value(16,52,16,-2);
  a_csts.set_value(16,54,52,1);
  a_csts.set_value(16,55,14,1);
  a_csts.set_value(16,58,23,-1);
  a_csts.set_value(16,59,16,-1);
  a_csts.set_value(18,24,18,-2);
  a_csts.set_value(18,25,19,-1);
  a_csts.set_value(18,29,23,-1);
  a_csts.set_value(18,31,18,1);
  a_csts.set_value(18,36,8,1);
  a_csts.set_value(18,37,24,1);
  a_csts.set_value(18,38,18,1);
  a_csts.set_value(18,39,23,-1);
  a_csts.set_value(18,43,4,-1);
  a_csts.set_value(18,47,8,1);
  a_csts.set_value(18,48,4,1);
  a_csts.set_value(18,51,19,-1);
  a_csts.set_value(18,52,18,1);
  a_csts.set_value(18,53,24,-1);
  a_csts.set_value(18,59,18,-1);
  a_csts.set_value(19,24,19,-1);
  a_csts.set_value(19,30,18,1);
  a_csts.set_value(19,31,19,2);
  a_csts.set_value(19,35,23,1);
  a_csts.set_value(19,36,31,-1);
  a_csts.set_value(19,37,14,-1);
  a_csts.set_value(19,38,19,-1);
  a_csts.set_value(19,40,23,1);
  a_csts.set_value(19,43,3,1);
  a_csts.set_value(19,45,19,1);
  a_csts.set_value(19,46,18,-1);
  a_csts.set_value(19,47,31,-1);
  a_csts.set_value(19,48,3,-1);
  a_csts.set_value(19,53,14,1);
  a_csts.set_value(19,59,19,-1);
  a_csts.set_value(23,24,23,-1);
  a_csts.set_value(23,31,23,1);
  a_csts.set_value(23,36,9,-1);
  a_csts.set_value(23,37,16,1);
  a_csts.set_value(23,43,59,1);
  a_csts.set_value(23,44,18,1);
  a_csts.set_value(23,45,23,-1);
  a_csts.set_value(23,47,9,-1);
  a_csts.set_value(23,48,59,-1);
  a_csts.set_value(23,50,19,1);
  a_csts.set_value(23,52,23,-1);
  a_csts.set_value(23,53,16,-1);
  a_csts.set_value(23,54,18,-1);
  a_csts.set_value(23,55,19,-1);
  a_csts.set_value(23,59,23,-2);
  a_csts.set_value(24,25,14,1);
  a_csts.set_value(24,26,19,-1);
  a_csts.set_value(24,28,23,1);
  a_csts.set_value(24,29,16,-1);
  a_csts.set_value(24,30,8,-1);
  a_csts.set_value(24,32,18,-2);
  a_csts.set_value(24,33,23,1);
  a_csts.set_value(24,36,7,1);
  a_csts.set_value(24,37,12,2);
  a_csts.set_value(24,39,16,-1);
  a_csts.set_value(24,43,5,1);
  a_csts.set_value(24,44,4,1);
  a_csts.set_value(24,46,8,1);
  a_csts.set_value(24,47,7,1);
  a_csts.set_value(24,48,5,-1);
  a_csts.set_value(24,51,14,1);
  a_csts.set_value(24,53,12,-2);
  a_csts.set_value(24,54,4,-1);
  a_csts.set_value(24,57,19,1);
  a_csts.set_value(24,58,18,-2);
  a_csts.set_value(25,30,38,-1);
  a_csts.set_value(25,31,14,-1);
  a_csts.set_value(25,32,19,-1);
  a_csts.set_value(25,35,16,1);
  a_csts.set_value(25,36,12,1);
  a_csts.set_value(25,38,14,2);
  a_csts.set_value(25,40,16,1);
  a_csts.set_value(25,44,3,-1);
  a_csts.set_value(25,45,14,-1);
  a_csts.set_value(25,46,38,1);
  a_csts.set_value(25,47,12,1);
  a_csts.set_value(25,52,14,1);
  a_csts.set_value(25,54,3,1);
  a_csts.set_value(25,58,19,-1);
  a_csts.set_value(26,30,18,-1);
  a_csts.set_value(26,31,19,-2);
  a_csts.set_value(26,35,23,-1);
  a_csts.set_value(26,36,31,1);
  a_csts.set_value(26,37,14,1);
  a_csts.set_value(26,38,19,1);
  a_csts.set_value(26,40,23,-1);
  a_csts.set_value(26,43,3,-1);
  a_csts.set_value(26,45,19,-1);
  a_csts.set_value(26,46,18,1);
  a_csts.set_value(26,47,31,1);
  a_csts.set_value(26,48,3,1);
  a_csts.set_value(26,53,14,-1);
  a_csts.set_value(26,59,19,1);
  a_csts.set_value(28,31,23,1);
  a_csts.set_value(28,36,9,-1);
  a_csts.set_value(28,37,16,1);
  a_csts.set_value(28,43,59,1);
  a_csts.set_value(28,44,18,1);
  a_csts.set_value(28,45,23,-1);
  a_csts.set_value(28,47,9,-1);
  a_csts.set_value(28,48,59,-1);
  a_csts.set_value(28,50,19,1);
  a_csts.set_value(28,52,23,-1);
  a_csts.set_value(28,53,16,-1);
  a_csts.set_value(28,54,18,-1);
  a_csts.set_value(28,55,19,-1);
  a_csts.set_value(28,59,23,-2);
  a_csts.set_value(29,30,9,1);
  a_csts.set_value(29,32,23,-1);
  a_csts.set_value(29,38,16,-1);
  a_csts.set_value(29,43,12,1);
  a_csts.set_value(29,44,52,-1);
  a_csts.set_value(29,45,16,-1);
  a_csts.set_value(29,46,9,-1);
  a_csts.set_value(29,48,12,-1);
  a_csts.set_value(29,50,14,-1);
  a_csts.set_value(29,52,16,-2);
  a_csts.set_value(29,54,52,1);
  a_csts.set_value(29,55,14,1);
  a_csts.set_value(29,58,23,-1);
  a_csts.set_value(29,59,16,-1);
  a_csts.set_value(30,31,8,1);
  a_csts.set_value(30,37,7,-1);
  a_csts.set_value(30,38,8,-2);
  a_csts.set_value(30,39,9,-1);
  a_csts.set_value(30,45,8,1);
  a_csts.set_value(30,50,4,-1);
  a_csts.set_value(30,51,38,1);
  a_csts.set_value(30,52,8,-1);
  a_csts.set_value(30,53,7,1);
  a_csts.set_value(30,55,4,1);
  a_csts.set_value(30,57,18,-1);
  a_csts.set_value(31,32,18,1);
  a_csts.set_value(31,33,23,-1);
  a_csts.set_value(31,35,9,1);
  a_csts.set_value(31,36,7,-2);
  a_csts.set_value(31,37,12,-1);
  a_csts.set_value(31,40,9,1);
  a_csts.set_value(31,43,5,-1);
  a_csts.set_value(31,46,8,1);
  a_csts.set_value(31,47,7,-2);
  a_csts.set_value(31,48,5,1);
  a_csts.set_value(31,50,3,1);
  a_csts.set_value(31,51,14,1);
  a_csts.set_value(31,53,12,1);
  a_csts.set_value(31,55,3,-1);
  a_csts.set_value(31,57,19,-2);
  a_csts.set_value(31,58,18,1);
  a_csts.set_value(32,36,8,-1);
  a_csts.set_value(32,37,24,-1);
  a_csts.set_value(32,38,18,-1);
  a_csts.set_value(32,39,23,1);
  a_csts.set_value(32,43,4,1);
  a_csts.set_value(32,47,8,-1);
  a_csts.set_value(32,48,4,-1);
  a_csts.set_value(32,51,19,1);
  a_csts.set_value(32,52,18,-1);
  a_csts.set_value(32,53,24,1);
  a_csts.set_value(32,59,18,1);
  a_csts.set_value(33,36,9,-1);
  a_csts.set_value(33,37,16,1);
  a_csts.set_value(33,43,59,1);
  a_csts.set_value(33,44,18,1);
  a_csts.set_value(33,45,23,-1);
  a_csts.set_value(33,47,9,-1);
  a_csts.set_value(33,48,59,-1);
  a_csts.set_value(33,50,19,1);
  a_csts.set_value(33,52,23,-1);
  a_csts.set_value(33,53,16,-1);
  a_csts.set_value(33,54,18,-1);
  a_csts.set_value(33,55,19,-1);
  a_csts.set_value(33,59,23,-2);
  a_csts.set_value(35,38,9,1);
  a_csts.set_value(35,43,7,-1);
  a_csts.set_value(35,44,8,-1);
  a_csts.set_value(35,45,9,-2);
  a_csts.set_value(35,48,7,1);
  a_csts.set_value(35,50,45,1);
  a_csts.set_value(35,51,16,-1);
  a_csts.set_value(35,52,9,-1);
  a_csts.set_value(35,54,8,1);
  a_csts.set_value(35,55,45,-1);
  a_csts.set_value(35,57,23,-1);
  a_csts.set_value(35,59,9,-1);
  a_csts.set_value(36,38,7,-1);
  a_csts.set_value(36,45,7,1);
  a_csts.set_value(36,50,5,1);
  a_csts.set_value(36,51,12,-1);
  a_csts.set_value(36,55,5,-1);
  a_csts.set_value(36,57,31,1);
  a_csts.set_value(36,58,8,1);
  a_csts.set_value(36,59,7,-1);
  a_csts.set_value(37,38,12,1);
  a_csts.set_value(37,44,5,1);
  a_csts.set_value(37,46,7,-1);
  a_csts.set_value(37,52,12,1);
  a_csts.set_value(37,54,5,-1);
  a_csts.set_value(37,57,14,1);
  a_csts.set_value(37,58,24,1);
  a_csts.set_value(37,59,12,-1);
  a_csts.set_value(38,39,16,1);
  a_csts.set_value(38,40,9,-1);
  a_csts.set_value(38,44,4,-1);
  a_csts.set_value(38,46,8,-2);
  a_csts.set_value(38,47,7,1);
  a_csts.set_value(38,50,3,-1);
  a_csts.set_value(38,51,14,-2);
  a_csts.set_value(38,53,12,1);
  a_csts.set_value(38,54,4,1);
  a_csts.set_value(38,55,3,1);
  a_csts.set_value(38,57,19,1);
  a_csts.set_value(38,58,18,1);
  a_csts.set_value(39,43,12,1);
  a_csts.set_value(39,44,52,-1);
  a_csts.set_value(39,45,16,-1);
  a_csts.set_value(39,46,9,-1);
  a_csts.set_value(39,48,12,-1);
  a_csts.set_value(39,50,14,-1);
  a_csts.set_value(39,52,16,-2);
  a_csts.set_value(39,54,52,1);
  a_csts.set_value(39,55,14,1);
  a_csts.set_value(39,58,23,-1);
  a_csts.set_value(39,59,16,-1);
  a_csts.set_value(40,43,7,-1);
  a_csts.set_value(40,44,8,-1);
  a_csts.set_value(40,45,9,-2);
  a_csts.set_value(40,48,7,1);
  a_csts.set_value(40,50,45,1);
  a_csts.set_value(40,51,16,-1);
  a_csts.set_value(40,52,9,-1);
  a_csts.set_value(40,54,8,1);
  a_csts.set_value(40,55,45,-1);
  a_csts.set_value(40,57,23,-1);
  a_csts.set_value(40,59,9,-1);
  a_csts.set_value(43,45,5,-1);
  a_csts.set_value(43,52,5,-1);
  a_csts.set_value(43,57,3,-1);
  a_csts.set_value(43,58,4,-1);
  a_csts.set_value(43,59,5,-2);
  a_csts.set_value(44,45,4,1);
  a_csts.set_value(44,51,3,1);
  a_csts.set_value(44,52,4,2);
  a_csts.set_value(44,53,5,1);
  a_csts.set_value(44,59,4,1);
  a_csts.set_value(45,46,8,1);
  a_csts.set_value(45,47,7,-1);
  a_csts.set_value(45,48,5,-1);
  a_csts.set_value(45,50,3,2);
  a_csts.set_value(45,51,14,1);
  a_csts.set_value(45,54,4,1);
  a_csts.set_value(45,55,3,-2);
  a_csts.set_value(45,57,19,-1);
  a_csts.set_value(46,50,4,1);
  a_csts.set_value(46,51,38,-1);
  a_csts.set_value(46,52,8,1);
  a_csts.set_value(46,53,7,-1);
  a_csts.set_value(46,55,4,-1);
  a_csts.set_value(46,57,18,1);
  a_csts.set_value(47,50,5,1);
  a_csts.set_value(47,51,12,-1);
  a_csts.set_value(47,55,5,-1);
  a_csts.set_value(47,57,31,1);
  a_csts.set_value(47,58,8,1);
  a_csts.set_value(47,59,7,-1);
  a_csts.set_value(48,52,5,1);
  a_csts.set_value(48,57,3,1);
  a_csts.set_value(48,58,4,1);
  a_csts.set_value(48,59,5,2);
  a_csts.set_value(50,52,3,-1);
  a_csts.set_value(50,59,3,-1);
  a_csts.set_value(51,52,14,1);
  a_csts.set_value(51,54,3,1);
  a_csts.set_value(51,58,19,-1);
  a_csts.set_value(52,53,12,1);
  a_csts.set_value(52,54,4,2);
  a_csts.set_value(52,55,3,-1);
  a_csts.set_value(52,58,18,1);
  a_csts.set_value(53,54,5,1);
  a_csts.set_value(53,57,14,-1);
  a_csts.set_value(53,58,24,-1);
  a_csts.set_value(53,59,12,1);
  a_csts.set_value(54,59,4,-1);
  a_csts.set_value(55,59,3,1);
  a_csts.set_value(57,59,19,-1);
  a_csts.set_value(58,59,18,1);

  for(unsigned int i=0;i<60;i++) {
    for(unsigned int j=i+1;j<60;j++) {
      for(unsigned int k=0;k<60;k++) {
        a_csts.set_value(j,i,k,T(-1)*a_csts.value(i,j,k));
      }
    }
  }
}

template <class T>
inline void set_Ss_Es_unique_group_constants(T a_csts[27][27][27]) {
  // see : tests/test/check_A4_SA/search_SE_unique_group_constants :
  for(unsigned int i=0;i<27;i++) {
    for(unsigned int j=0;j<27;j++) {
      for(unsigned int k=0;k<27;k++) {
        a_csts[i][j][k] = T();
      }
    }
  }
  // a_csts[r][t>r] :
  a_csts[0][3][2] = -1;
  a_csts[0][4][1] = 1;
  a_csts[0][5][22] = 1;
  a_csts[0][8][7] = -1;
  a_csts[0][11][10] = 1;
  a_csts[0][15][1] = -1;
  a_csts[0][16][0] = 1;
  a_csts[0][18][2] = 1;
  a_csts[0][20][0] = -1;
  a_csts[0][22][0] = 2;
  a_csts[0][24][0] = 1;
  a_csts[0][26][0] = 1;
  a_csts[1][5][4] = 1;
  a_csts[1][6][2] = 1;
  a_csts[1][7][0] = -1;
  a_csts[1][8][24] = 1;
  a_csts[1][11][9] = -1;
  a_csts[1][12][1] = -1;
  a_csts[1][13][0] = 1;
  a_csts[1][19][2] = -1;
  a_csts[1][20][1] = 1;
  a_csts[1][22][1] = 1;
  a_csts[1][24][1] = 2;
  a_csts[1][26][1] = 1;
  a_csts[2][5][3] = -1;
  a_csts[2][8][6] = 1;
  a_csts[2][9][1] = -1;
  a_csts[2][10][0] = 1;
  a_csts[2][11][26] = 1;
  a_csts[2][12][2] = 1;
  a_csts[2][14][0] = -1;
  a_csts[2][16][2] = -1;
  a_csts[2][17][1] = 1;
  a_csts[2][22][2] = 1;
  a_csts[2][24][2] = 1;
  a_csts[2][26][2] = 2;
  a_csts[3][7][6] = -1;
  a_csts[3][9][4] = 1;
  a_csts[3][10][16] = -1;
  a_csts[3][11][5] = -1;
  a_csts[3][12][3] = 1;
  a_csts[3][13][6] = 1;
  a_csts[3][14][16] = 1;
  a_csts[3][16][3] = -2;
  a_csts[3][17][4] = -1;
  a_csts[3][20][3] = 1;
  a_csts[3][22][3] = -1;
  a_csts[3][23][2] = -1;
  a_csts[3][26][3] = 1;
  a_csts[4][6][3] = -1;
  a_csts[4][7][20] = 1;
  a_csts[4][8][5] = 1;
  a_csts[4][10][9] = 1;
  a_csts[4][12][4] = -1;
  a_csts[4][13][20] = -1;
  a_csts[4][14][9] = -1;
  a_csts[4][16][4] = -1;
  a_csts[4][19][3] = 1;
  a_csts[4][20][4] = 2;
  a_csts[4][22][4] = -1;
  a_csts[4][23][1] = 1;
  a_csts[4][24][4] = 1;
  a_csts[5][7][8] = 1;
  a_csts[5][10][11] = -1;
  a_csts[5][13][8] = -1;
  a_csts[5][14][11] = 1;
  a_csts[5][16][5] = -1;
  a_csts[5][20][5] = 1;
  a_csts[5][21][3] = -1;
  a_csts[5][22][5] = -2;
  a_csts[5][23][22] = 1;
  a_csts[5][24][5] = -1;
  a_csts[5][25][4] = 1;
  a_csts[5][26][5] = -1;
  a_csts[6][9][12] = 1;
  a_csts[6][10][7] = -1;
  a_csts[6][11][8] = 1;
  a_csts[6][12][6] = 2;
  a_csts[6][14][7] = 1;
  a_csts[6][15][3] = -1;
  a_csts[6][16][6] = -1;
  a_csts[6][17][12] = -1;
  a_csts[6][20][6] = -1;
  a_csts[6][24][6] = -1;
  a_csts[6][25][2] = 1;
  a_csts[6][26][6] = 1;
  a_csts[7][9][10] = -1;
  a_csts[7][12][7] = 1;
  a_csts[7][15][20] = 1;
  a_csts[7][16][7] = 1;
  a_csts[7][17][10] = 1;
  a_csts[7][18][6] = -1;
  a_csts[7][20][7] = -2;
  a_csts[7][22][7] = 1;
  a_csts[7][24][7] = -1;
  a_csts[7][25][0] = -1;
  a_csts[8][9][11] = 1;
  a_csts[8][12][8] = 1;
  a_csts[8][15][5] = 1;
  a_csts[8][17][11] = -1;
  a_csts[8][20][8] = -1;
  a_csts[8][21][6] = 1;
  a_csts[8][22][8] = -1;
  a_csts[8][23][7] = -1;
  a_csts[8][24][8] = -2;
  a_csts[8][25][24] = 1;
  a_csts[8][26][8] = -1;
  a_csts[9][12][9] = -2;
  a_csts[9][13][10] = -1;
  a_csts[9][16][9] = 1;
  a_csts[9][18][4] = 1;
  a_csts[9][19][12] = 1;
  a_csts[9][20][9] = 1;
  a_csts[9][21][1] = -1;
  a_csts[9][24][9] = 1;
  a_csts[9][26][9] = -1;
  a_csts[10][12][10] = -1;
  a_csts[10][15][9] = 1;
  a_csts[10][16][10] = 2;
  a_csts[10][18][16] = -1;
  a_csts[10][19][7] = -1;
  a_csts[10][20][10] = -1;
  a_csts[10][21][0] = 1;
  a_csts[10][22][10] = 1;
  a_csts[10][26][10] = -1;
  a_csts[11][12][11] = -1;
  a_csts[11][16][11] = 1;
  a_csts[11][18][5] = -1;
  a_csts[11][19][8] = 1;
  a_csts[11][21][26] = 1;
  a_csts[11][22][11] = -1;
  a_csts[11][23][10] = 1;
  a_csts[11][24][11] = -1;
  a_csts[11][25][9] = -1;
  a_csts[11][26][11] = -2;
  a_csts[12][13][7] = 1;
  a_csts[12][14][10] = -1;
  a_csts[12][15][4] = -1;
  a_csts[12][17][9] = -2;
  a_csts[12][18][3] = 1;
  a_csts[12][19][6] = 2;
  a_csts[12][21][2] = 1;
  a_csts[12][25][1] = -1;
  a_csts[13][15][20] = -1;
  a_csts[13][16][7] = -1;
  a_csts[13][17][10] = -1;
  a_csts[13][18][6] = 1;
  a_csts[13][20][7] = 2;
  a_csts[13][22][7] = -1;
  a_csts[13][24][7] = 1;
  a_csts[13][25][0] = 1;
  a_csts[14][15][9] = -1;
  a_csts[14][16][10] = -2;
  a_csts[14][18][16] = 1;
  a_csts[14][19][7] = 1;
  a_csts[14][20][10] = 1;
  a_csts[14][21][0] = -1;
  a_csts[14][22][10] = -1;
  a_csts[14][26][10] = 1;
  a_csts[15][16][4] = 1;
  a_csts[15][19][3] = -1;
  a_csts[15][20][4] = -2;
  a_csts[15][22][4] = 1;
  a_csts[15][23][1] = -1;
  a_csts[15][24][4] = -1;
  a_csts[16][17][9] = 1;
  a_csts[16][18][3] = -2;
  a_csts[16][19][6] = -1;
  a_csts[16][21][2] = -1;
  a_csts[16][23][0] = 1;
  a_csts[17][18][4] = -1;
  a_csts[17][19][12] = -1;
  a_csts[17][20][9] = -1;
  a_csts[17][21][1] = 1;
  a_csts[17][24][9] = -1;
  a_csts[17][26][9] = 1;
  a_csts[18][20][3] = -1;
  a_csts[18][22][3] = 1;
  a_csts[18][23][2] = 1;
  a_csts[18][26][3] = -1;
  a_csts[19][20][6] = 1;
  a_csts[19][24][6] = 1;
  a_csts[19][25][2] = -1;
  a_csts[19][26][6] = -1;
  a_csts[20][23][0] = -1;
  a_csts[20][25][1] = 1;
  a_csts[21][22][2] = -1;
  a_csts[21][24][2] = -1;
  a_csts[21][26][2] = -2;
  a_csts[22][23][0] = 2;
  a_csts[22][25][1] = 1;
  a_csts[23][24][0] = -1;
  a_csts[23][26][0] = -1;
  a_csts[24][25][1] = 2;
  a_csts[25][26][1] = -1;

  for(unsigned int i=0;i<27;i++) {
    for(unsigned int j=i+1;j<27;j++) {
      for(unsigned int k=0;k<27;k++) {
        a_csts[j][i][k] = T(-1)*a_csts[i][j][k];
      }
    }
  }
}

template <class T>
inline void set_RU2_ds(T a_ds[4][4][4]) {
  // {rep[mu],rep[nu]} = -0.5*I4.value(mu,nu)*I4+d[mu][nu][alpha]*J4*rep[alpha]

  // not null : d(0,j,k) = d(j,0,k) = I3.value(j,k).

  for(unsigned int i=0;i<4;i++) {
    for(unsigned int j=0;j<4;j++) {
      for(unsigned int k=0;k<4;k++) {
        a_ds[i][j][k] = T();
      }
    }
  }
  a_ds[0][1][1] = 1;
  a_ds[0][2][2] = 1;
  a_ds[0][3][3] = 1;

  a_ds[1][0][1] = 1;
  a_ds[2][0][2] = 1;
  a_ds[3][0][3] = 1;
}

}

#include <cmath>

namespace inlib {

template <class T>
inline void set_SU3_group_constants(T a_a[8][8][8]) {
  for(unsigned int i=0;i<8;i++) {
    for(unsigned int j=0;j<8;j++) {
      for(unsigned int k=0;k<8;k++) {
        a_a[i][j][k] = T();
      }
    }
  }
  // 123 = -1 : rotations :
  a_a[2][1][0] =  1;
  a_a[1][2][0] = -1;
  a_a[2][0][1] = -1;
  a_a[0][2][1] =  1;
  a_a[1][0][2] =  1;
  a_a[0][1][2] = -1;
  
  double half_sqrt3 = 0.5*::sqrt(3.0);
  T e3[3][3][3];
  set_e3(e3);
  unsigned int is[3];
  
  // 147 = -1/2 :
 {is[0] = 0;
  is[1] = 3;
  is[2] = 6;
  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[is[i]][is[j]][is[k]] = -0.5*e3[i][j][k];
      }
    }
  }}
  // 165 = -1/2 :
 {is[0] = 0;
  is[1] = 5;
  is[2] = 4;
  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[is[i]][is[j]][is[k]] = -0.5*e3[i][j][k];
      }
    }
  }}
  // 246 = -1/2 :
 {is[0] = 1;
  is[1] = 3;
  is[2] = 5;
  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[is[i]][is[j]][is[k]] = -0.5*e3[i][j][k];
      }
    }
  }}
  // 257 = -1/2 :
 {is[0] = 1;
  is[1] = 4;
  is[2] = 6;
  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[is[i]][is[j]][is[k]] = -0.5*e3[i][j][k];
      }
    }
  }}
  // 345 = -1/2 :
 {is[0] = 2;
  is[1] = 3;
  is[2] = 4;
  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[is[i]][is[j]][is[k]] = -0.5*e3[i][j][k];
      }
    }
  }}
  // 376 = -1/2 :
 {is[0] = 2;
  is[1] = 6;
  is[2] = 5;
  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[is[i]][is[j]][is[k]] = -0.5*e3[i][j][k];
      }
    }
  }}
  // 458 = -sqrt(3)/2 :
 {is[0] = 3;
  is[1] = 4;
  is[2] = 7;
  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[is[i]][is[j]][is[k]] = -half_sqrt3*e3[i][j][k];
      }
    }
  }}
  // 678 = -sqrt(3)/2 :
 {is[0] = 5;
  is[1] = 6;
  is[2] = 7;
  for(unsigned int i=0;i<3;i++) {
    for(unsigned int j=0;j<3;j++) {
      for(unsigned int k=0;k<3;k++) {
        a_a[is[i]][is[j]][is[k]] = -half_sqrt3*e3[i][j][k];
      }
    }
  }}
}

template <class T>
inline void set_SU3_ds(T a_a[8][8][8]) {
  for(unsigned int i=0;i<8;i++) {
    for(unsigned int j=0;j<8;j++) {
      for(unsigned int k=0;k<8;k++) {
        a_a[i][j][k] = T();
      }
    }
  }
  double inv_sqrt3 = 1.0/::sqrt(3.0);
  
  // 118 = 1/sqrt(3) :
  a_a[0][0][7] = inv_sqrt3;
  a_a[0][7][0] = inv_sqrt3;
  a_a[7][0][0] = inv_sqrt3;
  // 228 = 1/sqrt(3) :
  a_a[1][1][7] = inv_sqrt3;
  a_a[1][7][1] = inv_sqrt3;
  a_a[7][1][1] = inv_sqrt3;
  // 338 = 1/sqrt(3) :
  a_a[2][2][7] = inv_sqrt3;
  a_a[2][7][2] = inv_sqrt3;
  a_a[7][2][2] = inv_sqrt3;
  // 888 = -1/sqrt(3) :
  a_a[7][7][7] = -inv_sqrt3;
  
  double inv_2_sqrt3 = 0.5*inv_sqrt3;
  // 448 = -1/(2*sqrt(3)) :
  a_a[3][3][7] = -inv_2_sqrt3;
  a_a[3][7][3] = -inv_2_sqrt3;
  a_a[7][3][3] = -inv_2_sqrt3;
  // 558 = -1/(2*sqrt(3)) :
  a_a[4][4][7] = -inv_2_sqrt3;
  a_a[4][7][4] = -inv_2_sqrt3;
  a_a[7][4][4] = -inv_2_sqrt3;
  // 668 = -1/(2*sqrt(3)) :
  a_a[5][5][7] = -inv_2_sqrt3;
  a_a[5][7][5] = -inv_2_sqrt3;
  a_a[7][5][5] = -inv_2_sqrt3;
  // 778 = -1/(2*sqrt(3)) :
  a_a[6][6][7] = -inv_2_sqrt3;
  a_a[6][7][6] = -inv_2_sqrt3;
  a_a[7][6][6] = -inv_2_sqrt3;
  // 146 = 1/2 :
  a_a[0][3][5] = 0.5;
  a_a[3][5][0] = 0.5;
  a_a[5][0][3] = 0.5;
  a_a[0][5][3] = 0.5;
  a_a[5][3][0] = 0.5;
  a_a[3][0][5] = 0.5;
  // 157 = 1/2 :
  a_a[0][4][6] = 0.5;
  a_a[4][6][0] = 0.5;
  a_a[6][0][4] = 0.5;
  a_a[0][6][4] = 0.5;
  a_a[6][4][0] = 0.5;
  a_a[4][0][6] = 0.5;
  // 256 = 1/2 :
  a_a[1][4][5] = 0.5;
  a_a[4][5][1] = 0.5;
  a_a[5][1][4] = 0.5;
  a_a[1][5][4] = 0.5;
  a_a[5][4][1] = 0.5;
  a_a[4][1][5] = 0.5;
  // 344 = 1/2 :
  a_a[2][3][3] = 0.5;
  a_a[3][3][2] = 0.5;
  a_a[3][2][3] = 0.5;
  // 355 = 1/2 :
  a_a[2][4][4] = 0.5;
  a_a[4][4][2] = 0.5;
  a_a[4][2][4] = 0.5;
  // 247 = -1/2 :
  a_a[1][3][6] = -0.5;
  a_a[3][6][1] = -0.5;
  a_a[6][1][3] = -0.5;
  a_a[1][6][3] = -0.5;
  a_a[6][3][1] = -0.5;
  a_a[3][1][6] = -0.5;
  // 366 = -1/2 :
  a_a[2][5][5] = -0.5;
  a_a[5][5][2] = -0.5;
  a_a[5][2][5] = -0.5;
  // 377 = -1/2 :
  a_a[2][6][6] = -0.5;
  a_a[6][6][2] = -0.5;
  a_a[6][2][6] = -0.5;
}

inline void zero_factors(double& a_a,double& a_b) {
  //static const double a = 1./::sqrt(2.);
  //static const double b = -1./::sqrt(2.);
  static const double a = 1./2.;
  static const double b = ::sqrt(3.)/2.;

  //static const double a = 1;
  //static const double b = 0;
  //a_m = a_a*K+a_b*JK-a_c*J;

  // With a = 0, b = -1 :
  // D0 is dirac D0 | I  0|  D4 = -i*|0 I|
  //                | 0 -I|          |I 0|
  // T0 is -JK = | 0 I|  T4 = -K
  //             |-I 0|
  //static const double a = 0;
  //static const double b = -1;
  a_a = a;
  a_b = b;
}

/////////////////////////////////////////////////////////////////////////
/// D=6 /////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
template <class T>
inline void set_lorentz_adjoint_real_weinberg_joos_constants(T a_a[6][10][10]) {
  // if L[6] = Lorentz Adj rep.
  // if GAMMAS[10] = Ss[10]*real_weinberg_joos
  // a_a such that :
  //   [L(a),GAMMAS(A)] = a_a[a][A][B]*GAMMAS[B]

  for(unsigned int i=0;i<6;i++) {
    for(unsigned int j=0;j<10;j++) {
      for(unsigned int k=0;k<10;k++) {
        a_a[i][j][k] = T();
      }
    }
  }

  a_a[0][2][4] = -1;
  a_a[0][3][4] = 1;
  a_a[0][5][6] = 1;
  a_a[0][6][5] = -1;
  a_a[0][8][9] = -1;
  a_a[0][9][8] = 1;
  a_a[1][1][5] = 1;
  a_a[1][3][5] = -1;
  a_a[1][4][6] = -1;
  a_a[1][6][4] = 1;
  a_a[1][7][9] = 1;
  a_a[1][9][7] = -1;
  a_a[2][1][6] = -1;
  a_a[2][2][6] = 1;
  a_a[2][4][5] = 1;
  a_a[2][5][4] = -1;
  a_a[2][7][8] = -1;
  a_a[2][8][7] = 1;
  a_a[3][0][7] = 1;
  a_a[3][1][7] = 1;
  a_a[3][5][9] = 1;
  a_a[3][6][8] = 1;
  a_a[3][8][6] = 1;
  a_a[3][9][5] = 1;
  a_a[4][0][8] = 1;
  a_a[4][2][8] = 1;
  a_a[4][4][9] = 1;
  a_a[4][6][7] = 1;
  a_a[4][7][6] = 1;
  a_a[4][9][4] = 1;
  a_a[5][0][9] = 1;
  a_a[5][3][9] = 1;
  a_a[5][4][8] = 1;
  a_a[5][5][7] = 1;
  a_a[5][7][5] = 1;
  a_a[5][8][4] = 1;

  a_a[0][4][2] = 2;
  a_a[0][4][3] = -2;

  a_a[1][5][1] = -2;
  a_a[1][5][3] = 2;

  a_a[2][6][1] = 2;
  a_a[2][6][2] = -2;

  a_a[3][7][0] = 2;
  a_a[3][7][1] = 2;

  a_a[4][8][0] = 2;
  a_a[4][8][2] = 2;

  a_a[5][9][0] = 2;
  a_a[5][9][3] = 2;

}

}

#endif
