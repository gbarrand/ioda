// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_fstring
#define inlib_fstring

#include <string>
#include <cstring>
 
namespace inlib {

class fstring {
public:
  fstring(unsigned int a_length):m_length(a_length),m_buffer(0){
    // in fortran character*0 does not exist
    m_length = (m_length==0?1:m_length);
    m_buffer = new char[m_length];
    if(!m_buffer) {m_length = 0;return;}
    for(unsigned int index=0;index<m_length;index++) m_buffer[index] = ' ';
  }
  fstring(const std::string& a_string):m_length(0),m_buffer(0){
    m_length = a_string.size();
    // in fortran character*0 does not exist
    m_length = (m_length==0?1:m_length);
    // Add one more white character so that CERNLIB LENOCC works :
    m_buffer = new char[m_length+1];
    if(!m_buffer) {m_length = 0;return;}
    unsigned int l = m_length + 1;
    for(unsigned int index=0;index<l;index++) m_buffer[index] = ' ';
    ::strncpy(m_buffer,a_string.c_str(),a_string.size());
  }     
  fstring(void* aF77,int a_length):m_length(0),m_buffer(0){
    if(a_length<0) return;
    m_length = a_length;
    // in fortran character*0 does not exist
    m_length = (m_length==0?1:m_length);
    // Add one more white character so that CERNLIB LENOCC works :
    m_buffer = new char[m_length+1];
    if(!m_buffer) {m_length = 0;return;}
    unsigned int l = m_length + 1;
    for(unsigned int index=0;index<l;index++) m_buffer[index] = ' ';
    ::strncpy(m_buffer,(char*)aF77,a_length);
  }     
  virtual ~fstring(){delete [] m_buffer;}
protected:
  fstring(const fstring&){}
  fstring& operator=(const fstring&){return *this;}
public:
  char* f_str() const{return m_buffer;}     
  unsigned int size() const {return m_length;}     
  void std_string(std::string& a_s) const {
    a_s.clear();
    for(unsigned int index=0;index<m_length;index++) a_s += m_buffer[index];
  }     
protected:
  unsigned int m_length;
  char* m_buffer; // m_buffer is not null terminated.
};

}

#endif
