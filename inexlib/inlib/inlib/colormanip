// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_colormanip
#define inlib_colormanip

namespace inlib {

// rgbs are ints in [0,255]
// h in [0,360], h -1 problem.
// s in [0,255]
// v in [0,255]

// red   (255,  0,  0)  is hsv (0,255,255)
// green (0,  255,  0)  is hsv (120,255,255)
// blue  (0,    0,255)  is hsv (240,255,255)
// white (255,255,255)  is hsv (-1,0,255)
// black (0,    0,  0)  is hsv (-1,0,0)


// From QColor.
inline void rgb2hsv(int r,int g,int b, int& h, int& s, int& v ) {

  unsigned int mx = r;				// mximum RGB component
  int whatmx = 0;				// r=>0, g=>1, b=>2
  if ( (unsigned int)g > mx ) {
    mx = g;
    whatmx = 1;
  }
  if ( (unsigned int)b > mx ) {
    mx = b;
    whatmx = 2;
  }
  unsigned int mn = r;				// find mnimum value
  if ( (unsigned int)g < mn ) mn = g;
  if ( (unsigned int)b < mn ) mn = b;
  int delta = mx-mn;
  v = mx;					// calc value
  s = mx ? (510*delta+mx)/(2*mx) : 0;
  if ( s == 0 ) {
    h = -1;				// undefined hue
  } else {
    switch ( whatmx ) {
    case 0:				// red is mx component
      if ( g >= b )
        h = (120*(g-b)+delta)/(2*delta);
      else
        h = (120*(g-b+delta)+delta)/(2*delta) + 300;
      break;
    case 1:				// green is mx component
      if ( b > r )
        h = 120 + (120*(b-r)+delta)/(2*delta);
      else
        h = 60 + (120*(b-r+delta)+delta)/(2*delta);
      break;
    case 2:				// blue is mx component
      if ( r > g )
        h = 240 + (120*(r-g)+delta)/(2*delta);
      else
        h = 180 + (120*(r-g+delta)+delta)/(2*delta);
      break;
    }
  }
}

inline bool hsv2rgb( int h, int s, int v ,int& r,int& g, int& b) {
  if ( h < -1 || (unsigned int)s > 255 || (unsigned int)v > 255 ) {
    r = g = b = 0;
    return false;
  }
  r=v;
  g=v;
  b=v;
  if ( s == 0 || h == -1 ) {			// achromatic case
    // Ignore
  } else {					// chromatic case
    if ( (unsigned int)h >= 360 ) h %= 360;
    unsigned int f = h%60;
    h /= 60;
    unsigned int p = (unsigned int)(2*v*(255-s)+255)/510;
    unsigned int q, t;
    if ( h&1 ) {
      q = (unsigned int)(2*v*(15300-s*f)+15300)/30600;
      switch( h ) {
	case 1: r=(int)q; g=(int)v, b=(int)p; break;
	case 3: r=(int)p; g=(int)q, b=(int)v; break;
	case 5: r=(int)v; g=(int)p, b=(int)q; break;
      }
    } else {
      t = (unsigned int)(2*v*(15300-(s*(60-f)))+15300)/30600;
      switch( h ) {
	case 0: r=(int)v; g=(int)t, b=(int)p; break;
	case 2: r=(int)p; g=(int)v, b=(int)t; break;
	case 4: r=(int)t; g=(int)p, b=(int)v; break;
      }
    }
  }
  return true;
}

}

#endif
