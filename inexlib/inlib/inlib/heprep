// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_heprep
#define inlib_heprep

// code common to xml/heprep1 and xml/heprep2.

#ifdef INLIB_MEM
#include "mem"
#endif

#include "S_STRING"

#include "colorfs"
#include "named_colors"
#include "sg/enums"
#include "svalues"
#include "sout"

namespace inlib {
namespace heprep {

class point {
public:
  INLIB_SCLASS(inlib::heprep::point)
public:
  point(double a_x,double a_y,double a_z)
  :m_x(a_x)
  ,m_y(a_y)
  ,m_z(a_z)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~point() {
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  point(const point& a_from)
  :m_x(a_from.m_x)
  ,m_y(a_from.m_y)
  ,m_z(a_from.m_z)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  point& operator=(const point& a_from){
    m_x = a_from.m_x;
    m_y = a_from.m_y;
    m_z = a_from.m_z;
    return *this;
  }
public:
  double m_x,m_y,m_z;
};

INLIB_GLOBAL_STRING(Line)

class primitive {
public:
  INLIB_SCLASS(inlib::heprep::primitive)
public:
  primitive()
  :m_Radius1(5)
  ,m_Radius2(5)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~primitive() {
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  primitive(const primitive& a_from)
  :m_Radius1(a_from.m_Radius1)
  ,m_Radius2(a_from.m_Radius2)
  ,m_pts(a_from.m_pts)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  primitive& operator=(const primitive& a_from){
    m_Radius1 = a_from.m_Radius1;
    m_Radius2 = a_from.m_Radius2;
    m_pts = a_from.m_pts;
    return *this;
  }
public:
  double m_Radius1;
  double m_Radius2;
  std::vector<point> m_pts;
};

class volume {
public:
  INLIB_SCLASS(inlib::heprep::volume)
public:
  volume()
  :m_DrawAs(s_Line())
  ,m_Visibility(true)
  ,m_color(colorf_grey())
  ,m_MarkName(sg::marker_circle_line)
  ,m_MarkSize(5)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~volume() {
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  volume(const volume& a_from)
  :m_DrawAs(a_from.m_DrawAs)
  ,m_Visibility(a_from.m_Visibility)
  ,m_color(a_from.m_color)
  ,m_MarkName(a_from.m_MarkName)
  ,m_MarkSize(a_from.m_MarkSize)
  ,m_prims(a_from.m_prims)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  volume& operator=(const volume& a_from){
    m_DrawAs = a_from.m_DrawAs;
    m_Visibility = a_from.m_Visibility;
    m_color = a_from.m_color;
    m_MarkName = a_from.m_MarkName;
    m_MarkSize = a_from.m_MarkSize;
    m_prims = a_from.m_prims;
    return *this;
  }
public:
  std::string m_DrawAs;
  bool m_Visibility;
  colorf m_color;
  sg::marker_style m_MarkName;
  double m_MarkSize;
  std::vector<primitive> m_prims;
};

template <class T>
inline bool s2value(std::ostream& a_out,const std::string& a_s,T& a_value,const T& a_default) {
  if(a_s.empty()) {a_value = a_default;return true;}
  if(!to(a_s,a_value,a_default)) {
    a_out << "inlib::heprep::s2value :"
          << " can't convert."
          << " String value was " << sout(a_s) << "."
          << std::endl;
    return false;
  }
  return true;
}
    
INLIB_GLOBAL_STRING(Dot)
INLIB_GLOBAL_STRING(Circle)
INLIB_GLOBAL_STRING(Box)
INLIB_GLOBAL_STRING(UpTriangle)
INLIB_GLOBAL_STRING(DnTriangle)
INLIB_GLOBAL_STRING(Diamond)
INLIB_GLOBAL_STRING(Cross)
INLIB_GLOBAL_STRING(Star)
INLIB_GLOBAL_STRING(Plus)
INLIB_GLOBAL_STRING(HLine)
INLIB_GLOBAL_STRING(VLine)

inline bool s2marker_style(std::ostream& a_out,const std::string& a_s,sg::marker_style& a_value) {
  if(a_s.empty()) {a_value = sg::marker_circle_line;return true;}

  if(a_s==s_Dot())        {a_value = sg::marker_dot;return true;}
  if(a_s==s_Circle())     {a_value = sg::marker_circle_line;return true;}
  if(a_s==s_Box())        {a_value = sg::marker_circle_line;return true;}
  if(a_s==s_UpTriangle()) {a_value = sg::marker_triangle_up_line;return true;}
  if(a_s==s_DnTriangle()) {a_value = sg::marker_triangle_down_line;return true;}
  if(a_s==s_Diamond())    {a_value = sg::marker_diamond_line;return true;}
  if(a_s==s_Cross())      {a_value = sg::marker_cross;return true;}
  if(a_s==s_Star())       {a_value = sg::marker_star;return true;}
  if(a_s==s_Plus())       {a_value = sg::marker_plus;return true;}
  if(a_s==s_HLine())      {a_value = sg::marker_square_line;return true;}
  if(a_s==s_VLine())      {a_value = sg::marker_square_line;return true;}
  a_out << "inlib::heprep::s2marker_style :"
        << " can't convert."
        << " String value was " << sout(a_s) << "."
        << std::endl;
  a_value = sg::marker_circle_line;
  return false;
}

inline bool s2color(std::ostream& a_out,const std::string& a_s,colorf& a_value,const colorf& a_default) {
  if(a_s.empty()) {a_value = a_default;return true;}
  const std::map<std::string,const colorf*>& named_colors = get_named_colors<colorf>();
  if(find_named_color(named_colors,a_s,a_value)) return true;
  std::vector<double> vec;
  if(!values(a_s,",",false,vec)) {
    a_out << "inlib::heprep::s2color :"
          << " can't get color."
          << " String value was " << sout(a_s) << "."
          << std::endl;
    a_value = a_default;
    return false;
  }
  if(vec.size()==3) {
    if((vec[0]>1)||(vec[1]>1)||(vec[2]>1)) {
      a_value.set_value(float(vec[0])/255.0f,float(vec[1])/255.0f,float(vec[2])/255.0f,1);
    } else {
      a_value.set_value(float(vec[0]),float(vec[1]),float(vec[2]),1);
    }
  } else if(vec.size()==4) {
    if((vec[0]>1)||(vec[1]>1)||(vec[2]>1)||(vec[3]>1)) {
      a_value.set_value(float(vec[0])/255.0f,float(vec[1])/255.0f,float(vec[2])/255.0f,float(vec[3])/255.0f);
    } else {
      a_value.set_value(float(vec[0]),float(vec[1]),float(vec[2]),float(vec[3]));
    }
  } else {
    a_out << "inlib::heprep::s2color :"
          << " vec size mismatch for color."
          << " String value was " << sout(a_s) << "."
          << std::endl;
    a_value = a_default;
    return false;
  }
  return true;
}

INLIB_GLOBAL_STRING(name)
INLIB_GLOBAL_STRING(DrawAs)
INLIB_GLOBAL_STRING(LineColor)
INLIB_GLOBAL_STRING(Color)
INLIB_GLOBAL_STRING(Visibility)
INLIB_GLOBAL_STRING(MarkName)
INLIB_GLOBAL_STRING(MarkSize)

INLIB_GLOBAL_STRING(Radius1)
INLIB_GLOBAL_STRING(Radius2)
INLIB_GLOBAL_STRING(value)
INLIB_GLOBAL_STRING(x)
INLIB_GLOBAL_STRING(y)
INLIB_GLOBAL_STRING(z)

INLIB_GLOBAL_STRING(Prism)
INLIB_GLOBAL_STRING(Polygon)
//INLIB_GLOBAL_STRING(Line)
INLIB_GLOBAL_STRING(Cylinder)
INLIB_GLOBAL_STRING(Point)

#define INLIB_HEPREP_ATT_VALUE(a__tree,a__att,a__name) \
    bool is_##a__name = false;\
    std::string s_##a__name##_value;\
   {xml::looper _for(a__tree);\
    while(xml::element* _elem = _for.next_element()) {\
      if(_elem->name()==a__att()) {\
        inlib_vforcit(xml::element::atb,_elem->attributes(),it) {\
          if(((*it).first==heprep::s_name())&&((*it).second==heprep::s_##a__name())) is_##a__name = true;\
        }\
        if(is_##a__name) {\
          inlib_vforcit(xml::element::atb,_elem->attributes(),it) {\
            if((*it).first==heprep::s_value()) s_##a__name##_value = (*it).second;\
          }\
        }\
        if(is_##a__name && s_##a__name##_value.size()) break;\
      }\
    }}


}}

#endif

