// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_dumfac
#define inlib_rroot_dumfac

#include "ifac"

#include <ostream>

namespace inlib {
namespace rroot {

class dumfac : public virtual ifac {
public: //ifac
  virtual iro* create(const std::string& a_class,const args&) {
    m_out << "inlib::rroot::dumfac::create :"
          << " dummy. Can't create object of class \"" << a_class << "\"."
          << std::endl;
    return 0;
  }
  virtual void destroy(iro*&) {}
public:
  dumfac(std::ostream& a_out):m_out(a_out){}
  virtual ~dumfac(){}
protected:
  dumfac(const dumfac& a_from): ifac(a_from),m_out(a_from.m_out){}
  dumfac& operator=(const dumfac&){return *this;}
protected:
  std::ostream& m_out;
};

}}

#endif
