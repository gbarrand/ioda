// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_gr_transporter
#define inlib_gr_transporter

/*
  Basic equations are :
    a
  du      a       b  c
  --  + C   (x)  u  u   = 0
  ds     b c 

    a
  dx     a
  --  = u (x)
  ds 

  If space-time is metric, on the curve we must have :

             a   b
           dx  dx
    g  (x) --  --   = +-1
     ab    ds  ds

  
  Tracking is done according to the algorithm :

    given x0, u0;
    un1 = un - step * christoffeln(xn) * un * un 
    xn1 = xn + step * un
*/

#include "base_transporter"

namespace inlib {

template <class REAL>
class schwarzschild_transporter : public base_transporter<REAL> {
  typedef base_transporter<REAL> parent;
private:
  typedef REAL X[4];
  typedef REAL U[4];
  typedef REAL G[4][4];
  typedef REAL CHR[4][4][4];
protected:  
  typedef typename parent::sqrt_func sqrt_func;
  typedef typename parent::fabs_func fabs_func;
  typedef REAL(*sin_func)(const REAL&);
  typedef REAL(*cos_func)(const REAL&);
public:
  virtual bool set_metric(const X& a_x,G& a_g) const {
    // a_g is the metric in the ct, r, theta, phi coordinates.
    REAL r = a_x[1];
    REAL theta = a_x[2];

    if(r<=REAL(0)) {
      parent::m_out << "schwarzschild_transporter::set_metric :"
            << " r (" << r << ") <=0"
            << std::endl;
      return false;
    }
    REAL x = REAL(1) - m_R/r;
    if(x<=REAL(0)) {
      parent::m_out << "schwarzschild_transporter::set_metric :"
            << " x (" << x << ") <=0"
            << std::endl;
      return false;
    }

    REAL sn = m_sin(theta);
    REAL sn2 = sn*sn;
    REAL r2 = r*r;

    set_mtx(a_g,0,0, x);
    set_mtx(a_g,1,1, -REAL(1)/x);
    set_mtx(a_g,2,2, -r2);
    set_mtx(a_g,3,3, -r2*sn2);

    set_mtx(a_g,0,1, REAL(0));
    set_mtx(a_g,0,2, REAL(0));
    set_mtx(a_g,0,3, REAL(0));

    set_mtx(a_g,1,0, REAL(0));
    set_mtx(a_g,1,2, REAL(0));
    set_mtx(a_g,1,3, REAL(0));

    set_mtx(a_g,2,0, REAL(0));
    set_mtx(a_g,2,1, REAL(0));
    set_mtx(a_g,2,3, REAL(0));

    set_mtx(a_g,3,0, REAL(0));
    set_mtx(a_g,3,1, REAL(0));
    set_mtx(a_g,3,2, REAL(0));

    return true;
  }
  virtual bool set_christoffel(const X& a_x,CHR& a_chr) const {
    // a_chr is the christoffel symbol in the ct, r, theta, phi coordinates.
    REAL r = a_x[1];
    REAL theta = a_x[2];

    if(r<=REAL(0)) {
      parent::m_out << "schwarzschild_transporter::set_christoffel :"
            << " r (" << r << ") <=0"
            << std::endl;
      return false;
    }
    REAL x = REAL(1) - m_R/r;
    if(x<=REAL(0)) {
      parent::m_out << "schwarzschild_transporter::set_christoffel :"
            << " x (" << x << ") <=0."
            << " r was " << r << " and R " << m_R << "."
            << std::endl;
      return false;
    }

    REAL sn = m_sin(theta);
    if(sn==REAL(0)) {
      parent::m_out << "schwarzschild_transporter::set_christoffel :"
            << " sin(" << theta << ") = 0"
            << std::endl;
      return false;
    }

    REAL sn2 = sn*sn;
    REAL r2 = r*r;
    REAL cs = m_cos(theta);
    REAL inv_r = REAL(1)/r;

    zero_christo(a_chr);

    REAL R_div_2r2x = m_R/(REAL(2)*r2*x);

    set_christo(a_chr,1,1,1, -R_div_2r2x);

    set_christo(a_chr,1,0,0,  R_div_2r2x);
    set_christo(a_chr,0,0,1,  R_div_2r2x);

    set_christo(a_chr,3,2,3, -sn*cs);
    set_christo(a_chr,2,1,2, -r+m_R);
    set_christo(a_chr,0,1,0, m_R*x/(REAL(2)*r2));
    set_christo(a_chr,1,2,2, inv_r);
    set_christo(a_chr,2,2,1, inv_r);
    set_christo(a_chr,1,3,3, inv_r);
    set_christo(a_chr,3,3,1, inv_r);

    REAL cot = cs/sn;
    set_christo(a_chr,2,3,3, cot);
    set_christo(a_chr,3,3,2, cot);

    set_christo(a_chr,3,1,3, (-r+m_R)*sn2);

    return true;
  }
public:
  schwarzschild_transporter(std::ostream& a_out,
                            sqrt_func a_sqrt,fabs_func a_fabs,
                            sin_func a_sin,cos_func a_cos,
                            REAL a_R = REAL(1),bool a_verbose = false)
  :parent(a_out,a_sqrt,a_fabs,a_verbose)
  ,m_sin(a_sin),m_cos(a_cos)
  ,m_R(a_R)
  {}
  virtual ~schwarzschild_transporter(){}
public:
  schwarzschild_transporter(const schwarzschild_transporter& a_from)
  :parent(a_from)
  ,m_sin(a_from.m_sin),m_cos(a_from.m_cos)
  ,m_R(a_from.m_R)
  {}
  schwarzschild_transporter& operator=(const schwarzschild_transporter& a_from) {
    parent::operator=(a_from);
    m_sin = a_from.m_sin;
    m_cos = a_from.m_cos;
    m_R = a_from.m_R;
    return *this;
  }
protected:
  sin_func m_sin;
  cos_func m_cos;
  REAL m_R; // m_R = 2GM/c**2 and we have correctly [m_R] = L.
};

template <class REAL>
class kerr_transporter : public base_transporter<REAL> {
  typedef base_transporter<REAL> parent;
private:
  typedef REAL X[4];
  typedef REAL U[4];
  typedef REAL G[4][4];
  typedef REAL CHR[4][4][4];
protected:  
  typedef typename parent::sqrt_func sqrt_func;
  typedef typename parent::fabs_func fabs_func;
  typedef REAL(*sin_func)(const REAL&);
  typedef REAL(*cos_func)(const REAL&);
public:
  virtual bool set_metric(const X& a_x,G& a_g) const {
    // a_g is the metric in the ct, r, theta, phi Boyer-Lindquist coordinates.
    REAL r = a_x[1];
    REAL theta = a_x[2];

    REAL r2 = r*r;
    REAL a2 = m_a*m_a;

    REAL cs = m_cos(theta);
    REAL cs2 = cs*cs;
    
    REAL sig = r2+a2*cs2;
    REAL del = r2+a2-m_R*r;

    if(sig==REAL(0)) {
      parent::m_out << "kerr_transporter::set_metric :"
            << " sigma(" << r << "," << theta << ") = 0"
            << std::endl;
      return false;
    }
    if(del==REAL(0)) {
      parent::m_out << "kerr_transporter::set_metric :"
            << " delta(" << r << ") = 0"
            << std::endl;
      return false;
    }

#define USE_OUR
#define DO_OUR

//#define DO_MAPLE
//#define CMP_OUR_MAPLE

#ifdef DO_OUR
   {REAL sn = m_sin(theta);
    REAL sn2 = sn*sn;
    REAL aRr = m_a*m_R*r;
    REAL a2Rr = m_a*aRr;

    REAL v03 = aRr*sn2/sig;

    set_mtx(a_g,0,0, REAL(1)-m_R*r/sig);
    set_mtx(a_g,1,1, -sig/del);
    set_mtx(a_g,2,2, -sig);
    set_mtx(a_g,3,3, -sn2*(r2+a2+a2Rr*sn2/sig));

    set_mtx(a_g,0,1, REAL(0));
    set_mtx(a_g,0,2, REAL(0));
    set_mtx(a_g,0,3, v03);

    set_mtx(a_g,1,0, REAL(0));
    set_mtx(a_g,1,2, REAL(0));
    set_mtx(a_g,1,3, REAL(0));

    set_mtx(a_g,2,0, REAL(0));
    set_mtx(a_g,2,1, REAL(0));
    set_mtx(a_g,2,3, REAL(0));

    set_mtx(a_g,3,0, v03);
    set_mtx(a_g,3,1, REAL(0));
    set_mtx(a_g,3,2, REAL(0));
    }

#endif //DO_OUR

#ifdef DO_MAPLE
   double met[4][4];
  {double a = m_a;
   double m = m_R/2;

met[0][0] = (r * r + a * a * pow(cos(theta), 0.2e1)) / (a * a - 0.2e1 * m * r + r * r);
met[0][1] = 0;
met[0][2] = 0;
met[0][3] = 0;
met[1][0] = 0;
met[1][1] = r * r + a * a * pow(cos(theta), 0.2e1);
met[1][2] = 0;
met[1][3] = 0;
met[2][0] = 0;
met[2][1] = 0;
met[2][2] = pow(sin(theta), 0.2e1) * (r * r + a * a + 0.2e1 * m * r * a * a * pow(sin(theta), 0.2e1) / (r * r + a * a * pow(cos(theta), 0.2e1)));
met[2][3] = -0.2e1 * m * a * r * pow(sin(theta), 0.2e1) / (r * r + a * a * pow(cos(theta), 0.2e1));
met[3][0] = 0;
met[3][1] = 0;
met[3][2] = -0.2e1 * m * a * r * pow(sin(theta), 0.2e1) / (r * r + a * a * pow(cos(theta), 0.2e1));
met[3][3] = -0.1e1 + 0.2e1 * m * r / (r * r + a * a * pow(cos(theta), 0.2e1));}

#ifdef CMP_OUR_MAPLE
   {for(unsigned int a=0;a<4;a++) {
    for(unsigned int b=0;b<4;b++) {
      double av = a_g.value((a+5)%4,(b+5)%4);
      double v = -met[a][b];
      double tolerance = 1.e-3;
      if(::fabs(av-v)>=tolerance) {
        parent::m_out << "kerr_transporter : problem with metric :" 
              << " " << a << " " << b << " : " << av << " Maple " << v
              << std::endl;
        return false;
      }
    }}}
#endif //CMP_OUR_MAPLE

#endif //DO_MAPLE

#ifdef USE_OUR
#else
   {a_g.set_zero();
    for(unsigned int a=0;a<4;a++) {
    for(unsigned int b=0;b<4;b++) {
      a_g.set_value((a+5)%4,(b+5)%4,-met[a][b]);
    }}}
#endif

    return true;
  }
  virtual bool set_christoffel(const X& a_x,CHR& a_chr) const {
    // a_chr is the christoffel symbol in the ct, r, theta, phi coordinates.
    REAL r = a_x[1];
    REAL theta = a_x[2];

    REAL r2 = r*r;
    REAL a2 = m_a*m_a;

    REAL sn = m_sin(theta);
    REAL cs = m_cos(theta);
    REAL cs2 = cs*cs;
    
    REAL sig = r2+a2*cs2;
    REAL del = r2+a2-m_R*r;

    if(sig==REAL(0)) {
      parent::m_out << "kerr_transporter::set_christoffel :"
            << " sigma(" << r << "," << theta << ") = 0"
            << std::endl;
      return false;
    }
    if(del==REAL(0)) {
      parent::m_out << "kerr_transporter::set_christoffel :"
            << " delta(" << r << ") = 0"
            << std::endl;
      return false;
    }
    if(sn==REAL(0)) {
      parent::m_out << "kerr_transporter::set_christoffel :"
            << " sin(" << theta << ") = 0"
            << std::endl;
      return false;
    }

#ifdef DO_OUR
   {REAL a4 = a2*a2;
    REAL sn2 = sn*sn;
    REAL sn3 = sn2*sn;
    REAL cot = cs/sn;

    REAL sig2 = sig*sig;
    REAL sig3 = sig2*sig;

    REAL aRr = m_a*m_R*r;
    REAL a2Rr = m_a*aRr;
    REAL r2_a2cs2 = r2-a2*cs2;

    REAL A = (r2+a2)*sig+a2Rr*sn2;

    REAL sig_del = sig*del;
    REAL sig2_del = sig2*del;

    zero_christo(a_chr);

    //ct=0 r=1 theta=2 phi=3
    set_christo(a_chr,0,1,0, m_R*del*(r2_a2cs2)/(REAL(2)*sig3));
    set_christo(a_chr,0,2,0, -a2Rr*sn*cs/sig3);

    REAL v001 = m_R*(r2+a2)*(r2_a2cs2)/(REAL(2)*sig2_del);
    set_christo(a_chr,0,0,1, v001);
    set_christo(a_chr,1,0,0, v001);

    REAL v031 = m_R*m_a*(r2_a2cs2)/(REAL(2)*sig2_del);
    set_christo(a_chr,0,3,1, v031);
    set_christo(a_chr,1,3,0, v031);

    REAL v002 = -a2Rr*sn*cs/sig2;
    set_christo(a_chr,0,0,2, v002);
    set_christo(a_chr,2,0,0, v002);

    REAL v032 = -aRr*cot/sig2;
    set_christo(a_chr,0,3,2, v032);
    set_christo(a_chr,2,3,0, v032);

    REAL v013 = -del*m_R*m_a*sn2*(r2_a2cs2)/(REAL(2)*sig3);
    set_christo(a_chr,0,1,3, v013);
    set_christo(a_chr,3,1,0, v013);

    REAL v023 = aRr*(r2+a2)*sn*cs/sig3;
    set_christo(a_chr,0,2,3, v023);
    set_christo(a_chr,3,2,0, v023);

    set_christo(a_chr,1,1,1, (REAL(2)*r*a2*sn2-m_R*r2_a2cs2)/(REAL(2)*sig_del));
    set_christo(a_chr,1,2,1, a2*sn*cs/(sig_del));

    REAL v112 = -a2*sn*cs/sig;
    set_christo(a_chr,1,1,2, v112);
    set_christo(a_chr,2,1,1, v112);

    REAL v122 = r/sig;
    set_christo(a_chr,1,2,2, v122);
    set_christo(a_chr,2,2,1, v122);

    set_christo(a_chr,2,1,2, -r*del/sig);
    set_christo(a_chr,2,2,2, -a2*sn*cs/sig);

    REAL v233 = cot*(sig2+a2Rr*sn2)/sig2;
    set_christo(a_chr,2,3,3, v233);
    set_christo(a_chr,3,3,2, v233);

    REAL v203 = a2*aRr*sn3*cs/sig2;
    set_christo(a_chr,2,0,3, v203);
    set_christo(a_chr,3,0,2, v203);

    REAL two_sig2_del = REAL(2)*sig2_del;

    REAL v103 = m_R*m_a*sn2*(a2*cs2*(a2-r2)-r2*(a2+3*r2))/two_sig2_del;
    set_christo(a_chr,1,0,3, v103);
    set_christo(a_chr,3,0,1, v103);

    REAL v133 = (REAL(2)*r*sig2+m_R*(a4*sn2*cs2-r2*(sig+r2+a2)))/two_sig2_del;
    set_christo(a_chr,1,3,3, v133);
    set_christo(a_chr,3,3,1, v133);

    set_christo(a_chr,3,1,3, del*sn2*(-REAL(2)*r*sig2+m_R*a2*sn2*(r2_a2cs2))/(REAL(2)*sig3));
    set_christo(a_chr,3,2,3, -sn*cs*(A*sig+(r2+a2)*a2Rr*sn2)/sig3);
  }
#endif //DO_OUR

#ifdef DO_MAPLE
   double chs[4][4][4];
  {double a = m_a;
   double m = m_R/2;

chs[0][0][0] = 0.1e1 / (double) (a * a - 2 * m * r + r * r) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) * (pow(cos(theta), 0.2e1) * (double) (a * a) * (double) m - pow(cos(theta), 0.2e1) * (double) (a * a) * (double) r + (double) (a * a * r) - (double) (m * r * r));
chs[0][0][1] = 0.1e1 / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) * (double) (a * a) * cos(theta) * sin(theta) / (double) (a * a - 2 * m * r + r * r);
chs[0][0][2] = 0;
chs[0][0][3] = 0;
chs[0][1][0] = -0.1e1 / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) * (double) (a * a) * cos(theta) * sin(theta);
chs[0][1][1] = 0.1e1 / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) * (double) r;
chs[0][1][2] = 0;
chs[0][1][3] = 0;
chs[0][2][0] = 0;
chs[0][2][1] = 0;
chs[0][2][2] = (pow(sin(theta), 0.2e1) * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) m + pow(cos(theta), 0.4e1) * (double) (int) pow((double) a, (double) 4) * (double) r - (double) m * (double) (r * r) * (double) (a * a) * pow(sin(theta), 0.2e1) - 0.2e1 * pow(cos(theta), 0.2e1) * (double) (a * a) * (double) m * (double) (r * r) + 0.2e1 * pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (int) pow((double) r, (double) 3) - (double) (2 * m * (int) pow((double) r, (double) 4)) + (double) (int) pow((double) r, (double) 5)) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[0][2][3] = (pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) - pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (a * a * r * r) - (double) (3 * (int) pow((double) r, (double) 4))) * (double) m * (double) a * pow(sin(theta), 0.2e1) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[0][3][0] = 0;
chs[0][3][1] = 0;
chs[0][3][2] = -(double) m * (double) a * ((double) (a * a) * pow(cos(theta), 0.2e1) - (double) (r * r)) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[0][3][3] = -(double) (a * a + r * r) * (double) m * ((double) (a * a) * pow(cos(theta), 0.2e1) - (double) (r * r)) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[1][0][0] = -0.1e1 / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) * (double) (a * a) * cos(theta) * sin(theta);
chs[1][0][1] = 0.1e1 / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) * (double) r;
chs[1][0][2] = 0;
chs[1][0][3] = 0;
chs[1][1][0] = -(double) (a * a - 2 * m * r + r * r) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) * (double) r;
chs[1][1][1] = -0.1e1 / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) * (double) (a * a) * cos(theta) * sin(theta);
chs[1][1][2] = 0;
chs[1][1][3] = 0;
chs[1][2][0] = 0;
chs[1][2][1] = 0;
chs[1][2][2] = (0.2e1 * pow(sin(theta), 0.4e1) * (double) (int) pow((double) a, (double) 4) * (double) m * (double) r + 0.4e1 * pow(sin(theta), 0.2e1) * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) m * (double) r + pow(cos(theta), 0.4e1) * (double) (int) pow((double) a, (double) 6) + pow(cos(theta), 0.4e1) * (double) (int) pow((double) a, (double) 4) * (double) (r * r) - 0.4e1 * (double) (m * m) * (double) (a * a) * (double) (r * r) * pow(sin(theta), 0.2e1) + 0.4e1 * pow(sin(theta), 0.2e1) * (double) (a * a) * (double) m * (double) (int) pow((double) r, (double) 3) - 0.2e1 * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) m * (double) r + 0.2e1 * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) (r * r) - 0.2e1 * pow(cos(theta), 0.2e1) * (double) (a * a) * (double) m * (double) (int) pow((double) r, (double) 3) + 0.2e1 * pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (int) pow((double) r, (double) 4) - (double) (2 * a * a * m * (int) pow((double) r, (double) 3)) + (double) (a * a * (int) pow((double) r, (double) 4)) - (double) (2 * m * (int) pow((double) r, (double) 5)) + (double) (int) pow((double) r, (double) 6)) * cos(theta) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / sin(theta) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[1][2][3] = 0.2e1 * (double) (a * a - 2 * m * r + r * r) * (double) m * (double) (int) pow((double) a, (double) 3) * (double) r * pow(sin(theta), 0.3e1) * cos(theta) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[1][3][0] = 0;
chs[1][3][1] = 0;
chs[1][3][2] = -0.2e1 * ((double) (a * a) * pow(sin(theta), 0.2e1) + (double) (a * a) * pow(cos(theta), 0.2e1) - (double) (2 * m * r) + (double) (r * r)) * cos(theta) * (double) a * (double) m * (double) r / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / sin(theta) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[1][3][3] = -0.2e1 * (double) (a * a - 2 * m * r + r * r) * (double) m * (double) r * (double) (a * a) * sin(theta) * cos(theta) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[2][0][0] = 0;
chs[2][0][1] = 0;
chs[2][0][2] = (pow(sin(theta), 0.2e1) * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) m + pow(cos(theta), 0.4e1) * (double) (int) pow((double) a, (double) 4) * (double) r - (double) m * (double) (r * r) * (double) (a * a) * pow(sin(theta), 0.2e1) - 0.2e1 * pow(cos(theta), 0.2e1) * (double) (a * a) * (double) m * (double) (r * r) + 0.2e1 * pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (int) pow((double) r, (double) 3) - (double) (2 * m * (int) pow((double) r, (double) 4)) + (double) (int) pow((double) r, (double) 5)) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[2][0][3] = (pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) - pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (a * a * r * r) - (double) (3 * (int) pow((double) r, (double) 4))) * (double) m * (double) a * pow(sin(theta), 0.2e1) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[2][1][0] = 0;
chs[2][1][1] = 0;
chs[2][1][2] = (0.2e1 * pow(sin(theta), 0.4e1) * (double) (int) pow((double) a, (double) 4) * (double) m * (double) r + 0.4e1 * pow(sin(theta), 0.2e1) * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) m * (double) r + pow(cos(theta), 0.4e1) * (double) (int) pow((double) a, (double) 6) + pow(cos(theta), 0.4e1) * (double) (int) pow((double) a, (double) 4) * (double) (r * r) - 0.4e1 * (double) (m * m) * (double) (a * a) * (double) (r * r) * pow(sin(theta), 0.2e1) + 0.4e1 * pow(sin(theta), 0.2e1) * (double) (a * a) * (double) m * (double) (int) pow((double) r, (double) 3) - 0.2e1 * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) m * (double) r + 0.2e1 * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) (r * r) - 0.2e1 * pow(cos(theta), 0.2e1) * (double) (a * a) * (double) m * (double) (int) pow((double) r, (double) 3) + 0.2e1 * pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (int) pow((double) r, (double) 4) - (double) (2 * a * a * m * (int) pow((double) r, (double) 3)) + (double) (a * a * (int) pow((double) r, (double) 4)) - (double) (2 * m * (int) pow((double) r, (double) 5)) + (double) (int) pow((double) r, (double) 6)) * cos(theta) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / sin(theta) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[2][1][3] = 0.2e1 * (double) (a * a - 2 * m * r + r * r) * (double) m * (double) (int) pow((double) a, (double) 3) * (double) r * pow(sin(theta), 0.3e1) * cos(theta) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[2][2][0] = -(double) (a * a - 2 * m * r + r * r) * pow((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1), -0.3e1) * pow(sin(theta), 0.2e1) * (pow(sin(theta), 0.2e1) * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) m + pow(cos(theta), 0.4e1) * (double) (int) pow((double) a, (double) 4) * (double) r - (double) m * (double) (r * r) * (double) (a * a) * pow(sin(theta), 0.2e1) + 0.2e1 * pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (int) pow((double) r, (double) 3) + (double) (int) pow((double) r, (double) 5));
chs[2][2][1] = -pow((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1), -0.3e1) * sin(theta) * cos(theta) * (0.2e1 * pow(sin(theta), 0.4e1) * (double) (int) pow((double) a, (double) 4) * (double) m * (double) r + 0.4e1 * pow(sin(theta), 0.2e1) * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) m * (double) r + pow(cos(theta), 0.4e1) * (double) (int) pow((double) a, (double) 6) + pow(cos(theta), 0.4e1) * (double) (int) pow((double) a, (double) 4) * (double) (r * r) + 0.4e1 * pow(sin(theta), 0.2e1) * (double) (a * a) * (double) m * (double) (int) pow((double) r, (double) 3) + 0.2e1 * pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) * (double) (r * r) + 0.2e1 * pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (int) pow((double) r, (double) 4) + (double) (a * a * (int) pow((double) r, (double) 4)) + (double) (int) pow((double) r, (double) 6));
chs[2][2][2] = 0;
chs[2][2][3] = 0;
chs[2][3][0] = (double) (a * a - 2 * m * r + r * r) * pow((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1), -0.3e1) * (double) m * (double) a * pow(sin(theta), 0.2e1) * ((double) (a * a) * pow(cos(theta), 0.2e1) - (double) (r * r));
chs[2][3][1] = 0.2e1 * pow((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1), -0.3e1) * (double) m * (double) a * (double) r * sin(theta) * cos(theta) * ((double) (a * a) * pow(sin(theta), 0.2e1) + (double) (a * a) * pow(cos(theta), 0.2e1) + (double) (r * r));
chs[2][3][2] = 0;
chs[2][3][3] = 0;
chs[3][0][0] = 0;
chs[3][0][1] = 0;
chs[3][0][2] = -(double) m * (double) a * ((double) (a * a) * pow(cos(theta), 0.2e1) - (double) (r * r)) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[3][0][3] = -(double) (a * a + r * r) * (double) m * ((double) (a * a) * pow(cos(theta), 0.2e1) - (double) (r * r)) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[3][1][0] = 0;
chs[3][1][1] = 0;
chs[3][1][2] = -0.2e1 * ((double) (a * a) * pow(sin(theta), 0.2e1) + (double) (a * a) * pow(cos(theta), 0.2e1) - (double) (2 * m * r) + (double) (r * r)) * cos(theta) * (double) a * (double) m * (double) r / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / sin(theta) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[3][1][3] = -0.2e1 * (double) (a * a - 2 * m * r + r * r) * (double) m * (double) r * (double) (a * a) * sin(theta) * cos(theta) / ((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1)) / (0.2e1 * (double) m * (double) r * (double) (a * a) * pow(sin(theta), 0.2e1) + pow(cos(theta), 0.2e1) * (double) (int) pow((double) a, (double) 4) + pow(cos(theta), 0.2e1) * (double) (a * a) * (double) (r * r) - (double) (2 * a * a * m * r) + (double) (a * a * r * r) - (double) (2 * m * (int) pow((double) r, (double) 3)) + (double) (int) pow((double) r, (double) 4));
chs[3][2][0] = (double) (a * a - 2 * m * r + r * r) * pow((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1), -0.3e1) * (double) m * (double) a * pow(sin(theta), 0.2e1) * ((double) (a * a) * pow(cos(theta), 0.2e1) - (double) (r * r));
chs[3][2][1] = 0.2e1 * pow((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1), -0.3e1) * (double) m * (double) a * (double) r * sin(theta) * cos(theta) * ((double) (a * a) * pow(sin(theta), 0.2e1) + (double) (a * a) * pow(cos(theta), 0.2e1) + (double) (r * r));
chs[3][2][2] = 0;
chs[3][2][3] = 0;
chs[3][3][0] = -(double) (a * a - 2 * m * r + r * r) * pow((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1), -0.3e1) * (double) m * ((double) (a * a) * pow(cos(theta), 0.2e1) - (double) (r * r));
chs[3][3][1] = -0.2e1 * pow((double) (r * r) + (double) (a * a) * pow(cos(theta), 0.2e1), -0.3e1) * (double) m * (double) r * (double) (a * a) * cos(theta) * sin(theta);
chs[3][3][2] = 0;
chs[3][3][3] = 0;}

#ifdef CMP_OUR_MAPLE
   {for(unsigned int a=0;a<4;a++) {
    for(unsigned int b=0;b<4;b++) {
    for(unsigned int c=0;c<4;c++) {
      double av = a_chr.value((a+5)%4,(b+5)%4,(c+5)%4);
      double v = chs[a][c][b];
      double tolerance = 1.e-3;
      if(::fabs(av-v)>=tolerance) {
        parent::m_out << "kerr_transporter : problem with christoffel :" 
              << " " << a << " " << b << " " << c << " : " << av << " Maple " << v
              << std::endl;
        return false;
      }
    }}}}
#endif //CMP_OUR_MAPLE

#endif //DO_MAPLE

#ifdef USE_OUR
#else
   {a_chr.set_zero();
    for(unsigned int a=0;a<4;a++) {
    for(unsigned int b=0;b<4;b++) {
    for(unsigned int c=0;c<4;c++) {
      a_chr.set_value((a+5)%4,(b+5)%4,(c+5)%4,chs[a][c][b]);
    }}}}
#endif

    return true;
  }
public:
  kerr_transporter(std::ostream& a_out,
                   sqrt_func a_sqrt,fabs_func a_fabs,
                   sin_func a_sin,cos_func a_cos,
                   REAL a_R = REAL(1),REAL a_a = REAL(0),bool a_verbose = false)
  :parent(a_out,a_sqrt,a_fabs,a_verbose)
  ,m_sin(a_sin),m_cos(a_cos)
  ,m_R(a_R),m_a(a_a){}
  virtual ~kerr_transporter(){}
public:
  kerr_transporter(const kerr_transporter& a_from)
  :parent(a_from)
  ,m_sin(a_from.m_sin),m_cos(a_from.m_cos)
  ,m_R(a_from.m_R)
  ,m_a(a_from.m_a)
  {}
  kerr_transporter& operator=(const kerr_transporter& a_from) {
    parent::operator=(a_from);
    m_sin = a_from.m_sin;
    m_cos = a_from.m_cos;
    m_R = a_from.m_R;
    m_a = a_from.m_a;
    return *this;
  }
protected:
  sin_func m_sin;
  cos_func m_cos;
  REAL m_R; // m_R = 2GM/c**2 and we have correctly [m_R] = L.
  REAL m_a; // m_a = J/Mc     and we have correctly [m_a] = L.
};

}

#endif
