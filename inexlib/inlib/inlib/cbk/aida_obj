// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_aida_obj
#define inlib_cbk_aida_obj

#include "../raxml_out"
#include "../sg/bcbk"
#include "../sg/view_plots"

#include "aida_ntu"

namespace inlib {
namespace cbk {

class aida_obj : public sg::bcbk, public sg::pos_data {
  typedef sg::bcbk parent;
public:
  virtual sg::return_action action() {
    //m_gv.out << "aida_obj::action : name : " << file << std::endl;

    if(m_raxml_out.cls()==histo::h1d::s_class()) {
      histo::h1d* h = (histo::h1d*)m_raxml_out.object();
      sg::plot(m_gv,*h);
      if(!m_popup) m_gv.hide_main_menu();

    } else if(m_raxml_out.cls()==histo::h2d::s_class()) {
      histo::h2d* h = (histo::h2d*)m_raxml_out.object();
      sg::plot(m_gv,*h);
      if(!m_popup) m_gv.hide_main_menu();

    } else if(m_raxml_out.cls()==histo::p1d::s_class()) {
      histo::p1d* p = (histo::p1d*)m_raxml_out.object();
      sg::plot(m_gv,*p);
      if(!m_popup) m_gv.hide_main_menu();

    } else if(m_raxml_out.cls()==aida::ntuple::s_class()) {
      aida::ntuple* ntu = (aida::ntuple*)m_raxml_out.object();

      sg::list* list = new sg::list(m_gv.ttf());
      m_gv.set_style(*list);

      const std::vector<aida::base_col*>& cols = ntu->cols();
     {inlib_vforcit(aida::base_col*,cols,it) {
        aida::base_col* col = (*it);
        list->add(col->name(),new cbk::aida_ntu(m_gv,*ntu,*col,cbk::aida_ntu::action_main(),m_popup,m_ex,m_ey));
      }}

      if(!list->items.size()) {
        delete list;
        m_gv.pop_warn(m_popup,m_ex,m_ey,"empty");
      } else {
        m_gv.show_widget(*this,list);
      }
      return sg::return_to_render;     


/*
    } else if(m_raxml_out.cls()==histo::c1d::s_class()) {
      histo::c1d* c = (histo::c1d*)m_raxml_out.object();
      if(!m_popup) m_gv.hide_main_menu();
      //m_gv.plot(*c);
*/

    } else if(m_raxml_out.cls()==histo::c2d::s_class()) {
      histo::c2d* c = (histo::c2d*)m_raxml_out.object();
      sg::plot(m_gv,*c);
      if(!m_popup) m_gv.hide_main_menu();

/*
    } else if(m_raxml_out.cls()==histo::c3d::s_class()) {
      histo::c3d* c = (histo::c3d*)m_raxml_out.object();
      if(!m_popup) m_gv.hide_main_menu();
      //m_gv.plot(*c);
*/

    } else {
      m_gv.out() << "cbk::aida_obj :"
            << " dont't know how to plot object of class "
            << sout(m_raxml_out.cls())
            << std::endl;
      m_gv.pop_warn(m_popup,m_ex,m_ey,"no vis for "+m_raxml_out.cls());
    }
    return sg::return_to_render;     
  }
  virtual sg::bcbk* copy() const {return new aida_obj(*this);}
public:
  aida_obj(sg::gui_viewer& a_gv,const raxml_out& a_raxml_out,bool a_popup,int a_ex,int a_ey)
  :parent()
  ,pos_data(a_popup,a_ex,a_ey)
  ,m_gv(a_gv)
  ,m_raxml_out(a_raxml_out)
  {}
  virtual ~aida_obj(){}
public:
  aida_obj(const aida_obj& a_from)
  :parent(a_from)
  ,pos_data(a_from)
  ,m_gv(a_from.m_gv)
  ,m_raxml_out(a_from.m_raxml_out)
  {}
  aida_obj& operator=(const aida_obj& a_from){
    parent::operator=(a_from);
    pos_data::operator=(a_from);
    m_raxml_out = a_from.m_raxml_out;
    return *this;
  }
protected:
  sg::gui_viewer& m_gv;
  raxml_out m_raxml_out;
};

}}

//inlib_build_use kernel

#endif
