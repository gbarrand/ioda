// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_www
#define inlib_cbk_www

#include "../sg/gui_viewer"

#include "../web"

namespace inlib {
namespace cbk {

class www : public sg::bcbk { //www and not web since there is a name space web.
  typedef sg::bcbk parent;
public:
  virtual sg::return_action action() {
    //m_out << "www::action : " << std::endl;

    //m_gv.clear_scene();

    if(!open_url(m_gv.out(),m_gv.opener(),m_web_cache,m_url)) {
      m_gv.map_warn_failed();
    }
    return sg::return_to_render;     
  }
  virtual sg::bcbk* copy() const {return new www(*this);}
public:
  www(sg::gui_viewer& a_gv,
      web::cache& a_web_cache,
      const std::string& a_url)
  :m_gv(a_gv)
  ,m_web_cache(a_web_cache)

  ,m_url(a_url)
  {}
  virtual ~www(){}
public:
  www(const www& a_from)
  :parent(a_from)
  ,m_gv(a_from.m_gv)
  ,m_web_cache(a_from.m_web_cache)

  ,m_url(a_from.m_url)
  {}
  www& operator=(const www& a_from){
    parent::operator=(a_from);
    m_url = a_from.m_url;
    return *this;
  }
public: //public for iPhone.
  static bool open_url(std::ostream& a_out,
                       opener& a_opener,
                       web::cache& a_web_cache,
                       const std::string& a_url) {
    if(a_url.empty()) {
      a_out << "inlib::cbk::web::open_url :"
            << " no url given."
            << std::endl;
      return false;
    }

#if TARGET_OS_IPHONE
    if(a_url.substr(0,5)=="ioda:") {
      // cowork with Info.plist :
      //  <key>CFBundleURLTypes</key>
      //  <array>
      //    <dict>
      //      <key>CFBundleURLName</key>
      //      <string>fr.in2p3.lal.ioda</string>
      //      <key>CFBundleURLSchemes</key>
      //      <array>
      //         <string>ioda</string>
      //      </array>
      //    </dict>
      //  </array>
      // exa : 
      //  ioda:http://OpenScientist.lal.in2p3.fr/download/data/aida/ref_inlib_waxml.aida.gz";
      return open_url(a_out,a_opener,a_web_cache,
                      a_url.substr(5,a_url.size()-5));
    }
#endif

    std::string _path; //local (to the device) path.
    if(a_url.substr(0,7)=="file://") { //URL "file" scheme
      //0123456789 sz = 10
      //file://abc
      _path = a_url.substr(7,a_url.size()-7);
    } else {
      //ftp: and http:
      if(!a_web_cache.fetch(a_url,_path)) {
        a_out << "inlib::cbk::web::open_url :"
              << " web.fetch failed for " << sout(a_url)
              << std::endl;
        return false;
      }
    }

    bool done;
    if(!a_opener.open
          (_path,file::s_format_guessed(),args(),
           done)) return false;
    if(!done) return false;
    return true;
  }
protected:
  sg::gui_viewer& m_gv;
  web::cache& m_web_cache;

  std::string m_url;
};

}}

//inlib_build_use kernel

#endif
