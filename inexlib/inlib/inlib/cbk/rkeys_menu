// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_rkeys_menu
#define inlib_cbk_rkeys_menu

#include "../sg/list"

#include "../rroot/file"
#include "../rroot/key"
#include "../rroot/clss"
#include "../rroot/tree"
#include "../ntu_proj"

#include "../store/osc_streamers"

#include "../sg/gui_viewer"

namespace inlib {
namespace cbk {

class icbk_fact {
public:
  virtual ~icbk_fact(){}
public:
  virtual sg::bcbk* create(sg::gui_viewer& a_gv,
                           ntu_proj& a_proj,
                           rroot::file& a_file,
                           rroot::key& a_key,
                           const sg::pos_data&) = 0;
};

inline bool rkeys_menu(rroot::file& a_file,
                       const std::vector<rroot::key*>& a_keys,
                       sg::gui_viewer& a_gv,
                       ntu_proj& a_proj,
                       icbk_fact& a_fact,const sg::pos_data& a_data) {
  if(a_keys.empty()) {
    a_gv.pop_warn(a_data,"empty");
    return false;
  } else {
    sg::list* list = new sg::list(a_gv.ttf());
    a_gv.set_style(*list);

    std::vector<rroot::key*>::const_iterator it;
    for(it=a_keys.begin();it!=a_keys.end();++it) {
      rroot::key& k = *(*it);
      if( (k.object_class()==rroot::TDirectory_cls()) ||

          (k.object_class()==rroot::TH1F_cls()) ||
          (k.object_class()==rroot::TH1D_cls()) ||
          (k.object_class()==rroot::TH2F_cls()) ||
          (k.object_class()==rroot::TH2D_cls()) ||
          (k.object_class()==rroot::TProfile_cls()) ||
          (k.object_class()==rroot::TTree_cls()) ||

          (k.object_class()==osc::s_h1d()) ||
          (k.object_class()==osc::s_h2d()) ||
          (k.object_class()==osc::s_h3d()) ||
          (k.object_class()==osc::s_p1d()) ||
          (k.object_class()==osc::s_p2d()) ||

          (k.object_class()==rroot::TGeoManager_cls()) 

        ){

        std::string _s;
        _s = k.object_name();

        bool is_dir = false;
        if(k.object_class()==rroot::TDirectory_cls()) {
          is_dir = true;
        } else {
          _s += " ";
          _s += k.object_class();
          _s += " ";
          _s += k.object_title();
        }
        list->add(_s,a_fact.create(a_gv,a_proj,a_file,k,a_data),is_dir);

      }
    }
    if(!list->items.size()) {
      delete list;
      a_gv.pop_warn(a_data,"empty");
      return false;
    } else {
      a_gv.show_widget(a_data,list);
      return true;
    }
  }
}

}}

//inlib_build_use kernel

#endif
