// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_root_obj
#define inlib_cbk_root_obj

#include "../rroot/geo"
#include "../rroot/fac"
#include "../rroot/streamers"
#include "../rroot/ntuple"
#include "../rroot/vds"
#include "../rroot/osc"
#include "../rroot/geo_manager"

#include "../sg/bcbk"
#include "../sg/holder"
#include "../sg/view_evd"

#include "ntu"
#include "rkeys_menu"

namespace inlib {
namespace cbk {

class root_obj : public sg::acbk, public sg::pos_data {
  typedef sg::acbk parent;
public:
  class cbk_fact : public virtual icbk_fact {
  public:
    virtual ~cbk_fact(){}
  public:
    virtual sg::bcbk* create(sg::gui_viewer& a_gv,
                             ntu_proj& a_proj,
                             rroot::file& a_file,
                             rroot::key& a_key,const sg::pos_data& a_data) {
      return new root_obj(a_gv,a_proj,a_file,a_key,action_main(),a_data); 
    }
  };

public:
  static unsigned int action_main()            {return 0;}
protected:
  static unsigned int action_geo()             {return 1;}
  static unsigned int action_geo_sg()          {return 2;}
  static unsigned int action_vols()            {return 3;}
  static unsigned int action_vol_vis()         {return 4;}
  static unsigned int action_sub_vols()        {return 5;}
  static unsigned int action_choose_vol()      {return 6;}
  static unsigned int action_choosen_vol_vis() {return 7;}
public:
  virtual sg::return_action action() {
    std::ostream& out = m_gv.out();

    if(m_action==action_main()) {

      unsigned int sz;    
      char* buf = m_key.get_object_buffer(m_file,sz);//we don't have ownership of buf.
      if(!buf) {
        out << "root_obj::action :"
            << " can't get data buffer for " << m_key.object_name() << "."
            << std::endl;
        m_gv.pop_warn(m_popup,m_ex,m_ey,"key.get_buffer() failed");
        return sg::return_to_render;     
      }

      //out  << "root_obj::action :"
      //     << " size of data object " << sz
      //     << std::endl;
  
      rroot::buffer b(out,m_file.byte_swap(),sz,buf,m_key.key_length(),false);
  
      if(m_key.object_class()==rroot::TGeoManager_cls()) {
  
        b.set_map_objs(true);

        //look if a geo_manager already loaded 
        //  labels.push_back(k.object_name());

        //std::cout << "debug :"
        //          << " key name " << m_key.object_name()
        //          << " title " << m_key.object_title()
        //          << " path " << m_file.path()
        //          << std::endl;
        rroot::geo_manager* mgr = m_gv.find_in_tmp_group<rroot::geo_manager>(m_key.object_name());
        if(mgr) {
          //m_gv.out() << "debug : geo_manager already in tmp_group."
          //           << std::endl;          
        } else {
          //m_gv.out() << "debug : geo_manager not found in tmp_group."
          //           << std::endl;
          mgr = new rroot::geo_manager(out);

          //atime begin = atime::now();
          if(!mgr->stream(b)) {
            out << "cbk::root_obj::action :"
                << " streaming failed for TGeoManager."
                << std::endl;
            delete mgr;
            m_gv.pop_warn(m_popup,m_ex,m_ey,"geo_mgr.stream() failed");
            return sg::return_to_render;     
          }
          //m_gv.out() << "read geom time : "
          //           << atime::elapsed(begin)
          //           << std::endl;
          const rroot::geo_volume* master = mgr->master();
          if(!master) {
            delete mgr;
            m_gv.pop_warn(m_popup,m_ex,m_ey,"no master volume");
            return sg::return_to_render;     
          }

          std::vector< std::pair<std::string,unsigned int> > vds;
         {std::string svds = nosuffix(m_file.path());
          svds += ".vds";
          if(svds.size()) {
            std::string _path;
            if(!find_with_dirs(out,m_gv.data_dirs(),svds,_path)){
              //not fatal, arrange without a .vds file.
              //out << "cbk::root_obj::action :"
              //    << " vds file " << svds << " not found."
              //    << std::endl;
            } else {
              //out << "cbk::root_obj::action :"
              //    << " vds file " << svds << " found. Read it..."
              //    << std::endl;
              if(!read_vds(_path,vds)){
                m_gv.pop_warn(m_popup,m_ex,m_ey,"can't read vds file "+_path+".");
                delete mgr;
                return sg::return_to_render;     
              }
            }
            mgr->set_vds(vds);
            //out << "cbk::root_obj::action :"
            //    << " vds file " << svds << " found and loaded."
            //    << std::endl;
          }}

          m_gv.remove_in_tmp_group<rroot::geo_manager>(m_key.object_name());
          m_gv.add_in_tmp_group<rroot::geo_manager>(m_key.object_name(),mgr);
        } 

        sg::list* list = new sg::list(m_gv.ttf());
        m_gv.set_style(*list);

       {root_obj* _cbk = new root_obj(m_gv,m_proj,m_file,m_key,action_sub_vols(),*this);
        _cbk->m_geo_mgr = mgr;
        _cbk->m_tree_vol = mgr->master();

        std::string s = mgr->master()->name();
        std::vector<rroot::geo_node*>* sub_nodes = mgr->master()->nodes();
        if(sub_nodes && sub_nodes->size()) {
          s += " children ";
          if(!numas<uint64>(sub_nodes->size(),s)){}
        }
        list->add(s,_cbk);}

       {root_obj* _cbk = new root_obj(m_gv,m_proj,m_file,m_key,action_vols(),*this);
        _cbk->m_geo_mgr = mgr;
        list->add("per vol",_cbk);}

       {root_obj* _cbk = new root_obj(m_gv,m_proj,m_file,m_key,action_choose_vol(),*this);
        _cbk->m_geo_mgr = mgr;
        list->add("enter vol",_cbk);}

        m_gv.show_widget(*this,list);
    
        return sg::return_to_render;

      } else if(m_key.object_class()==rroot::TH1F_cls()) {
        histo::h1d* h = rroot::TH1F_stream(b); //we get ownership.
        if(!h) {
          out  << "root_obj::action :"
               << " TH1F streaming failed"
               << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"TH1F streaming failed");
        } else {
          //h->hprint(out);
          if(!m_popup) m_gv.hide_main_menu();
          sg::plot(m_gv,*h);
          delete h;
        }
  
      } else if(m_key.object_class()==rroot::TH1D_cls()) {
        histo::h1d* h = rroot::TH1D_stream(b); //we get ownership.
        if(!h) {
          out << "root_obj::action :"
              << " TH1D streaming failed"
              << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"TH1D streaming failed");
        } else {
          //h->hprint(out);
          if(!m_popup) m_gv.hide_main_menu();
          sg::plot(m_gv,*h);
          delete h;
        }
  
      } else if(m_key.object_class()==rroot::TH2F_cls()) {
        histo::h2d* h = rroot::TH2F_stream(b); //we get ownership.
        if(!h) {
          out << "root_obj::action :"
              << " TH2F streaming failed"
              << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"TH2F streaming failed");
        } else {
          //h->hprint(out);
          if(!m_popup) m_gv.hide_main_menu();
          sg::plot(m_gv,*h);
          delete h;
        }
  
      } else if(m_key.object_class()==rroot::TH2D_cls()) {
        histo::h2d* h = rroot::TH2D_stream(b); //we get ownership.
        if(!h) {
          out << "root_obj::action :"
              << " TH2D streaming failed"
              << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"TH2D streaming failed");
        } else {
          //h->hprint(out);
          if(!m_popup) m_gv.hide_main_menu();
          sg::plot(m_gv,*h);
          delete h;
        }
  
      } else if(m_key.object_class()==rroot::TProfile_cls()) {
        histo::p1d* p = rroot::TProfile_stream(b);
        if(!p) {
          out << "root_obj::action :"
              << " TProfile streaming failed"
              << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"TProfile streaming failed");
        } else {
          //h->hprint(ouot);
          if(!m_popup) m_gv.hide_main_menu();
          sg::plot(m_gv,*p);
          delete p;
        }
  
      } else if(m_key.object_class()==osc::s_h1d()) {
        histo::h1d h("",10,0,1);
        if(!rroot::from_osc(b,osc::s_h1d(),h)) {
          out << "root_obj::action :"
              << " " << osc::s_h1d() << " streaming failed"
              << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"osc::h1d streaming failed");
        } else {
          //h->hprint(out);
          if(!m_popup) m_gv.hide_main_menu();
          sg::plot(m_gv,h);
        }
  
      } else if(m_key.object_class()==osc::s_h2d()) {
        histo::h2d h("",10,0,1,10,0,1);
        if(!rroot::from_osc(b,osc::s_h2d(),h)) {
          out << "root_obj::action :"
              << " " << osc::s_h2d() << " streaming failed"
              << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"osc::h2d streaming failed");
        } else {
          //h->hprint(out);
          if(!m_popup) m_gv.hide_main_menu();
          sg::plot(m_gv,h);
        }
  
      } else if(m_key.object_class()==osc::s_h3d()) {
        histo::h3d h("",10,0,1,10,0,1,10,0,1);
        if(!rroot::from_osc(b,osc::s_h3d(),h)) {
          out << "root_obj::action :"
              << " " << osc::s_h3d() << " streaming failed"
              << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"osc::h3d streaming failed");
        } else {
          //h->hprint(out);
          m_gv.pop_warn(m_popup,m_ex,m_ey,"no vis for osc::h3d");
          //if(!m_popup) m_gv.hide_main_menu();
          //sg::plot(m_gv,*h);
        }
  
      } else if(m_key.object_class()==osc::s_p1d()) {
        histo::p1d h("",10,0,1);
        if(!rroot::from_osc(b,osc::s_p1d(),h)) {
          out << "root_obj::action :"
              << " " << osc::s_p1d() << " streaming failed"
              << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"osc::p1d streaming failed");
        } else {
          //h->hprint(out);
          if(!m_popup) m_gv.hide_main_menu();
          sg::plot(m_gv,h);
        }
  
      } else if(m_key.object_class()==osc::s_p2d()) {
        histo::p2d h("",10,0,1,10,0,1);
        if(!rroot::from_osc(b,osc::s_p2d(),h)) {
          out << "root_obj::action :"
              << " " << osc::s_p2d() << " streaming failed"
              << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"osc::p2d streaming failed");
        } else {
          //h->hprint(out);
          m_gv.pop_warn(m_popup,m_ex,m_ey,"no vis for osc::p2d");
        //if(!m_popup) m_gv.hide_main_menu();
        //sg::plot(m_gv,*h);
        }
  
      } else if(m_key.object_class()==rroot::TTree_cls()) {
        rroot::fac* fac = new rroot::fac(out);
        rroot::tree* tree = new rroot::tree(m_file,*fac);
  
        m_gv.remove_in_tmp_group<rroot::fac>(m_key.object_name());
        m_gv.add_in_tmp_group<rroot::fac>(m_key.object_name(),fac);
  
        m_gv.remove_in_tmp_group<rroot::tree>(m_key.object_name());
        m_gv.add_in_tmp_group<rroot::tree>(m_key.object_name(),tree);
  
        if(!tree->stream(b)) {
          out << "root_obj::action :"
              << " TTree streaming failed"
              << std::endl;
        } else {
          //tree.dump(out,"","  ");
          //find leaves with primary type that we can histogram...
  
          rroot::ntuple* ntu = new rroot::ntuple(*tree);
  
          m_gv.remove_in_tmp_group<rroot::ntuple>(m_key.object_name());
          m_gv.add_in_tmp_group<rroot::ntuple>(m_key.object_name(),ntu);
  
          if(!ntu->initialize(out)) {
            out << "inlib::cbk::root_obj::action :"
                << " can't initialize ntuple."
                << std::endl;
            m_gv.pop_warn(m_popup,m_ex,m_ey,"ntu.init() failed");
            return sg::return_to_render;     
          }
          if(ntu->columns().empty()) {
            m_gv.pop_warn(m_popup,m_ex,m_ey,"ntu has no columns");
            return sg::return_to_render;     
          }
  
          sg::entries* entries = new sg::entries(m_gv.ttf());
          m_gv.set_style(*entries);
          std::vector<std::string> opts;
          opts.push_back(sg::s_1D());
          opts.push_back(sg::s_2D());
          entries->add_opts("proj",sg::s_1D(),opts);
        //entries->visible_items = 1;
  
          cbk::choose_proj* _cbk =
            new cbk::choose_proj(m_gv,m_proj,*ntu,cbk::choose_proj::action_main(),*this);
          _cbk->m_entries = entries;
          entries->add_callback(_cbk);
  
          m_gv.show_widget(*this,entries);
  
          return sg::return_to_render;     
  
        }
  
      } else if(m_key.object_class()==rroot::TDirectory_cls()) {
  
        std::string label = m_key.object_name();
        //out << "inlib::cbk::root_obj::action : directory : "
        //    << label << std::endl;
  
        rroot::TDirectory* tdir = new rroot::TDirectory(m_file);
  
        m_gv.remove_in_tmp_group<rroot::TDirectory>(m_key.object_name());
        m_gv.add_in_tmp_group<rroot::TDirectory>(m_key.object_name(),tdir);
  
        if(!tdir->stream(b)) {
          out  << "inlib::cbk::root_obj::action :"
               << " can't stream TDirectory."
               << std::endl;
          m_gv.pop_warn(m_popup,m_ex,m_ey,"TDirectory streaming failed");
        } else {
          const std::vector<rroot::key*>& keys = tdir->keys();
          cbk_fact fact;
          cbk::rkeys_menu(m_file,keys,m_gv,m_proj,fact,*this);
        }
  
      } else {
        out << "inlib::cbk::root_obj::action :"
            << " dont't know how to plot object of class "
            << sout(m_key.object_class())
            << std::endl;
        m_gv.pop_warn(m_popup,m_ex,m_ey,"no vis for "+m_key.object_class());
      }

      return sg::return_to_render;     

    } else if(m_action==action_geo()) { //vis per depth.

      sg::entries* node = new sg::entries(m_gv.ttf());

      node->add_uint("min_depth",0);    //0
      node->add_uint("max_depth",1);    //1
      node->add_uint("solid_depth",1);  //2
     {std::vector<std::string> opts;  
      opts.push_back("single");
      opts.push_back("depth");
      opts.push_back("material");
      node->add_opts("atb per","depth",opts);}    //3
      node->add_color("color",colorf_grey()); //4
      node->add_uint("max_time (sec)",5);  //5
      if(m_gv.is_wall_screen_app()) {
        node->add_uint("max shapes",5000);   //6
      } else {
        node->add_uint("max shapes",10000);  //6
      }
      node->add_bool("clear det sg",false);      //7
      node->add_float("radius",0); //8 //0 = we do not recreate camera.
  
      root_obj* _cbk = new root_obj(m_gv,m_proj,m_file,m_key,action_geo_sg(),*this);
      _cbk->m_entries = node;           
      _cbk->m_geo_mgr = m_geo_mgr;
      _cbk->m_vol = m_vol;
      node->add_callback(_cbk);
  
      m_gv.set_style(*node);
  
      m_gv.show_widget(*this,node);

      return sg::return_to_render;     

    } else if(m_action==action_geo_sg()) {

      sg::view_evd* _evd = sg::cast_view_evd(m_gv);
      if(!_evd) return sg::return_none;

      unsigned int min_depth;
      if(!to<unsigned int>(m_entries->values[0],min_depth)) {
        m_gv.pop_warn(m_popup,m_ex,m_ey,"min depth not a number");
        return sg::return_to_render;     
      }
      unsigned int max_depth;
      if(!to<unsigned int>(m_entries->values[1],max_depth)) {
        m_gv.pop_warn(m_popup,m_ex,m_ey,"max depth not a number");
        return sg::return_to_render;     
      }
      unsigned int solid_depth;
      if(!to<unsigned int>(m_entries->values[2],solid_depth)) {
        m_gv.pop_warn(m_popup,m_ex,m_ey,"solid depth not a number");
        return sg::return_to_render;     
      }

      const std::string satb = m_entries->values[3];

      float r,g,b,a;
      if(!m_entries->get_color(4,r,g,b,a)) { //values[4]
        m_gv.pop_warn(m_popup,m_ex,m_ey,"color not a color");
        return sg::return_to_render;     
      }

      unsigned int max_time;
      if(!to<unsigned int>(m_entries->values[5],max_time)) {
        m_gv.pop_warn(m_popup,m_ex,m_ey,"max time not a number");
        return sg::return_to_render;     
      }
      unsigned int max_shapes;
      if(!to<unsigned int>(m_entries->values[6],max_shapes)) {
        m_gv.pop_warn(m_popup,m_ex,m_ey,"max shapes not a number");
        return sg::return_to_render;     
      }
      bool clear_scene;
      if(!to(m_entries->values[7],clear_scene)) {
        m_gv.pop_warn(m_popup,m_ex,m_ey,"clear scene not a bool");
        return sg::return_to_render;     
      }

     {float scene_radius;
      if(!to<float>(m_entries->values[8],scene_radius)) {
        m_gv.pop_warn(m_popup,m_ex,m_ey,"scene radius not a number");
        return sg::return_to_render;     
      }
      if(!_evd->is_evd()) { //existing scene is not a evd scene.
        _evd->create_sg_evd(scene_radius?scene_radius:1);
      }
      if(scene_radius) {
        sg::base_camera* camera = m_gv.create_3D_camera(scene_radius);
        _evd->replace_camera(camera);
      }}

      sg::separator& dsep = _evd->detector_sg();
      if(clear_scene) dsep.clear();

      sg::separator* _sep = new sg::separator;
      dsep.add(_sep);

      _sep->add(new sg::matrix()); //for manip.

      int depth;
      m_geo_mgr->vds_get_depth(m_vol,depth);
      //::printf("debug : vds : %s %d (%d)\n",
      //    m_vol.c_str(),depth,m_geo_mgr->vds().size());

      rroot::geo* geo = new rroot::geo(*(m_geo_mgr->master()));
      geo->volume = m_vol;
      geo->min_depth = min_depth;
      geo->max_depth = max_depth;
      geo->solid_depth = solid_depth;
      geo->max_time = max_time;
      geo->max_shapes = max_shapes;
      geo->volume_depth = depth;

      if(satb=="single") {
        geo->atb = sg::atb_single;
        geo->color = colorf(r,g,b,a);

      } else if(satb=="material") {
        geo->atb = sg::atb_by_material;
        m_geo_mgr->set_default_colors();
        geo->set_cmap(sg::style_ROOT_colormap());

      } else if(satb=="depth") {
        geo->atb = sg::atb_by_depth;

        sg::style_povama_colormap povcmap;
        unsigned int ncol = (unsigned int)povcmap.size();

        sg::style_colormap cmap;
       {for(unsigned int i=0;i<max_depth;i++) {
          unsigned int icol = 2+i%(ncol-2);
          sg::style_colormap::const_iterator it = povcmap.find(icol);
          if(it==povcmap.end()) {
            m_gv.out() << "inlib::cbk::root_obj :"
                       << " index " << icol
                       << " not found in povama colormap."
                       << std::endl;
          } else {
            cmap.add((*it).second);
          }
        }}
        geo->set_cmap(cmap);
      }

      _sep->add(geo);

     {atime begin = atime::now();
      geo->update_sg(m_gv.out());
      std::string st = atime2s(atime::elapsed(begin));
      geo->reset_touched(); //avoid another update_sg at first render().
      std::string s;
      if(!numas<unsigned int>(geo->shape_count(),s)){}
      s += " shapes.";
      s += " Done in "+st+".";
      m_gv.show_console(s);}

      std::string swarn;
      if(geo->stopped_by_max_time())   swarn += "stopped by max time.";
      if(geo->stopped_by_max_shapes()) swarn += " stopped by max shapes.";
      if(geo->volume_not_found())      swarn += " "+m_vol+" not found.";

      if(swarn.size()) {
        m_gv.pop_warn(m_popup,m_ex,m_ey,swarn);
      } else {
        if(!m_popup) m_gv.hide_main_menu();
      }

      if(geo->shape_count()>=5000) m_gv.m_params.m_auto_hide_scene = true;

      return sg::return_to_render;     

    } else if(m_action==action_vols()) {

      std::vector<std::string> vols;
      std::vector<std::string> shps;
      m_geo_mgr->volumes(vols,shps);

      //m_gv.out() << "volume number " << vols.size() << std::endl;

      sg::list* list = new sg::list(m_gv.ttf());
      m_gv.set_style(*list);

      list->visible_items = 10;

      inlib_vforcit(std::string,vols,it){

        root_obj* _cbk = new root_obj(m_gv,m_proj,m_file,m_key,action_vol_vis(),*this);
        _cbk->m_geo_mgr = m_geo_mgr;
        _cbk->m_vol = *it;
        list->add(*it,_cbk);

      }

      m_gv.show_widget(*this,list);

     {std::string s;
      s += "Volumes ";
      if(!numas<uint64>(vols.size(),s)){}
      m_gv.show_console(s);}

      return sg::return_to_render;     
    
    } else if(m_action==action_vol_vis()) {
      
      m_action = action_geo();
      return action();

    } else if(m_action==action_choose_vol()) {

      sg::entries* node = new sg::entries(m_gv.ttf());

      node->add_string("volume","");
  
      root_obj* _cbk = new root_obj(m_gv,m_proj,m_file,m_key,action_choosen_vol_vis(),*this);
      _cbk->m_entries = node;           
      _cbk->m_geo_mgr = m_geo_mgr;
      node->add_callback(_cbk);
  
      m_gv.set_style(*node);
  
      m_gv.show_widget(*this,node);

      return sg::return_to_render;     

    } else if(m_action==action_choosen_vol_vis()) {

      m_vol = m_entries->values[0];
      m_action = action_geo();

      return action();

    } else if(m_action==action_sub_vols()) {

      if(!m_tree_vol) return sg::return_to_render;     

      std::vector<rroot::geo_node*>* nodes = m_tree_vol->nodes();
      if(!nodes) { //m_tree_vol is a leaf.
        m_vol = m_tree_vol->name();
        m_action = action_geo();
        return action();
      }

      sg::list* list = new sg::list(m_gv.ttf());
      m_gv.set_style(*list);

      list->visible_items = 10;

     {root_obj* _cbk = new root_obj(m_gv,m_proj,m_file,m_key,action_vol_vis(),*this);
      _cbk->m_geo_mgr = m_geo_mgr;
      _cbk->m_vol = m_tree_vol->name();
      list->add("--> vis "+m_tree_vol->name(),_cbk);}

     {inlib_vforit(rroot::geo_node*,*nodes,it) {

/*
        if(id_cast
             <rroot::geo_node,rroot::geo_node_offset>(*(*it))){
          //replicas : present only the first one.
          if(it!=nodes->begin()) {
            //rroot::geo_volume* vol = (*it)->volume();
            //::printf("debug : %s : replica : node %s, shape %s\n",
            //   vol->name().c_str(),
            //   (*it)->s_cls().c_str(),vol->shape()->s_cls().c_str());
            continue;
          }
        }
*/

        rroot::geo_volume* vol = (*it)->volume();

        root_obj* _cbk = new root_obj(m_gv,m_proj,m_file,m_key,action_sub_vols(),*this);
        _cbk->m_geo_mgr = m_geo_mgr;
        _cbk->m_tree_vol = vol;

        std::string s = vol->name();
        std::vector<rroot::geo_node*>* sub_nodes = vol->nodes();
        if(sub_nodes && sub_nodes->size()) {
          s += " children ";
          if(!numas<uint64>(sub_nodes->size(),s)){}
        }
        list->add(s,_cbk);
      }}

      m_gv.show_widget(*this,list);

      return sg::return_to_render;     

    } else {
    }

    return sg::return_none;     
  }
  virtual sg::bcbk* copy() const {return new root_obj(*this);}
public:
  root_obj(sg::gui_viewer& a_gv,
           ntu_proj& a_proj,
           rroot::file& a_file,
           rroot::key& a_key,
           unsigned int a_action,const pos_data& a_data)
  :parent(a_action)
  ,pos_data(a_data)
  ,m_gv(a_gv)
  ,m_proj(a_proj)
  ,m_file(a_file)
  ,m_key(a_key)
  ,m_entries(0)
  ,m_geo_mgr(0)
  ,m_tree_vol(0)
  {}
  virtual ~root_obj(){}
public:
  root_obj(const root_obj& a_from)
  :parent(a_from)
  ,pos_data(a_from)
  ,m_gv(a_from.m_gv)
  ,m_proj(a_from.m_proj)
  ,m_file(a_from.m_file)
  ,m_key(a_from.m_key)
  ,m_entries(a_from.m_entries)
  ,m_geo_mgr(a_from.m_geo_mgr)
  ,m_vol(a_from.m_vol)
  ,m_tree_vol(a_from.m_tree_vol)
  {}
  root_obj& operator=(const root_obj& a_from){
    parent::operator=(a_from);
    pos_data::operator=(a_from);
    m_entries = a_from.m_entries;
    m_geo_mgr = a_from.m_geo_mgr;
    m_vol = a_from.m_vol;
    m_tree_vol = a_from.m_tree_vol;
    return *this;
  }
protected:

/*
  static rroot::geo_manager* find_geo_in_tmp_group(sg::group& a_group,
                                                   const std::string& a_name,
                                                   const std::string& a_title) {
    typedef sg::holder<rroot::geo_manager> h_mgr_t;

    std::vector<sg::node*>& children = a_group.children();

    inlib_vforcit(sg::node*,children,it) {
      if(h_mgr_t* h = safe_cast<sg::node,h_mgr_t>(*(*it))){
        rroot::geo_manager* mgr = h->object();
        if(mgr && (mgr->name()==a_name) && (mgr->title()==a_title)) {
          return mgr;
        }
      }
    }
    return 0;
  }
*/

protected:
  sg::gui_viewer& m_gv;
  ntu_proj& m_proj;
  rroot::file& m_file;
  rroot::key& m_key;

  sg::entries* m_entries; //not owner.
  rroot::geo_manager* m_geo_mgr; //not owner.
  std::string m_vol;
  rroot::geo_volume* m_tree_vol; //not owner.
};

}}

#endif
