// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_cfitsio_popup
#define inlib_cbk_cfitsio_popup

#include "popup"
#include "popup_data"
#include "../sg/cfitsio"
#include "../sg/gui_viewer"

#include "../sg/plots"
#include "../sg/h2plot_cp"
#include "../sg/h1d"
#include "../histo/h1d"

namespace inlib {
namespace cbk {

inline sg::return_action cfitsio_popup_action_histo(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  sg::plots* _plots = sg::search_selectable<sg::plots>(a_gv.out(),a_gv.scene()); //we do not adjust size.
  if(!_plots) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"no sg::plots found");
    return sg::return_to_render;
  }

  sg::cfitsio* _node = safe_cast<sg::node,sg::cfitsio>(a_data.m_node);
  if(!_node) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"node not a sg::cfitsio");
    return sg::return_to_render;
  }

  // booking :
  bool automated = true; //true = xbins,xmin,xmax from data.
  unsigned int xbins = 0;
  double xmin = 0;
  double xmax = 0;

  sg::h1d* _sg_h1d = sg::search_selectable<sg::h1d>(a_gv.out(),a_gv.scene());
  if(_sg_h1d) {
    automated = false;
    xbins = _sg_h1d->xbins;
    xmin = _sg_h1d->xmin;
    xmax = _sg_h1d->xmax;
  }

  if(automated) {
    double _mn,_mx,_mean,_rms;
    _node->min_max_mean_rms<double>(_mn,_mx,_mean,_rms,::sqrt,::fabs);
    xbins = 100; //guess from data?
    xmin = _mn;
    xmax = _mx;
  }

  histo::h1d _h("cfitsio",xbins,xmin,xmax);
  _node->h1_fill(_h);

  sg::plotter& plotter = _plots->current_plotter();
  //plotter.clear();
  plotter.add_plottable(new sg::h1d2plot_cp(_h));

  return sg::return_to_render;
}

class cfitsio_popup : public popup {
public:
  virtual void add_items(sg::ilist& a_list,int a_x,int a_y) const {
    a_list.add("histo",
      new sg::fundata_cbk<sg::gui_viewer,sg::ilist,popup_data>(m_gv,a_list,cfitsio_popup_action_histo,popup_data(*m_node,a_x,a_y)));
  }
public:
  virtual sg::bcbk* copy() const {return new cfitsio_popup(*this);}
public:
  cfitsio_popup(sg::gui_viewer& a_gv)
  :popup(sg::cfitsio::s_class(),0)
  ,m_gv(a_gv)
  {}
  virtual ~cfitsio_popup(){}
protected:
  cfitsio_popup(const cfitsio_popup& a_from)
  :popup(a_from)
  ,m_gv(a_from.m_gv)
  {}
  cfitsio_popup& operator=(const cfitsio_popup& a_from){
    popup::operator=(a_from);
    return *this;
  }
protected:
  sg::gui_viewer& m_gv;
};

}}

//inlib_build_use kernel

#endif
