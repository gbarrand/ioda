// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_simbad
#define inlib_simbad

// interface to the Strasbourg simbad catalog.

#ifdef INLIB_MEM
#include "mem"
#endif

#include "srep"
#include <cstdio> //sprintf

namespace inlib {
namespace simbad {

inline void crep(std::string& a_s,char a_char) {
  char s[32];
  ::sprintf(s,"%%%02X",a_char);
  std::string sc = " ";
  sc[0] = a_char;
  replace(a_s,sc,std::string(s));
}

inline bool is_sex(const std::string& a_s) {
  return a_s.find(':')!=std::string::npos?true:false;
}

}}

#include "cstr"
#include "words"
#include "file"
#include "astro"
#include "typedefs"

namespace inlib {
namespace simbad {

inline bool read_catalog(uint64 a_size,char* a_buffer,const std::string& a_type,std::vector<star>& a_stars) {
  //WARNING : we assume that a_buffer is allocated with at least a_size+1

  a_stars.clear();

  bool status = true;

  char* olcn = beg_LC_NUMERIC();

  std::vector<std::string> ws;

  uint64 num = 0;
  char* pos = a_buffer;
  char* buffer = pos; //line
  uint64 jump = 0;

  bool beg_data = false;
  while(true) {
    // get a line as a C string :
    while(true) {
      if(num>=a_size) { //EOB
        *pos = 0; //this assumes that a_buffer is allocated with a_size+1
        jump = 0;
        break;
      }
      /*if(!*pos) {
        *pos = 0;
        jump = 1;
        break;
      }*/
      if( ((a_size-num)>=2) && (*pos=='\r') && (*(pos+1)=='\n') ) {
        *pos = 0;
        jump = 2;
        break;
      }
      if(*pos=='\n') {
        *pos = 0;
        jump = 1;
        break;
      }
      num++;
      pos++;
    } 
    //::printf("debug : line |%s|\n",buffer);

    if(!beg_data) {
      if(!::strncmp(buffer,"::data::",8)) beg_data = true;
    } else {
      words(buffer,"\t",false,ws);
      if(ws.size()==4) {
        std::string sra = ws[0];
        replace(sra," ",":");
        std::string sdec = ws[1];
        replace(sdec," ",":");
        const std::string& stype = ws[2];
        if(!a_type.size()||(stype==a_type)) {
          const std::string& sname = ws[3];
          //::printf("%s|%s|%s|%s|\n",sra.c_str(),sdec.c_str(),stype.c_str(),sname.c_str());
          a_stars.push_back(star(sra,sdec,stype,sname));
        }
      }
    }

    num += jump;
    pos += jump;
    buffer = pos;
    if(!jump) break;
  }

  end_LC_NUMERIC(olcn);

  return status;
}

}}

#include "wget"
#include <ostream>

namespace inlib {
namespace simbad {

INLIB_GLOBAL_STRING_VALUE(server_simbad,simbad)
INLIB_GLOBAL_STRING_VALUE(host_simbad,simbad.u-strasbg.fr)
//INLIB_GLOBAL_STRING_VALUE(host_simbad,simbad.cfa.harvard.edu)
//INLIB_GLOBAL_STRING_VALUE(epoch_J2000,J2000)
INLIB_GLOBAL_STRING(failed)

inline bool get_stars(std::ostream& a_out,const wget& a_wget,
                      double a_ra,double a_dec,double a_radius,bool a_verbose,
                      std::vector<star>& a_stars) {
  // a_ra, a_dec in dec deg.

  a_stars.clear();

  //SN2005cs
  //FK5 13:29:56 47:13:50
  //CDS/SIMBA : 13:29:53.37 +47:10:28.2
  //a_sra = "13:29:56";        //h.m.s
  //a_sdec sdec = "47:13:50";  //d.am.as
  //a_radius = 0.25; //0.25 degree = 15 arcmin

  if(a_verbose) {
    a_out << "ra " << a_ra << std::endl;
    a_out << "dec " << a_dec << std::endl;
    a_out << "radius " << a_radius << std::endl;
  }

  //std::string epoch;
  //args.find(s_arg_epoch(),epoch,s_epoch_J2000());
  //epoch = s_epoch_J2000();

  std::string server = s_server_simbad();

  ////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////
  std::string host;
  unsigned int port = 80;
  std::string request;
  //if(server==s_server_simbad()) {
    // saods9-7.3.9/src/catsimbad.tcl :

    host = s_host_simbad();

    bool vot = true;
    vot = false;

    std::string script;
    if(vot) {

      std::string psky;
      //psky = "FK4;1950;1950"; //fk4
      psky = "FK5;2000;2000"; //fk5
      //psky = "ICRS"; //icrs
      //psky = "GAL"; //galactic
      //psky = "ECL"; //ecliptic

      script += "\
output script=off\n\
output console=off\n\
votable v1 { coo(d;"+psky+"), main_id, otype(S), pmra, pmdec, plx, z_value, flux(B), flux(V), sp }\n\
votable open v1\n\
";
    } else {
      script += "format object f1 \"";
      script += "%COO(A)";    // hour:minute:second
      script += "\t%COO(D)";  // degree:arcmin:arcsec
      script += "\t%OTYPE(S)";
      script += "\t%IDLIST(1)";
      //script += "\t%PM(A)";
      //script += "\t%PM(D)";
      //script += "\t%PLX(V)";
      //script += "\t%RV(Z)";
      //script += "\t%FLUXLIST(B;F)";
      //script += "\t%FLUXLIST(V;F)";
      //script += "\t%SP(S)";
      script += "\"\n";
      //script += "format object default\n";
    }

    script += "query coo "; 
    numas(a_ra,script);
    script += " ";
    numas(a_dec,script);

    script += " radius=";
    if(!numas(a_radius,script)){
      a_out << "numas() failed." << std::endl;
      return false;
    }
    script += "d"; //d,m,s
    //script += " frame=FK4 epoch=B1950 equinox=1950"; //fk4
    script += " frame=FK5 epoch=J2000 equinox=2000"; //fk5
    //script += " frame=ICRS"; //icrs
    //script += " frame=GAL"; //galactic
    //script += " frame=ECL"; //ecliptic
    script += "\n";

    if(vot) {
      script += "votable close\n";
    }

    //std::string script_not_encoded = script;
  
    crep(script,'%');
    crep(script,'+');
    crep(script,'=');
    crep(script,';');
    crep(script,'"');
    crep(script,' '); //same as upper line.
    replace(script,"\n","%0D%0A"); //CR+LF
    crep(script,'\t');

    request = "/simbad/sim-script?";
    request += "script="+script+"&";

    //std::string request_not_encoded = "/simbad/sim-script?";
    //request_not_encoded += "script="+script_0+"&";

  //} else {
  //  a_out << "unknown server " << sout(server) << std::endl;
  //  a_out << "known servers are :" << std::endl
  //            << s_server_simbad() << std::endl;
  //  return false;
  //}

  if(a_verbose) {
    a_out << "host " << host << std::endl;
    a_out << "port " << port << std::endl;
    //a_out << "request_not_encoded :" << std::endl << request_not_encoded << std::endl;
    a_out << "request :" << std::endl << request << std::endl;
  }

  if(host.empty()||request.empty()) {
    a_out << "host or request empty." << std::endl;
    return false;
  }

  // send cmd :
  char* doc;
  uint64 ldoc;
  std::string icookie,ocookie;
  if(!a_wget.get(host,port,request,doc,ldoc,icookie,ocookie)) return false;

  if(a_verbose) {
    a_out << "get cookie :" << std::endl << ocookie << std::endl;
    //a_out << "query elapsed : " << atime::elapsed(begin) << std::endl;
    a_out << "file : length " << ldoc << std::endl;
  }
  
  // treat result :
  if( (ldoc>=s_failed().size()) && (!::strncmp(doc,s_failed().c_str(),s_failed().size())) ) {
    a_out << doc << std::endl;   
    delete [] doc;
    return false;
  }

  std::string type;
  read_catalog(ldoc,doc,type,a_stars);
  delete [] doc;

  return true;
}

}}

//inlib_build_use socket

#endif
