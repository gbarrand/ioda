// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_array_to_img
#define inlib_array_to_img

#include "lut"
#include "picmap"
#include "img"
#include "typedefs"

#include <ostream>

namespace inlib {

template <class T>
inline bool array_to_img(std::ostream& a_out,
                         unsigned int a_sx,
                         unsigned int a_sy,
                         const char* a_data,
                         bool a_yswap,
                         const lut<double>& a_lut,
                         const SOPI::cmap& a_cmap,
                         img<byte>& a_img) {
  a_img.clear();

  unsigned int bpp = 3;
  unsigned int sz = bpp*a_sx*a_sy;
  if(!sz) return false;

  unsigned char* buffer = new unsigned char[sz];
  if(!buffer) {
    a_out << "inlib::array_to_img :"
          << " can't alloc buffer of size " << sz << "."
          << std::endl;
    return false;
  }
  
  size_t vlut;

  if(a_yswap) {
    T* dpos = (T*)a_data;
    for(unsigned int iy=0;iy<a_sy;iy++) {
      unsigned char* pos = buffer+bpp*a_sx*(a_sy-1-iy);
      for(unsigned int ix=0;ix<a_sx;ix++) {
        vlut = a_lut.apply(double(*dpos));
        const SOPI::color& col = a_cmap.get_color(vlut);
        *pos = col.rchar();pos++;
        *pos = col.gchar();pos++;
        *pos = col.bchar();pos++;
        dpos++;
      }
    }
  } else {
    T* dpos = (T*)a_data;
    for(unsigned int iy=0;iy<a_sy;iy++) {
      unsigned char* pos = buffer+bpp*a_sx*iy;
      for(unsigned int ix=0;ix<a_sx;ix++) {
        vlut = a_lut.apply(double(*dpos));
        const SOPI::color& col = a_cmap.get_color(vlut);
        *pos = col.rchar();pos++;
        *pos = col.gchar();pos++;
        *pos = col.bchar();pos++;
        dpos++;
      }
    }
  }

  a_img.set(a_sx,a_sy,bpp,buffer,true);
  return true;
}

}

#endif
