// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_displace_transporter
#define inlib_displace_transporter

#include "itransporter"

#include "mat"
#include "cvec"

//#define INLIB_DISPLACE_DUMP

#ifdef INLIB_DISPLACE_DUMP
#include "matout"
#endif

#include <vector>

namespace inlib {

template <class REAL>
class displace_transporter : public itransporter<REAL> {
  typedef itransporter<REAL> parent;
protected:
  typedef typename parent::X X;
  typedef typename parent::U U;
  typedef mat<REAL,4> m4r;
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::displace_transporter");
    return s_v;
  }
public:
  //virtual bool initialize(const X& a_x,const U&) // still pure virtual.
  virtual void get_step(X& a_x,U& a_u,
                        REAL& a_s,REAL& a_step,REAL& a_mx_du2,
                        uint64& a_count) {

    cp_vec(a_x,m_x);

#ifdef INLIB_DISPLACE_DUMP
    ::printf("debug : %g %g %g %g\n",a_x[0],a_x[1],a_x[2],a_x[3]);
#endif

    zero_vec(a_u);
    a_s = 0;
    a_step = 0;
    a_mx_du2 = 0;
    a_count = 0;
  }
  virtual bool do_step() {
    m_mat.mul_array(m_x);
    return true;
  }
public:
  displace_transporter(std::ostream& a_out):parent(),m_out(a_out){}
  virtual ~displace_transporter(){}
public:
  displace_transporter(const displace_transporter& a_from):parent(a_from),m_out(a_from.m_out){}
  displace_transporter& operator=(const displace_transporter& a_from) {parent::operator=(a_from);return *this;}
protected:
  void set_matrix(const std::vector<double>& a_omegas,const std::vector<m4r>& a_reps) {
    unsigned int nexp = 40;
    m4r tmp;
    for(size_t a=0;a<a_reps.size();a++) tmp += a_omegas[a]*a_reps[a];
#ifdef INLIB_DISPLACE_DUMP
    mat_dump(m_out,"debug : omegas*reps : ",tmp);
    mat_dump(m_out,"debug : (omegas*reps)**2 : ",tmp*tmp);
#endif
    tmp.exp(nexp,m_mat);

#ifdef INLIB_DISPLACE_DUMP
    mat_dump(m_out,"debug : mat : ",m_mat);
#endif
  }
protected:
  std::ostream& m_out;
  m4r m_mat;
  X m_x;
};

}

#include "matTs"

namespace inlib {

template <class REAL>
class Lorentz_displace : public displace_transporter<REAL> {
  typedef displace_transporter<REAL> parent;
protected:
  typedef typename parent::X X;
  typedef typename parent::U U;
  typedef typename parent::m4r m4r;
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::Lorentz_displace");
    return s_v;
  }
public:
  virtual bool initialize(const X& a_x,const U&) {
    cp_vec(parent::m_x,a_x);

    std::vector<m4r> reps; //6 matrices.
    set_Es_eta(reps);

    // 012 rot xyz
    // 345 boost xyz (boost = translation with same speed).

    unsigned int nrep = 6;
    std::vector<REAL> omegas(nrep);
    for(size_t a=0;a<nrep;a++) omegas[a] = 0;

    omegas[2] = REAL(1.57/90.0); //if x0 on x, it rotates around z.

    parent::set_matrix(omegas,reps);

    return true;
  }
public:
  Lorentz_displace(std::ostream& a_out):parent(a_out){}
  virtual ~Lorentz_displace(){}
public:
  Lorentz_displace(const Lorentz_displace& a_from):parent(a_from){}
  Lorentz_displace& operator=(const Lorentz_displace& a_from) {parent::operator=(a_from);return *this;}
};

// RU2 = decomplexification of U(2). 4 parameters. reps[0] = I_tild/2.

template <class REAL>
class RU2_displace : public displace_transporter<REAL> {
  typedef displace_transporter<REAL> parent;
protected:
  typedef typename parent::X X;
  typedef typename parent::U U;
  typedef typename parent::m4r m4r;
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::RU2_displace");
    return s_v;
  }
public:
  virtual bool initialize(const X& a_x,const U&) {
    cp_vec(parent::m_x,a_x);

    std::vector<m4r> reps; //4 matrices.
    set_RU2s(reps);
    //inlib::mats_dump(std::cout,"reps :",reps);

    // reps[1] is such that spatial part is a rotation around z.
    // reps[2] is such that spatial part is a rotation around x.
    // reps[3] is such that spatial part is a rotation around y.

    size_t nrep = reps.size();
    std::vector<REAL> omegas(nrep);
    for(size_t a=0;a<nrep;a++) omegas[a] = 0;

  //omegas[3] = REAL(1.57/90.0);  //if x0 on x, spatial rotates around y.
    omegas[1] = -REAL(1.57/90.0); //if x0 on x, spatial rotates around z. Minus so that it turns as Lorentz.
    
  //omegas[2] = REAL(1.57/90.0);  //if x0 on x, it oscillates on x and in time !
  //omegas[0] = REAL(1.57/90.0);  //if x0 on x, spatial rotates around y.

    parent::set_matrix(omegas,reps);

    return true;
  }
  /*
  virtual void get_step(X& a_x,U& a_u,
                        REAL& a_s,REAL& a_step,REAL& a_mx_du2,
                        uint64& a_count) {
    parent::get_step(a_x,a_u,a_s,a_step,a_mx_du2,a_count);
    ::printf("debug : RU2 : x[0] %g\n",a_x[0]);
  }
  */
public:
  RU2_displace(std::ostream& a_out):parent(a_out){}
  virtual ~RU2_displace(){}
public:
  RU2_displace(const RU2_displace& a_from):parent(a_from){}
  RU2_displace& operator=(const RU2_displace& a_from) {parent::operator=(a_from);return *this;}
};

}

#include "mataus"

namespace inlib {

template <class REAL>
class Sp4_displace : public displace_transporter<REAL> {
  typedef displace_transporter<REAL> parent;
protected:
  typedef typename parent::X X;
  typedef typename parent::U U;
  typedef typename parent::m4r m4r;
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::Sp4_displace");
    return s_v;
  }
public:
  virtual bool initialize(const X& a_x,const U&) {
    cp_vec(parent::m_x,a_x);

    std::vector<m4r> reps; //10 matrices.
    set_tTGs(true,reps);

    // 0-3 : symplectic trans.
    // 4-6 : rot   (of a real 4D spinor (then not a 4D vector)).
    // 7-9 : boost (of a real 4D spinor (then not a 4D vector)).

    unsigned int nrep = 10;
    std::vector<REAL> omegas(nrep);
    for(size_t a=0;a<nrep;a++) omegas[a] = 0;

  //omegas[0] = REAL(0.05);      // rotation around y ! (or an other axis if not T0(a=0,b=-1).
  //omegas[1] = REAL(0.05);      // it flies away in the x-z plane.
  //omegas[2] = REAL(0.05);      // idem.
  //omegas[3] = REAL(0.05);      // it goes toward origin.

    omegas[5] = REAL(1.57/90.0); // rot y parameter. It rotates around y = ok.
  //omegas[6] = REAL(1.57/90.0); // rot z parameter. It rotates around z = ok.

  // does it make sense to accumulate the matrix on a boost parameter ?
  //omegas[7] = REAL(0.1);       // It flies away in the x-z plane.
  //omegas[8] = REAL(0.1);       // It flies away.
  //omegas[9] = REAL(0.1);       // It flies away.

    parent::set_matrix(omegas,reps);

    return true;
  }
public:
  Sp4_displace(std::ostream& a_out):parent(a_out){}
  virtual ~Sp4_displace(){}
public:
  Sp4_displace(const Sp4_displace& a_from):parent(a_from){}
  Sp4_displace& operator=(const Sp4_displace& a_from) {parent::operator=(a_from);return *this;}
};

template <class REAL>
class SO_131_displace : public itransporter<REAL> {
  typedef itransporter<REAL> parent;
protected:
  typedef typename parent::X X;
  typedef typename parent::U U;
  typedef mat<REAL,4> m4r;
  typedef REAL X5[5];
  typedef mat<REAL,5> m5r;
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SO_131_displace");
    return s_v;
  }
public:
  virtual bool initialize(const X& a_x,const U&) {
    m_x[0] = a_x[0];
    m_x[1] = a_x[1];
    m_x[2] = a_x[2];
    m_x[3] = a_x[3];
    m_x[4] = 0;

    std::vector<m5r> reps; //10 matrices.
    set_SO_131(reps);

    // 0-3 : trans.
    // 4-6 : rot.
    // 7-9 : boost.

    unsigned int nrep = 10;
    std::vector<REAL> omegas(nrep);
    for(size_t a=0;a<nrep;a++) omegas[a] = 0;

  //omegas[0] = REAL(0.05);      // rotation around y ! (or an other axis if not T0(a=0,b=-1).
  //omegas[1] = REAL(0.05);      // it flies away in the x-z plane.
  //omegas[2] = REAL(0.05);      // idem.
  //omegas[3] = REAL(0.05);      // it goes toward origin.

  //omegas[5] = REAL(1.57/90.0); // rot y parameter. It rotates around y = ok.
    omegas[6] = REAL(1.57/90.0); // rot z parameter. It rotates around z = ok.

  // does it make sense to accumulate the matrix on a boost parameter ?
  //omegas[7] = REAL(0.1);       // It flies away in the x-z plane.
  //omegas[8] = REAL(0.1);       // It flies away.
  //omegas[9] = REAL(0.1);       // It flies away.

    set_matrix(omegas,reps);

    return true;
  }
  virtual void get_step(X& a_x,U& a_u,
                        REAL& a_s,REAL& a_step,REAL& a_mx_du2,
                        uint64& a_count) {
    a_x[0] = m_x[0];
    a_x[1] = m_x[1];
    a_x[2] = m_x[2];
    a_x[3] = m_x[3];
  //not used m_x[4];

#ifdef INLIB_DISPLACE_DUMP
    ::printf("debug : %g %g %g %g\n",a_x[0],a_x[1],a_x[2],a_x[3]);
#endif

    zero_vec(a_u);
    a_s = 0;
    a_step = 0;
    a_mx_du2 = 0;
    a_count = 0;
  }
  virtual bool do_step() {
    m_mat.mul_array(m_x);
    return true;
  }
public:
  SO_131_displace(std::ostream& a_out):m_out(a_out){}
  virtual ~SO_131_displace(){}
public:
  SO_131_displace(const SO_131_displace& a_from):parent(a_from),m_out(a_from.m_out){}
  SO_131_displace& operator=(const SO_131_displace& a_from) {parent::operator=(a_from);return *this;}
protected:  
  void set_matrix(const std::vector<double>& a_omegas,const std::vector<m5r>& a_reps) {
    unsigned int nexp = 40;
    m5r tmp;
    for(size_t a=0;a<a_reps.size();a++) tmp += a_omegas[a]*a_reps[a];
#ifdef INLIB_DISPLACE_DUMP
    mat_dump(m_out,"debug : omegas*reps : ",tmp);
    mat_dump(m_out,"debug : (omegas*reps)**2 : ",tmp*tmp);
#endif
    tmp.exp(nexp,m_mat);

#ifdef INLIB_DISPLACE_DUMP
    mat_dump(m_out,"debug : mat : ",m_mat);
#endif
  }
protected:  
  std::ostream& m_out;
  m5r m_mat;
  X5 m_x;
};

}

#endif
