// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_plots
#define inlib_exa_plots

#include "../sg/f2plot"
#include "../random"

#include "../sg/view_plots"

namespace inlib {
namespace exa {

inline sg::return_action icon(sg::gui_viewer& a_gv) {
  histo::h1d hrand("The famous normal distribution",100,-5,5);

  random::gauss rg(0,1);
  for(unsigned int index=0;index<10000;index++) hrand.fill(rg.shoot(),1);

  sg::plots* plots = sg::get_sg_plots(a_gv);
  if(!plots) return sg::return_none;
  sg::plotter& plotter = plots->current_plotter();
  plotter.clear();
  sg::plottable* ptb = new sg::h1d2plot_cp(hrand);
  plotter.add_plottable(ptb);
  sg::style_from_res(a_gv.styles(),a_gv.s_default(),plotter,a_gv.verbose());
  sg::style_from_res(a_gv.styles(),"exa_icon",plotter,a_gv.verbose());

  a_gv.hide_main_menu();

  return sg::return_to_render;
}

inline sg::return_action lego(sg::gui_viewer& a_gv) {
  unsigned int entries = 10000;

  random::gauss rg(1,2);
  random::bw rbw(0,1);
  histo::h2d h("BW/Gauss",20,-5,5,20,-2,2);
  for(unsigned int count=0;count<entries;count++) h.fill(rg.shoot(),rbw.shoot(),0.8);

  sg::plots* plots = sg::get_sg_plots(a_gv);
  if(!plots) return sg::return_none;

  //plots->set_regions(1,1);

  //NOTE : in the below plot(), a copy of the histo is
  //       managed by the plotter.
 
  sg::plotter& plotter = plots->current_plotter();
  plotter.clear();
  sg::plottable* ptb = new sg::h2d2plot_cp(h);
  plotter.add_plottable(ptb);
  sg::style_from_res(a_gv.styles(),a_gv.s_default(),plotter,a_gv.verbose());
  sg::style_from_res(a_gv.styles(),"lego",plotter,a_gv.verbose()); //defined in the <app>.style file.
  //plotter.theta = 0;
  //plotter.phi = 0;

  a_gv.hide_main_menu();

  return sg::return_to_render;
}

class func2D {
public:
  virtual ~func2D(){}
public:
  virtual bool zauto() const = 0;
  virtual double xmn() const = 0;
  virtual double xmx() const = 0;
  virtual double ymn() const = 0;
  virtual double ymx() const = 0;
  virtual double zmn() const = 0;
  virtual double zmx() const = 0;
};

//return (::sin(a_x)/a_x)*(::sin(a_y)/a_y);

class surf_1_func2D : public virtual func2D {
public:
  virtual bool zauto() const {return false;}
  virtual double xmn() const {return -20;}
  virtual double xmx() const {return  20;}
  virtual double ymn() const {return -20;}
  virtual double ymx() const {return  20;}
  virtual double zmn() const {return -210;}
  virtual double zmx() const {return  739;}
public:
  surf_1_func2D(){}
  virtual ~surf_1_func2D(){}
public:
  surf_1_func2D(const surf_1_func2D& a_from):func2D(a_from){}
  surf_1_func2D& operator=(const surf_1_func2D&){return *this;}
public: //for sg::f2d2plot :
  bool in_domain(double,double) const {return true;}
  double value(double x,double y) const {
    return x*x+y*y+x*y*::sin(x+y);
  }
  unsigned int xdomain_number_of_steps() const {return 100;}
  double xdomain_min() const {return -20;}
  double xdomain_max() const {return 20;}
  unsigned int ydomain_number_of_steps() const {return 100;}
  double ydomain_min() const {return -20;}
  double ydomain_max() const {return 20;}
};

class surf_2_func2D : public virtual func2D {
public:
  virtual bool zauto() const {return false;}
  virtual double xmn() const {return -10;}
  virtual double xmx() const {return  10;}
  virtual double ymn() const {return -10;}
  virtual double ymx() const {return  10;}
  virtual double zmn() const {return -2.5f;}
  virtual double zmx() const {return  36.5f;}
public:
  surf_2_func2D(){}
  virtual ~surf_2_func2D(){}
public:
  surf_2_func2D(const surf_2_func2D& a_from):func2D(a_from){}
  surf_2_func2D& operator=(const surf_2_func2D&){return *this;}
public:
  bool in_domain(double,double) const {return true;}
  double value(double x,double y) const {
    return ::sqrt(x*x+y*y)+3*::cos(::sqrt(x*x+y*y))+5;
  }
  unsigned int xdomain_number_of_steps() const {return 100;}
  double xdomain_min() const {return -10;}
  double xdomain_max() const {return 10;}
  unsigned int ydomain_number_of_steps() const {return 100;}
  double ydomain_min() const {return -10;}
  double ydomain_max() const {return 10;}
};

class surf_3_func2D : public virtual func2D {
public:
  virtual bool zauto() const {return false;}
  virtual double xmn() const {return -10;}
  virtual double xmx() const {return  10;}
  virtual double ymn() const {return -10;}
  virtual double ymx() const {return  10;}
  virtual double zmn() const {return -0.5f;}
//virtual double zmx() const {return  1.5f;}
  virtual double zmx() const {return  2.5f;}
public:
  surf_3_func2D(){}
  virtual ~surf_3_func2D(){}
public:
  surf_3_func2D(const surf_3_func2D& a_from):func2D(a_from){}
  surf_3_func2D& operator=(const surf_3_func2D&){return *this;}
public:
  bool in_domain(double,double) const {return true;}
  double value(double x,double y) const {
    return ::exp(-::pow(::pow(x-4,2)+::pow(y-4,2),2)/1000) +
           ::exp(-::pow(::pow(x+4,2)+::pow(y+4,2),2)/1000) +
           0.1*::exp(-::pow(::pow(x+4,2)+::pow(y+4,2),2))+
           0.1*::exp(-::pow(::pow(x-4,2)+::pow(y-4,2),2));
  }
  unsigned int xdomain_number_of_steps() const {return 100;}
  double xdomain_min() const {return -10;}
  double xdomain_max() const {return 10;}
  unsigned int ydomain_number_of_steps() const {return 100;}
  double ydomain_min() const {return -10;}
  double ydomain_max() const {return 10;}
};

class surf_4_func2D : public virtual func2D {
public:
  virtual bool zauto() const {return false;}
  virtual double xmn() const {return -10;}
  virtual double xmx() const {return  10;}
  virtual double ymn() const {return -10;}
  virtual double ymx() const {return  10;}
  virtual double zmn() const {return  85;}
  virtual double zmx() const {return  101;}
public:
  surf_4_func2D(){}
  virtual ~surf_4_func2D(){}
public:
  surf_4_func2D(const surf_4_func2D& a_from):func2D(a_from){}
  surf_4_func2D& operator=(const surf_4_func2D&){return *this;}
public:
  bool in_domain(double x,double y) const {
    double epsil = 1e-6; //cooking to avoid origin.
    x += epsil;
    y += epsil;
    double d = ::sqrt(x*x+y*y);
    return (d==0?false:true);
  }
  double value(double x,double y) const {
    double epsil = 1e-6; //cooking to avoid origin.
    x += epsil;
    y += epsil;
    return 100-3/::sqrt(x*x+y*y)+::sin(::sqrt(x*x+y*y));
  }
  unsigned int xdomain_number_of_steps() const {return 100;}
  double xdomain_min() const {return -10;}
  double xdomain_max() const {return 10;}
  unsigned int ydomain_number_of_steps() const {return 100;}
  double ydomain_min() const {return -10;}
  double ydomain_max() const {return 10;}
};


INLIB_GLOBAL_STRING(surf_1)
INLIB_GLOBAL_STRING(surf_2)
INLIB_GLOBAL_STRING(surf_3)
INLIB_GLOBAL_STRING(surf_4)

inline sg::return_action surf(sg::gui_viewer& a_gv,const args& a_args) {
    sg::plots* plots = sg::get_sg_plots(a_gv);
    if(!plots) return sg::return_none;

    //plots->set_regions(1,1);

    sg::plotter& plotter = plots->current_plotter();
    plotter.clear();

    func2D* _func = 0;
    if(a_args.is_arg(s_surf_1())) {
      surf_1_func2D* func = new surf_1_func2D;
      sg::plottable* ptb = new sg::f2d2plot_cp<surf_1_func2D>(*func);
      plotter.add_plottable(ptb);
      _func = func;
      plotter.func_style(0).painting = sg::painting_grey_scale_inverse;

    } else if(a_args.is_arg(s_surf_2())) {
      surf_2_func2D* func = new surf_2_func2D;
      sg::plottable* ptb = new sg::f2d2plot_cp<surf_2_func2D>(*func);
      plotter.add_plottable(ptb);
      _func = func;
      plotter.func_style(0).painting = sg::painting_grey_scale;

    } else if(a_args.is_arg(s_surf_3())) {
      surf_3_func2D* func = new surf_3_func2D;
      sg::plottable* ptb = new sg::f2d2plot_cp<surf_3_func2D>(*func);
      plotter.add_plottable(ptb);
      _func = func;
      plotter.func_style(0).painting = sg::painting_violet_to_red;

    } else if(a_args.is_arg(s_surf_4())) {
      surf_4_func2D* func = new surf_4_func2D;
      sg::plottable* ptb = new sg::f2d2plot_cp<surf_4_func2D>(*func);
      plotter.add_plottable(ptb);
      _func = func;
      plotter.func_style(0).painting = sg::painting_violet_to_red;

    }

    plotter.x_axis_automated = false;
    plotter.x_axis_min = float(_func->xmn());
    plotter.x_axis_max = float(_func->xmx());

    plotter.y_axis_automated = false;
    plotter.y_axis_min = float(_func->ymn());
    plotter.y_axis_max = float(_func->ymx());

    plotter.z_axis_automated = _func->zauto();
    plotter.z_axis_min = float(_func->zmn());
    plotter.z_axis_max = float(_func->zmx());

  //plotter.func_style(0).painting = sg::painting_uniform;
  //plotter.func_style(0).color = colorf_grey();

  //plotter.func_style(0).painting = sg::painting_by_value;
  //plotter.func_style(0).color_mapping =
  //  "black 0 cyan 5 green 10 orange 15 red";

    plotter.func2D_borders_visible = false;

    plotter.shape = sg::plotter::xyz;
    plotter.shape_automated = false;

    a_gv.set_scene_light_on(true);

    a_gv.hide_main_menu();

    delete _func;

    return sg::return_to_render;
}

inline sg::return_action plots(sg::gui_viewer& a_gv,const sg::pos_data& a_data) {
  sg::list* list = new sg::list(a_gv.ttf());
  a_gv.set_style(*list);

 {args args;
  args.add(s_surf_1());
  sg::add_item(a_gv,*list,"surf 1",surf,args);}

 {args args;
  args.add(s_surf_2());
  sg::add_item(a_gv,*list,"surf 2",surf,args);}

 {args args;
  args.add(s_surf_3());
  sg::add_item(a_gv,*list,"surf 3",surf,args);}

 {args args;
  args.add(s_surf_4());
  sg::add_item(a_gv,*list,"surf 4",surf,args);}
  
  a_gv.show_widget(a_data,list);

  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif
