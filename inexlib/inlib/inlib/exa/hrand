// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_hrand
#define inlib_exa_hrand

#include "../random"

#include "../sg/view_plots"

namespace inlib {
namespace exa {

inline sg::return_action hrand(sg::gui_viewer& a_gv) {

  histo::h1d hrg("The famous normal distribution",100,-5,5);
 {random::gauss rg(0,1);
  for(unsigned int index=0;index<10000;index++) hrg.fill(rg.shoot(),1);}

  histo::h2d h2("Gauss_BW",100,-5,5,100,-2,2);
 {random::gauss rg(1,2);
  random::bw rbw(0,1);
  for(unsigned int count=0;count<10000;count++) {
    h2.fill(rg.shoot(),rbw.shoot());
  }}

  sg::plots* plots = get_sg_plots(a_gv);
  if(!plots) return sg::return_none;

  if(plots->number()<2) plots->set_regions(1,2);

  //NOTE : in the below plot(), a copy of the histo is
  //       managed by the plot.
 
 {sg::plotter& plotter = plots->current_plotter();
  plotter.clear();
  sg::plottable* ptb = new sg::h1d2plot_cp(hrg);
  ptb->set_name("hrg");
  plotter.add_plottable(ptb);
  sg::style_from_res(a_gv.styles(),a_gv.s_default(),plotter,a_gv.verbose());
  sg::style_from_res(a_gv.styles(),"exa_hrand",plotter,a_gv.verbose());
  plotter.bins_style(0).color = colorf_grey();
  plotter.bins_style(0).modeling = sg::modeling_boxes();}

  plots->next();
 {sg::plotter& plotter = plots->current_plotter();
  plotter.clear();
  sg::plottable* ptb = new sg::h2d2plot_cp(h2);
  ptb->set_name("h2");
  plotter.add_plottable(ptb);
  sg::style_from_res(a_gv.styles(),a_gv.s_default(),plotter,a_gv.verbose());
  sg::style_from_res(a_gv.styles(),"exa_hrand",plotter,a_gv.verbose());}

  a_gv.hide_main_menu();

  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif
