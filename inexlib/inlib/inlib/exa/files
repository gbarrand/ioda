// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_files
#define inlib_exa_files

#include "../sg/gui_viewer"
#include "../sg/tex_rect_anim"

namespace inlib {
namespace exa {

inline sg::return_action action_open(sg::gui_viewer& a_gv,sg::file_chooser& a_fch,const std::string& a_format) {
  a_gv.hide_main_menu(); //before open() in case open wants main menu.
  bool done;
  a_gv.opener().open(a_fch.value.value(),a_format,args(),done);
  return sg::return_to_render;
}

inline void _exa_file(sg::gui_viewer& a_gv,const std::string& a_ext,const std::string& a_format) {
  sg::file_chooser* fch = new sg::file_chooser(a_gv.ttf());
  a_gv.set_style(*fch);
  fch->exts.add(a_ext);
  fch->dirs.add(a_gv.res_dir());
  sg::add_callback(a_gv,*fch,action_open,a_format);
  fch->initialize(a_gv.out()); //must be after add_callback()
  a_gv.push_list(fch);
}

inline sg::return_action povama(sg::gui_viewer& a_gv) {
  //_exa_file(a_gv,file::s_ext_fog(),file::s_format_fog());
  bool done;
  args args;
  args.add(sg::s_camera_height(),"1500");
 {std::string path = a_gv.res_dir()+sep()+"EVE1.fog";
  a_gv.opener().open(path,file::s_format_fog(),args,done);}
 {std::string path = a_gv.res_dir()+sep()+"BMS.fog";
  a_gv.opener().open(path,file::s_format_fog(),args,done);}
 {std::string path = a_gv.res_dir()+sep()+"T4E.fog";
  a_gv.opener().open(path,file::s_format_fog(),args,done);}
  return sg::return_to_render;
}

inline sg::return_action ntuple(sg::gui_viewer& a_gv) {
  //_exa_file(a_gv,file::s_ext_root(),file::s_format_root());
  std::string path = a_gv.res_dir()+sep()+"demo.root";
  bool done;
  a_gv.opener().open(path,file::s_format_root(),args(),done);
  return sg::return_to_render;
}

inline sg::return_action slides(sg::gui_viewer& a_gv) {
  //_exa_file(a_gv,file::s_ext_slides(),file::s_format_slides());
  std::string path = a_gv.res_dir()+sep()+"softinex.slides";
  bool done;
  a_gv.opener().open(path,file::s_format_slides(),args(),done);
  return sg::return_to_render;
}

inline sg::return_action dcm(sg::gui_viewer& a_gv) {
  //_exa_file(a_gv,file::s_ext_dcm(),file::s_format_dcm());
  std::string path = a_gv.res_dir()+sep()+"color.dcm";
  bool done;
  a_gv.opener().open(path,file::s_format_dcm(),args(),done);
  return sg::return_to_render;
}

inline sg::return_action zvid(sg::gui_viewer& a_gv) {
  //_exa_file(a_gv,file::s_ext_zvid(),file::s_format_zvid());
  std::string path = a_gv.res_dir()+sep()+"oleg_lal.zvid";
  args args;
  args.add(sg::s_class(),sg::tex_rect_anim::s_class());
  args.add(sg::s_time_interval(),"40");
  args.add(sg::s_repeat(),"true");
  bool done;  
  a_gv.opener().open(path,file::s_format_zvid(),args,done);
  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif
