// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_spinors
#define inlib_exa_spinors

#include "../sg/sf_mat4f"
#include "../sg/sf_vec3f"

#include "../sg/view_evd"
#include "../sg/tube"

#include "../sg/spinor_pauli_anim"

namespace inlib {
namespace exa {

inline sg::return_action action_spinor_pauli_vis(sg::gui_viewer& a_gv,sg::entries& a_widget) {
  float axis_x;
  if(!a_gv.tow<float>(a_widget.values[0],axis_x)) return sg::return_to_render;
  float axis_y;
  if(!a_gv.tow<float>(a_widget.values[1],axis_y)) return sg::return_to_render;
  float axis_z;
  if(!a_gv.tow<float>(a_widget.values[2],axis_z)) return sg::return_to_render;

  float phi_x;
  if(!a_gv.tow<float>(a_widget.values[3],phi_x)) return sg::return_to_render;
  float phi_y;
  if(!a_gv.tow<float>(a_widget.values[4],phi_y)) return sg::return_to_render;
  float xi_x;
  if(!a_gv.tow<float>(a_widget.values[5],xi_x)) return sg::return_to_render;
  float xi_y;
  if(!a_gv.tow<float>(a_widget.values[6],xi_y)) return sg::return_to_render;
  
  sg::view_evd* _evd = cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_3D_camera(2));
  }

  sg::separator* all_sep = new sg::separator;
  _evd->static_sg().add(all_sep);

  all_sep->add(new sg::matrix); //for manip.

  //////////////////////////////////////////////////////
  /// axis : ///////////////////////////////////////////
  //////////////////////////////////////////////////////
//float theta = 0;float phi = 0;                   //z
//float theta = fhalf_pi();float phi = 0;          //x
//float theta = fhalf_pi();float phi = fhalf_pi(); //y
//float theta = fhalf_pi()*0.5f;float phi = fhalf_pi()*0.5f;
//vec3f rot_axis(::sinf(theta)*::cosf(phi),::sinf(theta)*::sinf(phi),::cosf(theta));

  vec3f rot_axis(axis_x,axis_y,axis_z);
  
  sg::infos* _infos = 0;
  
 {sg::separator* axis_sep = new sg::separator;
  all_sep->add(axis_sep);
  
  sg::matrix* axis_mtx = new sg::matrix;
  axis_mtx->set_rotate(vec3f(0,0,1),rot_axis);
  axis_sep->add(axis_mtx);
  
  sg::rgba* color = new sg::rgba;
  color->color = colorf_grey();
  axis_sep->add(color);

  _infos = new sg::infos;
  axis_sep->add(_infos);
  
  sg::arrow* _arrow = new sg::arrow;
  axis_sep->add(_arrow);}

  //////////////////////////////////////////////////////
  /// spinor and vector : //////////////////////////////
  //////////////////////////////////////////////////////
 {sg::separator* spinor_sep = new sg::separator;
  all_sep->add(spinor_sep);

  spinor_sep->add(new sg::matrix); //for manip.

  sg::spinor_pauli_anim* anim = new sg::spinor_pauli_anim(atime::now());
  anim->axis = rot_axis;
  anim->phi_x = phi_x;
  anim->phi_y = phi_y;
  anim->xi_x = xi_x;
  anim->xi_y = xi_y;
  anim->omega = 0.5f;
  spinor_sep->add(anim);

  std::string _p2s;
  p2s(anim,_p2s);
  _infos->add_title(_p2s);}

  //////////////////////////////////////////////////////
  /// plane : //////////////////////////////////////////
  //////////////////////////////////////////////////////
  // transparent primitives must come after the opaque ones.

 {sg::separator* plane_sep = new sg::separator;
  all_sep->add(plane_sep);
  
  sg::matrix* mtx = new sg::matrix;
  mtx->set_translate(0,0,-0.01f-0.1f); //half depth tube + radius of cone hat.
  plane_sep->add(mtx);
  
  sg::rgba* color = new sg::rgba;
  color->color = colorf_grey();
  color->color.value().set_a(0.7f);
  plane_sep->add(color);
  
  sg::tube* node = new sg::tube;
  node->rmin = 0.1f;
  node->rmax = 1;
  node->height = 0.02f;
  plane_sep->add(node);}
  //////////////////////////////////////////////////////
  //////////////////////////////////////////////////////
  //////////////////////////////////////////////////////

  a_gv.set_scene_light_on(true);
  a_gv.set_param_viewing(false);

  a_gv.show_console("red s/phi, blue s/xi, green vector");
  //a_gv.set_console_size(0.4f,0.05f,1);
  
  a_gv.enable_anim();
  a_gv.hide_main_menu();

  return sg::return_to_render;
}

inline sg::return_action action_spinor_pauli_set(sg::gui_viewer& a_gv) {
  sg::entries* _entries = new sg::entries(a_gv.ttf());
  a_gv.set_style(*_entries);
  _entries->add_double("axis x",0);
  _entries->add_double("axis y",0);
  _entries->add_double("axis z",1);
  _entries->add_double("phi_x (r)",1);
  _entries->add_double("phi_y (r)",0);
  _entries->add_double("xi_x (b)",0);
  _entries->add_double("xi_y (b)",1);
  sg::add_callback(a_gv,*_entries,action_spinor_pauli_vis);
  a_gv.push_list(_entries);
  return sg::return_to_render;
}

}}

#include "../sg/spinor_dirac_anim"

namespace inlib {
namespace exa {

inline sg::return_action action_spinor_dirac_vis(sg::gui_viewer& a_gv,sg::entries& a_widget) {
  float axis_x;
  if(!a_gv.tow<float>(a_widget.values[0],axis_x)) return sg::return_to_render;
  float axis_y;
  if(!a_gv.tow<float>(a_widget.values[1],axis_y)) return sg::return_to_render;
  float axis_z;
  if(!a_gv.tow<float>(a_widget.values[2],axis_z)) return sg::return_to_render;
  
  float phi_u_x;
  if(!a_gv.tow<float>(a_widget.values[3],phi_u_x)) return sg::return_to_render;
  float phi_u_y;
  if(!a_gv.tow<float>(a_widget.values[4],phi_u_y)) return sg::return_to_render;
  float xi_u_x;
  if(!a_gv.tow<float>(a_widget.values[5],xi_u_x)) return sg::return_to_render;
  float xi_u_y;
  if(!a_gv.tow<float>(a_widget.values[6],xi_u_y)) return sg::return_to_render;
  
  float phi_d_x;
  if(!a_gv.tow<float>(a_widget.values[7],phi_d_x)) return sg::return_to_render;
  float phi_d_y;
  if(!a_gv.tow<float>(a_widget.values[8],phi_d_y)) return sg::return_to_render;
  float xi_d_x;
  if(!a_gv.tow<float>(a_widget.values[9],xi_d_x)) return sg::return_to_render;
  float xi_d_y;
  if(!a_gv.tow<float>(a_widget.values[10],xi_d_y)) return sg::return_to_render;
  

  sg::view_evd* _evd = cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_3D_camera(2));
  }    

  sg::separator* all_sep = new sg::separator;
  _evd->static_sg().add(all_sep);

  all_sep->add(new sg::matrix); //for manip.

  //////////////////////////////////////////////////////
  /// axis : ///////////////////////////////////////////
  //////////////////////////////////////////////////////
  vec3f rot_axis(axis_x,axis_y,axis_z);
  
  sg::infos* _infos = 0;

 {sg::separator* axis_sep = new sg::separator;
  all_sep->add(axis_sep);
  
  sg::matrix* axis_mtx = new sg::matrix;
  axis_mtx->set_rotate(vec3f(0,0,1),rot_axis);
  axis_sep->add(axis_mtx);
  
  sg::rgba* color = new sg::rgba;
  color->color = colorf_grey();
  axis_sep->add(color);
  
  _infos = new sg::infos;
  axis_sep->add(_infos);
  
  sg::arrow* _arrow = new sg::arrow;
  axis_sep->add(_arrow);}

  //////////////////////////////////////////////////////
  /// spinor and vector : //////////////////////////////
  //////////////////////////////////////////////////////
 {sg::separator* spinor_sep = new sg::separator;
  all_sep->add(spinor_sep);

  spinor_sep->add(new sg::matrix); //for manip.

  sg::spinor_dirac_anim* anim = new sg::spinor_dirac_anim(atime::now());

  anim->axis = rot_axis;
  
  anim->phi_u_x = phi_u_x;
  anim->phi_u_y = phi_u_y;
  anim->xi_u_x = xi_u_x;
  anim->xi_u_y = xi_u_y;

  anim->phi_d_x = phi_d_x;
  anim->phi_d_y = phi_d_y;
  anim->xi_d_x = xi_d_x;
  anim->xi_d_y = xi_d_y;

  anim->omega = 0.5f;
  spinor_sep->add(anim);

  std::string _p2s;
  p2s(anim,_p2s);
  _infos->add_title(_p2s);}

  //////////////////////////////////////////////////////
  /// plane : //////////////////////////////////////////
  //////////////////////////////////////////////////////
  // transparent primitives must come after the opaque ones.

 {sg::separator* plane_sep = new sg::separator;
  all_sep->add(plane_sep);
  
  sg::matrix* mtx = new sg::matrix;
  mtx->set_translate(0,0,-0.01f-0.1f); //half depth tube + radius of cone hat.
  plane_sep->add(mtx);
  
  sg::rgba* color = new sg::rgba;
  color->color = colorf_grey();
  color->color.value().set_a(0.7f);
  plane_sep->add(color);
  
  sg::tube* node = new sg::tube;
  node->rmin = 0.1f;
  node->rmax = 1;
  node->height = 0.02f;
  plane_sep->add(node);}
  
  //////////////////////////////////////////////////////
  //////////////////////////////////////////////////////
  //////////////////////////////////////////////////////

  a_gv.set_scene_light_on(true);
  a_gv.set_param_viewing(false);
  
  a_gv.show_console("red s/phi_u, blue s/xi_u, magenta s/phi_d, cyan s/xi_d, green vector");
  a_gv.set_console_size(0.7f,0.05f,1);

  a_gv.enable_anim();
  a_gv.hide_main_menu();

  return sg::return_to_render;
}

inline sg::return_action action_spinor_dirac_set(sg::gui_viewer& a_gv) {
  sg::entries* _entries = new sg::entries(a_gv.ttf());
  a_gv.set_style(*_entries);
  _entries->add_double("axis x",0);
  _entries->add_double("axis y",0);
  _entries->add_double("axis z",1);
  
  _entries->add_double("phi_u_x (r)",1);
  _entries->add_double("phi_u_y (r)",0);
  _entries->add_double("xi_u_x (b)",0);
  _entries->add_double("xi_u_y (b)",1);
  _entries->add_double("phi_d_x (m)",-1);
  _entries->add_double("phi_d_y (m)",0);
  _entries->add_double("xi_d_x (c)",0);
  _entries->add_double("xi_d_y (c)",-1);
  sg::add_callback(a_gv,*_entries,action_spinor_dirac_vis);
  a_gv.push_list(_entries);
  return sg::return_to_render;
}

}}

namespace inlib {
namespace exa {

inline sg::return_action action_set_axis(sg::gui_viewer& a_gv) {
  sg::view_evd* _evd = sg::cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

 {sg::search_action action(a_gv.out());
  action.set_class(sg::spinor_pauli_anim::s_class());
  _evd->static_sg().search(action);
  const std::vector<void*>& objs = action.objs();
  inlib_vforcit(void*,objs,it) {
    sg::spinor_pauli_anim* anim = (sg::spinor_pauli_anim*)(*it);
    std::string _p2s;
    p2s(anim,_p2s);
    
    sg::search_action sa(a_gv.out());
    const sg::paths_t& paths = sg::find_paths<sg::infos>(sa,_evd->static_sg());
    inlib_vforcit(sg::path_t,paths,it) {
      sg::infos* _infos = sg::tail<sg::infos>(*it);
      if(!_infos) continue;
      std::string title;
      _infos->find_title(title);
      if(title!=_p2s) continue;
      sg::group* grp;
      sg::matrix* mtx;
      int gidx; //index in path of the found grp.
      if(!sg::rfind<sg::matrix,sg::group>(*it,*_infos,grp,mtx,gidx)) {
        a_gv.warn("no node matrix found");
      } else {
        vec3f z(0,0,1);
        mtx->mtx.value().mul_dir_3(z);
        anim->axis.value(z);
        anim->reset_anim();	
      }
      break;
    }
    break;
  }}
  
 {sg::search_action action(a_gv.out());
  action.set_class(sg::spinor_dirac_anim::s_class());
  _evd->static_sg().search(action);
  const std::vector<void*>& objs = action.objs();
  inlib_vforcit(void*,objs,it) {
    sg::spinor_dirac_anim* anim = (sg::spinor_dirac_anim*)(*it);
    std::string _p2s;
    p2s(anim,_p2s);
    
    sg::search_action sa(a_gv.out());
    const sg::paths_t& paths = sg::find_paths<sg::infos>(sa,_evd->static_sg());
    inlib_vforcit(sg::path_t,paths,it) {
      sg::infos* _infos = sg::tail<sg::infos>(*it);
      if(!_infos) continue;
      std::string title;
      _infos->find_title(title);
      if(title!=_p2s) continue;
      sg::group* grp;
      sg::matrix* mtx;
      int gidx; //index in path of the found grp.
      if(!sg::rfind<sg::matrix,sg::group>(*it,*_infos,grp,mtx,gidx)) {
        a_gv.warn("no node matrix found");
      } else {
        vec3f z(0,0,1);
        mtx->mtx.value().mul_dir_3(z);
        anim->axis.value(z);
        anim->reset_anim();	
      }
      break;
    }
    break;
  }}
  
  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif

