// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_maxwell
#define inlib_exa_maxwell

//for the setup see also inlib/apps/maxwell.cpp.

#include "../sg/transporter_anim"
#include "../sg/view_evd"

#include "../maxwell_transporter"

#include "../real"

namespace inlib {
namespace exa {

inline sg::return_action action_maxwell(sg::gui_viewer& a_gv) {
  sg::view_evd* _evd = cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

  // simulation geometry is in mm.

  //expected radius of 2.224 m.

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_2D_camera(2));
    a_gv.set_plane_viewer(true);
  }

  float radius = 2224; //mm
  float sz_cube = radius*0.04f;

  sg::separator& dsep = _evd->detector_sg();

 {sg::separator* _sep = new sg::separator;
  dsep.add(_sep);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_green();
  _sep->add(mat);

  sg::cube* node = new sg::cube();   
  node->width = 0.005f;
  node->height = 2.0f;
  node->depth = 0.005f;
  _sep->add(node);}

  sg::separator* sep = new sg::separator;
  dsep.add(sep);

  float scale = 1.0f/radius;

  vec4f x0(0,radius,0,0); //mm

  sg::matrix* tsf = new sg::matrix;
  tsf->set_scale(scale,scale,scale);
  sep->add(tsf);

  sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_red();
  _sep->add(mat);

  // we assume camera params are in meter.

  atime _now(0,0);
  if(!a_gv.get_time_now(_now)) {}

  typedef inlib::real real;

  bool verbose = false;
  //verbose = true;

  real B_tesla = 1.5*edep::tesla;

  real energy = 1*edep::GeV;
  real gamma = energy/edep::electron_mass_c2;
  real beta = real_sqrt(real_fabs(real(1)-real(1)/(gamma*gamma))); // beta = v/c.

  //::printf("beta %.10Lg\n",beta); //0.9999998694

  vec4f u0;
  u0.set_value(1,0,float(beta),0);
  u0 *= float(gamma);

  real electron_mass = edep::electron_mass_c2/edep::c_squared;
  real B = edep::electron_charge/(electron_mass*edep::c_light)*B_tesla;
  // [B] = 1/L, [B] = [d(g)/d(x)]
  // B = -0.880019 1/mm = 1/(-1.13634 mm)

  vec3<real> Eg(0,0,0);
  vec3<real> Bg(0,0,B); //[B] = 1/mm
  maxwell_transporter<real>* tsp = new maxwell_transporter<real>(a_gv.out(),
                                                                 real_sqrt_const,real_fabs_const,
                                                                 Eg,Bg,verbose);
  real u2_tolerance = 10000;
  real step_factor = 1e-4;
  tsp->m_u2_tolerance = u2_tolerance;
  tsp->m_step_factor = step_factor;

  sg::transporter_anim<real>* m = new sg::transporter_anim<real>(a_gv,_now,*tsp);
  m->x0 = x0;
  m->u0 = u0;
  m->m_steps = 3*100000; //steps per action().
  _sep->add(m);

  sg::cube* node = new sg::cube();   
  node->width = sz_cube;
  node->height = sz_cube;
  node->depth = sz_cube;
  _sep->add(node);

  _sep->add(new sg::holder< maxwell_transporter<real> >(tsp));

  a_gv.enable_anim();
  a_gv.hide_main_menu();

  return sg::return_to_render;
}

}}

#endif
