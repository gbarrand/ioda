// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_fit
#define inlib_exa_fit

#include "../random"
#include "../histo/h1d"
#include "../f2cmn"

#include "../sg/f2plot"
#include "../sg/fit2plot"
#include "../sg/plots"

#include "../sg/view_plots"

namespace inlib {
namespace exa {

class fit_g_bw : public virtual fit_func {
public:  //inlib::fit_func :
  virtual double value(const fit_func::point& a_pt) const {
    return value(a_pt[0]); //one dimension.
  }
  virtual bool set(const double a_params[])  {
    m_g.set(a_params[0],a_params[1],a_params[2]);
    m_bw.set(a_params[3],a_params[4],a_params[5]);
    // to handle animation :
    if(m_refresh_rate) {
      unsigned int i = m_refresh_count/m_refresh_rate;
      if(i*m_refresh_rate==m_refresh_count) {
        m_plotter.touch();
        m_gv.win_render();
        if(m_gv.stop_works()) return false; //Android logic.
      }
      m_refresh_count++;
    }
    return true;
  }
public:
  fit_g_bw(sg::ui& a_gv,sg::plotter& a_plotter)
  :m_gv(a_gv)
  ,m_plotter(a_plotter)
  ,m_refresh_rate(1) //full speed.
  ,m_refresh_count(0)
  {
/*
    m_params.resize(6);
    m_params[0].m_name = "GS_H";
    m_params[0].m_value = m_g.scale();
    m_params[1].m_name = "GS_M";
    m_params[1].m_value = m_g.mean();
    m_params[2].m_name = "GS_W";
    m_params[2].m_value = m_g.sigma();
    m_params[3].m_name = "BW_H";
    m_params[3].m_value = m_bw.height();
    m_params[4].m_name = "BW_C";
    m_params[4].m_value = m_bw.center();
    m_params[5].m_name = "BW_W";
    m_params[5].m_value = m_bw.width();
*/
  }
  virtual ~fit_g_bw(){}
protected:
  fit_g_bw(const fit_g_bw& a_from)
  :fit_func(a_from)
  ,m_g(a_from.m_g)
  ,m_bw(a_from.m_bw)
  ,m_gv(a_from.m_gv)
  ,m_plotter(a_from.m_plotter)
  ,m_refresh_rate(a_from.m_refresh_rate)
  ,m_refresh_count(0)
  {}
  fit_g_bw& operator=(const fit_g_bw& a_from){
    m_g = a_from.m_g;
    m_bw = a_from.m_bw;
    m_refresh_rate = a_from.m_refresh_rate;
    m_refresh_count = 0;
    return *this;
  }
public:
  //sg::f1d2plot :
  bool in_domain(double) const {return true;}
  double value(double a_x) const {
    return m_g.value(a_x)+m_bw.value(a_x);
  }
  unsigned int xdomain_number_of_steps() const {return 100;}
  double xdomain_min() const {return -1;}
  double xdomain_max() const {return 1;}
  unsigned int ydomain_number_of_steps() const {return 100;}
  double ydomain_min() const {return -1;}
  double ydomain_max() const {return 1;}
public:
  func::gaussian m_g;
  func::bw m_bw;
  // for animation :
  sg::ui& m_gv;  
  sg::plotter& m_plotter;  
  unsigned int m_refresh_rate;
  unsigned int m_refresh_count;
};

class fit_work_cbk : public sg::bcbk {
  INLIB_CBK(fit_work_cbk,inlib::exa::fit_work_cbk,sg::bcbk)
public:
  virtual sg::return_action action() {
      std::vector<double> output;
      if(!f2cmn::fit_1D<histo::h1d> 
        (m_gv.out(),m_histo,m_params,m_ff,output)){
        m_gv.map_warn_fit_failed();
      } else {

          if(output.size()!=(2+m_params.size()*4) ){
            m_gv.out() << "fit_work_cbk::action :" 
                       << " bad number of output parameters."
                       << std::endl;
          } else {
            std::vector<std::string> names;
            inlib_vforcit(f2cmn::parameter,m_params,it) 
              names.push_back((*it).m_name);
            m_plotter.add_plottable(new sg::fit2plot(names,output));
            m_plotter.touch(); //touch something in sg::plotter.
          }
          if(!m_refresh_rate) m_plotter.touch();

      }
      m_gv.invalidate_works(fit_work_cbk::s_class());
      return sg::return_to_render;     
  }
public:
  fit_work_cbk(sg::gui_viewer& a_gv,
               sg::plotter& a_plotter,
               const std::vector< f2cmn::parameter >& a_params,
               histo::h1d& a_histo,
               fit_func& a_ff,
               unsigned int a_refresh_rate)
  :parent()
  ,m_gv(a_gv)
  ,m_plotter(a_plotter)
  ,m_params(a_params)
  ,m_histo(a_histo)
  ,m_ff(a_ff)
  ,m_refresh_rate(a_refresh_rate)
  {}
  virtual ~fit_work_cbk(){}
public:
  fit_work_cbk(const fit_work_cbk& a_from)
  :parent(a_from)
  ,m_gv(a_from.m_gv)
  ,m_plotter(a_from.m_plotter)
  ,m_params(a_from.m_params)
  ,m_histo(a_from.m_histo)
  ,m_ff(a_from.m_ff)
  ,m_refresh_rate(a_from.m_refresh_rate)
  {}
  fit_work_cbk& operator=(const fit_work_cbk& a_from){
    parent::operator=(a_from);
    m_params = a_from.m_params;
    m_refresh_rate = a_from.m_refresh_rate;
    return *this;
  }
protected:
  sg::gui_viewer& m_gv;
  sg::plotter& m_plotter;
  std::vector< f2cmn::parameter > m_params;
  histo::h1d& m_histo;
  fit_func& m_ff;
  unsigned int m_refresh_rate;
};

inline sg::return_action fit(sg::gui_viewer& a_gv) {
  //NOTE : we pass a ref of the histo to the plotter and to fit_work_cbk.
  //       Then it must be alive as long as the plotter plots it.
  //       We give ownership of the histo to the plotter with add_todel().

  //NOTE : we pass a ref of ff to the plotter through sg::f1d2plot.
  //       Then ff must be alive as long as the plotter plots it.
  //       We give ownership of ff to the plotter with add_todel().

  // the fit converges with around 350 steps.

  histo::h1d* h_rg_plus_rbw = new histo::h1d("G+BW distribution.",100,-5,5);

  unsigned int num = 15000;

 {random::gauss rg(0,1);
  for(unsigned int index=0;index<num;index++) 
    h_rg_plus_rbw->fill(rg.shoot(),1);}

 {random::bw rbw(3,0.5);
  for(unsigned int index=0;index<num;index++) 
    h_rg_plus_rbw->fill(rbw.shoot(),1);}

  std::vector< f2cmn::parameter > params(6);
  params[0].m_name = "H";
  params[0].m_start = 300;
  params[0].m_step = 0.01;

  params[1].m_name = "M";
  params[1].m_start = 0;
  params[1].m_step = 0.01;

  params[2].m_name = "W";
  params[2].m_start = 4;
  params[2].m_step = 0.01;

  params[3].m_name = "A";
  params[3].m_start = 500;
  params[3].m_step = 0.01;

  params[4].m_name = "B";
  params[4].m_start = 2.5;
  params[4].m_step = 0.01;

  params[5].m_name = "C";
  params[5].m_start = 0.2;
  params[5].m_step = 0.01;

  sg::plots* plots = sg::get_sg_plots(a_gv);
  if(!plots) return sg::return_none;
  sg::plotter& plotter = plots->current_plotter();

  fit_g_bw* ff = new fit_g_bw(a_gv,plotter);

  ff->m_refresh_rate = device::slow_cpu()?2:1;

  a_gv.add_work(new fit_work_cbk(a_gv,plotter,params,*h_rg_plus_rbw,*ff,ff->m_refresh_rate));

  //fit not done in a work proc :
  //fit_g_bw* ff = new fit_g_bw();
  //a_gv.m_exa_fit_g_bw = ff; //manage ff.
  //std::vector<double> output;
  //if(!f2cmn::fit_1D<histo::h1d> 
  //  (a_gv.out(),*h_rg_plus_rbw,params,*ff,output)){
  //  a_gv.map_warn_failed();
  //  return;
  //}

  plotter.clear();

  sg::style_from_res(a_gv.styles(),a_gv.s_default(),plotter,a_gv.verbose());

  //WARNING : we pass a ref of the histo to a_gv.
  plotter.add_plottable(new sg::h1d2plot(*h_rg_plus_rbw));

  //WARNING : we pass a ref of ff to a_gv.
  plotter.add_plottable(new sg::f1d2plot<fit_g_bw>(*ff));

  plotter.add_todel<histo::h1d>(h_rg_plus_rbw);    
  plotter.add_todel<fit_g_bw>(ff);    

  sg::style_from_res(a_gv.styles(),"exa_fit",plotter,a_gv.verbose());

  a_gv.hide_main_menu();

  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif
