// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_polyhedron
#define inlib_exa_polyhedron

#include "../sg/polyhedron"
#include "../sg/view_evd"

namespace inlib {
namespace exa {

inline sg::return_action polyhedron(sg::gui_viewer& a_gv) {
  sg::view_evd* _evd = sg::cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_3D_camera(2));
  }

  sg::separator& ssep = _evd->static_sg();
  //ssep.clear();

  sg::separator* sep = new sg::separator;

  sg::matrix* tsf = new sg::matrix;
  sep->add(tsf);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_red();
  sep->add(mat);
    
  // A Tube with a transverse hole :
  hep::polyhedron_tubs tubs_1(0.4,0.5,1,0,two_pi());
  hep::polyhedron_tubs tubs_2(  0,0.2,4,0,two_pi());
  tubs_2.Transform(rotd(vec3d(0,1,0),half_pi()),vec3d(0,0,0));

  hep::polyhedron op = tubs_1.subtract(tubs_2);

  sg::polyhedron* node = new sg::polyhedron();
  node->ph = op;
  sep->add(node);

  ssep.add(sep);

  a_gv.hide_main_menu();

  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif
