// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_text
#define inlib_exa_text

#include "../sg/view_evd"

namespace inlib {
namespace exa {

inline sg::return_action stix_text(sg::gui_viewer& a_gv) {
  sg::view_evd* _evd = cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_2D_camera(2));
  }
  a_gv.set_plane_viewer(true);

  sg::separator& dsep = _evd->detector_sg();

  //dsep.clear();

  sg::separator* sep = new sg::separator;
  dsep.add(sep);

  sg::matrix* tsf = new sg::matrix;
  sep->add(tsf);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_black();
  sep->add(mat);

  sep->add(new sg::normal);

  sg::base_freetype* tft = sg::base_freetype::create(a_gv.ttf());
  //tft->modeling = sg::font_outline;
  tft->font = sg::font_stixgeneral_otf();
  typedef sg::base_freetype::unichar unichar_t;
  std::vector<unichar_t> line;
  //line.push_back(0x00041); //A
  //line.push_back(0x00042); //B
/*
  line.push_back(0x0222B); // integral
  line.push_back(0x003C8); // psi
  line.push_back(0x003C9); // omega
  line.push_back(0x0210F); // planck
  line.push_back(0x02202); // derivative

  line.push_back(0x00074); // t
  line.push_back(0x00078); // x
  line.push_back(0x0006D); // m
  line.push_back(0x00032); // 2
  line.push_back(0x0002F); // /
*/
  // Schrodinger :
  line.push_back(0x00069); // i
  line.push_back(0x0210F); // planck
  line.push_back(0x02202); // derivative
  line.push_back(0x003C8); // psi
  line.push_back(0x0002F); // /
  line.push_back(0x02202); // derivative
  line.push_back(0x00074); // t

  //for(unsigned int index=0;index<100;index++) {
  //  line.push_back(index);
  //}

  tft->unitext.add(line);

  float xmn,ymn,zmn,xmx,ymx,zmx;
  tft->height = 1;
  tft->get_bounds(1,xmn,ymn,zmn,xmx,ymx,zmx);
  float bxw = xmx-xmn;
  float wtext = 1;
  float nh = a_gv.wanted_size();
  float th = nh*wtext/bxw;
  tft->height = th;
  tft->get_bounds(th,xmn,ymn,zmn,xmx,ymx,zmx);
  //float bxh = box.mx()[1]-box.mn()[1];
  float xx = -(xmn+xmx)*0.5F;
  float yy = -(ymn+ymx)*0.5F;

  tsf->mul_translate(xx,yy,0);

  sep->add(tft);

  a_gv.hide_main_menu();

  return sg::return_to_render;
}

inline sg::return_action freetype(sg::gui_viewer& a_gv) {
  sg::view_evd* _evd = cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_3D_camera(2));
  }

  sg::separator& dsep = _evd->detector_sg();
  //dsep.clear();

  sg::separator* sep = new sg::separator;
  dsep.add(sep);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_red();
  sep->add(mat);

  sep->add(new sg::normal);

  ///////////////////////////////////////////////
  /// arialbd filled ////////////////////////////
  ///////////////////////////////////////////////
 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::matrix* m = new sg::matrix;
  _sep->add(m);
  m->set_translate(-1,0,0);
  m->mul_scale(0.5,0.5,0.5);

  sg::base_freetype* tft = sg::base_freetype::create(a_gv.ttf());
  tft->font = sg::font_arialbd_ttf();
  tft->strings.add("arialbd : abcdefghijklmnopqrstuvwxyz : ABCDEFGHIJKLMNOPQRSTUVWXYZ : 0123456789");
  _sep->add(tft);}


  ///////////////////////////////////////////////
  /// times_roman outlined //////////////////////
  ///////////////////////////////////////////////
 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::matrix* m = new sg::matrix;
  _sep->add(m);
  m->set_translate(-1,-1,0);
  m->mul_scale(0.5,0.5,0.5);

  sg::base_freetype* tft = sg::base_freetype::create(a_gv.ttf());
  tft->modeling = sg::font_outline;
  tft->font = sg::font_times_roman_ttf();
  tft->strings.add("times_roman : abcdefghijklmnopqrstuvwxyz : ABCDEFGHIJKLMNOPQRSTUVWXYZ : 0123456789");
  _sep->add(tft);}


  ///////////////////////////////////////////////
  /// symbol outlined ///////////////////////////
  ///////////////////////////////////////////////
 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::matrix* m = new sg::matrix;
  _sep->add(m);
  m->set_translate(-1,-2,0);
  m->mul_scale(0.5,0.5,0.5);

  sg::base_freetype* tft = sg::base_freetype::create(a_gv.ttf());
  tft->font = sg::font_symbol_ttf();
  tft->strings.add("abcdefghijklmnopqrstuvwxyz : ABCDEFGHIJKLMNOPQRSTUVWXYZ : 01456789");
  _sep->add(tft);}


  ///////////////////////////////////////////////
  /// Hershey latin /////////////////////////////
  ///////////////////////////////////////////////
 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::matrix* m = new sg::matrix;
  _sep->add(m);
  m->set_translate(-1,-3,0);
  m->mul_scale(0.5,0.5,0.5);

  sg::text_hershey* tft = new sg::text_hershey();
  tft->font = sg::latin;
  tft->strings.add("hershey : abcdefghijklmnopqrstuvwxyz : ABCDEFGHIJKLMNOPQRSTUXYZ : 0123456789");
  _sep->add(tft);}

  ///////////////////////////////////////////////
  /// Hershey greek /////////////////////////////
  ///////////////////////////////////////////////
 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::matrix* m = new sg::matrix;
  _sep->add(m);
  m->set_translate(-1,-4,0);
  m->mul_scale(0.5,0.5,0.5);

  sg::text_hershey* tft = new sg::text_hershey();
  tft->font = sg::greek;
  tft->strings.add("abcdefghijklmnopqrstuvwxyz : ABCDEFGHIJKLMNOPQRSTUVWXYZ : 01456789");
  _sep->add(tft);}


  ///////////////////////////////////////////////
  /// Hershey special ///////////////////////////
  ///////////////////////////////////////////////
 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::matrix* m = new sg::matrix;
  _sep->add(m);
  m->set_translate(-1,-5,0);
  m->mul_scale(0.5,0.5,0.5);

  sg::text_hershey* tft = new sg::text_hershey();
  tft->font = sg::special;
  tft->strings.add("abcdefghijklmnopqrstuvwxyz : ABCDEFGHIJKLMNOPQRSTUVWXYZ : 01456789");
  _sep->add(tft);}

  a_gv.hide_main_menu();

  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif
