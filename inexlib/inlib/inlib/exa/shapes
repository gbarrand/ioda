// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_shapes
#define inlib_exa_shapes

#include "../sg/circle"
#include "../sg/sphere"
#include "../sg/icosahedron_sphere"
#include "../sg/head_light"
#include "../sg/infos"
#include "../cbk/move_manip"
#include "../cbk/viewer_popup"

#include "../sg/gui_viewer"

namespace inlib {
namespace exa {

class ico_dumper : public sg::base_dumper {
  typedef sg::base_dumper parent;
public:
  virtual void get_infos(const std::string& a_tag,std::vector<std::string>& a_v) const {a_v = m_infos;}
  virtual base_dumper* copy() const {return new ico_dumper(*this);}
public:
  ico_dumper(sg::gui_viewer& a_gv,const std::vector<std::string>& a_infos)
  :parent(a_gv)
  ,m_infos(a_infos)
  {}
  virtual ~ico_dumper(){}
public:
  ico_dumper(const ico_dumper& a_from)
  :parent(a_from)
  ,m_infos(a_from.m_infos)
  {}
  ico_dumper& operator=(const ico_dumper& a_from){
    parent::operator=(a_from);
    m_infos = a_from.m_infos;
    return *this;
  }
public:
  std::vector<std::string> m_infos;
};

inline sg::return_action transparency(sg::gui_viewer& a_gv) {
  //to test transparency.

  a_gv.clear_scene();

  sg::separator* sep = new sg::separator;
  a_gv.scene().add(sep);

  float znear = 1;
  float angle = fpi()/4.0f;
  float near_height = 2 * znear * ftan(angle*0.5F);
  sg::base_camera* camera = a_gv.create_camera(sg::camera_perspective,near_height,znear);
  camera->zfar = 50;
  camera->position = vec3f(0,0,10);
  camera->focal = 10;
  camera->dx = 0.05f;
  sep->add(camera);

  sg::head_light* light = new sg::head_light;
  light->direction = vec3f(1,-1,-10);
  sep->add(light);

  float epsil = 0.1f;
   
 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);
  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_red();
  _sep->add(mat);
  sg::matrix* m = new sg::matrix;
  m->set_translate(-1-epsil,0,0);
  _sep->add(m);
  sg::cube* node = new sg::cube();   
  _sep->add(node);}

 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);
  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_red();
  _sep->add(mat);
  sg::matrix* m = new sg::matrix;
  m->set_translate(1+epsil,0,0);
  _sep->add(m);
  sg::cube* node = new sg::cube();   
  _sep->add(node);}

  // transparent primitives must come after the opaque ones.

 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);
  sg::rgba* mat = new sg::rgba();
  mat->color = colorf(0,1,0,0.2f);
  _sep->add(mat);
  sg::cube* node = new sg::cube();   
  _sep->add(node);}

  a_gv.set_scene_camera(camera);
  a_gv.set_scene_light(light);

  a_gv.hide_main_menu();
  a_gv.set_plane_viewer(false); //exam viewer.

  return sg::return_to_render; 
}

class shapes_cbk : public sg::ecbk {
  INLIB_CBK(shapes_cbk,inlib::exa::shapes_cbk,sg::ecbk)
public:
  virtual sg::return_action action() {
    if(!m_node) return sg::return_none;
    m_gv.show_console(m_node->s_cls());
    if(!m_no_set_done) m_event_action->set_done(true);
    return sg::return_none;
  }
public:
  shapes_cbk(sg::gui_viewer& a_gv)
  :parent()
  ,m_gv(a_gv)
  ,m_colors(0)
  ,m_entries(0)
  ,m_numeric(0)
  ,m_entry(0)
  ,m_edvalop(0)
  ,m_file_chooser(0)
  {}
  virtual ~shapes_cbk(){}
public:
  shapes_cbk(const shapes_cbk& a_from)
  :parent(a_from)
  ,m_gv(a_from.m_gv)
  ,m_colors(a_from.m_colors)
  ,m_entries(a_from.m_entries)
  ,m_numeric(a_from.m_numeric)
  ,m_entry(a_from.m_entry)
  ,m_edvalop(a_from.m_edvalop)
  ,m_file_chooser(a_from.m_file_chooser)
  ,m_format(a_from.m_format)
  ,m_args(a_from.m_args)
  {}
  shapes_cbk& operator=(const shapes_cbk& a_from){
    parent::operator=(a_from);
    m_colors = a_from.m_colors;
    m_entries = a_from.m_entries;
    m_numeric = a_from.m_numeric;
    m_entry = a_from.m_entry;
    m_edvalop = a_from.m_edvalop;
    m_file_chooser = a_from.m_file_chooser;
    m_format = a_from.m_format;
    m_args = a_from.m_args;
    return *this;
  }
protected:
  sg::gui_viewer& m_gv;    
public: //per case :
  //not owner         
  sg::colors* m_colors;
  sg::entries* m_entries;
  sg::numeric* m_numeric;
  sg::entry* m_entry;
  sg::edvalop* m_edvalop;
  sg::file_chooser* m_file_chooser;
  std::string m_format;
  args m_args;
};

INLIB_GLOBAL_STRING(exa_icosahedron)

inline sg::return_action shapes(sg::gui_viewer& a_gv) {
  //to test cameras and manips.

  a_gv.clear_scene(); //it will do a scene().clear_cbks().

 {shapes_cbk* cbk = new shapes_cbk(a_gv);
  cbk->set_no_set_done(true);
  a_gv.scene().up_cbks().add(cbk);}

  // setup popup, manip cbks on a_gv.scene() selection node :
  cbk::move_manip::add_cbks(a_gv.scene(),a_gv,a_gv.out(),a_gv.scene(),a_gv.verbose());
  a_gv.scene().up_cbks().add(new cbk::viewer_popup(a_gv));
  a_gv.scene().verbose = a_gv.verbose();

  sg::separator* sep = new sg::separator;
  a_gv.scene().add(sep);

  float znear = 0.1f;
  float angle = fpi()/4.0f;
  float near_height = 2 * znear * ftan(angle*0.5F);
  sg::base_camera* camera = a_gv.create_camera(sg::camera_perspective,near_height,znear);
  camera->zfar = 50;
  camera->position = vec3f(0,0,10);
  camera->focal = 10;
  camera->dx = 0.1f;
  sep->add(camera);

 {//cam manip circle :
  sg::separator* _sep = new sg::separator;
  sep->add(_sep);
  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_red();
  _sep->add(mat);
  if(a_gv.is_wall_screen_app()) {
    sg::draw_style* ds = new sg::draw_style;
    ds->style = sg::draw_style::lines;
    ds->line_width = 5;
    _sep->add(ds);
  }
  sg::matrix* m = new sg::matrix;
  m->set_rotate(1,0,0,-fhalf_pi());
  _sep->add(m);
  sg::circle* node = new sg::circle();   
  node->radius = 5.2f;
  _sep->add(node);}

  sg::head_light* light = new sg::head_light;
  light->direction = vec3f(1,-1,-10);
  sep->add(light);

  sg::matrix* tsf = new sg::matrix;
  sep->add(tsf);

 {sg::matrix* m = new sg::matrix;
  m->mul_rotate(0,1,0,fhalf_pi()/2.0f);
  m->mul_rotate(1,0,0,fhalf_pi()/2.0f); //done first
  sep->add(m);}

 {//cube :
  sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_red();
  _sep->add(mat);

  //sg::matrix* m = new sg::matrix; //for cube_manip
  atime _now(0,0);
  if(!a_gv.get_time_now(_now)) {}
  float omega = ftwo_pi()/10.0f; // turn/s  
  omega *= 2;
  sg::rotate_anim* m = new sg::rotate_anim(_now);
  m->axis.set_value(0,1,0);
  m->omega = omega;
  _sep->add(m);

  sg::cube* node = new sg::cube();   
  _sep->add(node);}

 {//sphere :
  sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_blue();
  _sep->add(mat);

  sg::matrix* m = new sg::matrix; //for cube_manip
  m->set_translate(4,0,0);
  _sep->add(m);

  sg::sphere* node = new sg::sphere();  //radius=1
  //node->style = sg::sphere::draw_line;   
  //node->style = sg::sphere::draw_point;   
  _sep->add(node);}

 {//sphere :
  sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_yellow();
  _sep->add(mat);

  sg::matrix* m = new sg::matrix; //for cube_manip
  m->set_translate(8,0,0);
  _sep->add(m);

  sg::sphere* node = new sg::sphere();  //radius=1
  //node->style = sg::sphere::draw_line;   
  //node->style = sg::sphere::draw_point;   
  _sep->add(node);}

 {//icosahedron_sphere :
  sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_green();
  _sep->add(mat);

  sg::matrix* m = new sg::matrix; //for cube_manip
  m->set_translate(-4,0,0);
  _sep->add(m);

 {sg::infos* infos = new sg::infos;
  infos->strings.add(s_exa_icosahedron());
  infos->strings.add("no_tag");
  _sep->add(infos);
  std::vector<std::string> vinfos;
  vinfos.push_back("item 1");
  vinfos.push_back("item 2");
  vinfos.push_back("item 3");
  a_gv.add_dumper(s_exa_icosahedron(),new ico_dumper(a_gv,vinfos));}

  sg::icosahedron_sphere* node = new sg::icosahedron_sphere();  //radius=1
  node->max_level = 2;
  //node->style = sg::icosahedron_sphere::draw_line;   
  //node->style = sg::icosahedron_sphere::draw_point;   
  _sep->add(node);}

 {//cam manip circle :
  sg::separator* _sep = new sg::separator;
  sep->add(_sep);
  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_blue();
  _sep->add(mat);
  if(a_gv.is_wall_screen_app()) {
    sg::draw_style* ds = new sg::draw_style;
    ds->style = sg::draw_style::lines;
    ds->line_width = 5;
    _sep->add(ds);
  }
  sg::matrix* m = new sg::matrix;
  m->set_rotate(1,0,0,-fhalf_pi());
  //m->mul_translate(-3,0,0); //first
  _sep->add(m);
  sg::circle* node = new sg::circle();   
  node->radius = 0.8f; //we should see part of the cube.
  _sep->add(node);}

  a_gv.enable_anim();
  a_gv.set_scene_camera(camera);
  a_gv.set_scene_light(light);
  //a_gv.set_scene_matrix(tsf);

  a_gv.hide_main_menu();
  a_gv.set_plane_viewer(false); //exam viewer.

  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif
