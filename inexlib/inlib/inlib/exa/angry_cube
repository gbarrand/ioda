// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_angry_cube
#define inlib_exa_angry_cube

#include "../sg/parabolic_anim"
#include "../random"

#include "../sg/view_evd"

namespace inlib {
namespace exa {

inline float grav_const() {return 9.81f;} //m/s2

inline sg::return_action angry_cube(sg::gui_viewer& a_gv) {
  sg::view_evd* _evd = cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_3D_camera(4));    
  }

  sg::separator& dsep = _evd->detector_sg();
  //dsep.clear();

  sg::separator* sep = new sg::separator;
  dsep.add(sep);

  sg::matrix* tsf = new sg::matrix;
  sep->add(tsf);

  sg::separator* _sep = new sg::separator;
  sep->add(_sep);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_red();
  _sep->add(mat);

  // we assume camera params are in meter.

  vec3f x0(-0.6f,0,0);
  vec3f v0(1,3,0);
  v0.normalize(); //1 m/s

  float r = 1+0.3f*float(random::flat().shoot());
  v0 *= 7.0f*r; // 10 m/s
  vec3f acc(0,-grav_const(),0);

  // time to reach y = 0 again :
  // 0 = -g/2*t*t+v0.y()*t
  float tmx = v0.y()*2.0f/grav_const();

  atime _now(0,0);
  if(!a_gv.get_time_now(_now)) {}

  sg::parabolic_anim* m = new sg::parabolic_anim(a_gv,_now);
  m->delay = tmx;
  m->position = x0;
  m->speed = v0;
  m->acceleration = acc;
  _sep->add(m);

  sg::cube* node = new sg::cube();   
  node->width = 0.2f;
  node->height = 0.2f;
  node->depth = 0.2f;
  _sep->add(node);

  a_gv.enable_anim();
  a_gv.hide_main_menu();

  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif
