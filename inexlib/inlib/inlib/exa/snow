// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_exa_snow
#define inlib_exa_snow

#include "../sg/snow_anim"

#include "../sg/view_evd"

namespace inlib {
namespace exa {

inline sg::return_action snow(sg::gui_viewer& a_gv) {

  sg::view_evd* _evd = cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_3D_camera(4));    
  }

  sg::separator& dsep = _evd->detector_sg();
  //dsep.clear();


 {//ground :
  sg::separator* _sep = new sg::separator;
  dsep.add(_sep);

  sg::matrix* tsf = new sg::matrix;
  _sep->add(tsf);

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_white();
  _sep->add(mat);

  sg::cube* node = new sg::cube();   
  node->width = 10;
  node->depth = 10;
  node->height = 0.01f;
  _sep->add(node);}

  sg::rgba* mat = new sg::rgba();
  mat->color = colorf_white();
  dsep.add(mat);

  atime _now(0,0);
  if(!a_gv.get_time_now(_now)) {}

  sg::snow_anim* _anim = new sg::snow_anim(a_gv,_now);
  //_anim->initial_speed = vec3f(1,0,0);
  if(a_gv.is_wall_screen_app()) _anim->flake_size = 0.03f;
  dsep.add(_anim);

  a_gv.enable_anim();
  a_gv.hide_main_menu();

  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif
