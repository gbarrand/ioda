// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_solid
#define inlib_edep_solid

#include "../S_STRING"
#include "../iobj"
#include "../scast"
#include "cids"

#ifdef INLIB_MEM
#include "../mem"
#endif

namespace inlib {
namespace edep {

class solid : public virtual iobj {
public:
  INLIB_SCLASS(inlib::edep::solid)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<solid>(this,a_class)) return p;
    return 0;
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return solid_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<solid>(this,a_class)) {return p;}
    else return 0;
  }
  virtual cid id_cls() const {return id_class();}
public:
  solid() {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~solid(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  solid(const solid& a_from):iobj(a_from) {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  solid& operator=(const solid&) {return *this;}
public:  
  enum pos_type {
    pos_outside,
    pos_surface,
    pos_inside
  };
};

}}

#include "../safe_cast"

namespace inlib {
namespace edep {

template <class T>
inline const T* cast_solid(const solid& a_solid) {
  return id_cast<solid,T>(a_solid);
  //return safe_cast<solid,T>(a_solid);
}
template <class T>
inline T* cast_solid(solid& a_solid) {
  return id_cast<solid,T>(a_solid);
  //return safe_cast<solid,T>(a_solid);
}
  
}}

#endif
