// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_cone
#define inlib_edep_cone

#include "solid"

namespace inlib {
namespace edep {

class cone : public solid {
public:
  INLIB_SCLASS(inlib::edep::cone)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<cone>(this,a_class)) return p;
    return solid::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return cone_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<cone>(this,a_class)) return p;
    return solid::cast(a_class);
  }
  virtual cid id_cls() const {return id_class();}
public:
  cone(
   double a_rmin1
  ,double a_rmax1
  ,double a_rmin2
  ,double a_rmax2
  ,double a_dz
  ,double a_phi
  ,double a_dphi
  )
  :m_rmin1(a_rmin1)
  ,m_rmax1(a_rmax1)
  ,m_rmin2(a_rmin2)
  ,m_rmax2(a_rmax2)
  ,m_dz(a_dz)
  ,m_phi(a_phi)
  ,m_dphi(a_dphi)
  {
  }
  virtual ~cone(){
  }
public:
  cone(const cone& a_from)
  :iobj(a_from)
  ,solid(a_from)
  ,m_rmin1(a_from.m_rmin1)
  ,m_rmax1(a_from.m_rmax1)
  ,m_rmin2(a_from.m_rmin2)
  ,m_rmax2(a_from.m_rmax2)
  ,m_dz(a_from.m_dz)
  ,m_phi(a_from.m_phi)
  ,m_dphi(a_from.m_dphi)
  {}
  cone& operator=(const cone& a_from){
    solid::operator=(a_from);
    m_rmin1 = a_from.m_rmin1;
    m_rmax1 = a_from.m_rmax1;
    m_rmin2 = a_from.m_rmin2;
    m_rmax2 = a_from.m_rmax2;
    m_dz = a_from.m_dz;
    m_phi = a_from.m_phi;
    m_dphi = a_from.m_dphi;
    return *this;
  }
public:
  double rmin1() const {return m_rmin1;}
  double rmax1() const {return m_rmax1;}
  double rmin2() const {return m_rmin2;}
  double rmax2() const {return m_rmax2;}
  double dz() const {return m_dz;}
  double phi() const {return m_phi;}
  double dphi() const {return m_dphi;}
protected:
  double m_rmin1; // inner radius at -dz
  double m_rmax1; // outer radius at -dz
  double m_rmin2; // inner radius at +dz
  double m_rmax2; // outer radius at +dz
  double m_dz; // half length
  double m_phi;
  double m_dphi;
};

}}

#endif
