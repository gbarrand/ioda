// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_boolean
#define inlib_edep_boolean

#include "solid"

#include "../mat4d"

namespace inlib {
namespace edep {

class boolean : public solid {
public:
  INLIB_SCLASS(inlib::edep::boolean)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<boolean>(this,a_class)) return p;
    return solid::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return boolean_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<boolean>(this,a_class)) return p;
    return solid::cast(a_class);
  }
  virtual cid id_cls() const {return id_class();}
public:
  enum op_type {
    op_union = 1,
    op_intersection = 2,
    op_subtraction = 3
  };  
public:
  boolean(op_type a_op,solid& a_A,solid& a_B,const mat4d& a_B_tsf)
  :m_op(a_op)
  ,m_A(a_A)
  ,m_B(a_B)
  ,m_B_tsf(a_B_tsf)
  {}
  virtual ~boolean(){}
public:
  boolean(const boolean& a_from)
  :iobj(a_from)
  ,solid(a_from)
  ,m_op(a_from.m_op)
  ,m_A(a_from.m_A)
  ,m_B(a_from.m_B)
  ,m_B_tsf(a_from.m_B_tsf)
  {}
  boolean& operator=(const boolean& a_from) {
    solid::operator=(a_from);
    m_op = a_from.m_op;
    m_A = a_from.m_A;
    m_B = a_from.m_B;
    m_B_tsf = a_from.m_B_tsf;
    return *this;
  }
public:
  op_type op() const {return m_op;}
  const solid& A() const {return m_A;}
  const solid& B() const {return m_B;}
  const mat4d& B_tsf() const {return m_B_tsf;}
protected:
  op_type m_op;
  solid& m_A;
  solid& m_B;
  mat4d m_B_tsf;
};

}}

#endif
