// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_solid2ph
#define inlib_edep_solid2ph

#include "../hep/polyhedron"
//#include "../tessellate"

#include "box"
#include "tubs"
#include "trap"
#include "cone"
#include "trd"
#include "pcon"
#include "boolean"
#include "../vmanip"

namespace inlib {
namespace edep {

inline bool solid_set_polyhedron(std::ostream& a_out,
                                 const edep::solid& a_solid,
                                 hep::polyhedron& a_ph,
                                 std::vector<hep::polyhedron>& a_phs/*, 
                                 tessellate* a_tess*/){
  
    a_phs.clear();
    int nstep = 24;

/*
     // not yet treated 
    if(cast_solid<geo_half_space>(a_solid)){
  
      a_out << " no polyhedron for solid " << a_solid.s_cls() << std::endl;
      return false;
  
    } else if(const geo_ctub* ctub = 
                cast_solid<geo_ctub>(a_solid)){
      //must be before tube_seg.

      hep::polyhedron_tubs tubs(ctub->rmin(),ctub->rmax(),ctub->dz(),
                                      ctub->phi1()*deg2rad(),
                              (ctub->phi2() - ctub->phi1())*deg2rad(),
                              nstep);

      double sz = ::sqrt(ctub->rmax()*ctub->rmax()+ctub->dz()*ctub->dz());
      sz *= 20;

      hep::polyhedron_box cut_low(sz,sz,sz);
     {cut_low.Translate(0,0,-sz); //then in xy plane.
      const double* norm = ctub->low(); 
      mat4f mtx;
      set_rotate_to(mtx,
        vec3f(float(norm[0]),float(norm[1]),float(norm[2])));
      hep::tsf_polyhedron(cut_low,mtx);
      cut_low.Translate(0,0,-ctub->dz());}

      hep::polyhedron_box cut_high(sz,sz,sz);
     {cut_high.Translate(0,0,-sz); //then in xy plane.
      const double* norm = ctub->high(); 
      mat4f mtx;
      set_rotate_to(mtx,
        vec3f(float(norm[0]),float(norm[1]),float(norm[2])));
      hep::tsf_polyhedron(cut_high,mtx);
      cut_high.Translate(0,0,ctub->dz());}

      hep::polyhedron cut_min_z = tubs.intersect(cut_low);
      a_ph = cut_min_z.intersect(cut_high);
    
    } else*/ if(const tubs* _tubs = cast_solid<tubs>(a_solid)){
      //must be before tube.
  
      return a_ph.set_polyhedron_tubs
               (_tubs->rmin(),_tubs->rmax(),_tubs->dz(),
                _tubs->phi(),_tubs->dphi(),nstep);
/*  
    } else if(const geo_hype* hype = 
                cast_solid<geo_hype>(a_solid)){
      //must be before tube.
  
      return a_ph.set_polyhedron_hype(hype->st_in()*deg2rad(),
                              hype->st_out()*deg2rad(),
                              hype->rmin(),hype->rmax(),hype->dz(),
                              10,nstep);
  
    } else if(const geo_eltu* eltu = 
                cast_solid<geo_eltu>(a_solid)){
      //must be before tube.
  
      return a_ph.set_polyhedron_eltu(eltu->a(),eltu->b(),eltu->dz(),
                                     10,nstep);
  
    } else if(const geo_tube* tube = 
                cast_solid<geo_tube>(a_solid)){
  
      return a_ph.set_polyhedron_tube(tube->rmin(),tube->rmax(),tube->dz());
  
    } else if(const geo_cone_seg* cons = 
                cast_solid<geo_cone_seg>(a_solid)){
      //must be before cone.
  
      return a_ph.set_polyhedron_cons(cons->rmin1(),cons->rmax1(),
                              cons->rmin2(),cons->rmax2(),
                              cons->dz(),
                              cons->phi1()*deg2rad(),
                              (cons->phi2() - cons->phi1())*deg2rad(),
                              nstep);
  
    } else if(const geo_torus* torus = 
                cast_solid<geo_torus>(a_solid)){
  
      return a_ph.set_polyhedron_torus(torus->rmin(),torus->rmax(),
                               torus->r(),
                               torus->phi()*deg2rad(),
                               torus->dphi()*deg2rad(),
                               nstep,nstep);
  
    } else if(const geo_xtru* xtru = 
                cast_solid<geo_xtru>(a_solid)){
  
      
      //if(!xtru->poly()) {
        //a_out << " xtru has no geo_polygon." << std::endl;
        //return false;
      //}

      int npts = xtru->nvert();
      int nz = xtru->nz();

      if((npts<=2)||(nz<=1)) {
        a_out << "solid_set_polyhedron :"
              << " xtru : bad npts or nz points."
              << std::endl;
        return false;
      }

      double* pxs = xtru->xs(); //npts
      double* pys = xtru->ys(); //npts
      double* zs = xtru->zs(); //nz
      double* scales = xtru->scales(); //nz
      double* x0s = xtru->x0s(); //nz
      double* y0s = xtru->y0s(); //nz

      // it is expected a clockwise polygon from geo_xtru.
     {bool convex = true;
      double xv = pxs[1]-pxs[0];
      double yv = pys[1]-pys[0];
      double xw,yw,cross_z;
      for(int j=2;j<npts;j++) {
        xw = pxs[j]-pxs[j-1];
        yw = pys[j]-pys[j-1];
        //z of cross :
        //  xv  xw
        //  yv  yw
        //   0   0
        cross_z = xv*yw-yv*xw;
        if(cross_z>0) {convex = false;break;}   
        xv = xw;
        yv = yw;
      }
      if(convex) { // check seg(n-2,n-1) to seg(n-1,0)
        xw = pxs[0]-pxs[npts-1];
        yw = pys[0]-pys[npts-1];
        cross_z = xv*yw-yv*xw;    
        if(cross_z>0) convex = false;
        xv = xw;
        yv = yw;
      }
      if(convex) { // check seg(n-1,0) to seg(0,1)
        xw = pxs[1]-pxs[0];
        yw = pys[1]-pys[0];
        cross_z = xv*yw-yv*xw;    
        if(cross_z>0) convex = false;
      }

      if(!convex) {

        //a_out << "solid_set_polyhedron :"
        //      << " xtru : not convex polygon."
        //      << std::endl;

        if(!a_tess) {
          a_out << "solid_set_polyhedron :"
                << " xtru : no tessellate object given."
                << std::endl;
          return false;
        }

        double* solid_doubles = new double[npts*3];
       {double* pos = solid_doubles;
        for(int j=0;j<npts;j++) {
          *pos = pxs[j];pos++;
          *pos = pys[j];pos++;
          *pos =      0;pos++;
        }}    

        tessellate::prims_t prims;
        a_tess->do_it(npts,solid_doubles,prims);
        delete [] solid_doubles;

        add_ph aph(a_out,a_ph,a_phs,nz,zs,scales,x0s,y0s);

        tessellate::prims_t::const_iterator it;
        for(it=prims.begin();it!=prims.end();++it) {
          const tess_prim& item = *(*it);
          const std::vector<float>& coords = item.m_coords;

          const float* data = vec_data<float>(coords);

          if(item.m_mode==gl::triangle_strip()){
            if(!aph.add_triangle_strip(coords.size(),data,false)) {
              a_out << "solid_set_polyhedron :"
                    << " xtru : add_triangle_strip failed."
                    << std::endl;
              xtru->dump(a_out);
              raw_clear(prims);
              return false;
            }
          } else if(item.m_mode==gl::triangle_fan()){
            if(!aph.add_triangle_fan(coords.size(),data,false)) {
              a_out << "solid_set_polyhedron :"
                    << " xtru : add_triangle_fan failed."
                    << std::endl;
              xtru->dump(a_out);
              raw_clear(prims);
              return false;
            }
          } else if(item.m_mode==gl::triangles()){
            if(!aph.add_triangles(coords.size(),data,false)) {
              a_out << "solid_set_polyhedron :"
                    << " xtru : add_triangles failed."
                    << std::endl;
              xtru->dump(a_out);
              raw_clear(prims);
              return false;
            }
          }

        }

        raw_clear(prims);

        return true;

      } else {
        //a_out << "debug : found convex." << std::endl;
      }}

      double* xs = new double[nz*npts];
      double* ys = new double[nz*npts];

      //int indn = xtru->poly()->nvert();
      int* inds = xtru->poly()?xtru->poly()->inds():0; //usage ???

      //::printf("debug : xtru : npts %d, indn %d, nz %d\n",npts,indn,nz);
      //NOTE : hep::polyhedron_xtru wants xs,ysanticlockwise
      //       and z(+ to -) ordering.
     {int i,j,jj;
      for(j=0;j<npts;j++) {        
        jj = inds?inds[j]:j;
        //::printf("debug :  -> %d : %d : %g %g\n",j,inds[j],pxs[jj],pys[jj]);
        for(i=0;i<nz;i++) {
          xs[i*npts+j] = scales[i]*pxs[jj]+x0s[i];
          ys[i*npts+j] = scales[i]*pys[jj]+y0s[i];
        }
      }}

      bool status = a_ph.set_polyhedron_xtru(npts,nz,xs,ys,zs,false,false);
      delete [] xs;
      delete [] ys;
      if(!status) {
        a_out << "solid_set_polyhedron :"
              << " xtru : set_polyhedron_xtru failed."
              << std::endl;
        return false;
      }
*/  
    } else if(const cone* _cone = cast_solid<cone>(a_solid)){
  
      return a_ph.set_polyhedron_cone(_cone->rmin1(),_cone->rmax1(),
                                     _cone->rmin2(),_cone->rmax2(),
                                     _cone->dz(),nstep);
/*  
    } else if(const geo_trd1* trd1 = 
                cast_solid<geo_trd1>(a_solid)){
  
      return a_ph.set_polyhedron_trd1(trd1->dx1(),trd1->dx2(),
                                     trd1->dy(),trd1->dz());
*/  
    } else if(const trd* _trd = cast_solid<trd>(a_solid)){
  
      return a_ph.set_polyhedron_trd2(_trd->dx1(),_trd->dx2(),
                                     _trd->dy1(),_trd->dy2(),
                                     _trd->dz());
/*  
    } else if(const geo_sphere* sphere = 
                cast_solid<geo_sphere>(a_solid)){
  
      return a_ph.set_polyhedron_sphere(sphere->rmin(),sphere->rmax(),
                         sphere->phi1()*deg2rad(),
                         (sphere->phi2()-sphere->phi1())*deg2rad(),
                         sphere->theta1()*deg2rad(),
                         (sphere->theta2()-sphere->theta1())*deg2rad(),
                         sphere->nseg(),
                         sphere->nz());
  
    } else if(const geo_para* para = 
                cast_solid<geo_para>(a_solid)){
  
      return a_ph.set_polyhedron_para(para->dx(),para->dy(),para->dz(),
                              para->alpha()*deg2rad(),
                              para->theta()*deg2rad(),
                              para->phi()*deg2rad());
  
    } else if(const geo_gtra* gtra = 
                cast_solid<geo_gtra>(a_solid)){
      //must be before trap.

      return a_ph.set_polyhedron_arb8(gtra->dz(),gtra->xy());
*/  
    } else if(const edep::trap* _trap = 
                cast_solid<edep::trap>(a_solid)){
  
      //in principle we could have used a_ph.set_polyhedron_arb8() too.

      return a_ph.set_polyhedron_trap(_trap->dz(),
                              _trap->theta(),
                              _trap->phi(),
                              _trap->h1(),_trap->bl1(),_trap->tl1(),
                              _trap->alpha1(),
                              _trap->h2(),_trap->bl2(),_trap->tl2(),
                              _trap->alpha2());
    } else if(const pcon* _pcon = cast_solid<pcon>(a_solid)){
  
      return a_ph.set_polyhedron_pcon(_pcon->phi(),_pcon->dphi(),
                                     _pcon->nz(),
                                     _pcon->zs(),
                                     _pcon->rmins(),_pcon->rmaxs());
  
/*  
    } else if(const geo_arb8* arb8 = 
                cast_solid<geo_arb8>(a_solid)){
  
      return a_ph.set_polyhedron_arb8(arb8->dz(),arb8->xy());
*/
  
    } else if(const boolean* _bool = cast_solid<boolean>(a_solid)){
  
      //a_out << "debug : boolean" << std::endl;

      const solid& ln = _bool->A();
      const solid& rn = _bool->B();
      const mat4d& rm = _bool->B_tsf();
  
      bool verbose = false;
      //bool verbose = true;
      if(verbose)
      a_out << "solid_set_polyhedron :"
            << " boolean :"
            << " A : " << ln.s_cls()
            << " B : " << rn.s_cls()
            << " ..."
            << std::endl;

      hep::polyhedron lph;
      std::vector<hep::polyhedron> lphs;
      if(!solid_set_polyhedron(a_out,ln,lph,lphs/*,a_tess*/)) {
        a_out << "solid_set_polyhedron :"
              << " boolean :"
              << " solid_set_polyhedron for lph failed."
              << std::endl;
        a_out << "  A : " << ln.s_cls() << std::endl;
        //ln.dump(a_out);
        a_out << "  B : " << rn.s_cls() << std::endl;
        //rn.dump(a_out);
        return false;
      }

     {if(lphs.empty()) {
        //hep::tsf_polyhedron(lph,lm);  
        lphs.push_back(lph);
      } else {
        //std::vector<hep::polyhedron>::iterator it;
        //for(it=lphs.begin();it!=lphs.end();++it) {
        //  hep::tsf_polyhedron(*it,lm);  
        //}
      }}

      hep::polyhedron rph;
      std::vector<hep::polyhedron> rphs;
      if(!solid_set_polyhedron(a_out,rn,rph,rphs/*,a_tess*/)) {
        //a_out << "solid_set_polyhedron :"
        //      << " boolean :"
        //      << " solid_set_polyhedron for rph failed."
        //      << std::endl;
        a_out << "  A : " << ln.s_cls() << std::endl;
        //ln->dump(a_out);
        a_out << "  B : " << rn.s_cls() << std::endl;
        //rn->dump(a_out);
        return false;
      }

      if(rphs.empty()) {
        hep::tsf_polyhedron(rph,rm); 
        rphs.push_back(rph);
      } else {
        //a_out << "solid_set_polyhedron :"
        //      << " boolean :"
        //      << " not empty rphs."
        //      << std::endl;
        std::vector<hep::polyhedron>::iterator it;
        for(it=rphs.begin();it!=rphs.end();++it) {
          hep::tsf_polyhedron(*it,rm);  
        }
      }

      boolean::op_type OPERATION = _bool->op();

      if(OPERATION==boolean::op_union){
        if((lphs.size()!=1)||(rphs.size()!=1)) {
          append(a_phs,lphs);
          append(a_phs,rphs);
          return true;
        }
      }

      int err;

      hep::polyhedron res;

      std::vector<hep::polyhedron>::const_iterator lit;
      for(lit=lphs.begin();lit!=lphs.end();++lit) {
        const hep::polyhedron& _lph = *lit;

        std::vector<hep::polyhedron>::const_iterator rit;
        for(rit=rphs.begin();rit!=rphs.end();++rit) {
          const hep::polyhedron& _rph = *rit;

          hep::BooleanProcessor processor; //G.Barrand
          //WARNING : take care of -1 to match BooleanProcessor OP_XXX.
          res = processor.execute(OPERATION-1,_lph,_rph,err);
          if(err) {
            if(OPERATION==boolean::op_union) {
              //should issue a warning.
              //if rendered solid it will look ok.
              a_phs.push_back(_lph);
              a_phs.push_back(_rph);
            } else {
              a_out << "solid_set_polyhedron :"
                    << " bool op " << OPERATION << " failed."
                    << " (1=UNION, 2=INTER, 3=SUB)."
                    << std::endl;
              a_out << "  A : " << ln.s_cls() << std::endl;
              //ln->dump(a_out);
              a_out << "  B : " << rn.s_cls() << std::endl;
              //rn->dump(a_out);
              return false;
            }
          } else {
            a_phs.push_back(res);
          }

        }
      }
      if(a_phs.size()==1) {
        a_ph = a_phs[0];
        a_phs.clear();
      }

      if(verbose)
      a_out << "solid_set_polyhedron :"
            << " boolean : bool op " << OPERATION << " of :"
            << " A solid : " << ln.s_cls()
            << " B solid : " << rn.s_cls()
            << " ok."
            << std::endl;

    
/*
    } else if(const geo_scaled_shape* sshape = 
       cast_solid<geo_scaled_shape>(a_solid)){
  
      const geo_shape* gshape = sshape->shape();

      hep::polyhedron ph;
      std::vector<hep::polyhedron> phs;
      if(!solid_set_polyhedron(a_out,*gshape,ph,phs,a_tess)) {
        a_out << "solid_set_polyhedron :"
              << " geo_scaled_shape :"
              << " solid_set_polyhedron failed."
              << std::endl;
        return false;
      }

      const geo_scale* gscale = sshape->scale();
      const double* scale = gscale->scale();

      mat4f mtx;
      mtx.set_scale(float(scale[0]),float(scale[1]),float(scale[2]));

      if(phs.empty()) {
        hep::tsf_polyhedron(ph,mtx);
      } else {
        std::vector<hep::polyhedron>::iterator it;
        for(it=phs.begin();it!=phs.end();++it) {
          hep::tsf_polyhedron(*it,mtx);
        }
      }
  
    } else if(cast_solid<geo_pgon>(a_solid)){
      a_out << " no polyhedron for shape " << a_solid.s_cls() << std::endl;
      return false;
*/  
    //bbox must be the last since inherited by most shapes.
    } else if(const box* _box = cast_solid<box>(a_solid)){
  
      if(!a_ph.set_polyhedron_box(_box->dx(),_box->dy(),_box->dz()))
        return false;
  
    } else {
      a_out << " no polyhedron for solid " << a_solid.s_cls() << std::endl;
      return false;
    }

    return true;
}

}}

#endif
