// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_tubs
#define inlib_edep_tubs

/// A tube or tube segment with curved sides parallel to
/// the z-axis. The tube has a specified half-length along
/// the z-axis, about which it is centered, and a given
/// minimum and maximum radius. A minimum radius of 0
/// corresponds to filled tube /cylinder. The tube segment is
/// specified by starting and delta angles for phi, with 0
/// being the +x axis, PI/2 the +y axis.
/// A delta angle of 2PI signifies a complete, unsegmented
/// tube/cylinder.

#include "solid"

namespace inlib {
namespace edep {

class tubs : public solid {
  typedef solid parent;
public:
  INLIB_SCLASS(inlib::edep::tubs)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<tubs>(this,a_class)) return p;
    return parent::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return tubs_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<tubs>(this,a_class)) return p;
    return parent::cast(a_class);
  }
  virtual cid id_cls() const {return id_class();}
public:
  tubs(double a_rmin,double a_rmax,double a_dz,double a_phi,double a_dphi)
  :m_rmin(a_rmin)
  ,m_rmax(a_rmax)
  ,m_dz(a_dz)
  ,m_phi(a_phi)
  ,m_dphi(a_dphi)
  {}
  virtual ~tubs(){}
public:
  tubs(const tubs& a_from)
  :iobj(a_from)
  ,parent(a_from)
  ,m_rmin(a_from.m_rmin)
  ,m_rmax(a_from.m_rmax)
  ,m_dz(a_from.m_dz)
  ,m_phi(a_from.m_phi)
  ,m_dphi(a_from.m_dphi)
  {}
  tubs& operator=(const tubs& a_from){
    parent::operator=(a_from);
    m_rmin = a_from.m_rmin;
    m_rmax = a_from.m_rmax;
    m_dz = a_from.m_dz;
    m_phi = a_from.m_phi;
    m_dphi = a_from.m_dphi;
    return *this;
  }
public:
  double rmin() const {return m_rmin;}
  double rmax() const {return m_rmax;}
  double dz() const {return m_dz;}
  double phi() const {return m_phi;}
  double dphi() const {return m_dphi;}
protected:
  double m_rmin;
  double m_rmax;
  double m_dz;
  double m_phi;
  double m_dphi;
};

}}

#endif
