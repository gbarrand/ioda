// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_g4pow
#define inlib_edep_g4pow

#include <vector>
#include <cmath>
#include <cstddef>

namespace inlib {
namespace edep {

class g4pow {
public:
  g4pow() {
    static const size_t maxZ = 512; 
    static const double onethird(1.0/3.0);
    m_pz13.resize(maxZ,0.0);
    m_lz.resize(maxZ,0.0);
    for(size_t i=1; i<maxZ; ++i) {
      m_pz13[i] = ::pow(double(i),onethird);
      m_lz[i]   = std::log(double(i));
    }
    m_maxA = -0.6 + maxZ;
  }
  ~g4pow() {}
protected:
  g4pow(const g4pow&) {}
  g4pow& operator=(const g4pow&){return *this;}
public:
  double Z13(size_t a_Z) const {return m_pz13[a_Z];}

  double Z23(size_t a_Z) const {
    double x = m_pz13[a_Z];
    return x*x;
  }

  double logZ(size_t a_Z) const {return m_lz[a_Z];}
  
  double A13(double a_A) const {
    static const double onethird(1.0/3.0);
    double res = 0.0;
    if(a_A > 0.0) {
      double a = (1.0 <= a_A) ? a_A : 1.0/a_A;
      if(1.0 > a_A) { a = 1.0/a_A; }
      if(a <= m_maxA) {
        int i = int(a + 0.5);
        double x = (a/double(i) - 1.0)*onethird;
        res = m_pz13[i]*(1.0 + x - x*x*(1.0 - 1.66666666*x));
        if(1.0 > a_A) { res = 1.0/res; }
      } else {
        res = std::pow(a_A, onethird); 
      }
    }
    return res;
  }

  double A23(double a_A) const {
    double x = A13(a_A);
    return x*x;
  }

protected:
  std::vector<double> m_pz13;
  std::vector<double> m_lz;
  double m_maxA;
};

inline const g4pow& s_g4pow() {
  static const g4pow s_v;
  return s_v;
}

}}

#endif
