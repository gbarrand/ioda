// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_geo
#define inlib_edep_geo

#include "volume"
#include "solid2ph"

#include "../sg/geo"
#include "../sg/polyhedron"

namespace inlib {
namespace edep {

class geo : public sg::geo<edep::volume,mat4d> {
  typedef sg::geo<edep::volume,mat4d> parent;
public:
  INLIB_SCLASS(inlib::edep::geo)
public:
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo>(this,a_class)) return p;
    return parent::cast(a_class);
  }
public: //node
  virtual node* copy() const {return new geo(*this);}
  virtual const std::string& s_cls() const {return s_class();}
public:
  geo(const edep::volume& a_vol)
  :parent()
  ,m_vol(a_vol)
  {}
  virtual ~geo(){}
public:
  geo(const geo& a_from)
  :parent(a_from)
  ,m_vol(a_from.m_vol)
  {}
  geo& operator=(const geo& a_from){
    parent::operator=(a_from);
    return *this;
  }
public:
  virtual void update_sg(std::ostream& a_out) {
    begin_update_sg(a_out);
    mat4d identity;
    identity.set_identity();
    _vis_volume(a_out,m_vol,identity,0);
    end_update_sg(a_out);
  }

  virtual const std::string& volume_name(const edep::volume& a_vol) const {
    return a_vol.name();
  }

  virtual bool volume_material_color(std::ostream&,const edep::volume& /*a_vol*/,colorf& a_color) {
    a_color = color.value();
/*
    if(a_vol.GetLogicalVolume()) {
      const G4VisAttributes* vatbs =
        a_vol.GetLogicalVolume()->GetVisAttributes();
      if(vatbs) {
        const G4Color& color = vatbs->GetColor();
        float r = (float)color.GetRed();
        float g = (float)color.GetGreen();
        float b = (float)color.GetBlue();
        float a = 1 - (float)color.GetAlpha();
        c.set_value(r,g,b,a);
      }
    }
*/
    return true;
  }

  virtual bool add_shape(std::ostream& a_out,const edep::volume& a_vol,
                         const mat4d& a_matrix,sg::separator& a_sep,bool a_solid) {
    if(!sep_add_shape(a_out,a_sep,a_vol.solid(),a_matrix,a_solid)) {
      a_out << "inlib::edep::geo::add_shape :" 
            << " sep_add_shape failed."
            << " vol " << a_vol.name()
            << std::endl;
       //not fatal.
    } else {
      m_shape_count++;
    }
    return true;
  }

  virtual bool vis_children(std::ostream& a_out,const edep::volume& a_vol,
                            const mat4d& a_matrix,unsigned int a_depth) {  
    inlib_vforcit(edep::volume::placed_volume_t,a_vol.children(),it){
      const edep::volume& vol = *((*it).first);
      mat4d mtx = a_matrix;
      mul_placement(mtx,(*it).second);
      if(!_vis_volume(a_out,vol,mtx,a_depth+1)) return false;
    }
    return true;
  }

protected:

  static void mul_placement(mat4d& a_m,const edep::volume::placement& a_p) {
    a_m.mul_translate(a_p.second.x(),a_p.second.y(),a_p.second.z());
    a_m.mul_rotate(1,0,0,-a_p.first.x());
    a_m.mul_rotate(0,1,0,-a_p.first.y());
    a_m.mul_rotate(0,0,1,-a_p.first.z());
  }

  /////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////
  bool sep_add_shape(std::ostream& a_out,sg::separator& a_sep,
                     const solid& a_solid,const mat4d& a_mtx,bool a_vis_solid) {

    sg::polyhedron* _node = new sg::polyhedron();
    _node->solid = a_vis_solid;
    //_node->reduced_wire_frame = false;

    hep::polyhedron& ph = _node->ph.value();

    if(!solid_set_polyhedron(a_out,a_solid,ph,m_phs/*,m_tess*/)) {
      a_out << "inlib::edep::geo::sep_add_shape :"
            << " shape_set_polyhedron failed for shape " << a_solid.s_cls()
            << std::endl;
      //a_shape.dump(a_out);
      delete _node;
      return false;
    }

    if(m_phs.empty()) {
      hep::tsf_polyhedron(ph,a_mtx);
      a_sep.add(_node);

    } else {
      //a set of hep::polyhedrons from a geo_xtru.
      delete _node;

      inlib_vforcit(hep::polyhedron,m_phs,it) {
        _node = new sg::polyhedron();
        _node->solid = a_vis_solid;
        //_node->reduced_wire_frame = false;
        hep::polyhedron& _ph = _node->ph.value();
        _ph = *it;
        hep::tsf_polyhedron(_ph,a_mtx);
        a_sep.add(_node);
      }
      m_phs.clear();
    }
  
    return true;
  }

protected:
  const edep::volume& m_vol;

  //optimization
  std::vector<hep::polyhedron> m_phs;
};

}}

#endif
