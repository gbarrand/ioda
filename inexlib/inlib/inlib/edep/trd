// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_trd
#define inlib_edep_trd

#include "solid"

namespace inlib {
namespace edep {

class trd : public solid {
public:
  INLIB_SCLASS(inlib::edep::trd)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<trd>(this,a_class)) return p;
    return solid::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return trd_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<trd>(this,a_class)) return p;
    return solid::cast(a_class);
  }
  virtual cid id_cls() const {return id_class();}
public:
  trd(
   double a_dx1
  ,double a_dx2
  ,double a_dy1
  ,double a_dy2
  ,double a_dz
  )
  :m_dx1(a_dx1)
  ,m_dx2(a_dx2)
  ,m_dy1(a_dy1)
  ,m_dy2(a_dy2)
  ,m_dz(a_dz)
  {
  }
  virtual ~trd(){
  }
public:
  trd(const trd& a_from)
  :iobj(a_from)
  ,solid(a_from)
  ,m_dx1(a_from.m_dx1)
  ,m_dx2(a_from.m_dx2)
  ,m_dy1(a_from.m_dy1)
  ,m_dy2(a_from.m_dy2)
  ,m_dz(a_from.m_dz)
  {}
  trd& operator=(const trd& a_from){
    solid::operator=(a_from);
    m_dx1 = a_from.m_dx1;
    m_dx2 = a_from.m_dx2;
    m_dy1 = a_from.m_dy1;
    m_dy2 = a_from.m_dy2;
    m_dz = a_from.m_dz;
    return *this;
  }
public:
  double dx1() const {return m_dx1;}
  double dx2() const {return m_dx2;}
  double dy1() const {return m_dy1;}
  double dy2() const {return m_dy2;}
  double dz() const {return m_dz;}
protected:
  double m_dx1; // half length in X at lower Z surface (-dz)
  double m_dx2; // half length in X at higher Z surface (+dz)
  double m_dy1; // half length in Y at lower Z surface (-dz)
  double m_dy2; // half length in Y at higher Z surface (+dz)
  double m_dz; // half length in Z
};

}}

#endif
