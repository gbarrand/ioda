// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_element
#define inlib_edep_element

#include <string>
#include <ostream>
#include <iomanip>
#include <cmath>

#include "physical_constants"

#ifdef INLIB_MEM
#include "../S_STRING"
#include "../mem"
#endif

#include "ionisation_element"

namespace inlib {
namespace edep {

class element {
#ifdef INLIB_MEM
  INLIB_SCLASS(inlib::edep::element)
#endif
public:
  element(std::ostream& a_err,
          const std::string& a_name,const std::string& a_symbol,
          double a_Z,double a_A)
  :m_name(a_name),m_symbol(a_symbol)
  ,m_Z(0),m_A(0),m_N(0)
  ,m_coulomb(0),m_rad_tsai(0)
  ,m_ionisation(a_err,a_Z)
  {

    /// Constructor to Build an element directly; no reference to isotopes

#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif

    if(a_Z<1.) {
      a_err << "inlib::edep::element:"
            << " " << a_name << " Z= " << a_Z
            << " A= " << a_A/(g/mole) 
            << std::endl; 
      a_err << "inlib::edep::element: ERROR:"
            << " it is not allowed to create an Element with Z < 1."
            << std::endl; 
    }

    int iz = (int)a_Z;
    if(abs<double>(a_Z - iz) > per_million) {
      a_err << "inlib::edep::element:"
            << " " << a_name << " Z= " << a_Z 
  	  << " A= " << a_A/(g/mole) << std::endl; 
      a_err << "inlib::edep::element: WARNING:"
            << " trying to define an element as"
            << " a mixture directly via effective Z."
  	  << std::endl;
    }
  
    m_Z   = a_Z;
    m_A   = a_A;
    m_N   = a_A/(g/mole);
  
    if(m_N < 1.0) m_N = 1.0;
  
    if(m_N < a_Z) {
      a_err << "inlib::edep::element:"
            << " " << a_name << " Z= " << a_Z
            << " A= " << a_A/(g/mole) 
            << std::endl; 
      a_err << "inlib::edep::element: ERROR:"
            << " attempt to create an Element with N < Z !!!"
            << std::endl; 
    }
     
    //fNbOfAtomicShells = G4AtomicShells::GetNumberOfShells(iz);
    //fAtomicShells     = new G4double[fNbOfAtomicShells];
    //for (G4int i=0;i<fNbOfAtomicShells;i++) {
    //  fAtomicShells[i] = G4AtomicShells::GetBindingEnergy(iz, i);
    //}
  
    init_coulomb();
    init_rad_tsai();
    //fZ = G4lrint(fZeff);
  }
  

  virtual ~element(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }

public:
  element(const element& a_from)
  :m_name(a_from.m_name)
  ,m_symbol(a_from.m_symbol)
  ,m_Z(a_from.m_Z)
  ,m_A(a_from.m_A)
  ,m_N(a_from.m_N)
  ,m_coulomb(a_from.m_coulomb)
  ,m_rad_tsai(a_from.m_rad_tsai)
  ,m_ionisation(a_from.m_ionisation)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }

  element& operator=(const element& a_from){
    m_name = a_from.m_name;
    m_symbol = a_from.m_symbol;
    m_Z = a_from.m_Z;
    m_A = a_from.m_A;
    m_N = a_from.m_N;
    m_coulomb = a_from.m_coulomb;
    m_rad_tsai = a_from.m_rad_tsai;
    m_ionisation = a_from.m_ionisation;
    return *this;
  }

public:
  element* copy() const {return new element(*this);}
public:
  const std::string& name() const {return m_name;}
  const std::string& symbol() const {return m_symbol;}
  double Z() const {return m_Z;}
  double N() const {return m_N;}
  double A() const {return m_A;}
  const ionisation_element& ionisation() const {return m_ionisation;}
public: //Geant4 API:
  double GetZ() const {return m_Z;}
  double GetN() const {return m_N;}
public:
  /// Coulomb correction factor:
  double coulomb() const {return m_coulomb;}   
  /// Tsai formula for the radiation length:
  double rad_tsai() const {return m_rad_tsai;}    
public:
  void out(std::ostream& a_out) const{
    std::ios::fmtflags old_flags = a_out.flags();
    std::streamsize old_prec = a_out.precision(3);

    a_out.setf(std::ios::fixed,std::ios::floatfield);
    
    a_out
      << " Element: " << m_name   << " (" << m_symbol << ")"
      << "   Z = " << std::setw(4) << std::setprecision(1) <<  m_Z 
      << "   N = " << std::setw(5) << std::setprecision(1) <<  m_N
      << "   A = " << std::setw(6) << std::setprecision(2)
                   << m_A/(g/mole) << " g/mole";
     
  /*
    for (size_t i=0; i<element->fNumberOfIsotopes; i++)
    flux 
      << "\n   ---> " << (*(element->theIsotopeVector))[i] 
      << "   abundance: " << std::setw(6) << std::setprecision(2) 
      << (element->fRelativeAbundanceVector[i])/perCent << " %";
  */
    
    a_out.precision(old_prec);    
    a_out.flags(old_flags);
  }
  
protected:
  void init_coulomb(){
    /// Compute Coulomb correction factor (Phys Rev. D50 3-1 (1994) page 1254)
    const double k1 = 0.0083 , k2 = 0.20206 ,k3 = 0.0020 , k4 = 0.0369 ;

    double az2 = (fine_structure_const*m_Z)*(fine_structure_const*m_Z);
    double az4 = az2 * az2;

    m_coulomb = (k1*az4 + k2 + 1./(1.+az2))*az2 - (k3*az4 + k4)*az4;
  }

  void init_rad_tsai(){
    // Compute Tsai's Expression for the
    // Radiation Length (Phys Rev. D50 3-1 (1994) page 1254)

    const double Lrad_light[]  = {5.31  , 4.79  , 4.74 ,  4.71} ;
    const double Lprad_light[] = {6.144 , 5.621 , 5.805 , 5.924} ;
  
    const double logZ3 = ::log(m_Z)/3.;

    double Lrad, Lprad;
    int iz = (int)(m_Z+0.5) - 1 ;
    if (iz <= 3) { 
      Lrad = Lrad_light[iz] ;  Lprad = Lprad_light[iz] ; 
    } else { 
      Lrad = ::log(184.15) - logZ3 ; Lprad = ::log(1194.) - 2*logZ3;
    }

    m_rad_tsai = 4*alpha_rcl2*m_Z*(m_Z*(Lrad-m_coulomb) + Lprad); 
  }

  template <class T>
  static T abs(const T& a_v){return a_v < 0 ? -a_v : a_v;}

protected:
  std::string m_name;
  std::string m_symbol;
  double m_Z;              // Effective atomic number
  double m_A;              // Effective mass of a mole
  double m_N;              // Effective number of nucleons    
  // derived data members :
  double m_coulomb;        // Coulomb correction factor
  double m_rad_tsai;       // Tsai formula for the radiation length
  ionisation_element m_ionisation;
};

inline std::ostream& operator<<(std::ostream& a_out,const element& a_elem){
  a_elem.out(a_out);
  return a_out;
}

}}

#endif
