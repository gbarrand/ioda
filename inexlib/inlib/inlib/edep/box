// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_box
#define inlib_edep_box

/// A box is a cuboid of given half lengths dx,dy,dz. The box is
/// centred on the origin with sides parallel to the x/y/z axes.

#include "solid"

#include <cmath> //fabs.

namespace inlib {
namespace edep {

class box : public solid {
  typedef solid parent;
public:
  INLIB_SCLASS(inlib::edep::box)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<box>(this,a_class)) return p;
    return parent::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return box_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<box>(this,a_class)) return p;
    return parent::cast(a_class);
  }
  virtual cid id_cls() const {return id_class();}
public:
  box(double a_dx,double a_dy,double a_dz)
  :m_dx(a_dx)
  ,m_dy(a_dy)
  ,m_dz(a_dz)
  {}
  virtual ~box(){}
public:
  box(const box& a_from)
  :iobj(a_from)
  ,parent(a_from)
  ,m_dx(a_from.m_dx)
  ,m_dy(a_from.m_dy)
  ,m_dz(a_from.m_dz)
  {}
  box& operator=(const box& a_from){
    parent::operator=(a_from);
    m_dx = a_from.m_dx;
    m_dy = a_from.m_dy;
    m_dz = a_from.m_dz;
    return *this;
  }
public:
  double dx() const {return m_dx;}
  double dy() const {return m_dy;}
  double dz() const {return m_dz;}
public:
  pos_type inside(double a_x,double a_y,double a_z,double a_car) const {
    pos_type _pos = pos_outside ;
    
    double q_x = std::fabs(a_x);
    double q_y = std::fabs(a_y);
    double q_z = std::fabs(a_z);
    
    double delta = 0.5*a_car;

    if ( q_x <= (m_dx - delta) ) {
      if (q_y <= (m_dy - delta) ) {
        if      ( q_z <= (m_dz - delta) ) { _pos = pos_inside ;  }
        else if ( q_z <= (m_dz + delta) ) { _pos = pos_surface ; }
      } else if ( q_y <= (m_dy + delta) ) {
        if ( q_z <= (m_dz + delta) ) { _pos = pos_surface ; }
      }
    } else if ( q_x <= (m_dx + delta) ) {
      if ( q_y <= (m_dy + delta) ) {
        if ( q_z <= (m_dz + delta) ) { _pos = pos_surface ; }
      }
    }
    return _pos;
  }

protected:
  double m_dx;
  double m_dy;
  double m_dz;
};

}}

#endif
