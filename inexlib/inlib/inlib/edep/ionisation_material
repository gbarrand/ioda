// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_ionisation_material
#define inlib_edep_ionisation_material

#include "element"

#ifdef INLIB_MEM
#include "../mem"
#endif

namespace inlib {
namespace edep {

class ionisation_material {
#ifdef INLIB_MEM
  INLIB_SCLASS(inlib::edep::ionisation_material)
#endif
public:
  ionisation_material(const std::vector<element*>& a_elems,
                      const std::vector<double>& a_atoms_per_volume)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    /*
    fBirks = 0.;
    fMeanEnergyPerIon = 0.0;
    twoln10 = 2.*G4Pow::GetInstance()->logZ(10);

    // minimal set of default parameters for density effect
    fCdensity = 0.0;
    fD0density = 0.0;
    fAdjustmentFactor = 1.0;
    if(fDensityData == nullptr) { fDensityData = new G4DensityEffectData(); }

    // compute parameters
    ComputeMeanParameters();
    ComputeDensityEffect();
    ComputeFluctModel();
    */
    compute_ion_params(a_elems,a_atoms_per_volume);
  }
  virtual ~ionisation_material() {
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  ionisation_material(const ionisation_material& a_from)
  :fZeff(a_from.fZeff)
  ,fFermiEnergy(a_from.fFermiEnergy)
  ,fLfactor(a_from.fLfactor)
  ,fInvA23(a_from.fInvA23)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  ionisation_material& operator=(const ionisation_material& a_from) {
    fZeff = a_from.fZeff;
    fFermiEnergy = a_from.fFermiEnergy;
    fLfactor = a_from.fLfactor;
    fInvA23 = a_from.fInvA23;
    return *this;
  }
public:
  double Z_effective() const {return fZeff;};
public: //Geant4 API:  
  double GetZeffective() const {return fZeff;};
protected:  
  void compute_ion_params(const std::vector<element*>& a_elems,const std::vector<double>& a_atoms_per_volume) {
    // get elements in the actual material,
    size_t NumberOfElements = a_elems.size();

    //  loop for the elements in the material
    //  to find out average values Z, vF, lF
    double z(0.0), vF(0.0), lF(0.0), norm(0.0), a23(0.0);
    
    if( 1 == NumberOfElements ) {
      const element* _element = a_elems[0];
      z = _element->Z();
      vF= _element->ionisation().fermi_velocity();
      lF= _element->ionisation().LFactor();
      a23 = 1.0/s_g4pow().A23(_element->N());

    } else {
      for (size_t iel=0; iel<NumberOfElements; iel++)
        {
          const element* _element = a_elems[iel];
          const double weight = a_atoms_per_volume[iel];
          norm += weight ;
          z    += _element->Z() * weight;
          vF   += _element->ionisation().fermi_velocity() * weight;
          lF   += _element->ionisation().LFactor() * weight;
          a23  += weight/s_g4pow().A23(_element->N());
        }
      z  /= norm;
      vF /= norm;
      lF /= norm;
      a23 /= norm;
    }  
    fZeff        = z;
    fLfactor     = lF;
    fFermiEnergy = 25.*keV*vF*vF;
    fInvA23      = a23;
  }
protected:
/*  
  // parameters for mean energy loss calculation
  double  fMeanExcitationEnergy;          // 
  double  fLogMeanExcEnergy;              // 
  double* fShellCorrectionVector;         // shell correction coefficients
  double  fTaul;                          // lower limit of Bethe-Bloch formula

  // parameters of the density correction
  double fCdensity;                      // mat.constant
  double fMdensity;                      // exponent
  double fAdensity;                      //
  double fX0density;                     //
  double fX1density;                     //
  double fD0density;

  double fPlasmaEnergy;
  double fAdjustmentFactor;

  // parameters of the energy loss fluctuation model
  double fF1fluct;                       
  double fF2fluct;                       
  double fEnergy1fluct;
  double fLogEnergy1fluct;
  double fEnergy2fluct;
  double fLogEnergy2fluct;
  double fEnergy0fluct;
  double fRateionexcfluct;
*/
  // parameters for ion corrections computations
  double fZeff;
  double fFermiEnergy;
  double fLfactor;
  double fInvA23;
    
  /*
  // parameter for Birks attenuation
  double fBirks;
  // average energy per ion pair
  double fMeanEnergyPerIon;

  // static data created only once
  static G4DensityEffectData* fDensityData;
  double twoln10;
*/  
};

}}

#endif
