// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_edep_volume
#define inlib_edep_volume

namespace inlib {namespace edep {class solid;}}
namespace inlib {namespace edep {class material;}}

#include "../vec3d"
#include "../S_STRING"

#include <vector>

#ifdef INLIB_MEM
#include "../S_STRING"
#include "../mem"
#endif

namespace inlib {
namespace edep {

class volume {
#ifdef INLIB_MEM
  INLIB_SCLASS(inlib::edep::volume)
#endif
public:
  volume(const std::string& a_name,edep::solid& a_solid,edep::material& a_mat)
  :m_name(a_name),m_solid(a_solid),m_material(a_mat)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~volume(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  volume(const volume& a_from)
  :m_name(a_from.m_name)
  ,m_solid(a_from.m_solid)
  ,m_material(a_from.m_material)
  ,m_children(a_from.m_children)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  volume& operator=(const volume& a_from){
    m_name = a_from.m_name;
    m_children = a_from.m_children;
    return *this;
  }
public:
  const std::string& name() const {return m_name;}

  const edep::solid& solid() const {return m_solid;}
  edep::solid& solid() {return m_solid;}

  const edep::material& material() const {return m_material;}
  edep::material& material() {return m_material;}

  void add(volume* a_volume,
           const vec3d& a_rot = vec3d(),
           const vec3d& a_trans = vec3d()) {
    m_children.push_back
      (std::pair<volume*,placement>(a_volume,placement(a_rot,a_trans)));
  }

  typedef std::pair<vec3d,vec3d> placement;
  typedef std::pair<volume*,placement> placed_volume_t;
  typedef std::vector<placed_volume_t> children_t;
  const children_t& children() const {return m_children;}

protected:
  std::string m_name;
  edep::solid& m_solid;
  edep::material& m_material;
  //NOTE : not owner of the sub volumes.
  children_t m_children;
};

}}

/*
inline std::ostream& operator<<(std::ostream& a_out,const inlib::edep::volume& a_volume){
  a_volume.out(a_out);
  return a_out;
}
*/

#endif
