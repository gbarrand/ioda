// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_Windows_timer
#define exlib_Windows_timer

#include <windows.h>
#include <string>

namespace exlib {
namespace Windows {

class timer {
  static const std::string& s_class() {
    static const std::string s_v("exlib::Windows::timer");
    return s_v;
  }
  static void register_class(){
    static bool s_done = false; //not const, then not thread safe.
    if(!s_done) {
      WNDCLASS         wc;
      wc.style         = CS_HREDRAW | CS_VREDRAW;
      wc.lpfnWndProc   = (WNDPROC)DefWindowProc;
      wc.cbClsExtra    = 0;
      wc.cbWndExtra    = 0;
      wc.hInstance     = ::GetModuleHandle(NULL);
      wc.hIcon         = LoadIcon(NULL,IDI_APPLICATION);
      wc.hCursor       = LoadCursor(NULL,IDC_ARROW);
      wc.hbrBackground = GetSysColorBrush(COLOR_BTNFACE);
      wc.lpszMenuName  = s_class().c_str();
      wc.lpszClassName = s_class().c_str();
      ::RegisterClass(&wc);
      s_done = true;
    }
  }
public:
  virtual void execute() {}
public:
  timer(UINT a_delay) //millisecs.
  :m_delay(a_delay)
  ,m_hwnd(0)
  ,m_id(1)
  ,m_started(false)
  {
    register_class();
    m_hwnd = ::CreateWindow(s_class().c_str(),"exlib_Windows_timer",
                              WS_OVERLAPPEDWINDOW,
                              0,0,100,100,
                              NULL,NULL,
                              ::GetModuleHandle(NULL),
                              NULL);
    if(m_hwnd) ::SetWindowLongPtr(m_hwnd,GWLP_USERDATA,LONG_PTR(this));
  }

  virtual ~timer() {
    stop();
    if(m_hwnd) {
      ::SetWindowLongPtr(m_hwnd,GWLP_USERDATA,LONG_PTR(NULL));
      ::DestroyWindow(m_hwnd);
      m_hwnd = 0;
    }
  }
protected:
  timer(const timer&){}
  timer& operator=(const timer&){return *this;}
public:
  void start() {
    stop();
    if(!m_delay) return;
    if(!m_hwnd) return;
    if(!::SetTimer(m_hwnd,m_id,m_delay,(TIMERPROC)timer_proc)) return;
    m_started = true;
  }
  void stop() {if(m_hwnd) ::KillTimer(m_hwnd,m_id);m_started = false;}
  bool started() const {return m_started;}
  UINT delay() const {return m_delay;}
protected:
  static void CALLBACK timer_proc(HWND a_hwnd,UINT,UINT_PTR,DWORD) {
    timer* _this = (timer*)::GetWindowLongPtr(a_hwnd,GWLP_USERDATA);
    if(!_this) return;
    _this->execute();
  }
protected:
  UINT m_delay; //millisecs
  HWND m_hwnd;
  UINT_PTR m_id;
  bool m_started;
};

}}

//exlib_build_use Windows

#endif

