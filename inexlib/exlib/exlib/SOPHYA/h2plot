// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_SOPHYA_h2plot
#define exlib_SOPHYA_h2plot

// Connexion SOPHYA/Histo to sg/plotter.

#include <inlib/sg/plottables>

#include <histos.h>

#include <inlib/words>
#include <inlib/num2s>
#include <inlib/forit>

#ifdef INLIB_MEM
#include <inlib/mem>
#endif

namespace exlib {
namespace SOPHYA {

class h1d2plot : public virtual inlib::sg::bins1D {
  static const std::string& s_empty() {
    static const std::string s_v("");
    return s_v;
  }
public:
  INLIB_SCLASS(exlib::SOPHYA::h1d2plot)
public:
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<h1d2plot>(this,a_class)) return p;
    return bins1D::cast(a_class);
  }
public: //plottable
  virtual plottable* copy() const {return new h1d2plot(*this);}
  virtual bool is_valid() const {return true;}
  virtual const std::string& name() const {return m_name;}
  virtual void set_name(const std::string& a_s) {m_name = a_s;}
  virtual const std::string& legend() const {return m_legend;}
  virtual void set_legend(const std::string&){}
  virtual bool is_profile() const {return false;}
public:
  virtual const std::string& title() const {return s_empty();}
public: //bins1D
  virtual void bins_Sw_range(float& a_mn,float& a_mx) const {
    a_mn = (float)m_data.VMin();
    a_mx = (float)m_data.VMax();
  }
  virtual unsigned int bins() const {return m_data.NBins();}
  virtual float axis_min() const {
    return (float)m_data.XMin();
  }
  virtual float axis_max() const {
    return (float)m_data.XMax();
  }
  virtual float bin_lower_edge(int aI) const {
    return (float)m_data.BinLowEdge(aI);
  }
  virtual float bin_upper_edge(int aI) const {
    return (float)m_data.BinHighEdge(aI);
  }

  virtual float bin_Sw(int aI) const {
    return (float)m_data(aI);
  }

  virtual float bin_error(int aI) const {
    return (float)m_data.Error(aI);
  }

  virtual void infos(const std::string& a_opts,std::string& a_sinfos) const {
    a_sinfos.clear();
    std::string f_lf("\n");
    std::vector<std::string> words;
    inlib::words(a_opts," ",false,words);

    inlib_vforcit(std::string,words,it) {
      if(((*it)=="name") && m_name.size()) {
        if(a_sinfos.size()) a_sinfos += f_lf;
        a_sinfos += "Name\n";
        a_sinfos += m_name;
  
      } else if((*it)=="entries") {
        if(a_sinfos.size()) a_sinfos += f_lf;
        a_sinfos += "Entries\n";
        if(!inlib::numas<inlib::uint64>(m_data.NEntries()/*+m_data.NUnder()+m_data.NOver()*/,a_sinfos)){}
  
      } else if((*it)=="mean") {
        if(a_sinfos.size()) a_sinfos += f_lf;
        a_sinfos += "Mean\n";
        if(!inlib::numas<double>(m_data.Mean(),a_sinfos)){}
  
      } else if((*it)=="rms") {
        if(a_sinfos.size()) a_sinfos += f_lf;
        a_sinfos += "RMS\n";
        if(!inlib::numas<double>(m_data.Sigma(),a_sinfos)){}
  
      } else if((*it)=="underflow") {
        if(a_sinfos.size()) a_sinfos += f_lf;
        a_sinfos += "UDFLW\n";
        if(!inlib::numas<double>(m_data.NUnder(),a_sinfos)){}
  
      } else if((*it)=="overflow") {
        if(a_sinfos.size()) a_sinfos += f_lf;
        a_sinfos += "OVFLW\n";
        if(!inlib::numas<double>(m_data.NOver(),a_sinfos)){}
    
      }
    }
  }
  
public:
  h1d2plot(const ::SOPHYA::Histo& a_data)
  :m_data(a_data)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~h1d2plot(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
protected:
  h1d2plot(const h1d2plot& a_from)
  :plottable(a_from),bins1D(a_from)
  ,m_data(a_from.m_data)
  ,m_name(a_from.m_name)
  ,m_legend(a_from.m_legend)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }  
  h1d2plot& operator=(const h1d2plot& a_from){
    m_name = a_from.m_name;
    m_legend = a_from.m_legend;
    return *this;
  }
private:
  const ::SOPHYA::Histo& m_data;
  std::string m_name;
  std::string m_legend;
};

class h1d2plot_cp : public h1d2plot {
public:
  INLIB_SCLASS(exlib::SOPHYA::h1d2plot_cp)
public:
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<h1d2plot_cp>(this,a_class)) {return p;}
    return h1d2plot::cast(a_class);
  }
public:
  virtual plottable* copy() const {return new h1d2plot_cp(*this);}
public:
  h1d2plot_cp(const ::SOPHYA::Histo& a_data)
  :h1d2plot(m_cp) //give ref of m_cp to h1d2plot.
  ,m_cp(a_data)   //do a local copy.
  //WARNING : the upper is ok as long as h1d2plot constructor does nothing
  //          else than keeping the ref to m_cp. Else it would do
  //          something on an empty histo (and not on a copy of the
  //          passed a_data).
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~h1d2plot_cp(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  h1d2plot_cp(const h1d2plot_cp& a_from)
  :plottable(a_from)
  ,bins1D(a_from)
  ,h1d2plot(m_cp)
  ,m_cp(a_from.m_cp)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }  
  h1d2plot_cp& operator=(const h1d2plot_cp& a_from){
    h1d2plot::operator=(a_from);    
    m_cp = a_from.m_cp;
    return *this;
  }
public:
  const ::SOPHYA::Histo& data() const {return m_cp;}
  ::SOPHYA::Histo& data() {return m_cp;}
protected:
  ::SOPHYA::Histo m_cp;
};

}}

#endif

//exlib_build_use inlib SOPHYA

