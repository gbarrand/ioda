// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_edep_rgdml
#define exlib_edep_rgdml

#include "../xml/base_gdml"

#include <inlib/edep/material>
#include <inlib/edep/volume>
#include <inlib/edep/boolean>

#include <inlib/edep/box>
#include <inlib/edep/tubs>
#include <inlib/edep/trap>
#include <inlib/edep/cone>
#include <inlib/edep/trd>
#include <inlib/edep/pcon>

typedef inlib::edep::element _edep_element;
typedef inlib::edep::material _edep_material;
typedef inlib::edep::solid _edep_solid;
typedef inlib::edep::volume _edep_logical_volume;
typedef inlib::edep::volume _edep_physical_volume;

class _edep_assembly_volume;
class _edep_optical_surface;
class _edep_surface_property;
class _edep_logical_surface;

namespace exlib {
namespace edep {

class rgdml
:public xml::base_gdml 
<_edep_element
,_edep_material
,_edep_logical_volume
,_edep_physical_volume
,_edep_assembly_volume
,_edep_optical_surface
,_edep_surface_property
,_edep_logical_surface
,_edep_solid>
{

  typedef xml::base_gdml 
<_edep_element
,_edep_material
,_edep_logical_volume
,_edep_physical_volume
,_edep_assembly_volume
,_edep_optical_surface
,_edep_surface_property
,_edep_logical_surface
,_edep_solid> parent;

protected:
  inlib::edep::material::state_e cvt_state(mat_state a_state) {
    switch(a_state){
    case mat_state_undefined:return inlib::edep::material::undefined;
    case mat_state_solid:return inlib::edep::material::solid;
    case mat_state_liquid:return inlib::edep::material::liquid;
    case mat_state_gas:return inlib::edep::material::gas;
    }
    return inlib::edep::material::undefined;
  }

  inlib::edep::boolean::op_type cvt_op_type(op_type a_op) {
    switch(a_op){
    case op_union:return inlib::edep::boolean::op_union;
    case op_intersection:return inlib::edep::boolean::op_intersection;
    case op_subtraction:return inlib::edep::boolean::op_subtraction;
    }
    return inlib::edep::boolean::op_union;
  }

  static double u_g() {return inlib::edep::g;}
  static double u_mg() {return inlib::edep::mg;}
  static double u_cm3() {return inlib::edep::cm3;}
  static double u_mole() {return inlib::edep::mole;}
  static double u_kelvin() {return inlib::edep::kelvin;}
  static double u_pascal() {return inlib::edep::Pa;}

public:
  INLIB_SCLASS(exlib::edep::rgdml)
public:
  virtual _edep_element* create_element(const std::string& a_name,
                                    const std::string& a_symbol,
                                    double  a_Zeff,
                                    double  a_Aeff){
    return
      new inlib::edep::element(parent::m_out,a_name,a_symbol,a_Zeff,a_Aeff);
  }

  INLIB_CLASS_STRING(G4_lH2)
  INLIB_CLASS_STRING(G4_Al)

  INLIB_CLASS_STRING(G4_Fe)
  INLIB_CLASS_STRING(G4_Cu)
  INLIB_CLASS_STRING(G4_Galactic)

  INLIB_CLASS_STRING(nitrogen)
  INLIB_CLASS_STRING(oxigen)
  INLIB_CLASS_STRING(G4_AIR)

  INLIB_CLASS_STRING(G4_MYLAR)

  virtual _edep_material* find_material(const std::string& a_name){
    if(a_name==s_G4_lH2()){
     {std::map<std::string,_edep_material*>::const_iterator it =
        m_find_mats.find(s_G4_lH2());
      if(it!=m_find_mats.end()) return (*it).second;}

      _edep_material* mat = new inlib::edep::material(parent::m_out,
                       s_G4_lH2(),
                       0.0708*u_g()/u_cm3(),
                       inlib::edep::material::undefined,
                       inlib::edep::STP_temperature,
                       inlib::edep::STP_pressure,
                       1,1.008*u_g()/u_mole());
      m_find_mats[s_G4_lH2()] = mat;
      return mat;

    } else if(a_name==s_G4_Al()){
     {std::map<std::string,_edep_material*>::const_iterator it =
        m_find_mats.find(s_G4_Al());
      if(it!=m_find_mats.end()) return (*it).second;}

      _edep_material* mat = new inlib::edep::material(parent::m_out,
                       s_G4_Al(),
                       2.700*u_g()/u_cm3(),
                       inlib::edep::material::undefined,
                       inlib::edep::STP_temperature,
                       inlib::edep::STP_pressure,
                       13,26.98*u_g()/u_mole());
      m_find_mats[s_G4_Al()] = mat;
      return mat;

    } else if(a_name==s_G4_Fe()){
     {std::map<std::string,_edep_material*>::const_iterator it =
        m_find_mats.find(s_G4_Fe());
      if(it!=m_find_mats.end()) return (*it).second;}

      _edep_material* mat = new inlib::edep::material(parent::m_out,
                       s_G4_Fe(),
                       7.87*u_g()/u_cm3(),
                       inlib::edep::material::undefined,
                       inlib::edep::STP_temperature,
                       inlib::edep::STP_pressure,
                       26,55.85*u_g()/u_mole());
      m_find_mats[s_G4_Fe()] = mat;
      return mat;

    } else if(a_name==s_G4_Cu()){
     {std::map<std::string,_edep_material*>::const_iterator it =
        m_find_mats.find(s_G4_Cu());
      if(it!=m_find_mats.end()) return (*it).second;}

      _edep_material* mat = new inlib::edep::material(parent::m_out,
                       s_G4_Cu(),
                       8.96*u_g()/u_cm3(),
                       inlib::edep::material::undefined,
                       inlib::edep::STP_temperature,
                       inlib::edep::STP_pressure,
                       29,63.55*u_g()/u_mole());
      m_find_mats[s_G4_Cu()] = mat;
      return mat;

    } else if(a_name==s_G4_Galactic()){
     {std::map<std::string,_edep_material*>::const_iterator it =
        m_find_mats.find(s_G4_Galactic());
      if(it!=m_find_mats.end()) return (*it).second;}

      _edep_material* mat = new inlib::edep::material(parent::m_out,
                       s_G4_Galactic(),
                       inlib::edep::universe_mean_density,
                       inlib::edep::material::gas,
                       2.73*u_kelvin(),
                       3.e-18*u_pascal(),
                       1,1.01*u_g()/u_mole());
      m_find_mats[s_G4_Galactic()] = mat;
      return mat;

    } else if(a_name==s_G4_AIR()){
     {std::map<std::string,_edep_material*>::const_iterator it =
        m_find_mats.find(s_G4_AIR());
      if(it!=m_find_mats.end()) return (*it).second;}

      std::vector< std::pair<_edep_material*,double> > mat_fracs;
      std::vector< std::pair<_edep_element*,double> > elem_fracs;
      std::vector< std::pair<_edep_element*,int> > elem_ns;

      inlib::edep::element* N =
        new inlib::edep::element(parent::m_out,s_nitrogen(),"N",
                                 7,14.01*u_g()/u_mole());
      inlib::edep::element* O =
        new inlib::edep::element(parent::m_out,s_oxigen(),"O",
                                 8,16.00*u_g()/u_mole());
      elem_fracs.push_back(std::pair<_edep_element*,double>(N,0.7));
      elem_fracs.push_back(std::pair<_edep_element*,double>(O,0.3));

      _edep_material* mat = new inlib::edep::material(parent::m_out,s_G4_AIR(),
                          1.29*u_mg()/u_cm3(),
                          inlib::edep::material::undefined,
                          inlib::edep::STP_temperature,
                          inlib::edep::STP_pressure,
                          mat_fracs,elem_fracs,elem_ns);
      m_find_mats[s_G4_AIR()] = mat;
      m_find_elems[s_nitrogen()] = N;
      m_find_elems[s_oxigen()] = O;
      return mat;

    } else if(a_name==s_G4_MYLAR()){
     {std::map<std::string,_edep_material*>::const_iterator it =
        m_find_mats.find(s_G4_MYLAR());
      if(it!=m_find_mats.end()) return (*it).second;}

      _edep_material* mat = new inlib::edep::material(parent::m_out,
                       s_G4_MYLAR(),
                       2.700*u_g()/u_cm3(),
                       inlib::edep::material::undefined,
                       inlib::edep::STP_temperature,
                       inlib::edep::STP_pressure,
                       13,26.98*u_g()/u_mole());
      m_find_mats[s_G4_MYLAR()] = mat;
      return mat;

    } else {
      parent::m_out << "exlib::edep::rgdml::find_material :"
                    << " " << a_name << " not found."
                    << std::endl;
      return 0;
    }

/* from G4NistMaterialBuilder :
  AddMaterial("G4_lH2", 0.0708,  1,  21.8, 1, kStateLiquid, false);
  AddMaterial("G4_lN2", 0.807,   7,  82.,  1, kStateLiquid, false);
  AddMaterial("G4_lO2", 1.141,   8,  95.,  1, kStateLiquid, false);
  AddMaterial("G4_lAr", 1.396 , 18, 188. , 1, kStateLiquid, false);
  AddMaterial("G4_lKr", 2.418 , 36, 352. , 1, kStateLiquid, false);
  AddMaterial("G4_lXe", 2.953 , 54, 482. , 1, kStateLiquid, false);
  void AddMaterial(const G4String& nameMat, G4double dens, G4int Z=0,
		   G4double pot=0.0, G4int ncomp=1,
		   G4State=kStateSolid, G4bool stp = true);
*/
  }

  virtual _edep_material* create_material(const std::string& a_name,
                                      double  a_density,
                                      mat_state a_state,
                                      double  a_temp,
                                      double  a_pressure,
                                      double  a_z,
                                      double  a_a){
    return new inlib::edep::material(parent::m_out,a_name,
                          a_density,cvt_state(a_state),a_temp,a_pressure,
                          a_z,a_a);
  }

  virtual _edep_material* create_material(const std::string& a_name,
                                      double a_density,
                                      mat_state a_state,
                                      double a_temp,
                                      double a_pressure,
     const std::vector< std::pair<_edep_material*,double> >& a_mat_fracs,
     const std::vector< std::pair<_edep_element*,double> >& a_elem_fracs,
     const std::vector< std::pair<_edep_element*,int> >& a_elem_ns){
    return new inlib::edep::material(parent::m_out,a_name,
                          a_density,cvt_state(a_state),a_temp,a_pressure,
                          a_mat_fracs,a_elem_fracs,a_elem_ns);
  }

  virtual void material_set_MEE(_edep_material& /*a_material*/,double /*a_value*/){
    parent::m_out << "exlib::edep::rgdml::material_set_MEE : dummy." << std::endl;
  }

  virtual void material_add_property(_edep_material& /*a_material*/,
                                     const std::string& /*a_name*/,
                                     double /*a_value*/){
    parent::m_out << "exlib::edep::rgdml::material_add_property : dummy." << std::endl;
  }
  virtual void material_add_property(_edep_material& /*a_material*/,
                                     const std::string& /*a_name*/,
                 const std::vector< std::pair<double,double> >& /*a_vals*/){
    parent::m_out << "exlib::edep::rgdml::material_add_property : dummy." << std::endl;
  }

  virtual bool solid_name(const _edep_solid&,std::string& a_s) const {
    parent::m_out << "exlib::edep::rgdml::solid_name : dummy." << std::endl;
    a_s.clear();
    return false;
  }
  virtual bool volume_name(const _edep_logical_volume& a_volume,std::string& a_s) const {
    a_s = a_volume.name();
    return true;
  }

  virtual _edep_solid* create_box(const std::string&,
                               double a_dx,double a_dy,double a_dz){
    return new inlib::edep::box(a_dx,a_dy,a_dz);
  }
  virtual _edep_solid* create_tube(const std::string&,
                                double a_rmin,double a_rmax,
                                double a_dz,
                                double a_phi,double a_dphi){
    return new inlib::edep::tubs(a_rmin,a_rmax,a_dz,a_phi,a_dphi);
  }
  virtual _edep_solid* create_elliptical_tube(const std::string& /*a_name*/,
                                  double /*a_dx*/,double /*a_dy*/,double /*a_dz*/){
    parent::m_out << "exlib::edep::rgdml::create_elliptical_tube : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_ellipsoid(const std::string& /*a_name*/,
                                     double /*a_ax*/,double /*a_by*/,double /*a_cz*/,
                                     double /*a_zcut1*/,double /*a_zcut2*/){
    parent::m_out << "exlib::edep::rgdml::create_ellipsoid : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_sphere(const std::string& /*a_name*/,
                                  double /*a_rmin*/,double /*a_rmax*/,
                                  double /*a_phi*/,double /*a_dphi*/,
                                  double /*a_theta*/,double /*a_dtheta*/){
    parent::m_out << "exlib::edep::rgdml::create_sphere : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_cone(const std::string& /*a_name*/,
                                double a_rmin1,double a_rmax1,
                                double a_rmin2,double a_rmax2,
                                double a_z,
                                double a_phi,double a_dphi){
    return new inlib::edep::cone(a_rmin1,a_rmax1,
                                 a_rmin2,a_rmax2,
                                 a_z,
                                 a_phi,a_dphi);
  }
  virtual _edep_solid* create_torus(const std::string& /*a_name*/,
                                 double /*a_rmin*/,double /*a_rmax*/,
                                 double /*a_rtor*/,
                                 double /*a_phi*/,double /*a_dphi*/){
    parent::m_out << "exlib::edep::rgdml::create_torus : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_elliptical_cone(const std::string& /*a_name*/,
                                           double /*a_dx*/,double /*a_dy*/,
                                           double /*a_zmax*/,double /*a_zcut*/){
    parent::m_out << "exlib::edep::rgdml::create_elliptical_cone : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_hype(const std::string& /*a_name*/,
                                double /*a_rmin*/,double /*a_rmax*/,
                                double /*a_inst*/,double /*a_outst*/,
                                double /*a_z*/){
    parent::m_out << "exlib::edep::rgdml::create_hype : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_orb(const std::string& /*a_name*/,
                                double /*a_r*/){
    parent::m_out << "exlib::edep::rgdml::create_orb : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_para(const std::string& /*a_name*/,
                               double /*a_x*/,double /*a_y*/,double /*a_z*/,
                               double /*a_alpha*/,double /*a_theta*/,double /*a_phi*/){
    parent::m_out << "exlib::edep::rgdml::create_para : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_paraboloid(const std::string& /*a_name*/,
                               double /*a_dz*/,double /*a_rlo*/,double /*a_rhi*/){
    parent::m_out << "exlib::edep::rgdml::create_paraboloid : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_tet(const std::string& /*a_name*/,
                               const inlib::vec3d& /*a_anchor*/,
                               const inlib::vec3d& /*a_p2*/,
                               const inlib::vec3d& /*a_p3*/,
                               const inlib::vec3d& /*a_p4*/){
    parent::m_out << "exlib::edep::rgdml::create_tet : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_generic_trap(const std::string& /*a_name*/,
                                        double /*a_dz*/,
                                        const double /*a_p*/[16]){
    parent::m_out << "exlib::edep::rgdml::create_generic_trap : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_trap(const std::string& /*a_name*/,
                                double a_z,
                                double a_theta,double a_phi,
                                double a_y1,double a_x1,double a_x2,
                                double a_alpha1,
                                double a_y2,double a_x3,double a_x4,
                                double a_alpha2){
    return new inlib::edep::trap(a_theta,a_phi,
                                 a_y1,a_x1,a_x2,
                                 a_alpha1,
                                 a_y2,a_x3,a_x4,
                                 a_alpha2,a_z);
  }
  virtual _edep_solid* create_trd(const std::string& /*a_name*/,
                                  double a_x1,double a_x2,
                                  double a_y1,double a_y2,
                                  double a_z){
    return new inlib::edep::trd(a_x1,a_x2,a_y1,a_y2,a_z);
  }
  virtual _edep_solid* create_twisted_box(const std::string& /*a_name*/,
                                       double /*a_phi_twist*/,
                                       double /*a_x*/,double /*a_y*/,double /*a_z*/){
    parent::m_out << "exlib::edep::rgdml::create_twisted_box : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_twisted_trap(const std::string& /*a_name*/,
                                        double /*a_phi_twist*/,
                                        double /*a_z*/,
                                        double /*a_theta*/,double /*a_phi*/,
                                        double /*a_y1*/,double /*a_x1*/,double /*a_x2*/,
                                        double /*a_y2*/,double /*a_x3*/,double /*a_x4*/,
                                        double /*a_alpha*/){
    parent::m_out << "exlib::edep::rgdml::create_twisted_trap : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_twisted_trd(const std::string& /*a_name*/,
                                       double /*a_x1*/,double /*a_x2*/,
                                       double /*a_y1*/,double /*a_y2*/,
                                       double /*a_z*/,
                                       double /*a_phi_twist*/){
    parent::m_out << "exlib::edep::rgdml::create_twisted_trd : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_twisted_tubs(const std::string& /*a_name*/,
                                        double /*a_twisted_angle*/,
                                        double /*a_end_inner_rad*/, 
                                        double /*a_end_outer_rad*/, 
                                        double /*a_zlen*/,
                                        double /*a_phi*/){
    parent::m_out << "exlib::edep::rgdml::create_twisted_tubs : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_cut_tubs(const std::string& /*a_name*/,
                                    double /*a_rmin*/,double /*a_rmax*/,
                                    double /*a_z*/,
                                    double /*a_phi*/,double /*a_dphi*/,
                            double /*a_lowX*/,double /*a_lowY*/,double /*a_lowZ*/,
                            double /*a_highX*/,double /*a_highY*/,double /*a_highZ*/){
    parent::m_out << "exlib::edep::rgdml::create_cut_tubs : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_reflected_solid(const std::string& /*a_name*/,
                                           _edep_solid* /*a_solid*/,
                                      double /*a_rx*/,double /*a_ry*/,double /*a_rz*/,
                                      double /*a_dx*/,double /*a_dy*/,double /*a_dz*/,
                                      double /*a_sx*/,double /*a_sy*/,double /*a_sz*/){
    parent::m_out << "exlib::edep::rgdml::create_reflected_solid : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_polyhedra(const std::string&,
                                     double /*a_phi*/,double /*a_dphi*/,
                            unsigned int /*a_numsides*/,unsigned int /*a_numZPlanes*/,
                            const double /*a_zPlane*/[],
                            const double /*a_rInner*/[],
                            const double /*a_rOuter*/[]){
    parent::m_out << "exlib::edep::rgdml::create_polyhedra : dummy." << std::endl;
    return 0;
  }
  virtual _edep_solid* create_polycone(const std::string&,
                                    double a_phi,double a_dphi,
                            unsigned int a_nz,
                            const double a_zs[],
                            const double a_rmins[],
                            const double a_rmaxs[]){
    return new inlib::edep::pcon(a_phi,a_dphi,a_nz,a_zs,a_rmins,a_rmaxs);
  }

  virtual _edep_solid* create_extruded_solid(const std::string&,
                const std::vector< std::pair<double,double> >& /*a_vertices*/,
                const std::vector<zsection>& /*a_sections*/){
    parent::m_out << "exlib::edep::rgdml::create_extruded_solid : dummy." << std::endl;
    return 0;
  }

  virtual _edep_solid* create_boolean(const std::string& /*a_name*/,
                                   op_type a_op,
                                   _edep_solid* a_first,
                                   _edep_solid* a_second,
                                   const inlib::mat4d& a_second_tsf){
    return new inlib::edep::boolean
                 (cvt_op_type(a_op),*a_first,*a_second,a_second_tsf);
  }
  virtual _edep_solid* create_displaced(const std::string&,
                                     _edep_solid*,
                                     const inlib::mat4d&){
    parent::m_out << "exlib::edep::rgdml::create_displaced : dummy." << std::endl;
    return 0;
  }

  virtual _edep_surface_property* create_optical_surface(const std::string& /*a_name*/,
                              optical_surface_model /*a_model*/,
                              optical_surface_finish /*a_finish*/,
                              surface_type /*a_type*/,
                              double /*a_value*/){
    parent::m_out << "exlib::edep::rgdml::create_optical_surface : dummy." << std::endl;
    return 0;
  }

  virtual _edep_logical_volume* create_logical_volume(const std::string& a_name,_edep_solid* a_solid,_edep_material* a_material){
    return new inlib::edep::volume(a_name,*a_solid,*a_material);
  }
  virtual _edep_physical_volume* create_pv_placement(const std::string& /*a_name*/,
                                        _edep_logical_volume* a_volume,
                                        _edep_logical_volume* a_mother,
                                        const inlib::vec3d& a_rot,
                                        const inlib::vec3d& a_trs){
    if(a_mother) a_mother->add(a_volume,a_rot,a_trs);
    return a_volume;
  }

  virtual _edep_physical_volume* create_pv_replica(const std::string&,
                                   _edep_logical_volume* a_volume,
                                   _edep_logical_volume* a_mother,
                                   axis_type a_axis,
                                   unsigned int a_number,
                                   double a_width,
                                   double a_offset){
    if(a_mother) {    
    if(a_axis==axis_XAxis) {
      for(unsigned int i=0;i<a_number;i++) {
        a_mother->add(a_volume,
                      inlib::vec3d(),
                      inlib::vec3d(-a_width*(a_number-1)*0.5+i*a_width,0,0));
      }

    } else if(a_axis==axis_YAxis) {
      for(unsigned int i=0;i<a_number;i++) {
        a_mother->add(a_volume,
                      inlib::vec3d(),
                      inlib::vec3d(0,-a_width*(a_number-1)*0.5+i*a_width,0));
      }

    } else if(a_axis==axis_ZAxis) {
      for(unsigned int i=0;i<a_number;i++) {
        a_mother->add(a_volume,
                      inlib::vec3d(),
                      inlib::vec3d(0,0,-a_width*(a_number-1)*0.5+i*a_width));
      }

    } else if(a_axis==axis_Phi) {
      for(unsigned int i=0;i<a_number;i++) {
        a_mother->add(a_volume,
                      inlib::vec3d(0,0,-(a_offset+i*a_width)),
                      inlib::vec3d());
      }

    } else {
      parent::m_out << "exlib::edep::rgdml::create_pv_replica :"
            << " replica type " << a_axis << " not yet handled."
            << std::endl;
      //not fatal.
    }}

    return a_volume;

  }

  virtual _edep_logical_volume* pv_lv(const _edep_physical_volume& /*a_pv*/) const{
    parent::m_out << "exlib::edep::rgdml::pv_lv : dummy." << std::endl;
    return 0;
  }
  virtual void pv_set_name(_edep_physical_volume&,const std::string&){
    parent::m_out << "exlib::edep::rgdml::pv_set_name : dummy." << std::endl;
  }

  virtual _edep_logical_surface* create_logical_border_surface
                                 (const std::string& /*a_name*/,
                                  _edep_physical_volume* /*a_pv1*/,
                                  _edep_physical_volume* /*a_pv2*/,
                                  _edep_surface_property* /*a_prop*/){
    parent::m_out << "exlib::edep::rgdml::create_logical_border_surface : dummy." << std::endl;
    return 0;
  }

  virtual _edep_logical_surface* create_logical_skin_surface
                                (const std::string& /*a_name*/,
                                _edep_logical_volume* /*a_volume*/,
                                _edep_surface_property* /*a_prop*/){
    parent::m_out << "exlib::edep::rgdml::create_logical_skin_surface : dummy." << std::endl;
    return 0;
  }

  virtual _edep_assembly_volume* create_assembly(){
    parent::m_out << "exlib::edep::rgdml::create_assembly : dummy." << std::endl;
    return 0;
  }

  virtual void place_assembly(_edep_assembly_volume& /*a_assembly*/,
                              _edep_logical_volume* /*a_mother*/,
                              const inlib::vec3d& /*a_rot*/,
                              const inlib::vec3d& /*a_trs*/,
                              const inlib::vec3d& /*a_sca*/){
    parent::m_out << "exlib::edep::rgdml::place_assembly : dummy." << std::endl;
  }

  virtual void assembly_add_volume(_edep_assembly_volume& /*a_assembly*/,
                                   _edep_logical_volume* /*a_volume*/,
                                   const inlib::vec3d& /*a_rot*/,
                                   const inlib::vec3d& /*a_trs*/,
                                   const inlib::vec3d& /*a_sca*/){
    parent::m_out << "exlib::edep::rgdml::assembly_add_volume : dummy." << std::endl;
  }

  virtual _edep_physical_volume* create_pv_parameterised
                                  (const std::string& /*a_name*/,
                                   _edep_logical_volume* /*a_volume*/,
                                   _edep_logical_volume* /*a_mother*/,
                          const std::vector<inlib::xml::PARAMETER>& /*a_params*/){
    parent::m_out << "exlib::edep::rgdml::create_pv_parameterised : dummy." << std::endl;
    return 0;
  }

  virtual _edep_solid* create_tessellated(const std::string& /*a_name*/,
                           const std::vector<inlib::xml::triangular_facet>& /*a_tris*/,
                           const std::vector<inlib::xml::quadrangular_facet>& /*a_quads*/){
    parent::m_out << "exlib::edep::rgdml::create_tessellated : dummy." << std::endl;
    return 0;
  }
  
  typedef std::pair<_edep_physical_volume*,_edep_physical_volume*> pair_pv;
  virtual pair_pv divide_lv(const std::string& /*a_name*/,
              _edep_logical_volume* /*a_volume*/,
              _edep_logical_volume* /*a_mother*/,
              axis_type /*a_axis*/, 
              unsigned int /*a_number*/, 
              double /*a_width*/,double /*a_offset*/){
    parent::m_out << "exlib::edep::rgdml::divide_lv : dummy." << std::endl;
    return pair_pv();
  }
  virtual pair_pv divide_lv(const std::string& /*a_name*/,
              _edep_logical_volume* /*a_volume*/,
              _edep_logical_volume* /*a_mother*/,
              axis_type /*a_axis*/, 
              unsigned int /*a_number*/, 
              double /*a_offset*/){
    parent::m_out << "exlib::edep::rgdml::divide_lv : dummy." << std::endl;
    return pair_pv();
  }
  virtual pair_pv divide_lv(const std::string& /*a_name*/,
              _edep_logical_volume* /*a_volume*/,
              _edep_logical_volume* /*a_mother*/,
              axis_type /*a_axis*/, 
              double /*a_width*/,double /*a_offset*/){
    parent::m_out << "exlib::edep::rgdml::divide_lv : dummy." << std::endl;
    return pair_pv();
  }
  //xxxxxxx
public:
  rgdml(inlib::xml::factory& a_fac,
        std::ostream& a_out,
        bool a_verbose = false)
  :parent(a_fac,a_out,a_verbose)
  {}
  virtual ~rgdml(){_clear();}
protected:
  rgdml(const rgdml& a_from)
  :parent(a_from)
  {}
  rgdml& operator=(const rgdml& a_from){
    parent::operator=(a_from);
    return *this;
  }
protected:
  template <class T>
  void clear_map(std::map<std::string,T*>& a_map) {
    typedef typename std::map<std::string,T*>::iterator it_t;
    for(it_t it=a_map.begin();it!=a_map.end();++it) delete (*it).second;
    a_map.clear();
  }
  void _clear(){
    clear_map(m_elements);
    clear_map(m_materials);
    clear_map(m_solids);

    //remove volume that are also in physvols list.
   {typedef std::map<std::string,inlib::edep::volume*>::iterator it_t;
    for(it_t it=m_volumes.begin();it!=m_volumes.end();++it) {
      for(it_t it2=m_physvols.begin();it2!=m_physvols.end();++it2) {
        if((*it2).second==(*it).second) {
          (*it2).second = 0;
        }
      }
    }}
    clear_map(m_volumes);
    clear_map(m_physvols);

    clear_map(m_find_mats);
    clear_map(m_find_elems);
  }
protected:
  std::map<std::string,_edep_material*> m_find_mats;
  std::map<std::string,_edep_element*> m_find_elems;
};

}}

//exlib_build_use inlib expat

#endif
