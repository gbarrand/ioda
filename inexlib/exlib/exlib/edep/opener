// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_edep_opener
#define exlib_edep_opener

#include <inlib/sg/iopener>
#include <inlib/sg/holder>
#include <inlib/sg/scenario>
#include <inlib/forit>
#include <inlib/edep/geo>

#include <inlib/sg/view_evd>

#include "rgdml"
#include "../gzip"

////////////////////////////
/// for open scenario : ////
////////////////////////////
#include "../edep/rgdml"

namespace exlib {
inline bool edep_pv_name(const inlib::edep::volume& a_pv,std::string& a_name) {
  a_name = a_pv.name();
  return true;
}
inline void edep_vds(const inlib::edep::volume& a_vol,
                unsigned int a_depth,
                std::vector< std::pair<std::string,unsigned int> >& a_vds){
  //must not clear a_vds since this function is recursive.

 {const std::string& name = a_vol.name();
  bool found = false; 
  typedef std::pair<std::string,unsigned int> volid_t;
  inlib_vforcit(volid_t,a_vds,it) {
    if(inlib::rcmp((*it).first,name)) {found=true;break;}
  }
  if(!found) {
    a_vds.push_back(std::pair<std::string,unsigned int>(name,a_depth));
  }}

 {inlib_vforcit(inlib::edep::volume::placed_volume_t,a_vol.children(),it){
    const inlib::edep::volume& vol = *((*it).first);
    edep_vds(vol,a_depth+1,a_vds);
  }}
}
inline void edep_no_vds(const inlib::edep::volume& a_vol,
                   std::vector< std::pair<std::string,unsigned int> >& a_vds){
  a_vds.clear();
  edep_vds(a_vol,0,a_vds); //do it anyway.
}
}

////////////////////////////
////////////////////////////
////////////////////////////

namespace exlib {
namespace edep {

class opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::edep::opener)
public:
  virtual parent* copy() const {return new opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    return gzip_is_gdml(a_path,a_is);
  }
  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;

    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    inlib::edep::volume* world = 0;

    inlib::xml::default_factory fac;
    bool verbose = false;
    edep::rgdml* ml = new edep::rgdml(fac,a_gv.out(),verbose);

   {bool _is = false;
    if(inlib::file::is_gzip(a_path,_is)) {
      if(_is) {
        ml->set_compressed_reader(new gzip_reader());//ml takes ownership
      }
    }}
  
    if(!ml->load_file(a_path,false,world)) {
      a_gv.map_warn_failed();
      delete ml;
      return false;
    }
    if(!world) {
      a_gv.map_warn("No physical volume found");
      delete ml;
      return false;
    }     

  //a_gv.map_warn("gdml file opened.",false);

    /////////////////////////////////////////////////
    /////////////////////////////////////////////////
    /////////////////////////////////////////////////
    if(!_evd->is_evd()) _evd->create_sg_evd(2000);

    inlib::sg::separator& dsep = _evd->detector_sg();

    inlib::edep::geo* geo = new inlib::edep::geo(*world);
    geo->volume = world->name();
    geo->volume_depth = 0;

    geo->min_depth = 1;   //included
    geo->max_depth = 4;   //excluded
    geo->solid_depth = 4; //all wire-frame.

    inlib::sg::style_colormap cmap;
    cmap.add(inlib::sg::style_color("yellow",inlib::colorf_yellow()));
    cmap.add(inlib::sg::style_color("cyan",inlib::colorf_cyan()));
    cmap.add(inlib::sg::style_color("magenta",inlib::colorf_magenta()));

    geo->atb = inlib::sg::atb_by_depth;
    geo->set_cmap(cmap);
  
    geo->max_time = 10;  //seconds
    geo->max_shapes = 5000;

    //force an update now :
    geo->update_sg(a_gv.out());
    geo->reset_touched(); //avoid another update_sg at first render().

    std::string swarn;
    if(geo->stopped_by_max_time())   {
      swarn = "stopped by max time.";
    } else if(geo->stopped_by_max_shapes()) {
      swarn = "stopped by max shapes.";
    } else if(geo->volume_not_found()) {
      swarn = "volume not found.";
    }

    if(geo->volume_not_found()) {
      delete geo;
      delete ml;
    } else {
      inlib::sg::separator* sep = new inlib::sg::separator;
      dsep.add(sep);
  
      sep->add(new inlib::sg::matrix()); //for manip.
      sep->add(geo);

      sep->add(new inlib::sg::holder<edep::rgdml>(ml));

      a_gv.adapt_camera(*sep);
    }

    if(swarn.size()) {
      a_gv.map_warn(swarn);
    } else {
      a_gv.hide_main_menu();
    }
 
    a_done = true;
    return true;
  }

  virtual bool is(inlib::uint64,const char*,bool& a_is) const {
    a_is = false;
    return true;
  }
  virtual bool open(inlib::uint64,const char*,
                    inlib::sg::viewer&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }

  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::xml::scenario& a_sno,
                    inlib::sg::cmaps_t& a_cmaps,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;

    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    inlib::edep::volume* world = 0;
    inlib::xml::default_factory fac;
  //bool verbose = true;
    bool verbose = false;
    edep::rgdml* ml = new edep::rgdml(fac,a_gv.out(),verbose);

   {bool _is = false;
    if(inlib::file::is_gzip(a_path,_is)) {
      if(_is) {
        ml->set_compressed_reader(new gzip_reader());//ml takes ownership
      }
    }}
  
    if(!ml->load_file(a_path,false,world)) {
      a_gv.map_warn_failed();
      delete ml;
      return false;
    }
    if(!world) {
      a_gv.map_warn("No physical volume found");
      delete ml;
      return false;
    }     

    //a_gv.map_warn("gdml file opened.",false);
    //a_gv.set_scene_camera(0); //to enforce an adapted cam.

    inlib::sg::separator& dsep = _evd->detector_sg();

    std::string swarn;
    if(!inlib::create_scenario_sg<inlib::edep::volume,inlib::edep::geo>
      (a_gv,a_cmaps,a_sno,*world,dsep,edep_no_vds,edep_pv_name,swarn)){}
    if(swarn.size()) {
      a_gv.map_warn(swarn);
    } else {
      a_gv.hide_main_menu();
    }

  //create_scenario_gun(a_gv,a_sno);

  //add_trajectory_styles(a_gv.styles(),a_sno);

    dsep.add(new inlib::sg::holder<edep::rgdml>(ml));
  
    a_done = true;
    return true;
  }
public:
  opener(){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  opener(const opener& a_from):parent(a_from){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  opener& operator=(const opener&){return *this;}  
};

}}

#endif

//exlib_build_use inlib freetype jpeg inlib_glutess zlib expat kernel
