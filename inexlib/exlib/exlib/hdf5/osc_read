// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_hdf5_osc_read
#define exlib_hdf5_osc_read

#include "tools"
#include "hdf5o"
#include "buf_obj_visitor"

#include <inlib/path>
#include <inlib/sout>
#include <inlib/store/osc_streamers>

#include <ostream>

namespace exlib {
namespace hdf5 {

inline void* retreive_object(std::ostream& a_out,
                             hid_t a_GID,
                             const std::string& aSID,
                             std::string& a_class){
  a_class.clear();

  std::string sclass;
  if(!read_atb(a_GID,"type",sclass)) {
    a_out << "exlib::hdf5::retreive_object :" 
          << " can't read group " << inlib::sout(aSID) << " type."
          << std::endl;
    return 0;
  }

  int version = -1;
  if(H5LT_find_attribute(a_GID,"version")==1) {
  if(!read_atb(a_GID,"version",version)) {
    a_out << "exlib::hdf5::retreive_object :" 
          << " can't read " << inlib::sout(aSID) << " version."
          << std::endl;
    return 0;
  }}

  if(false) {
    a_out << "exlib::hdf5::retreive_object :" 
          << " name " << inlib::sout(aSID)
          << " class " << inlib::sout(sclass)
          << "..." 
          << std::endl;
  }

 {hdf5o _hdfo;
  size_t sz = 0;
  char* buffer = 0;
  if(!_hdfo.read_object(a_GID,aSID,sz,buffer)) return 0;
  char* p = buffer;
  char* end = buffer+sz;

  if(sclass==inlib::osc::s_h1d()) {
    buf_obj_visitor visitor(a_out,p,end);
    inlib::histo::h1d* histo = new inlib::histo::h1d("",10,0,1);    
    if(!inlib::osc::read(visitor,*histo)||(p!=end)) {
      delete histo;
      delete [] buffer;
      return 0;
    }
    delete [] buffer;
    //sobj->setName(aSID);
    a_class = sclass;
    return histo;

  } else if(sclass==inlib::osc::s_h2d()) {
    buf_obj_visitor visitor(a_out,p,end);
    inlib::histo::h2d* histo = new inlib::histo::h2d("",10,0,1,10,0,1);    
    if(!inlib::osc::read(visitor,*histo)||(p!=end)) {
      delete histo;
      delete [] buffer;
      return 0;
    }
    delete [] buffer;
    //sobj->setName(aSID);
    a_class = sclass;
    return histo;

  } else if(sclass==inlib::osc::s_h3d()) {
    buf_obj_visitor visitor(a_out,p,end);
    inlib::histo::h3d* histo =
      new inlib::histo::h3d("",10,0,1,10,0,1,10,0,1);    
    if(!inlib::osc::read(visitor,*histo)||(p!=end)) {
      delete histo;
      delete [] buffer;
      return 0;
    }
    delete [] buffer;
    //sobj->setName(aSID);
    a_class = sclass;
    return histo;

  } else if(sclass==inlib::osc::s_p1d()) {
    buf_obj_visitor visitor(a_out,p,end);
    inlib::histo::p1d* histo = new inlib::histo::p1d("",10,0,1);    
    if(!inlib::osc::read(visitor,*histo)||(p!=end)) {
      delete histo;
      delete [] buffer;
      return 0;
    }
    delete [] buffer;
    //sobj->setName(aSID);
    a_class = sclass;
    return histo;

  } else if(sclass==inlib::osc::s_p2d()) {
    buf_obj_visitor visitor(a_out,p,end);
    inlib::histo::p2d* histo = new inlib::histo::p2d("",10,0,1,10,0,1);    
    if(!inlib::osc::read(visitor,*histo)||(p!=end)) {
      delete histo;
      delete [] buffer;
      return 0;
    }
    delete [] buffer;
    //sobj->setName(aSID);
    a_class = sclass;
    return histo;

  }

  delete [] buffer;}

  return 0;
}

inline void* find_object(std::ostream& a_out,
                         hid_t a_FID,
                         const std::string& a_path,
                         std::string& a_class){
  // a_path = /dir1/dir2/.../SID
  //       = SID   (where SID = storage identifier)
  // Could bring in memory two histos with same SID.

  a_class.clear();
  if(a_path.empty()) return 0;

  std::string path,SID,suffix;
  inlib::path_name_suffix(a_path,path,SID,suffix);
 
  hid_t _id = exlib_H5Gopen(a_FID,a_path.c_str());
  if(_id<0) {
    a_out << "exlib::hdf5::find_object :"
        << " can't find container " << inlib::sout(a_path) << "."
        << std::endl;
    return 0;
  }

  void* object = retreive_object(a_out,_id,SID,a_class);
  if(!object) {
    a_out << "exlib::hdf5::find_object :"
        << " can't retreive object " << inlib::sout(SID) << "." 
        << std::endl;
    ::H5Gclose(_id);
    a_class.clear();
    return 0;
  }

  ::H5Gclose(_id);
  return object;
}

}}

//exlib_build_use inlib hdf5

#endif
