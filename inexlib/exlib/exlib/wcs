// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

// from the wcslib-4.21/C/test/twcshdr.c code.

#ifndef exlib_wcs
#define exlib_wcs

#include "fitsio_h"

#include <wcslib.h>
#ifdef _WIN32
#include <string.h>
#define wcsset wcs_set
#endif

#include <cstdio>

namespace exlib {
namespace wcs {

inline bool fits_pixs_to_radecs(fitsfile* a_fptr,const double a_pixs[8],double a_radecs[8]) {
  int status = 0;

  char* header;
  int nkeyrec;
 {status = ::ffhdr2str(a_fptr, 1, NULL, 0, &header, &nkeyrec, &status);
  if(status) {
    ::fits_report_error(stderr,status);
    return false;
  }}

  int NAXIS1,NAXIS2;
 {int maxdim = 2;
  int naxis;
  long naxes[2];
  status = ::ffghpr(a_fptr,maxdim,NULL,NULL,&naxis,naxes,NULL,NULL,NULL,&status);
  if(status) {
    ::fits_report_error(stderr,status);
    ::free(header);
    return false;
  }
  NAXIS1 = naxes[0];
  NAXIS2 = naxes[1];}

  // Parse the primary header of the FITS file :
  int nreject;
  int nwcs;
  struct wcsprm* wcs;
 {int _status = ::wcspih(header,nkeyrec,WCSHDR_all,2,&nreject,&nwcs,&wcs);
  if(_status) {
    ::fprintf(stderr, "exlib::wcs::fits_pixs_to_radecs : wcspih ERROR %d: %s.\n",_status,::wcshdr_errmsg[_status]);
    ::free(header);
    return false;
  }
  if(!wcs) {
    ::fprintf(stderr, "exlib::wcs::fits_pixs_to_radecs : wcspih : return null wcsprm pointer.\n");
    ::free(header);
    return false;
  }}

  // Read coordinate arrays from the binary table extension :
 {status = ::fits_read_wcstab(a_fptr,wcs->nwtb,(wtbarr*)wcs->wtb,&status);
  if(status) {
    ::fits_report_error(stderr,status);
    ::free(header);
    return false;
  }}

  // Translate non-standard WCS keyvalues :
 {int stat[NWCSFIX];
  int _status = ::wcsfix(7,0,wcs,stat);
  if(_status) {
    for (int i = 0; i < NWCSFIX; i++) {
      if (stat[i] > 0) {
        ::fprintf(stderr, "exlib::wcs::fits_pixs_to_radecs : wcsfix ERROR %d: %s.\n",
            _status,::wcsfix_errmsg[stat[i]]);
      }
    }
    ::free(header);
    return false;
  }}

  // The wcsprm struct is now ready for use.

  ::free(header);

  // Initialize the wcsprm struct, also taking control of memory allocated by fits_read_wcstab() :
 {int _status = ::wcsset(wcs);
  if(_status) {
    ::fprintf(stderr, "exlib::wcs::fits_pixs_to_radecs : wcsset ERROR %d: %s.\n",_status,::wcs_errmsg[_status]);
    return false;
  }}

  double pix[4][2];
 {bool is_null = true;
  for(unsigned int index=0;index<8;index++) {
    if(a_pixs[index]) {is_null = false;break;}
  }
  if(is_null) {
    pix[0][0] =      1;pix[0][1] = 1;
    pix[1][0] = NAXIS1;pix[1][1] = 1;
    pix[2][0] = NAXIS1;pix[2][1] = NAXIS2;
    pix[3][0] =      1;pix[3][1] = NAXIS2;
  } else {
    pix[0][0] = a_pixs[0];pix[0][1] = a_pixs[1];
    pix[1][0] = a_pixs[2];pix[1][1] = a_pixs[3];
    pix[2][0] = a_pixs[4];pix[2][1] = a_pixs[5];
    pix[3][0] = a_pixs[6];pix[3][1] = a_pixs[7];
  }}

  double world[4][2];
 {double phi[4],theta[4];
  double imgcrd[4][2];
  int stat[4];
  int _status = ::wcsp2s(wcs,4,2,(const double*)pix,(double*)imgcrd,phi,theta,(double*)world,stat);
  if(_status) {
    ::fprintf(stderr, "exlib::wcs::fits_pixs_to_radecs : wcsp2s ERROR %d: %s.\n",_status,::wcs_errmsg[_status]);
    return false;
  }
  //::printf("debug : fits_corners (%g,%g) (%g,%g) (%g,%g) (%g,%g)\n",
  //  phi[0],theta[0],phi[1],theta[1],phi[2],theta[2],phi[3],theta[3]);
  //::printf("debug : fits_corners status %d %d %d %d\n",stat[0],stat[1],stat[2],stat[3]);
  }

  a_radecs[0] = world[0][0];
  a_radecs[1] = world[0][1];

  a_radecs[2] = world[1][0];
  a_radecs[3] = world[1][1];

  a_radecs[4] = world[2][0];
  a_radecs[5] = world[2][1];

  a_radecs[6] = world[3][0];
  a_radecs[7] = world[3][1];

  // Clean up :
 {int _status = ::wcsvfree(&nwcs,&wcs);
  if(_status) {
    ::fprintf(stderr, "exlib::wcs::fits_pixs_to_radecs : wcsvfree ERROR %d: %s.\n",_status,::wcs_errmsg[_status]);
    return false;
  }}

 {bool same = true;
  for(unsigned int index=0;index<4;index++) {
    if(world[index][0]!=pix[index][0]) {same = false;break;}
    if(world[index][1]!=pix[index][1]) {same = false;break;}
  }
  if(same) {
    ::fprintf(stderr, "exlib::wcs::fits_pixs_to_radecs : radecs are image size !\n");
    return false;
  }}

  return true;
}

inline bool fits_pixs_to_radecs(const char* a_path,const double a_pixs[8],double a_radecs[8]) {
  fitsfile* fptr;
 {int status = 0;
  ::fits_open_file(&fptr,a_path,READONLY,&status);
  if(status) {
    ::fits_report_error(stderr, status);
    return false;
  }}
  bool retval = fits_pixs_to_radecs(fptr,a_pixs,a_radecs);
 {int status = 0;
  ::fits_close_file(fptr,&status);}
  return retval;
}

inline bool fits_corners(const char* a_path,double a_corners[8]) {
  fitsfile* fptr;
 {int status = 0;
  ::fits_open_file(&fptr,a_path,READONLY,&status);
  if(status) {
    ::fits_report_error(stderr, status);
    return false;
  }}
  double pixs[8];
 {for(unsigned int index=0;index<8;index++) pixs[index] = 0;}
  bool retval = fits_pixs_to_radecs(fptr,pixs,a_corners);
 {int status = 0;
  ::fits_close_file(fptr,&status);}
  return retval;
}

inline bool fits_corners(size_t a_lbuf,const char* a_buffer,double a_corners[8]) {
  fitsfile* fptr;
 {int status = 0;
  void** buffptr = (void**)&a_buffer;
  ::ffomem(&fptr,"exlib_wcs_fits_corners",READONLY,buffptr,&a_lbuf,1000,realloc,&status);
  if(status) {
    ::fits_report_error(stderr, status);
    return false;
  }}
  double pixs[8];
 {for(unsigned int index=0;index<8;index++) pixs[index] = 0;}
  bool retval = fits_pixs_to_radecs(fptr,pixs,a_corners);
 {int status = 0;
  ::fits_close_file(fptr,&status);}
  return retval;
}

}}

//exlib_build_use cfitsio wcslib

#endif
