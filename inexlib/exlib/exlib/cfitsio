// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_cfitsio
#define exlib_cfitsio

#include "fitsio_h"

#include <inlib/typedefs>
#include <inlib/forit>

//#define EXLIB_CFITSIO_OPT
#ifdef EXLIB_CFITSIO_OPT
extern "C" {
  //#include <fitsio2.h> //for ffgc functions.
  int ffgclb(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
             unsigned char,unsigned char*,
             char*,int*,int*); //TBYTE
  int ffgcli(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
             short,short*,
             char*,int*,int*); //TSHORT
  int ffgclk(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
             int,int*,
             char*,int*,int*); //TINT
  int ffgcle(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
             float,float*,
             char*,int*,int*); //TFLOAT
  int ffgcld(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
             double,double*,
             char*,int*,int*); //TDOUBLE
  int ffgcll(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
             inlib::int64,inlib::int64*,
             char*,int*,int*); //TLONGLONG

  int ffgclsb(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
             char,char*,
             char*,int*,int*); //TSBYTE
  int ffgclui(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
              unsigned short,unsigned short*,
              char*,int*,int*); //TUSHORT
  int ffgcluk(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
              unsigned int,unsigned int*,
              char*,int*,int*); //TUINT

  int ffgcx(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,
            char*,int*); //TBIT

  /*
  int ffgclj(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
             inlib::int64,long*,
             char*,int*,int*); //TLONG
  int ffgcluj(fitsfile*,int,LONGLONG,LONGLONG,LONGLONG,long,int,
              inlib::int64,long*,
              char*,int*,int*); //TULONG
  */
}
#endif

#include <inlib/mnmx>
#ifdef INLIB_MEM
#include <inlib/mem>
#endif

#include <ostream>
#include <string>
#include <vector>

namespace exlib {
namespace cfitsio {

typedef unsigned int T_type;

inline T_type to_T_type(unsigned char){return TBYTE;}
inline T_type to_T_type(short){return TSHORT;}
inline T_type to_T_type(int){return TINT;}
inline T_type to_T_type(float){return TFLOAT;}
inline T_type to_T_type(double){return TDOUBLE;}
inline T_type to_T_type(inlib::int64){return TLONGLONG;}
inline T_type to_T_type(char){return TSBYTE;}
inline T_type to_T_type(unsigned short){return TUSHORT;}
inline T_type to_T_type(unsigned int){return TUINT;}
inline T_type to_T_type(inlib::fits_bit){return TBIT;}

#ifdef EXLIB_CFITSIO_OPT
inline int T_ffgcl(fitsfile* fptr,int colnum,
                   LONGLONG firstrow,LONGLONG firstelem,LONGLONG nelem,
                   long elemincre,int nultyp,
                   unsigned char nulval,unsigned char* array,
                   char* nularray,int* anynul,int* status){
  return ::ffgclb(fptr,colnum,firstrow,firstelem,nelem,
                  elemincre,nultyp,nulval,array,
                  nularray,anynul,status);
}

inline int T_ffgcl(fitsfile* fptr,int colnum,
                   LONGLONG firstrow,LONGLONG firstelem,LONGLONG nelem,
                   long elemincre,int nultyp,
                   char nulval,char* array,
                   char* nularray,int* anynul,int* status){
  return ::ffgclsb(fptr,colnum,firstrow,firstelem,nelem,
                  elemincre,nultyp,nulval,array,
                  nularray,anynul,status);
}

inline int T_ffgcl(fitsfile* fptr,int colnum,
                   LONGLONG firstrow,LONGLONG firstelem,LONGLONG nelem,
                   long elemincre,int nultyp,
                   short nulval,short* array,
                   char* nularray,int* anynul,int* status){
  return ::ffgcli(fptr,colnum,firstrow,firstelem,nelem,
                  elemincre,nultyp,nulval,array,
                  nularray,anynul,status);
}

inline int T_ffgcl(fitsfile* fptr,int colnum,
                   LONGLONG firstrow,LONGLONG firstelem,LONGLONG nelem,
                   long elemincre,int nultyp,
                   unsigned short nulval,unsigned short* array,
                   char* nularray,int* anynul,int* status){
  return ::ffgclui(fptr,colnum,firstrow,firstelem,nelem,
                  elemincre,nultyp,nulval,array,
                  nularray,anynul,status);
}

inline int T_ffgcl(fitsfile* fptr,int colnum,
                   LONGLONG firstrow,LONGLONG firstelem,LONGLONG nelem,
                   long elemincre,int nultyp,
                   int nulval,int* array,
                   char* nularray,int* anynul,int* status){
  return ::ffgclk(fptr,colnum,firstrow,firstelem,nelem,
                  elemincre,nultyp,nulval,array,
                  nularray,anynul,status);
}

inline int T_ffgcl(fitsfile* fptr,int colnum,
                   LONGLONG firstrow,LONGLONG firstelem,LONGLONG nelem,
                   long elemincre,int nultyp,
                   unsigned int nulval,unsigned int* array,
                   char* nularray,int* anynul,int* status){
  return ::ffgcluk(fptr,colnum,firstrow,firstelem,nelem,
                  elemincre,nultyp,nulval,array,
                  nularray,anynul,status);
}
inline int T_ffgcl(fitsfile* fptr,int colnum,
                   LONGLONG firstrow,LONGLONG firstelem,LONGLONG nelem,
                   long elemincre,int nultyp,
                   float nulval,float* array,
                   char* nularray,int* anynul,int* status){
  return ::ffgcle(fptr,colnum,firstrow,firstelem,nelem,
                  elemincre,nultyp,nulval,array,
                  nularray,anynul,status);
}
inline int T_ffgcl(fitsfile* fptr,int colnum,
                   LONGLONG firstrow,LONGLONG firstelem,LONGLONG nelem,
                   long elemincre,int nultyp,
                   double nulval,double* array,
                   char* nularray,int* anynul,int* status){
  return ::ffgcld(fptr,colnum,firstrow,firstelem,nelem,
                  elemincre,nultyp,nulval,array,
                  nularray,anynul,status);
}
inline int T_ffgcl(fitsfile* fptr,int colnum,
                   LONGLONG firstrow,LONGLONG firstelem,LONGLONG nelem,
                   long elemincre,int nultyp,
                   inlib::int64 nulval,inlib::int64* array,
                   char* nularray,int* anynul,int* status){
  return ::ffgcll(fptr,colnum,firstrow,firstelem,nelem,
                  elemincre,nultyp,nulval,array,
                  nularray,anynul,status);
}

//TBIT
inline int T_ffgcl(fitsfile* fptr,int colnum,
                   LONGLONG firstrow,LONGLONG firstelem,LONGLONG nelem,
                   long elemincre,int nultyp,
                   inlib::fits_bit nulval,inlib::fits_bit* array,
                   char*,int*,int* status){
  return ::ffgcx(fptr,colnum,firstrow,firstelem,nelem,
                 (char*)array,status);
}

#endif

inline bool sTYPE(T_type a_type,std::string& a_s) {
  //from fitsio.h
  if(a_type==TBIT) {a_s = "TBIT";return true;}
  if(a_type==TBYTE) {a_s = "TBYTE";return true;}
  if(a_type==TSBYTE) {a_s = "TSBYTE";return true;}
  if(a_type==TLOGICAL) {a_s = "TLOGICAL";return true;}
  if(a_type==TSTRING) {a_s = "TSTRING";return true;}
  if(a_type==TUSHORT) {a_s = "TUSHORT";return true;}
  if(a_type==TSHORT) {a_s = "TSHORT";return true;}
  if(a_type==TUINT) {a_s = "TUINT";return true;}
  if(a_type==TINT) {a_s = "TINT";return true;}
  if(a_type==TULONG) {a_s = "TULONG";return true;}
  if(a_type==TLONG) {a_s = "TLONG";return true;}
  if(a_type==TINT32BIT) {a_s = "TINT32BIT";return true;}
  if(a_type==TFLOAT) {a_s = "TFLOAT";return true;}
  if(a_type==TLONGLONG) {a_s = "TLONGLONG";return true;}
  if(a_type==TDOUBLE) {a_s = "TDOUBLE";return true;}
  if(a_type==TCOMPLEX) {a_s = "TCOMPLEX";return true;}
  if(a_type==TDBLCOMPLEX) {a_s = "TDBLCOMPLEX";return true;}
  a_s.clear();
  return false;
}

inline T_type bitpix_to_T(int a_bitpix) {
  if(a_bitpix==BYTE_IMG) return TBYTE;
  if(a_bitpix==SHORT_IMG) return TSHORT;
  if(a_bitpix==LONG_IMG) return TINT;
  if(a_bitpix==LONGLONG_IMG) return TLONGLONG;
  if(a_bitpix==FLOAT_IMG) return TFLOAT;
  if(a_bitpix==DOUBLE_IMG) return TDOUBLE;
  if(a_bitpix==SBYTE_IMG) return TSBYTE;
  if(a_bitpix==USHORT_IMG) return TUSHORT;
  if(a_bitpix==ULONG_IMG) return TUINT;
  return 0;
}

inline int T_to_bitpix(T_type a_type) {
  if(a_type==TBYTE) return BYTE_IMG;
  if(a_type==TSHORT) return SHORT_IMG;
  if(a_type==TINT) return LONG_IMG;
  if(a_type==TLONGLONG) return LONGLONG_IMG;
  if(a_type==TFLOAT) return FLOAT_IMG;
  if(a_type==TDOUBLE) return DOUBLE_IMG;
  if(a_type==TSBYTE) return SBYTE_IMG;
  if(a_type==TUSHORT) return USHORT_IMG;
  if(a_type==TUINT) return ULONG_IMG;
  return 0;
}

inline size_t bitpix_to_sizeof(int a_bitpix) {
  if(a_bitpix==BYTE_IMG) return 1;
  if(a_bitpix==SHORT_IMG) return 2;
  if(a_bitpix==LONG_IMG) return 4;
  if(a_bitpix==LONGLONG_IMG) return 8;
  if(a_bitpix==FLOAT_IMG) return 4;
  if(a_bitpix==DOUBLE_IMG) return 8;
  if(a_bitpix==SBYTE_IMG) return 1;
  if(a_bitpix==USHORT_IMG) return 2;
  if(a_bitpix==ULONG_IMG) return 4;
  return 0;
}

class key {
  static const std::string& s_class() {
    static const std::string s_v("exlib::cfitsio::key");
    return s_v;
  }
public:
  key(const std::string& a_name,const std::string& a_value,const std::string& a_cmt)
  :m_name(a_name)
  ,m_value(a_value)
  ,m_cmt(a_cmt)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~key(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  key(const key& a_from)
  :m_name(a_from.m_name)
  ,m_value(a_from.m_value)
  ,m_cmt(a_from.m_cmt)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  key& operator=(const key& a_from) {
    m_name = a_from.m_name;
    m_value = a_from.m_value;
    m_cmt = a_from.m_cmt;
    return *this;
  }
public:
  const std::string& name() const {return m_name;}
  const std::string& value() const {return m_value;}
  const std::string& cmt() const {return m_cmt;}

  void dump(std::ostream& a_out) const {
    a_out << "name    : " << m_name << std::endl;
    a_out << "value   : " << m_value << std::endl;
    a_out << "comment : " << m_cmt << std::endl;
  }
protected:
  std::string m_name;
  std::string m_value;
  std::string m_cmt;
};

class file {
  static const std::string& s_class() {
    static const std::string s_v("exlib::cfitsio::file");
    return s_v;
  }
public:
  file(std::ostream& a_out):m_out(a_out),m_file(0){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~file(){
    close();
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
protected:
  file(const file& a_from):m_out(a_from.m_out){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  file& operator=(const file&){return *this;}
public:
  std::ostream& out() const {return m_out;}
  bool open(const std::string& a_file) {
    if(m_file) return false;
    int status = 0;
    //::ffopentest(CFITSIO_VERSION,&m_file,a_file.c_str(),READONLY,&status);
    fits_open_file(&m_file,a_file.c_str(),READONLY,&status);
    if(m_file) m_path = a_file;
    return is_ok(m_out,"open/ffopentest",status);
  }

  bool open_buffer(size_t* a_sz,void** a_buffer) {
    if(m_file) return false;
    int status = 0;
    ::ffomem(&m_file,"exlib_cfitsio_buffer",READONLY,a_buffer,a_sz,1000,::realloc,&status);
    m_path.clear();
    return is_ok(m_out,"open/ffomem",status);
  }

  bool is_open() const {return m_file?true:false;}
  fitsfile* ffile() const {return m_file;}
  const std::string& path() const {return m_path;}
  bool close() {
    if(!m_file) return false;
    int status = 0;
    ::ffclos(m_file,&status);
    m_file = 0;
    m_path.clear();
    return is_ok(m_out,"close/ffclos",status);
  }
  unsigned int num_HDU() const {
    if(!m_file) return 0;
    int nbhdu = 0;
    int status = 0;
    ::ffthdu(m_file,&nbhdu,&status);
    if(!is_ok(m_out,"num_HDU/ffthdu",status)) return 0;
    return nbhdu;
  }
  bool cur_HDU(unsigned int& a_id,int& a_type) const {
    if(!m_file) {a_id = 0;a_type = 0;return false;}   
    int curhdu = 0;
    int status = 0;
    ::ffghdn(m_file,&curhdu);
    if(!is_ok(m_out,"cur_HDU/ffghdn",status)) {
      a_id = 0;
      a_type = 0;
      return false;
    }
    int hdutyp = 0;
    status = 0;
    ::ffghdt(m_file,&hdutyp,&status);
    if(!is_ok(m_out,"cur_HDU/ffghdt",status)) {
      a_id = 0;
      a_type = 0;
      return false;
    }
    a_id = curhdu;
    a_type = hdutyp;
    return true;
  }
  bool next_HDU() const {
    if(!m_file) return false;
    int hdutyp = 0;
    int status = 0;
    ::ffmrhd(m_file,1,&hdutyp,&status);
    return is_ok(m_out,"next_HDU/ffmrhd",status);
  }
  bool to_HDU(unsigned int a_index) const {
    //NOTE : a_index index start at 1 (good old time of FORTRAN !).
    if(!m_file) return false;
    int hdutyp = 0;
    int status = 0;
    ::ffmahd(m_file,a_index,&hdutyp,&status);
    return is_ok(m_out,"to_HDU/ffmahd",status);
  }

  bool HDU_keys(std::vector<key>& a_keys) const {
    a_keys.clear();
    if(!m_file) return false;
    int nkeys,keypos;
   {int status = 0;
    ::ffghps(m_file,&nkeys,&keypos,&status);
    if(!is_ok(m_out,"HDU_keys/ffghps",status)) return false;}
    char name[FLEN_CARD];       //O
    char value[FLEN_VALUE];     //O
    char comment[FLEN_COMMENT]; //O
    for(int k=1;k<=nkeys;k++){
     {int status = 0;
      ::ffgkyn(m_file,k,name,value,comment,&status);
      if(!is_ok(m_out,"HDU_keys/ffgkyn",status)) return false;}
      a_keys.push_back(key(name,value,comment));      
      //char dtype;
      //::ffdtyp(value,&dtype,&status);
    }
    return true;
  }

  bool IMAGE_HDU_infos(std::vector<unsigned int>& a_orders,int& a_bitpix) const {
    a_orders.clear();
    a_bitpix = 0;
    unsigned int id;
    int type;
    if(!cur_HDU(id,type)) return false;
    if(type!=IMAGE_HDU) {
      m_out << "exlib::cfitsio::file::IMAGE_HDU_infos :"
            << " not an IMAGE_HDU."
            << std::endl;
      return false;
    }
    int naxis;
    LONGLONG naxes[5];
    int bitpix;
   {int maxaxis = 5;
    int status = 0;
    ::ffgiprll(m_file,maxaxis,&bitpix,&naxis,naxes,&status);
    if(!is_ok(m_out,"IMAGE_HDU_infos/ffgiprll",status)) return false;}
    for(int i=0;i<naxis;i++) {
      a_orders.push_back((unsigned int)naxes[i]);
    }
    a_bitpix = bitpix;
    return true;
  }

  char* read_IMAGE_HDU(size_t& a_sz) const {
    a_sz = 0;
    unsigned int id;
    int type;
    if(!cur_HDU(id,type)) return 0;
    if(type!=IMAGE_HDU) {
      m_out << "exlib::cfitsio::file::read_IMAGE_HDU :"
            << " not an IMAGE_HDU."
            << std::endl;
      return 0;
    }
    int naxis;
    LONGLONG naxes[5];
    int bitpix;
   {int maxaxis = 5;
    int status = 0;
    ::ffgiprll(m_file,maxaxis,&bitpix,&naxis,naxes,&status);
    if(!is_ok(m_out,"read_IMAGE_HDU/ffgiprll",status)) return 0;}

    //m_out << "naxis " << naxis << std::endl;
    //m_out << "bitpix " << bitpix
    //      << " " << sTYPE(bitpix_to_T(bitpix))
    //      << std::endl;

    if(!naxis) return 0;

 //{for(unsigned int i=0;i<naxis;i++) {
 //   m_out << "axis " << i << " " << naxes[i] << std::endl;
 // }}

    int datatype = bitpix_to_T(bitpix);
    if(!datatype) {
      m_out << "exlib::cfitsio::file::read_IMAGE_HDU :"
            << " not treated bitpix " << bitpix 
            << std::endl;
      return 0;
    }

    LONGLONG sz = 1;
   {for(int i=0;i<naxis;i++) sz *= naxes[i];}
    //m_out << "sz " << sz << std::endl;
    if(!sz) return 0;

    size_t sof = bitpix_to_sizeof(bitpix);
    if(!sof) {
      m_out << "exlib::cfitsio::file::read_IMAGE_HDU :"
            << " bitpix_to_sizeof returns 0 for bitpix " << bitpix
            << std::endl;
      return 0;
    }
    char* buffer = new char[size_t(sz)*sof];
    if(!buffer) {
      m_out << "exlib::cfitsio::file::read_IMAGE_HDU :"
            << " can't alloc image."
            << std::endl;
      return 0;
    }
#ifdef INLIB_MEM
    inlib::mem::increment(inlib::s_new().c_str());
#endif

   {LONGLONG firstpix[15] = {1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1};
    int anynul = 0; //O
    int status = 0;
    ::ffgpxvll(m_file,datatype,firstpix,sz,NULL,buffer,&anynul,&status);
    if(!is_ok(m_out,"read_IMAGE_HDU/ffgpxvll",status)) {
#ifdef INLIB_MEM
      inlib::mem::decrement(inlib::s_new().c_str());
#endif
      delete [] buffer;
      return 0;
    }}

    a_sz = size_t(sz)*sof;
    return buffer;
  }

  char* read_IMAGE_HDU_slice(unsigned int a_slice,
                             unsigned int& a_width,unsigned int& a_height,size_t& a_sz) const {
    a_width = 0;
    a_height = 0;
    a_sz = 0;
    unsigned int id;
    int type;
    if(!cur_HDU(id,type)) return 0;
    if(type!=IMAGE_HDU) {
      m_out << "exlib::cfitsio::file::read_IMAGE_HDU_slice :"
            << " not an IMAGE_HDU."
            << std::endl;
      return 0;
    }
    int naxis;
    LONGLONG naxes[5];
    int bitpix;
   {int maxaxis = 5;
    int status = 0;
    ::ffgiprll(m_file,maxaxis,&bitpix,&naxis,naxes,&status);
    if(!is_ok(m_out,"read_IMAGE_HDU_slice/ffgiprll",status)) return 0;}

/*
    m_out << "bitpix " << bitpix
          << " " << sTYPE(bitpix_to_T(bitpix))
          << std::endl;
    m_out << "naxis " << naxis << std::endl;
   {for(unsigned int i=0;i<naxis;i++) {
      m_out << "axis " << i << " " << naxes[i] << std::endl;
    }}
*/

    if(naxis<2) {
      m_out << "exlib::cfitsio::file::read_IMAGE_HDU_slice :"
            << " not an image or stack of images. naxis is " << naxis
            << std::endl;
      return 0;
    }

    int datatype = bitpix_to_T(bitpix);
    if(!datatype) {
      m_out << "exlib::cfitsio::file::read_IMAGE_HDU_slice :"
            << " not treated bitpix " << bitpix 
            << std::endl;
      return 0;
    }

    size_t sof = bitpix_to_sizeof(bitpix);
    if(!sof) {
      m_out << "exlib::cfitsio::file::read_IMAGE_HDU_slice :"
            << " bitpix_to_sizeof returns 0 for bitpix " << bitpix
            << std::endl;
      return 0;
    }

    if(a_slice) {
      if(naxis<3) {
        m_out << "exlib::cfitsio::file::read_IMAGE_HDU_slice :"
              << " can't get slice " << a_slice
              << " on an IMAGE_HDU with naxis " << naxis
              <<"."
              << std::endl;
        return 0;
      }
      if(a_slice>=naxes[2]) {
        m_out << "exlib::cfitsio::file::read_IMAGE_HDU_slice :"
              << " can't get slice " << a_slice
              << " on an IMAGE_HDU with naxis " << naxis
              <<"."
              << std::endl;
        return 0;
      }
    }

    LONGLONG sz = naxes[0]*naxes[1];
    //m_out << "sz " << sz << std::endl;
    if(!sz) return 0;

    char* buffer = new char[size_t(sz)*sof];
    if(!buffer) {
      m_out << "exlib::cfitsio::file::read_IMAGE_HDU_slice :"
            << " can't alloc image."
            << std::endl;
      return 0;
    }
#ifdef INLIB_MEM
    inlib::mem::increment(inlib::s_new().c_str());
#endif

    LONGLONG firstpix[15] = {1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1};
    firstpix[2] = a_slice+1;

   {int anynul = 0; //O
    int status = 0;
    ::ffgpxvll(m_file,datatype,firstpix,sz,NULL,buffer,&anynul,&status);
    if(!is_ok(m_out,"read_IMAGE_HDU_slice/ffgpxvll",status)) {
      m_out << "anynul " << anynul << std::endl;
      std::string stype;
      sTYPE(bitpix_to_T(bitpix),stype);
      m_out << "bitpix " << bitpix
            << " datatype " << stype
            << " sizeof " << sof
            << " naxis " << naxis
            << std::endl;
     {for(int i=0;i<naxis;i++) {
        m_out << " axis " << i << " " << naxes[i] << std::endl;
      }}
#ifdef INLIB_MEM
      inlib::mem::decrement(inlib::s_new().c_str());
#endif
      delete [] buffer;
      return 0;
    }}

    a_width = (unsigned int)naxes[0];
    a_height = (unsigned int)naxes[1];
    a_sz = size_t(sz)*sof;
    return buffer;
  }

  bool TBL_number_of_columns(unsigned int& a_ncol) const {

    a_ncol = 0;

    unsigned int id;
    int type;
    if(!cur_HDU(id,type)) return false;
    if((type!=BINARY_TBL)&&(type!=ASCII_TBL)) {
      m_out << "exlib::cfitsio::file::TBL_number_of_columns :"
            << " not a BINARY_TBL or ASCII_TBL. type found " << type << "."
            << std::endl;
      return false;
    }

    int nbcols;
   {int status = 0;
    ::ffgncl(m_file,&nbcols,&status);
    if(!is_ok(m_out,"TBL_number_of_columns/ffgncl",status)) return false;}

    a_ncol = nbcols;

    return true;
  }

  bool TBL_infos(unsigned int& a_ncol,unsigned int& a_nrow,
                 std::vector<std::string>& a_names, 
                 std::vector<int>& a_types,   
                 std::vector<int>& a_repeats,
                 std::vector<int>& a_widths) const {

    a_ncol = 0;
    a_nrow = 0;
    a_names.clear();
    a_types.clear();
    a_repeats.clear();
    a_widths.clear();

    unsigned int id;
    int type;
    if(!cur_HDU(id,type)) return false;
    if((type!=BINARY_TBL)&&(type!=ASCII_TBL)) {
      m_out << "exlib::cfitsio::file::TBL_infos :"
            << " not a BINARY_TBL or ASCII_TBL. type found " << type << "."
            << std::endl;
      return false;
    }

    int nbcols;
   {int status = 0;
    ::ffgncl(m_file,&nbcols,&status);
    if(!is_ok(m_out,"TBL_infos/ffgncl",status)) return false;}

    int nbrows;
   {long lnbrows = 0;
    int status = 0;
    ::ffgnrw(m_file,&lnbrows,&status);
    if(!is_ok(m_out,"TBL_infos/ffgnrw",status)) return false;
    nbrows = (int)lnbrows;}

   {char** TTYPEs = new char*[nbcols];
   {for(int ii=0; ii < nbcols; ii++) TTYPEs[ii]=new char[FLEN_VALUE];}
   {int nfound;
    int status = 0;
    ::ffgkns(m_file, "TTYPE",1,nbcols,TTYPEs,&nfound, &status);
    if(!is_ok(m_out,"TBL_infos/ffgkns",status)) {
     {for(int ii=0; ii < nbcols; ii++) delete [] TTYPEs[ii];
      delete [] TTYPEs;}
      return false;
    }}
   {for(int ii=0; ii < nbcols; ii++) {
      a_names.push_back(TTYPEs[ii]);
    }}
   {for(int ii=0; ii < nbcols; ii++) {delete [] TTYPEs[ii];}}
    delete [] TTYPEs;}

   {for(int ii = 0; ii <  nbcols; ii++) {
      int DTYPE;
      long width = 0;
      long repeat = 0;
     {int status = 0;
      ::ffgtcl(m_file,ii+1,&DTYPE,&repeat,&width,&status);
      if(!is_ok(m_out,"TBL_infos/ffgtcl",status)) {
        a_names.clear();
        a_types.clear();
        a_repeats.clear();
        a_widths.clear();
        return false;
      }}

      a_types.push_back(DTYPE);
      a_repeats.push_back(repeat);
      a_widths.push_back(width);
    }}

    a_ncol = nbcols;
    a_nrow = nbrows;

    return true;
  }

  template <class T>
  bool TBL_read_cell(unsigned int a_col,unsigned int a_row,unsigned int a_index, //in [0,repeat[
                     T& a_value) const {

    //OPTIMIZATION : no check is done on m_file and the HDU.

    // a_col, a_row are 0 based

    //m_out << "debug :"
    //      << " firstrow " << firstrow
    //      << " firstelem " << firstelem
    //      << std::endl;

    int anynul = 0;   //O
    int status = 0;
#ifdef EXLIB_CFITSIO_OPT
    char cdummy;
    T_ffgcl(m_file,a_col+1,
            a_row+1,a_index+1,1,
            1,1,T(),&a_value,
            &cdummy,&anynul,&status);
    if(!is_ok(m_out,"TBL_read_cell/T_ffgcl",status)) return false;
#else
    T nulval = T();
    ::ffgcv(m_file,to_T_type(a_value),a_col+1,
            a_row+1,a_index+1,1,
            &nulval,&a_value,
            &anynul,&status);
    if(!is_ok(m_out,"TBL_read_cell/ffgcv",status)) return false;
#endif

    return true;
  }

  template <class T>
  bool TBL_read_va_cell(unsigned int a_col,unsigned int a_row,std::vector<T>& a_v) const {

    //OPTIMIZATION : no check is done on m_file and the HDU.

    LONGLONG len;
    LONGLONG off;
   {int status = 0;
    ::ffgdesll(m_file,a_col+1,a_row+1,&len,&off,&status);
    if(!is_ok(m_out,"TBL_read_va_cell/ffgdesll",status)) {
      a_v.clear();
      return false;
    }}

    if(!len) {a_v.clear();return true;}

    T* data = new T[(unsigned int)len];
    if(!data) {a_v.clear();return false;}

    int status = 0;
    int anynul = 0;   //O
#ifdef EXLIB_CFITSIO_OPT
    char cdummy;
    T_ffgcl(m_file,a_col+1,
            a_row+1,1,len,
            1,1,T(),data,
            &cdummy,&anynul,&status);
    if(!is_ok(m_out,"TBL_read_va_cell/T_ffgcl",status)) {
#else
    T nulval = T();
    ::ffgcv(m_file,to_T_type(T()),a_col+1,
            a_row+1,1,len,
            &nulval,data,&anynul,&status);
    if(!is_ok(m_out,"TBL_read_va_cell/ffgcv",status)) {
#endif
      delete [] data;
      a_v.clear();
      return false;
    }

    a_v.resize((unsigned int)len);
   {for(unsigned int item=0;item<(unsigned int)len;item++){
      a_v[item] = data[item];
    }}
    
    delete [] data;

    return true;
  }

  template <class T>
  bool TBL_read_col_row(unsigned int a_col,unsigned int a_row,unsigned int a_repeat,
                        T* a_vals) const { //a_vals[a_repeat]

    //OPTIMIZATION : no check is done on m_file and the HDU.

    // a_col, a_row are 0 based

    int anynul = 0;   //O
    int status = 0;
#ifdef EXLIB_CFITSIO_OPT
    char cdummy;
    T_ffgcl(m_file,a_col+1,
            a_row+1,1,a_repeat,
            1,1,T(),a_vals,
            &cdummy,&anynul,&status);
    if(!is_ok(m_out,"TBL_read_col_row/T_ffgcl",status)) return false;
#else
    T nulval = T();
    ::ffgcv(m_file,to_T_type(a_vals[0]),a_col+1,
            a_row+1,1,a_repeat,
            &nulval,a_vals,
            &anynul,&status);
    if(!is_ok(m_out,"TBL_read_col_row/ffgcv",status)) return false;
#endif

    return true;
  }

  template <class T>
  bool TBL_read_col(unsigned int a_col,unsigned int a_rows,unsigned int a_repeat,
                    T* a_vals) const { //a_vals[a_rows*a_repeat]

    //OPTIMIZATION : no check is done on m_file and the HDU.

    int anynul = 0;   //O
    int status = 0;
#ifdef EXLIB_CFITSIO_OPT
    char cdummy;
    T_ffgcl(m_file,a_col+1,
            1,1,a_rows*a_repeat,
            1,1,T(),a_vals,
            &cdummy,&anynul,&status);
    if(!is_ok(m_out,"TBL_read_col/T_ffgcl",status)) return false;
#else
    T nulval = T();
    ::ffgcv(m_file,to_T_type(a_vals[0]),a_col+1,
            1,1,a_rows*a_repeat,
            &nulval,a_vals,
            &anynul,&status);
    if(!is_ok(m_out,"TBL_read_col/ffgcv",status)) return false;
#endif

    return true;
  }

/*
  template <class T>
  bool TBL_va_col_size(unsigned int a_col,unsigned int a_rows,size_t& a_sz) const {

    //OPTIMIZATION : no check is done on m_file and the HDU.

    if(!a_rows) {a_sz = 0;return true;}

    LONGLONG* lens = new LONGLONG[a_rows];
    LONGLONG* offs = new LONGLONG[a_rows];
   {int status = 0;
    ::ffgdessll(m_file,a_col+1,1,a_rows,lens,offs,&status);
    if(!is_ok(m_out,"TBL_va_col_size/ffgdessll",status)) {
      delete [] lens;
      delete [] offs;
      a_sz = 0;
      return false;
    }}

    a_sz = 0;
   {for(unsigned int irow=0;irow<a_rows;irow++){
      a_sz += lens[irow];
    }}

    delete [] lens;
    delete [] offs;

    return true;
  }

  template <class T>
  bool TBL_read_va_col(unsigned int a_col,unsigned int a_rows,T*& a_vals) const { //allocated by this method.

    //OPTIMIZATION : no check is done on m_file and the HDU.

    if(!a_rows) {a_vals = 0;return true;}

    LONGLONG* lens = new LONGLONG[a_rows];
    LONGLONG* offs = new LONGLONG[a_rows];
   {int status = 0;
    ::ffgdessll(m_file,a_col+1,1,a_rows,lens,offs,&status);
    if(!is_ok(m_out,"TBL_read_va_col/ffgdessll",status)) {
      delete [] lens;
      delete [] offs;
      a_vals = 0;
      return false;
    }}

    unsigned int nitem = 0;
   {for(unsigned int irow=0;irow<a_rows;irow++){
      nitem += lens[irow];
    }}

    if(!nitem) {
      delete [] lens;
      delete [] offs;
      a_vals = 0;
      return true;
    }

    T nulval = T();
    T_type type = to_T_type(T());

    a_vals = new T[nitem];
   {T* pos = a_vals;
    for(unsigned int irow=0;irow<a_rows;irow++){
      if(!lens[irow]) continue;

      int status = 0;
      int anynul = 0;   //O
      //::ffgcv(m_file,type,a_col+1,
      //        irow+1,1,lens[irow],
      //        &nulval,pos,&anynul,&status);

#ifdef EXLIB_CFITSIO_OPT
      char cdummy;
      T_ffgcl(m_file,a_col+1,
              irow+1,1,lens[irow],
              1,1,T(),pos,
              &cdummy,&anynul,&status);
      if(!is_ok(m_out,"TBL_read_va_col/T_ffgcl",status)) {
#else
      ::ffgcv(m_file,type,a_col+1,
              irow+1,1,lens[irow],
              &nulval,pos,&anynul,&status);
      if(!is_ok(m_out,"TBL_read_va_col/ffgcv",status)) {
#endif
        delete [] lens;
        delete [] offs;
        delete [] a_vals;
        a_vals = 0;
        return false;
      }
      pos += lens[irow];
    }}

    delete [] lens;
    delete [] offs;

    return true;
  }
*/

  template <class T>
  bool TBL_col_infos(unsigned int a_nrow,unsigned int a_col,unsigned int a_repeat,
                     T& a_mn,T& a_mx,T& a_S,T& a_S2) const {
    //NOTE :
    //  T mean = a_S/T(a_nrow);
    //  T rms = ::sqrt(::fabs(a_S2/T(nrow)-mean*mean));
    a_mn = T();
    a_mx = T();
    a_S = T();
    a_S2 = T();
    if(!a_nrow) return false;
    T val;
    bool first = true;
    for(unsigned int row=0;row<a_nrow;row++) {
      for(unsigned int i=0;i<a_repeat;i++) {
        if(!TBL_read_cell<T>(a_col,row,i,val)) {
          return false;
        }
        a_S += val;
        a_S2 += val*val;
        if(first) { //costly. Find a way to init a_mn,a_mx from T.
          a_mn = val;
          a_mx = val;
          first = false;
        } else {
          a_mn = inlib::mn<T>(a_mn,val);
          a_mx = inlib::mx<T>(a_mx,val);
        }
      }
    }
    return true;
  }

/*
  template <class H,class T>
  bool fill(H& a_histo,unsigned int a_nrow,unsigned int a_col,unsigned int a_repeat) {
    T val;
    for(unsigned int row=0;row<a_nrow;row++) {
      for(unsigned int i=0;i<a_repeat;i++) {
        if(!BINARY_TBL_read_cell<T>(a_col,row,i,val)) return false;
        a_histo.fill(val,1);
      }
    }
    return true;
  }
*/

protected:
  static bool is_ok(std::ostream& a_out,const std::string& a_from,int a_status){
    if(!a_status) return true;
    if(a_status==NUM_OVERFLOW) { //there are some in SDSS/stripe82.
      //a_out << "exlib::cfitsio::file : " << a_from << " : warning : numerical overflows." << std::endl;
      return true;
    }
    char buff[FLEN_ERRMSG];
    ::ffgerr(a_status,buff);
    a_out << "exlib::cfitsio::file : " << a_from << " : " << buff << std::endl;
    ::ffrprt(stdout,a_status);
    return false;
  }

protected:
  std::ostream& m_out;
  std::string m_path;
  fitsfile* m_file;
};

}}

#include <inlib/sto>

namespace exlib {
namespace cfitsio {

inline bool sHDU(int a_hdutyp,std::string& a_s) {
  if(a_hdutyp==IMAGE_HDU) {a_s = "IMAGE_HDU";return true;}
  if(a_hdutyp==ASCII_TBL) {a_s = "ASCII_TBL";return true;}
  if(a_hdutyp==BINARY_TBL) {a_s = "BINARY_TBL";return true;}
  if(a_hdutyp==ANY_HDU) {a_s = "ANY_HDU";return true;}
  a_s = "";
  return false;
}

inline bool ls(std::ostream& a_out,cfitsio::file& a_file,
               std::vector< std::pair<unsigned int,std::string> >& a_ids) {
  a_ids.clear();
  if(!a_file.is_open()) return false;
  unsigned int nbhdu = a_file.num_HDU();
  for(unsigned int index=1;index<=nbhdu;index++) {
    if(!a_file.to_HDU(index)) {a_ids.clear();return false;}
    unsigned int id;
    int hdutyp;
    if(!a_file.cur_HDU(id,hdutyp)) {a_ids.clear();return false;}
    std::string shdu;
    sHDU(hdutyp,shdu);
    a_ids.push_back(std::pair<unsigned int,std::string>(id,shdu));
  }
  return true;
}    

inline bool ls(std::ostream& a_out,const std::string& a_file,
               std::vector< std::pair<unsigned int,std::string> >& a_ids) {
  cfitsio::file ffile(a_out);
  if(!ffile.open(a_file)) {a_ids.clear();return false;}
  if(!ls(a_out,ffile,a_ids)) return false;
  return ffile.close();
}    

inline bool keys(std::ostream& a_out,const std::string& a_file,unsigned int a_hdu,
                 std::vector<exlib::cfitsio::key>& a_keys) {
  a_keys.clear();
  cfitsio::file ffile(a_out);
  if(!ffile.open(a_file)) return false;
  if(!ffile.to_HDU(a_hdu)) return false;
  if(!ffile.HDU_keys(a_keys)) return false;
  return ffile.close();  
}    

inline bool key_value(std::ostream& a_out,const std::string& a_file,unsigned int a_hdu,
                      const std::string& a_key,std::string& a_value){
  a_value.clear();
  std::vector<exlib::cfitsio::key> kys;
  if(!keys(a_out,a_file,a_hdu,kys)) return false;
  inlib_vforcit(exlib::cfitsio::key,kys,it){
    if((*it).name()==a_key) {
      a_value = (*it).value();
      return true;
    }
  }
  return false; //not found.
}    

inline bool TBL_number_of_columns(std::ostream& a_out,const std::string& a_file,unsigned int a_hdu,
                                  unsigned int& a_ncol) {
  a_ncol = 0;
  cfitsio::file ffile(a_out);
  if(!ffile.open(a_file)) return false;
  if(!ffile.to_HDU(a_hdu)) return false;
  if(!ffile.TBL_number_of_columns(a_ncol)) return false;
  return ffile.close();  
}    

inline bool TBL_column_names(std::ostream& a_out,const std::string& a_file,unsigned int a_hdu,
                             std::vector<std::string>& a_names) {
  a_names.clear();
  cfitsio::file ffile(a_out);
  if(!ffile.open(a_file)) return false;
  if(!ffile.to_HDU(a_hdu)) return false;
  unsigned int ncol;
  unsigned int nrow;
  std::vector<int> types;  
  std::vector<int> repeats;
  std::vector<int> widths;  
  if(!ffile.TBL_infos(ncol,nrow,a_names,types,repeats,widths)) return false;
  return ffile.close();  
}    

}}

//exlib_build_use inlib cfitsio

#endif
