// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_slides_opener
#define exlib_slides_opener

#include <inlib/sg/iopener>
#include <inlib/sg/event_dispatcher>
#include <inlib/sg/selection>
#include <inlib/sg/switch_anim>
#include <inlib/sg/colback>
#include <inlib/sg/rotate_anim>
#include <inlib/sg/base_tex_anim>
#include <inlib/sg/infos>

#include <inlib/sg/view_evd>

#include <inlib/cbk/scenario>
#include <inlib/parse>

#include "xml/xml_sno"

namespace exlib {

class slides_opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::slides_opener)
private:
  typedef inlib::xml::scenarios snos_t;
  typedef inlib::xml::atbs atbs_t;
  typedef std::pair<std::string,atbs_t> named_atbs;
private:
  static unsigned int INFOS_INDEX()   {return 0;}
//static unsigned int COLBACK_INDEX() {return 1;}
  static unsigned int TITLE_INDEX()   {return 2;}
  static unsigned int LAY_INDEX()     {return 3;}
  static unsigned int ANIM_INDEX()    {return 4;}
  static unsigned int SLIDE_INDEX()   {return 5;}

  static unsigned int TITLE_LAY_INDEX()   {return 0;}
  static unsigned int TITLE_TXT_INDEX()   {return 2;}

  static inlib::colorf stop_color() {return inlib::colorf_salmon();}
  static inlib::colorf start_color() {return inlib::colorf_springgreen();}

public:
  virtual parent* copy() const {return new slides_opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    return inlib::file::is_slides(a_path,a_is);
  }
  virtual bool open(const std::string& a_path,inlib::sg::viewer& a_viewer,const inlib::args& a_args,bool& a_done) const {
    a_done = false;

    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    snos_t* snos = new snos_t();
    if(!xml::load_file(a_gv.out(),a_path,*snos)) {
      delete snos;
      _evd->detector_sg().clear();
      return false;
    }

    //bool mode_buttons = true;
    //if(snos->m_time_interval.size()) mode_buttons = false;

    if(snos->m_background.size()){
      inlib::colorf col = inlib::colorf_white();
      if(!inlib::sg::find_color(_evd->cmaps(),snos->m_background,col)) {
        a_gv.out() << "color " << snos->m_background << " not found."
                   << std::endl;
        _evd->detector_sg().clear();
        return false;
      }
      a_gv.set_scene_clear_color(col);
    }

    inlib::atime _now(0,0);
    if(!a_gv.get_time_now(_now)) {
      a_gv.out() << "exlib::slides_opener::open :"
                 << " viewer.get_time_now() failed."
                 << std::endl;
      _evd->detector_sg().clear();
      return false;     
    }

    //NOTE : wall : the scene graph creation may be lengthy,
    //       we ask a clients sync. (case jep_orsay_2013.slides).
    a_gv.ask_to_sync_clients(); //send once to the master.

    float hcam = 2;
    if(!_evd->is_evd()) {
      _evd->create_sg_evd();
      _evd->replace_camera(a_gv.create_2D_camera(hcam));    
    }
    a_gv.set_plane_viewer(true);
    a_gv.set_param_viewing(false); //picking

    if(snos->m_light_on.size()){
      bool v;
      if(inlib::to(snos->m_light_on,v)) {
        a_gv.set_scene_light_on(v);
      }
    }

    unsigned int snos_msecs;
    if(a_gv.m_params.m_time_interval) {
      snos_msecs = a_gv.m_params.m_time_interval;
    } else {
      inlib::to<unsigned int>(snos->m_time_interval,snos_msecs,5000);
    }

    inlib::sg::separator& dsep = _evd->detector_sg();
    dsep.clear();

    inlib::sg::selection* sel = a_gv.create_selection();
    sel->up_cbks().add(new slide_cbk(a_gv,slide_cbk::action_up()));
    dsep.add(sel);

    inlib::sg::matrix* tsf = new inlib::sg::matrix;
    sel->add(tsf);

    inlib::sg::_switch* slides_sw = new inlib::sg::_switch;
    slides_sw->which = 0;
    //sel->add(slides_sw) done after control buttons.

    ///////////////////////////////////////////////
    ///////////////////////////////////////////////
    ///////////////////////////////////////////////
    float hmeta = 0.1f*a_gv.gui_camera_height();
    float wcw,wch,tx,ty,aspect;
    a_gv.get_gui_wcw_wch(wcw,wch,tx,ty,aspect);

    float hbutton = inlib::device::small_screen()?0.2f:0.1f;
    float wbutton = hbutton;
    if(a_gv.is_wall_screen_app()) {
      wbutton *= 0.5f;
      hbutton *= 0.5f;
    }

    ///////////////////////////////////////////////
    ///////////////////////////////////////////////
    ///////////////////////////////////////////////
    float title_h = hbutton;
    float title_x = -0.5f*hcam*aspect;       
    float title_y = 0.5f*hcam-title_h;
    float title_wmx = hcam*aspect;

    ///////////////////////////////////////////////
    /// prev button ///////////////////////////////
    ///////////////////////////////////////////////
    inlib::sg::_switch* buttons_sw = new inlib::sg::_switch;
    buttons_sw->which = 0; //buttons visible
    inlib::sg::separator* buttons_sep = new inlib::sg::separator;
    buttons_sw->add(buttons_sep);
    buttons_sw->add(new inlib::sg::separator);
    //sel->add(buttons_sw); //after slides_sw because of colback nodes.

    inlib::sg::matrix* prev_matrix = 0;
   {inlib::sg::separator* _sep = new inlib::sg::separator;
    buttons_sep->add(_sep);
  
    prev_matrix = new inlib::sg::matrix;
    prev_matrix->set_translate(tx+wcw*0.5f-wbutton*0.5f-2*wbutton,
                               ty-1+0.5f*hbutton+hmeta,0.1f);
    prev_matrix->mul_scale(1,1,0.01f);
    _sep->add(prev_matrix);
  
    inlib::sg::arrow_button* prev_button = 0;
    prev_button = new inlib::sg::arrow_button;
    prev_button->orientation = inlib::sg::arrow_left;
    prev_button->width = wbutton;
    prev_button->height = hbutton;
    _sep->add(prev_button);
  
    slide_cbk* _cbk = new slide_cbk(a_gv,slide_cbk::action_prev());
    _cbk->m_sw = slides_sw;
    prev_button->add_callback(_cbk);}
  
    ///////////////////////////////////////////////
    /// next button ///////////////////////////////
    ///////////////////////////////////////////////
    inlib::sg::matrix* next_matrix = 0;
   {inlib::sg::separator* _sep = new inlib::sg::separator;
    buttons_sep->add(_sep);
  
    next_matrix = new inlib::sg::matrix;
    next_matrix->set_translate(tx+wcw*0.5f-wbutton*0.5f-wbutton,
                               ty-1+0.5f*hbutton+hmeta,0.1f);
    next_matrix->mul_scale(1,1,0.01f);
    _sep->add(next_matrix);
  
    inlib::sg::arrow_button* next_button = 0;
    next_button = new inlib::sg::arrow_button;
    next_button->orientation = inlib::sg::arrow_right;
    next_button->width = wbutton;
    next_button->height = hbutton;
    _sep->add(next_button);
  
    slide_cbk* _cbk = new slide_cbk(a_gv,slide_cbk::action_next());
    _cbk->m_sw = slides_sw;
    next_button->add_callback(_cbk);}

    ///////////////////////////////////////////////
    /// start/stop diaporama //////////////////////
    ///////////////////////////////////////////////
    inlib::sg::matrix* start_stop_matrix = 0;
    inlib::sg::text_button* start_stop_button = 0;
    slide_cbk* start_stop_cbk = 0;
   {inlib::sg::separator* _sep = new inlib::sg::separator;
    buttons_sep->add(_sep);

    start_stop_matrix = new inlib::sg::matrix;
    start_stop_matrix->set_translate(tx+wcw*0.5f-wbutton*0.5f,
                                     ty-1+0.5f*hbutton+hmeta,0.1f);
    start_stop_matrix->mul_scale(1,1,0.01f);
    _sep->add(start_stop_matrix);

    start_stop_button = new inlib::sg::text_button(a_gv.ttf());   
    start_stop_button->width = wbutton;
    start_stop_button->height = hbutton;
    a_gv.set_arconf(*start_stop_button," ");
    start_stop_button->back_area::color = start_color();
    _sep->add(start_stop_button);

    start_stop_cbk = new slide_cbk(a_gv,slide_cbk::action_start_stop());
    start_stop_cbk->m_start_stop_button = start_stop_button;
    start_stop_button->add_callback(start_stop_cbk);}

    ///////////////////////////////////////////////////////////
    /// adjust size dispatcher. Can't be under the switch. ////
    ///////////////////////////////////////////////////////////
    slide_cbk* _slide_cbk = 0;
   {inlib::sg::event_dispatcher* dpt = new inlib::sg::event_dispatcher;
    _slide_cbk = new slide_cbk(a_gv,slide_cbk::action_adjust());
    _slide_cbk->m_wbutton = wbutton;
    _slide_cbk->m_hbutton = hbutton;
    _slide_cbk->m_sw = slides_sw;
    _slide_cbk->m_prev_matrix = prev_matrix;
    _slide_cbk->m_next_matrix = next_matrix;
    _slide_cbk->m_start_stop_matrix = start_stop_matrix;
    _slide_cbk->m_start_stop_button = start_stop_button;
    dpt->add_callback(_slide_cbk);
    sel->add(dpt);}
  
    sel->add(slides_sw);
    sel->add(buttons_sw); //after slides_sw because of colback nodes.

    ///////////////////////////////////////////////
    /// slides ////////////////////////////////////
    ///////////////////////////////////////////////

    // get slide area pixels :
    unsigned int ww = 0;
    unsigned int wh = 0;
    float h_slide = 0;
    float slide_y = 0;
   {a_gv.get_inside_pixels(ww,wh);
    float adjust = 0.98f;
    //adjust = 1;
    h_slide = hcam-hmeta-hbutton-title_h;
    h_slide *= adjust;
    // hcam -> wh
    // h_slide -> h_slide*wh/hcam
    wh = (unsigned int)(h_slide*float(wh)/hcam);
    ww = (unsigned int)(float(ww)*adjust);
    slide_y = 0.5f*hcam - title_h - 0.5f*h_slide;}
  
    bool has_anim = false;

    size_t sz = dsep.size();

    unsigned int first_sno_msecs = 0;

   {std::string stmp;
    inlib_vforcit(inlib::xml::scenario*,*snos,it) {
      inlib::xml::scenario& _sno = *(*it);

      std::string scol = _sno.m_background;
      _sno.m_background.clear(); //disconnect ttf/cbk/scenarion logic.

      inlib::cbk::scenario _cbk(a_gv,m_openers,a_args,_sno);
      _cbk.action(); //it adds nodes in dsep.

      _slide_cbk->m_center_adjusts.push_back(_sno.m_center_adjust);      

      // WARNING : if changing sg, think to update action_adjust()
      inlib::sg::separator* sep = new inlib::sg::separator;
      slides_sw->add(sep);

      unsigned int sno_msecs;
      inlib::to<unsigned int>(_sno.m_time_interval,sno_msecs,snos_msecs);
      if(it==snos->begin()) first_sno_msecs = sno_msecs;

      inlib::sg::infos* _infos = new inlib::sg::infos;
      if(!inlib::num2s(sno_msecs,stmp)) {}
      _infos->add_keyval(inlib::sg::s_time_interval(),stmp);
      sep->add(_infos); //INFOS_INDEX()

     {inlib::colorf col = inlib::colorf_white();
      if(scol.size() && inlib::sg::find_color(_evd->cmaps(),scol,col)) {
        inlib::sg::colback* _col = new inlib::sg::colback;
        _col->color = col;
        sep->add(_col);                     //COLBACK_INDEX()
      } else {
        sep->add(new inlib::sg::separator); //COLBACK_INDEX()
      }}

     {const std::vector<named_atbs>& txt = _sno.m_title;
      std::vector<std::string> vs;
      inlib_vforcit(named_atbs,txt,it2) vs.push_back((*it2).first);
      //TITLE_INDEX() 
      add_title(*sep,vs,title_x,title_y,title_h,title_wmx,a_gv.ttf());}

      inlib::sg::matrix* lay = new inlib::sg::matrix;
      sep->add(lay);               //LAY_INDEX()

      if(_sno.m_anim.m_args.size()) {
        float def_omega = inlib::ftwo_pi(); // turn/s  
        float omega;
        inlib::args _args;
        _args.add(_sno.m_anim.m_args);
        if(!_args.find(inlib::sg::s_rad_per_sec(),omega)) omega = def_omega;

        //std::string skind;
        //if(!_args.find(inlib::sg::s_kind(),skind)) skind = inlib::sg::s_rot();

        float x = 0;
        float y = 1;
        float z = 0;
       {std::string _s;
        if(_args.find(inlib::sg::s_axis(),_s)) {
          if(!inlib::to_axis(_s,x,y,z)) {
            x = 0;y = 1;z = 0;
          }
        }}

        inlib::sg::rotate_anim* _anim = new inlib::sg::rotate_anim(_now);
        _anim->axis.set_value(x,y,z);
        _anim->omega = omega;
        sep->add(_anim); //ANIM_INDEX()
        has_anim = true;
      } else {
        sep->add(new inlib::sg::separator); //ANIM_INDEX()
      }

      inlib::sg::separator* slide = new inlib::sg::separator;
      sep->add(slide);             //SLIDE_INDEX()

     {for(size_t index=sz;index<dsep.size();index++) slide->add(dsep[index]);}
     {for(size_t index=0;index<slide->size();index++) dsep.remove((*slide)[index]);}

      if(_sno.m_center_adjust && slide->size()) {
        if(!inlib::center_adjust(a_gv.out(),
                                 *slide,*lay,
                                 ww,wh,
                                 h_slide,false)) {
          //a_gv.out() << "exlib::slides_opener::open :"
          //           << " center_adjust failed."
          //           << std::endl;
          lay->set_identity();
        } else {
          lay->left_mul_translate(0,slide_y,0);
        }
      }
    }}

    a_gv.wait_sync_client(); //if wall

    if(has_anim) a_gv.enable_anim();

    ///////////////////////////////////////////////
    ///////////////////////////////////////////////
    ///////////////////////////////////////////////
    delete snos;

   {_switch_anim* _anim = new _switch_anim(_now,*slides_sw);
    _anim->time_interval = first_sno_msecs;
    _anim->stop();
    sel->add(_anim);
    start_stop_cbk->m_anim = _anim;}

    ///////////////////////////////////////////////
    ///////////////////////////////////////////////
    ///////////////////////////////////////////////
    if(slides_sw->size()==1) buttons_sw->which = 1; //hide buttons.
    ///////////////////////////////////////////////
    ///////////////////////////////////////////////
    ///////////////////////////////////////////////

    a_gv.hide_meta_zone();
    a_gv.hide_main_menu();
  
    a_done = true;
    return true;
  }

  virtual bool is(inlib::uint64,const char*,bool& a_is) const {
    a_is = false;
    return true;
  }
  virtual bool open(inlib::uint64,const char*,
                    inlib::sg::viewer&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }

  virtual bool open(const std::string&,
                    inlib::sg::viewer&,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  typedef std::pair<std::string,parent*> named_opener_t;
  slides_opener(const std::vector<named_opener_t>& a_openers)
  :m_openers(a_openers)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~slides_opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  slides_opener(const slides_opener& a_from)
  :parent(a_from)
  ,m_openers(a_from.m_openers)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  slides_opener& operator=(const slides_opener&){return *this;}  

protected:
  static void add_title(inlib::sg::separator& a_sep,
                        const std::vector<std::string>& a_txt,
                        float a_x,float a_y,float a_h,float a_wmx,
                        const inlib::sg::base_freetype& a_ttf){

    inlib::sg::separator* _sep = new inlib::sg::separator;
    a_sep.add(_sep); //TITLE_INDEX()

    inlib::sg::matrix* m = new inlib::sg::matrix;
    m->set_translate(a_x,a_y,0);
    _sep->add(m);    //TITLE_LAY_INDEX()

    inlib::sg::rgba* mat = new inlib::sg::rgba();
    mat->color = inlib::colorf_wheat();
    _sep->add(mat);

    inlib::sg::base_freetype* tft = inlib::sg::base_freetype::create(a_ttf);
    tft->font = inlib::sg::font_arialbd_ttf();
    tft->height = a_h;
    tft->strings = a_txt;

   {float mn_x,mn_y,mn_z;
    float mx_x,mx_y,mx_z;
    tft->get_bounds(a_h,mn_x,mn_y,mn_z,mx_x,mx_y,mx_z);
    float tw = mx_x-mn_x;
    if((tw>=0)&&(tw>=a_wmx)) {
      // tw -> a_h
      // a_wmx -> a_wmx*a_h/tw
      tft->height = a_wmx*a_h/tw;
    }}

    _sep->add(tft); //TITLE_TXT_INDEX()

  }

protected:
  static bool slide_rewind(inlib::sg::node& a_slide) {
    // set per slide light, background.

    inlib::nostream out;
    inlib::sg::search_action action(out);
    action.set_class(inlib::sg::base_tex_anim::s_class());
    a_slide.search(action);
    const std::vector<void*>& objs = action.objs();
    bool to_render = false;
    inlib_vforcit(void*,objs,it) {
      if(((inlib::sg::base_tex_anim*)(*it))->load_first_image())
        to_render = true;
    }
    return to_render;
  }

protected:

  class _switch_anim : public inlib::sg::switch_anim {
    typedef inlib::sg::switch_anim parent;
  public: //base_anim
    virtual void after_next() {
      inlib::sg::node* _slide = m_switch.which_node();
      if(_slide) {
        slide_rewind(*_slide);
        unsigned int msecs = slide_time_interval(*_slide);
        if(msecs) time_interval = msecs;
      }
    }
  public:
    _switch_anim(const inlib::atime& a_start,inlib::sg::_switch& a_sw)
    :parent(a_start,a_sw){}
    virtual ~_switch_anim(){}
  public:
    _switch_anim(const _switch_anim& a_from):parent(a_from){}
    _switch_anim& operator=(const _switch_anim& a_from){
      parent::operator=(a_from);
      return *this;
    }
  protected:
    static unsigned int slide_time_interval(inlib::sg::node& a_slide) {
      inlib::nostream out;
      inlib::sg::search_action action(out);
      action.set_class(inlib::sg::infos::s_class());
      action.set_stop_at_first(true);
      a_slide.search(action);
      const std::vector<void*>& objs = action.objs();
      inlib_vforcit(void*,objs,it) {
        inlib::sg::infos* _infos = (inlib::sg::infos*)(*it);
        inlib::args _args;
        _args.add_keyvals(_infos->strings.values());
        unsigned int msecs;
        _args.find<unsigned int>(inlib::sg::s_time_interval(),msecs,0);
        return msecs;
      }
      return 0;
    }
  };

  class slide_cbk : public inlib::sg::ecbk {
  public:
    static unsigned int action_up()         {return 10;}
    static unsigned int action_prev()       {return 11;}
    static unsigned int action_next()       {return 12;}
    static unsigned int action_adjust()     {return 13;}
    static unsigned int action_start_stop() {return 14;}
  public:
    virtual inlib::sg::return_action action() {

      if(m_action==action_up()) {
        if(m_node) {
          if(inlib::sg::base_button* btn = 
           inlib::safe_cast<inlib::sg::node,inlib::sg::base_button>(*m_node)){
            m_gv.trigger_button(btn);
            m_event_action->set_done(true);
            return inlib::sg::return_none;
          }
        }

      } else if(m_action==action_prev()) {

        int index = m_sw->which.value()-1;
        if(index<0) index = int(m_sw->size())-1;
        m_sw->which = index;

       {inlib::sg::node* _slide = m_sw->which_node();
        if(_slide) slide_rewind(*_slide);}

        return inlib::sg::return_to_render;     

      } else if(m_action==action_next()) {

        int index = m_sw->which.value()+1;
        if(index>=(int)m_sw->size()) index = 0;
        m_sw->which = index;

       {inlib::sg::node* _slide = m_sw->which_node();
        if(_slide) slide_rewind(*_slide);}

        return inlib::sg::return_to_render;     

      } else if(m_action==action_adjust()) {

        if(const inlib::sg::size_event* sz_evt =
           inlib::sg::event_cast<inlib::sg::event,inlib::sg::size_event>(*m_event)){

          float hcam = 2;
          float hmeta = 0.1f*m_gv.gui_camera_height();

          float wcw,wch,tx,ty,aspect;
          m_gv.get_gui_wcw_wch(wcw,wch,tx,ty,aspect);

          m_prev_matrix->set_translate(tx+wcw*0.5f-m_wbutton*0.5f-2*m_wbutton,
                                       ty-1+0.5f*m_hbutton+hmeta,0.1f);
          m_prev_matrix->mul_scale(1,1,0.01f);

          m_next_matrix->set_translate(tx+wcw*0.5f-m_wbutton*0.5f-m_wbutton,
                                       ty-1+0.5f*m_hbutton+hmeta,0.1f);
          m_next_matrix->mul_scale(1,1,0.01f);

          m_start_stop_matrix->set_translate(tx+wcw*0.5f-m_wbutton*0.5f,
                                             ty-1+0.5f*m_hbutton+hmeta,0.1f);
          m_start_stop_matrix->mul_scale(1,1,0.01f);

          //title position :
          float title_h = m_hbutton;
          float title_x = -0.5f*hcam*aspect;       
          float title_y = 0.5f*hcam-title_h;
          float title_wmx = hcam*aspect;

          // get slide area pixels :
          unsigned int ww = sz_evt->width();
          unsigned int wh = sz_evt->height();
          float adjust = 0.98f;
          //adjust = 1;
          float h_slide = hcam-hmeta-m_hbutton-title_h;
          h_slide *= adjust;
          wh = (unsigned int)(h_slide*float(wh)/hcam);
          ww = (unsigned int)(float(ww)*adjust);
          float slide_y = 0.5f*hcam - title_h - 0.5f*h_slide;

          for(unsigned int index=0;index<m_sw->size();index++) {
            inlib::sg::separator* sep = 
              inlib::safe_cast<inlib::sg::node,inlib::sg::separator>
                (*((*m_sw)[index]));

            inlib::sg::separator* tsep = 
              inlib::safe_cast<inlib::sg::node,inlib::sg::separator>
                (*((*sep)[TITLE_INDEX()]));

            inlib::sg::matrix* tlay = 
              inlib::safe_cast<inlib::sg::node,inlib::sg::matrix>
                (*((*tsep)[TITLE_LAY_INDEX()]));

            inlib::sg::base_freetype* ttxt = 
              inlib::safe_cast<inlib::sg::node,inlib::sg::base_freetype>
                (*((*tsep)[TITLE_TXT_INDEX()]));

            inlib::sg::matrix* lay = 
              inlib::safe_cast<inlib::sg::node,inlib::sg::matrix>
                (*((*sep)[LAY_INDEX()]));

            inlib::sg::separator* slide = 
              inlib::safe_cast<inlib::sg::node,inlib::sg::separator>
                (*((*sep)[SLIDE_INDEX()]));

            tlay->set_translate(title_x,title_y,0);

           {float mn_x,mn_y,mn_z;
            float mx_x,mx_y,mx_z;
            ttxt->height = title_h;
            ttxt->get_bounds(title_h,mn_x,mn_y,mn_z,mx_x,mx_y,mx_z);
            float tw = mx_x-mn_x;
            if((tw>0)&&(tw>=title_wmx)) {
              ttxt->height = title_wmx*title_h/tw;
            }}

            if(m_center_adjusts[index] && slide->size()) {
              if(!inlib::center_adjust(m_gv.out(),
                                       *slide,*lay,
                                       ww,wh,
                                       h_slide,false)){
                //m_gv.out() << "exlib::slides_opener::slide_cbk :"
                //           << " center_adjust failed."
                //           << std::endl;
                lay->set_identity();
              } else {
                lay->left_mul_translate(0,slide_y,0);
              }            
            }            

          }

          m_event_action->set_done(true);
          return inlib::sg::return_to_render;
        }

      } else if(m_action==action_start_stop()) {
        if(m_anim->stopped()) {
          m_anim->start();
          m_gv.enable_anim();
          m_start_stop_button->back_area::color = stop_color();
        } else {
          m_anim->stop();
          //m_gv.disable_anim();
          m_start_stop_button->back_area::color = start_color();
        }

        return inlib::sg::return_to_render;     

      }
      return inlib::sg::return_none;     
    }
    virtual inlib::sg::bcbk* copy() const {return new slide_cbk(*this);}
  public:
    slide_cbk(inlib::sg::gui_viewer& a_gv,unsigned int a_action)
    :inlib::sg::ecbk(a_action)
    ,m_gv(a_gv)
    ,m_wbutton(0.1f)
    ,m_hbutton(0.1f)
    ,m_sw(0)
    ,m_sw_anim(0)
    ,m_sep(0)
    ,m_matrix(0)
    ,m_anim(0)
    ,m_next_matrix(0)
    ,m_prev_matrix(0)
    ,m_start_stop_matrix(0)
    ,m_start_stop_button(0)
    {}
    virtual ~slide_cbk(){}
  public:
    slide_cbk(const slide_cbk& a_from)
    :inlib::sg::ecbk(a_from)
    ,m_gv(a_from.m_gv)
    ,m_wbutton(a_from.m_wbutton)
    ,m_hbutton(a_from.m_hbutton)
    ,m_sw(a_from.m_sw)
    ,m_sw_anim(a_from.m_sw_anim)
    ,m_sep(a_from.m_sep)
    ,m_matrix(a_from.m_matrix)
    ,m_anim(a_from.m_anim)
    ,m_next_matrix(a_from.m_next_matrix)
    ,m_prev_matrix(a_from.m_prev_matrix)
    ,m_start_stop_matrix(a_from.m_start_stop_matrix)
    ,m_start_stop_button(a_from.m_start_stop_button)
    ,m_center_adjusts(a_from.m_center_adjusts)
    {}
    slide_cbk& operator=(const slide_cbk& a_from){
      inlib::sg::ecbk::operator=(a_from);
      m_wbutton = a_from.m_wbutton;
      m_hbutton = a_from.m_hbutton;
      m_sw = a_from.m_sw;
      m_sw_anim = a_from.m_sw_anim;
      m_sep = a_from.m_sep;
      m_matrix = a_from.m_matrix;
      m_anim = a_from.m_anim;

      m_next_matrix = a_from.m_next_matrix;
      m_prev_matrix = a_from.m_prev_matrix;
      m_start_stop_matrix = a_from.m_start_stop_matrix;
      m_start_stop_button = a_from.m_start_stop_button;
      m_center_adjusts = a_from.m_center_adjusts;

      return *this;
    }
  protected:
    inlib::sg::gui_viewer& m_gv;    
  public: //per case :
    // slides :
    float m_wbutton;
    float m_hbutton;
    inlib::sg::_switch* m_sw;
    inlib::sg::switch_anim* m_sw_anim;
    inlib::sg::separator* m_sep;
    inlib::sg::matrix* m_matrix;
    inlib::sg::base_anim* m_anim;
    inlib::sg::matrix* m_next_matrix;
    inlib::sg::matrix* m_prev_matrix;
    inlib::sg::matrix* m_start_stop_matrix;
    inlib::sg::text_button* m_start_stop_button;
    std::vector<bool> m_center_adjusts;
  };

protected:
  const std::vector<named_opener_t>& m_openers;
};

}

#endif

//exlib_build_use inlib expat kernel

