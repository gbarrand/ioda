// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_rroot_opener
#define exlib_rroot_opener

#include <inlib/sg/iopener>
#include <inlib/rroot/geo>
#include <inlib/cbk/root_obj>
#include <inlib/cbk/rkeys_menu>

#include "../gzip"

////////////////////////////
/// for open scenario : ////
////////////////////////////
#include "../zlib"

namespace exlib {
namespace rroot {
inline bool pv_name(const inlib::rroot::geo_volume& a_pv,std::string& a_name) {
  a_name = a_pv.name();
  return true;
}
inline void no_vds(const inlib::rroot::geo_volume& a_vol,std::vector< std::pair<std::string,unsigned int> >& a_vds){
  a_vds.clear();
  inlib::rroot::vds(a_vol,0,a_vds); //do it anyway.
}
}}

#include <inlib/sg/scenario>
////////////////////////////
////////////////////////////
////////////////////////////

namespace exlib {
namespace rroot {

class opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::rroot::opener)
public:
  virtual parent* copy() const {return new opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    return inlib::file::is_root(a_path,a_is);
  }
  virtual bool open(const std::string& a_path,inlib::sg::viewer& a_viewer,const inlib::args& a_args,bool& a_done) const {
    a_done = false;

    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    std::ostream& out = a_gv.out();

    bool verbose = false;

    inlib::rroot::file* rfile = new inlib::rroot::file(out,a_path,verbose);
        
    //inlib::rroot::dump(out,*rfile,rfile->dir().keys(),true);
    rfile->add_unziper('Z',decompress_buffer);
  
    opener& self = const_cast<opener&>(*this);

    //popup :
    bool popup;
    if(!a_args.find(inlib::sg::s_popup(),popup,false)) {}
    int ex;
    if(!a_args.find<int>(inlib::sg::s_ex(),ex)) {}
    int ey;
    if(!a_args.find<int>(inlib::sg::s_ey(),ey)) {}

    const std::vector<inlib::rroot::key*>& keys = rfile->dir().keys();
    inlib::cbk::root_obj::cbk_fact fact;
    if(!inlib::cbk::rkeys_menu(*rfile,keys,a_gv,self.m_proj,fact,inlib::sg::pos_data(popup,ex,ey))) {
      delete rfile;
      return false;
    }
  
    a_gv.remove_in_tmp_group<inlib::rroot::file>(a_path);
    a_gv.add_in_tmp_group<inlib::rroot::file>(a_path,rfile);
  
    a_done = true;
    return true;
  }
  virtual bool is(inlib::uint64,const char*,bool& a_is) const {
    a_is = false;
    return true;
  }
  virtual bool open(inlib::uint64,const char*,
                    inlib::sg::viewer&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }

  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::xml::scenario& a_sno,
                    inlib::sg::cmaps_t& a_cmaps,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;

    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    //we assume one geo_manager holder with path name.
  
    inlib::rroot::geo_manager* mgr = a_gv.find_in_tmp_group<inlib::rroot::geo_manager>(a_path);
    
    if(mgr) {
      //then we should have mgr
      //a_gv.out() << "debug : mgr found on scenario" << std::endl;        

    } else {
      //then we should have !mgr
      //a_gv.out() << "debug : mgr not found on scenario" << std::endl;

      //////////////////////////////////////////////////////////
      /// read the .root file //////////////////////////////////
      //////////////////////////////////////////////////////////
  
      bool verbose = false;
      inlib::rroot::file* rfile = new inlib::rroot::file(a_gv.out(),a_path,verbose);
      if(!rfile->is_open()) {
        delete rfile;
        a_gv.map_warn(".root file not opened.");
        return false;     
      }
    
      rfile->add_unziper('Z',decompress_buffer);
        
      inlib::rroot::key* key = rfile->dir().find_key_from_class("TGeoManager");
      if(!key) {
        delete rfile;
        a_gv.map_warn("TGeoManager key not found.");
        return false;
      }
      unsigned int sz;
      char* buf = key->get_object_buffer(*rfile,sz);
      if(!buf) {
        delete rfile;
        a_gv.map_warn("can't get data buffer TGeoManager key.");
        return false;
      }
      //std::cout << "size of TGeoManager key : " << sz << std::endl;
      
      inlib::rroot::buffer b(a_gv.out(),rfile->byte_swap(),sz,buf,key->key_length(),verbose);
      b.set_map_objs(true);
  
      //a_gv.out() << "debug : stream in geom..." << std::endl;        
    
      mgr = new inlib::rroot::geo_manager(a_gv.out());
      if(!mgr->stream(b)) {
        delete mgr;
        delete rfile;
        a_gv.map_warn("streaming failed for TGeoManager.");
        return false;
      }
    
      delete rfile; //not needed anymore.
          
      //a_gv.out() << "debug : stream geom done." << std::endl;        
        
      const inlib::rroot::geo_volume* master = mgr->master();
      if(!master) {
        delete mgr;
        a_gv.map_warn("no master volume.");
        return false;
      }
    
      a_gv.remove_in_tmp_group<inlib::rroot::geo_manager>(a_path);
      a_gv.add_in_tmp_group<inlib::rroot::geo_manager>(a_path,mgr);
      
    }
    
    const inlib::rroot::geo_volume* master = mgr->master();

    inlib::sg::separator& dsep = _evd->detector_sg();

    inlib::sg::separator* _sep = new inlib::sg::separator;
    dsep.add(_sep);

    inlib::sg::matrix* lay = new inlib::sg::matrix;
    _sep->add(lay);

    std::string swarn;
    if(!inlib::create_scenario_sg<inlib::rroot::geo_volume,inlib::rroot::geo>
      (a_gv,a_cmaps,a_sno,*master,*_sep,no_vds,pv_name,swarn)){}

    if(a_gv.m_params.m_node_height>0) {
      inlib::sg::bbox_action _action(a_gv.out());
      _sep->bbox(_action);
      if(_action.end()) {
        float dx,dy,dz;
        if(_action.box().get_size(dx,dy,dz)) {
          if(dy>0) {
            float scale = a_gv.m_params.m_node_height/dy;
            lay->mul_scale(scale,scale,scale);
          }
        }
      }
    }

    if(swarn.size()) {
      a_gv.map_warn(swarn);
    } else {
      a_gv.hide_main_menu();
    }
  
    a_done = true;
    return true;
  }
public:
  opener(){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  opener(const opener& a_from):parent(a_from){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  opener& operator=(const opener&){return *this;}  
protected:
  inlib::ntu_proj m_proj;
};

}}

#endif

//exlib_build_use inlib inlib_glutess zlib kernel

