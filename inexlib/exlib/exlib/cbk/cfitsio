// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_cbk_cfitsio
#define exlib_cbk_cfitsio

//NOTE : there is a clash with TBYTE between fitsio.h that defines
//       it as a cpp macro and WinNT.h that defines it as a typedef.
//       As windows.h is indirectly included by inlib/sys/dir through
//       inlib/cbk/ntu, this file must be included first.

#include <inlib/sg/astro_tools>
#include <inlib/cbk/ntu>
#include <inlib/sg/healpix>
#include <inlib/sg/view_evd>
#include <inlib/sg/view_astro>

#include "../rcfitsio_ntuple"
#include "../fits_image"
#include "../wcs"
#include "../sg/text_freetype_marker"

namespace exlib {
namespace cbk {

class _data : public inlib::sg::pos_data {
  typedef inlib::sg::pos_data parent;
public:
  _data(bool a_popup,int a_ex,int a_ey)
  :parent(a_popup,a_ex,a_ey)
  ,m_ihdu(0)
  {}
  virtual ~_data(){}
public:
  _data(const _data& a_from)
  :parent(a_from)
  ,m_file(a_from.m_file)
  ,m_ihdu(a_from.m_ihdu)
  ,m_hdu_type(a_from.m_hdu_type)
  {}
  _data& operator=(const _data& a_from){
    parent::operator=(a_from);
    m_file = a_from.m_file;
    m_ihdu = a_from.m_ihdu;
    m_hdu_type = a_from.m_hdu_type;
    return *this;
  }
public:
  std::string m_file;
  unsigned int m_ihdu;
  std::string m_hdu_type;
};

inline inlib::sg::return_action action_show_keys(inlib::sg::gui_viewer& a_gv,const _data& a_data) {
  cfitsio::file ffile(a_gv.out());
  if(!ffile.open(a_data.m_file)) {
    a_gv.pop_warn(a_data,"open() failed");
    return inlib::sg::return_to_render;
  }
  if(!ffile.to_HDU(a_data.m_ihdu)) {
    ffile.close();
    a_gv.pop_warn(a_data,"to_HDU() failed");
    return inlib::sg::return_to_render;
  }

  std::vector<cfitsio::key> keys;
  if(!ffile.HDU_keys(keys)) {
    ffile.close();
    a_gv.pop_warn(a_data,"can't get keys");
    return inlib::sg::return_to_render;
  }

  std::vector<std::string> ltxt;
  std::vector<std::string> rtxt;
 {inlib_vforcit(cfitsio::key,keys,it){
    //std::string line = +" "+(*it).value();
    ltxt.push_back((*it).name());
    rtxt.push_back((*it).value());
  }}

  ffile.close();

  a_gv.gui_text(ltxt,rtxt);

  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_IMG_vis(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                               inlib::sg::entries& a_widget,const _data& a_data) {
  inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
  if(!_evd) return inlib::sg::return_none;
  inlib::sg::view_astro* _vastro = inlib::sg::cast_view_astro(a_gv);
  if(!_vastro) return inlib::sg::return_none;
  if(!_evd->is_evd()) _evd->create_sg_evd();
  if(!a_gv.scene_camera()) return inlib::sg::return_none;

  unsigned int slice;
  if(!inlib::to<unsigned int>(a_widget.values[0],slice)) {
    a_gv.pop_warn(a_data,"slice not a number");
    return inlib::sg::return_to_render;
  }

  unsigned int width,height;
  size_t sz;
  int bitpix;
  char* buffer = fits_image::read_slice(a_gv.out(),a_data.m_file,a_data.m_ihdu,slice,width,height,sz,bitpix);
  if(!buffer) {
    a_gv.pop_warn(a_data,"read_slice() failed");
    return inlib::sg::return_to_render;
  }
#ifdef INLIB_MEM
  inlib::mem::decrement(inlib::s_new().c_str());
#endif

  std::string scmap = inlib::cbn(inlib::SOPI::colbr128::s_class());
  inlib::SOPI::cmap _cmap(0);
  inlib::SOPI::stocmap(scmap,_cmap);

  inlib::sg::separator& dsep = _evd->detector_sg();

//#define EXLIB_CBK_CFITSIO_FLAT

#ifdef EXLIB_CBK_CFITSIO_FLAT
  inlib::sg::separator* sep = create_sg_cfitsio_flat(buffer,width,height,sz,bitpix,_cmap,*a_gv.scene_camera());
#else
  inlib::sg::separator* sep = 0;
  double radecs[8];
  if(!wcs::fits_corners(a_data.m_file.c_str(),radecs)) {
    a_gv.show_console("can't get radecs. Do a flat rep.");
    sep = create_sg_cfitsio_flat(buffer,width,height,sz,bitpix,_cmap,*a_gv.scene_camera(),true);
  } else {

    //::printf("debug : radecs (%g,%g) (%g,%g) (%g,%g) (%g,%g)\n",
    //  radecs[0],radecs[1],radecs[2],radecs[3],radecs[4],radecs[5],radecs[6],radecs[7]);

    double sky_radius = inlib::default_sky_radius();

    inlib::sg::base_camera* _camera = inlib::sg::astro_pimg_camera(a_gv,sky_radius);

    float ra,dec;
   {std::vector<inlib::vec3f> vcs;
    inlib::vec3f center;
    inlib::radecs_center(radecs,sky_radius,vcs,center);
    float theta,phi;
    center.theta_phi(theta,phi);
    ra = phi*inlib::frad2deg();
    dec = 90.0f-theta*inlib::frad2deg();}

    const inlib::wget& simbad_wget = _vastro->wget();

    const inlib::wget& stars_wget = _vastro->wget();

    const std::string& stars_host = _vastro->host();
    unsigned int stars_port = _vastro->port();
    bool stars_local = (stars_host.empty()||(stars_host==inlib::s_local())?true:false);

    std::string stars_dir;
    a_gv.first_data_dir(stars_dir);

    typedef sg::text_freetype_marker text_t;
    //typedef sg::text_freetype text_t;
    text_t* tft = new text_t; //template freetype node for cfitsio_stars.
  
    double stars_radius = inlib::default_stars_radius();
    sep = create_sg_cfitsio_sphere(buffer,width,height,sz,bitpix,_cmap,
                                   sky_radius,stars_radius,
                                   ra,dec,radecs,
                                   simbad_wget,
                                   stars_local,stars_wget,stars_host,stars_port,stars_dir,
                                   _vastro->SDSS_catalog(),
                                   *_camera,*tft);
				   
    sep->add(new inlib::sg::holder<text_t>(tft));

    _evd->replace_camera(_camera);
  }
#endif

  dsep.add(sep);

  delete [] buffer;

  a_gv.hide_main_menu();

  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_TBL_vis(inlib::sg::gui_viewer& a_gv,const _data& a_data) {
  inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
  if(!_evd) {
    a_gv.pop_warn(a_data,"viewer not an evd");
    return inlib::sg::return_none;
  }

  inlib::colorf bgcolor = inlib::colorf_black();

  std::string scmap = inlib::cbn(inlib::SOPI::colbr128::s_class());
  inlib::SOPI::cmap _cmap(0);
  inlib::SOPI::stocmap(scmap,_cmap);

  unsigned int column = 0;

  float _mn,_mx; //before applying lut.
  unsigned int NSIDE;
  bool ORDERING_RING;
  float* hpixs = 
    fits_image::HEALPix_BINARY_TBL_read(a_gv.out(),a_data.m_file,a_data.m_ihdu,column,NSIDE,ORDERING_RING,_mn,_mx);
  if(!hpixs) {
    a_gv.pop_warn(a_data,"HEALPix_BINARY_TBL_read() failed");
    return inlib::sg::return_to_render;
  }

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_2D_camera(2));
  }
  a_gv.set_plane_viewer(true);
  
  inlib::sg::separator& dsep = _evd->detector_sg();

  //bool adapt_camera = dsep.empty()?true:false;

  inlib::sg::separator* sep = new inlib::sg::separator;
  dsep.add(sep);

  inlib::sg::matrix* tsf = new inlib::sg::matrix();
  sep->add(tsf);

  inlib::sg::rgba* mat = new inlib::sg::rgba();
  mat->color = inlib::colorf_white();
  sep->add(mat);

  sep->add(new inlib::sg::normal);
  sep->add(new inlib::sg::event_dispatcher()); //for image_manip.

  inlib::sg::healpix* _heal = new inlib::sg::healpix();
  _heal->back_color = bgcolor;
  _heal->expand = a_gv.m_params.m_image_expand;
  _heal->height = a_gv.wanted_size();
  _heal->healpixs.setValues(0,12*NSIDE*NSIDE,hpixs);
  _heal->ordering = ORDERING_RING?inlib::sg::healpix::ordering_ring:inlib::sg::healpix::ordering_nested;
  _heal->auto_lut = inlib::sg::auto_lut_min_max;
//_heal->support = inlib::sg::support_sphere;
  _heal->colors.clear();
 {for(unsigned int index=0;index<_cmap.size();index++) {
    const inlib::SOPI::color& _col = _cmap.get_color(index);
    _heal->colors.add(inlib::colorf(_col.r(),_col.g(),_col.b()));
  }}
  sep->add(_heal);

  //inlib::args args;
  //_evd->adapt_img(adapt_camera,*tsf,*_heal,args);

  delete [] hpixs;

  a_gv.hide_main_menu();

  return inlib::sg::return_to_render;
}

INLIB_GLOBAL_STRING(BINARY_TBL)
INLIB_GLOBAL_STRING(ASCII_TBL)
INLIB_GLOBAL_STRING(IMAGE_HDU)

inline inlib::sg::return_action action_vis(inlib::sg::gui_viewer& a_gv,const _data& a_data) {
  const std::string& shdu = a_data.m_hdu_type;

  std::string PIXTYPE;
  cfitsio::key_value(a_gv.out(),a_data.m_file,a_data.m_ihdu,"PIXTYPE",PIXTYPE);
  inlib::strip(PIXTYPE,inlib::both,'\'');
  inlib::strip(PIXTYPE);
    
  if(shdu==s_IMAGE_HDU()) {

    // choose slice menu :
    std::vector<unsigned int> orders;
    int bitpix;
    if(!fits_image::read_params(a_gv.out(),a_data.m_file,a_data.m_ihdu,orders,bitpix)) {
      a_gv.pop_warn(a_data,"read_params() failed");
      return inlib::sg::return_to_render;
    }

    inlib::sg::entries* _entries = new inlib::sg::entries(a_gv.ttf());
    a_gv.set_style(*_entries);

   {std::vector<std::string> opts;
    if(orders.size()>=3) {
      std::string stmp;
      for(unsigned int i=0;i<orders[2];i++){
        if(!inlib::num2s(i,stmp)) {}
        opts.push_back(stmp);
      }        
    } else {
      opts.push_back("0");
    }
    _entries->add_opts("slice","0",opts);}

    inlib::sg::add_callback(a_gv,*_entries,action_IMG_vis,a_data);

    a_gv.show_widget(a_data,_entries);
    
  } else if( (shdu==s_BINARY_TBL()) && (PIXTYPE=="HEALPIX") ){

    //for example Planck : COM_CompMap_CMB-smica_2048_R1.20.fits
 
/*
    std::vector<std::string> names;        
    cfitsio::TBL_column_names(a_gv.out(),a_data.m_file,a_data.m_ihdu,names);
    size_t ncol = names.size(); 
    if(ncol!=1) {
      a_gv.pop_warn(a_data,"#columns not one.");
      return inlib::sg::return_to_render;
    }

    inlib::sg::entries* _entries = new inlib::sg::entries(a_gv.ttf());
    a_gv.set_style(*_entries);

   {std::vector<std::string> opts;      
    std::string stmp;
    for(size_t i=0;i<ncol;i++) {
      if(!inlib::num2s(inlib::uint32(i),stmp)) {}
      opts.push_back(stmp+" "+names[i]);
    }
    _entries->add_opts("column",opts[0],opts);}

    inlib::sg::add_callback(a_gv,*_entries,action_TBL_vis,a_data);

    a_gv.show_widget(a_data,_entries);
*/

    return action_TBL_vis(a_gv,a_data);

  } else if((shdu==s_BINARY_TBL())||(shdu==s_ASCII_TBL())) {

    rcfitsio::ntuple* ntu = new rcfitsio::ntuple(a_gv.out(),a_data.m_file,a_data.m_ihdu);
    if(!ntu->initialize()) {
      delete ntu;
      a_gv.pop_warn(a_data,"rcfitsio::ntuple() failed");
      return inlib::sg::return_to_render;
    }

    inlib::sg::entries* _entries = new inlib::sg::entries(a_gv.ttf());
    a_gv.set_style(*_entries);

    std::vector<std::string> opts;
    opts.push_back(inlib::sg::s_1D());
    opts.push_back(inlib::sg::s_2D());
    _entries->add_opts("proj",inlib::sg::s_1D(),opts);

    inlib::ntu_proj* proj = new inlib::ntu_proj;
    inlib::cbk::choose_proj* _cbk = 
      new inlib::cbk::choose_proj(a_gv,*proj,*ntu,inlib::cbk::choose_proj::action_main(),a_data);
    _cbk->m_entries = _entries;
    _entries->add_callback(_cbk);

    a_gv.show_widget(a_data,_entries);

    //WARNING : give ownership of ntuple,proj to a sg::holder
    // deposited on the gui_viewer tmp group :
    a_gv.remove_in_tmp_group<rcfitsio::ntuple>(a_data.m_file);
    a_gv.add_in_tmp_group<rcfitsio::ntuple>(a_data.m_file,ntu);
    a_gv.remove_in_tmp_group<inlib::ntu_proj>(a_data.m_file);
    a_gv.add_in_tmp_group<inlib::ntu_proj>(a_data.m_file,proj);

  } else { //unknown HDU type.
    a_gv.out() << "exlib::cbk::cfitsio::action :" 
               << " object with "
               << " HDU " << inlib::sout(shdu)
               << " has no visualization."
               << std::endl;    
    a_gv.pop_warn(a_data,"HDU has no vis");
  }

  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_cfitsio(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                     inlib::sg::list&,const _data& a_data) {

  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  inlib::sg::add_item(a_gv,*list,"keys",action_show_keys,a_data);
  inlib::sg::add_item(a_gv,*list,"vis",action_vis,a_data);

  a_gv.show_widget(a_data,list);

  return inlib::sg::return_to_render;
}

}}

//exlib_build_use inlib cfitsio wcslib kernel freetype

#endif
