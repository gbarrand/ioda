// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_cbk_astro
#define exlib_cbk_astro

#include <inlib/sg/astro_tools>

#include <inlib/astro>
#include <inlib/mathd>
#include <inlib/atime2s>
#include <inlib/simbad>
#include <inlib/sg/view_evd>
#include <inlib/sys/process>
#include <inlib/sys/process>

#include <inlib/sg/view_astro>

#include "../fits_image"
#include "../wcs"
#include "../sg/text_freetype_marker"

namespace exlib {
namespace astro {

inline void stsci_surveys(std::vector<std::string>& a_v,std::string& a_def) {
  a_v.clear();
  a_v.push_back("poss2ukstu_red");
  a_v.push_back("poss2ukstu_ir");
  a_v.push_back("poss2ukstu_blue");
  a_v.push_back("poss1_blue");
  a_v.push_back("poss1_red");
  a_v.push_back("all");
  a_v.push_back("quickv");
  a_v.push_back("phase2_gsc2");
  a_v.push_back("phase2_gsc1");
  a_def = "all";
}

inline bool send_cmd_get(inlib::sg::gui_viewer& a_gv,const inlib::wget& a_stsci_wget,
                         const std::string& a_host,unsigned int a_port,
                         const std::string& a_request,const std::string& a_path) {
  char* doc;
  inlib::uint64 ldoc;
  std::string icookie,ocookie;
  if(!a_stsci_wget.get(a_host,a_port,a_request,doc,ldoc,icookie,ocookie)) {
    a_gv.out() << "exlib::astro::send_cmd_get :" 
               << " web fetch failed for request " << inlib::sout(a_request) << "."
               << std::endl;
    return false;
  }
  if(!ldoc) {
    a_gv.out() << "exlib::astro::send_cmd_get :" 
               << " warning: wget.get() : ldoc is zero."
               << " host = " << a_host << ", port = " << a_port
               << " request = " << a_request
               << std::endl;
  }
  //if(a_gv.cookie().empty()) a_gv.set_cookie(ocookie);
  bool status = inlib::file::write_bytes(a_path,doc,(size_t)ldoc);
  delete [] doc;
  if(!status) {
    a_gv.out() << "exlib::astro::send_cmd_get :" 
               << " file::write_bytes() failed for file " << inlib::sout(a_path) << "."
               << std::endl;
  }
  return status;
}

inline void get_objects(inlib::sg::gui_viewer& a_gv,
                        double a_ra,double a_dec,double a_w,double a_h,const std::string& a_title){
  // a_ra, a_dec in dec deg.
  // a_w, a_h in dec deg. Typically 0.25 degree = 15 arcmin.

  inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
  if(!_evd) return;
  inlib::sg::view_astro* _vastro = inlib::sg::cast_view_astro(a_gv);
  if(!_vastro) return;

  if(!_evd->is_evd()) _evd->create_sg_evd();

  double sky_radius = inlib::default_sky_radius();

  const inlib::wget& stsci_wget = _vastro->wget();

  inlib::atime begin = inlib::atime::now();

  std::string file;
  if(!inlib::num2s(inlib::process_id(),file)) {}
  file = "out_"+file+".fits"; //case of wall : sign also with pid.
  std::string path = a_gv.tmp_dir()+inlib::sep()+file;

  std::string epoch;
  epoch = inlib::s_epoch_J2000();

 {std::string host;
  unsigned int port = 80;
  std::string request;
  //if(server==s_server_stsci()) {
    // saods9-7.3.9/src/stsci.tcl :
    //set var(query) [http::formatQuery r $var(x) d $var(y) e J2000 w $ww h $hh f fits c $compress v $var(survey)]
    //set var(url) "http://stdatu.stsci.edu/cgi-bin/dss_search"

    host = inlib::s_host_stsci();

    std::vector<std::string> v;
    std::string def;
    stsci_surveys(v,def);
    std::string survey = def;

    //if(a_w>1.0) a_w = 1.0; //same logic as ds9
    //if(a_h>1.0) a_h = 1.0;

    request = "/cgi-bin/dss_search?";

    request += "r=";
    inlib::numas(a_ra,request);
    request += "d&";

    request += "d=";
    inlib::numas(a_dec,request);
    request += "d&";

    request += "e="+epoch+"&";    

    request += "w=";
    if(!inlib::numas<double>(a_w*60.0,request)){} //stsci wants arcmin
    request += "&";

    request += "h=";
    if(!inlib::numas<double>(a_h*60.0,request)){}    //stsci wants arcmin
    request += "&";   //stsci wants arcmin

    request += "f=fits&";
    request += "c=none&";
    request += "v="+survey+"&";
    //request += "fov=NONE&";
    //request += "v3=";
  //}

  //a_gv.out() << "debug : request " << request << std::endl;
  //a_gv.out() << "debug : path " << path << std::endl;

  if(!send_cmd_get(a_gv,stsci_wget,host,port,request,path)) {
    a_gv.map_warn("send_cmd(get) failed.");
    a_gv.out() << "send_cmd(get) failed : request :" << std::endl << request << std::endl;
    return;
  }}

  double radecs[8];
  if(!wcs::fits_corners(path.c_str(),radecs)) {
    a_gv.show_console("can't get radec corners.");
    inlib::file::std_remove(path);
    return;
  }

/*
  a_gv.out() << "debug :"
             << " corners "
             << " " << radecs[0] << " " << radecs[1]
             << " " << radecs[2] << " " << radecs[3]
             << " " << radecs[4] << " " << radecs[5]
             << " " << radecs[6] << " " << radecs[7]
             << std::endl;
*/

  unsigned int ihdu = 1;
  unsigned int slice = 0;

  unsigned int width,height;
  size_t sz;
  int bitpix;
  char* buffer = fits_image::read_slice(a_gv.out(),path,ihdu,slice,width,height,sz,bitpix);
  inlib::file::std_remove(path);
  if(!buffer) {
    //a_gv.map_warn_failed();
    a_gv.show_console(file+" : read fits IMG failed");
    return;
  }
#ifdef INLIB_MEM
  inlib::mem::decrement(inlib::s_new().c_str());
#endif

  const inlib::wget& simbad_wget = _vastro->wget();

  const inlib::wget& stars_wget = _vastro->wget();

  const std::string& stars_host = _vastro->host();
  unsigned int stars_port = _vastro->port();
  bool stars_local = (stars_host.empty()||(stars_host==inlib::s_local())?true:false);

  std::string stars_dir;
  a_gv.first_data_dir(stars_dir); //wall_screen : does not work, but on wall stars are got from repserv.
  inlib::SDSS::catalog& stars_catalog = _vastro->SDSS_catalog();

  std::string scmap = inlib::cbn(inlib::SOPI::colbr128::s_class());
  inlib::SOPI::cmap _cmap(0);
  inlib::SOPI::stocmap(scmap,_cmap);

  double stars_radius = inlib::default_stars_radius();

  inlib::sg::base_camera* _camera = inlib::sg::astro_pimg_camera(a_gv,sky_radius);
  if(!_camera) {delete [] buffer;return;}

  inlib::sg::separator& dsep = _evd->static_sg();

//inlib::sg::separator* sep = create_sg_cfitsio_flat(buffer,width,height,sz,bitpix,_cmap);

  typedef sg::text_freetype_marker text_t;
  //typedef sg::text_freetype text_t;
  text_t* tft = new text_t; //template freetype node for cfitsio_stars.

 {inlib::sg::separator* sep = create_sg_cfitsio_sphere(buffer,width,height,sz,bitpix,_cmap,
                                                      sky_radius,stars_radius,
                                                      a_ra,a_dec,
                                                      radecs,
                                                      simbad_wget,
                                                      stars_local,stars_wget,stars_host,stars_port,
                                                      stars_dir,stars_catalog,
                                                      *_camera,*tft);
  if(a_title.size()) {
    inlib::sg::infos* infos = new inlib::sg::infos;
    infos->add_title(a_title);
    sep->add(infos);
  }
  sep->add(new inlib::sg::holder<text_t>(tft));
  dsep.add(sep);}

  delete [] buffer;

  _evd->replace_camera(_camera);

  a_gv.hide_main_menu();
  
  //a_gv.m_params.m_console_width = 0.6F;
  //a_gv.set_console_layout();
  a_gv.atime2console(inlib::atime::elapsed(begin));
}

inline inlib::sg::return_action get_M51(inlib::sg::gui_viewer& a_gv) {
  //M-51, NGC-5194, Whirlpool Galaxy.

  //FK5 13:29:56 47:13:50
  //std::string sra = "13:29:56";   //h.m.s
  //std::string sdec = "47:13:50";  //d.am.as

  //SN2005cs in M51 (from Wikipedia) :
  std::string sra = "13:29:53.4";   //h.m.s
  std::string sdec = "47:10:28";  //d.am.as

  double ra;
  inlib::hour_sex_to_deg_10(sra,ra);
  double dec;
  inlib::deg_sex_to_deg_10(sdec,dec);
  //::printf("debug : %s %s\n",sra.c_str(),sdec.c_str());

  double w = 15.0/60.0; //15 arcmin
  double h = 15.0/60.0; //15 arcmin

  get_objects(a_gv,ra,dec,w,h,"M51");
  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_M82(inlib::sg::gui_viewer& a_gv) {
  //M-82, NGC-3034, Cigar galaxy.

  std::string sra = "09:55:52.2";   //h.m.s
  std::string sdec = "69:40:47";  //d.am.as

  double ra;
  inlib::hour_sex_to_deg_10(sra,ra);
  double dec;
  inlib::deg_sex_to_deg_10(sdec,dec);

  double w = 15.0/60.0; //15 arcmin  //0.25 dec deg
  double h = 15.0/60.0; //15 arcmin

  get_objects(a_gv,ra,dec,w,h,"M82");
  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_M104(inlib::sg::gui_viewer& a_gv) {
  //M-104, NGC-4594, Sombrero galaxy.

  std::string sra = "12:39:59.43";   //h.m.s
  std::string sdec = "-11:37:23";  //d.am.as

  double ra;
  inlib::hour_sex_to_deg_10(sra,ra);
  double dec;
  inlib::deg_sex_to_deg_10(sdec,dec);

  double w = 15.0/60.0; //15 arcmin  //0.25 dec deg
  double h = 15.0/60.0; //15 arcmin

  get_objects(a_gv,ra,dec,w,h,"M104");

  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_M63(inlib::sg::gui_viewer& a_gv) {
  //M-63, NGC-5055, Tournesol galaxy.

  std::string sra = "13:15:49,28";   //h.m.s
  std::string sdec = "42:01:46.5";  //d.am.as

  double ra;
  inlib::hour_sex_to_deg_10(sra,ra);
  double dec;
  inlib::deg_sex_to_deg_10(sdec,dec);

  double w = 15.0/60.0; //15 arcmin  //0.25 dec deg
  double h = 15.0/60.0; //15 arcmin

  get_objects(a_gv,ra,dec,w,h,"M63");

  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_M106(inlib::sg::gui_viewer& a_gv) {
  //M-106, NGC-4258.

  std::string sra = "12:18:57.5";   //h.m.s
  std::string sdec = "47:18:14";  //d.am.as

  double ra;
  inlib::hour_sex_to_deg_10(sra,ra);
  double dec;
  inlib::deg_sex_to_deg_10(sdec,dec);

  double w = 15.0/60.0; //15 arcmin  //0.25 dec deg
  double h = 15.0/60.0; //15 arcmin

  get_objects(a_gv,ra,dec,w,h,"M106");

  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_M42(inlib::sg::gui_viewer& a_gv) {
  //M-42, NGC-1976. Orion Nebula.   
  std::string sra = "5:35:17.3";   //h.m.s
  std::string sdec = "-5:23:28";  //d.am.as

  double ra;
  inlib::hour_sex_to_deg_10(sra,ra);
  double dec;
  inlib::deg_sex_to_deg_10(sdec,dec);

  double w = 85.0/60.0; //85 arcmin
  double h = 60.0/60.0; //60 arcmin

  get_objects(a_gv,ra,dec,w,h,"M42");
  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_Alnilam(inlib::sg::gui_viewer& a_gv) {
  //Orion : centered on Alnilam (Epsilon Ori).
  std::string sra = "5:36:12.8";   //h.m.s
  std::string sdec = "-1:12:6.9";  //d.am.as

  double ra;
  inlib::hour_sex_to_deg_10(sra,ra);
  double dec;
  inlib::deg_sex_to_deg_10(sdec,dec);

  double w = 2; //STSCI seems to be limited to 2 dec deg.
  double h = 2;

  get_objects(a_gv,ra,dec,w,h,"Alnilam");
  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_NGC6543(inlib::sg::gui_viewer& a_gv) {
  //NGC-6543, Cat's Eye nebulae.

  // from Wikipedia :
  std::string sra = "17:58:33.4";   //h.m.s
  std::string sdec = "66:37:59";  //d.am.as

  double ra;
  inlib::hour_sex_to_deg_10(sra,ra);
  double dec;
  inlib::deg_sex_to_deg_10(sdec,dec);
  //::printf("debug : %s %s\n",sra.c_str(),sdec.c_str());

  double w = 15.0/60.0; //15 arcmin
  double h = 15.0/60.0; //15 arcmin

  get_objects(a_gv,ra,dec,w,h,"NGC6543");
  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_Sgr_A_star(inlib::sg::gui_viewer& a_gv) {
  //Sagittarius A* : center of our galaxy.

  // from Wikipedia :
  std::string sra = "17:45:40.045";   //h.m.s
  std::string sdec = "-29:00:27.9";  //d.am.as

  double ra;
  inlib::hour_sex_to_deg_10(sra,ra);
  double dec;
  inlib::deg_sex_to_deg_10(sdec,dec);
  //::printf("debug : %s %s\n",sra.c_str(),sdec.c_str());

//double w = 15.0/60.0; //15 arcmin
//double h = 15.0/60.0; //15 arcmin

  double w = 3.0/60.0; //3 arcmin
  double h = 3.0/60.0; //3 arcmin

  get_objects(a_gv,ra,dec,w,h,"Sgr A*");
  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_0_90(inlib::sg::gui_viewer& a_gv) {
  double ra = 0;
  double dec = 90;
  double w = 0.25; //15 arcmin
  double h = 0.25; //15 arcmin
  get_objects(a_gv,ra,dec,w,h,"0_90");
  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_270_0(inlib::sg::gui_viewer& a_gv) {
  double ra = 270;
  double dec = 0;
  double w = 0.25; //15 arcmin
  double h = 0.25; 
  get_objects(a_gv,ra,dec,w,h,"270_0");
  return inlib::sg::return_to_render;  
}

inline inlib::sg::return_action get_90_45(inlib::sg::gui_viewer& a_gv) {
  double ra = 90;
  double dec = 45;
  double w = 0.25; //15 arcmin
  double h = 0.25; //15 arcmin
  get_objects(a_gv,ra,dec,w,h,"90_45");
  return inlib::sg::return_to_render;  
}

#define EXLIB_CBK_ASTRO_ACTION_GET_STAR(a__name) \
inline inlib::sg::return_action action_get_##a__name(inlib::sg::gui_viewer& a_gv) {return get_##a__name(a_gv);}

EXLIB_CBK_ASTRO_ACTION_GET_STAR(M51)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(M82)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(M104)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(M63)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(M106)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(M42)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(NGC6543)
//EXLIB_CBK_ASTRO_ACTION_GET_STAR(NGC1952)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(Sgr_A_star)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(Alnilam)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(0_90)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(270_0)
EXLIB_CBK_ASTRO_ACTION_GET_STAR(90_45)

#undef EXLIB_CBK_ASTRO_ACTION_GET_STAR

inline inlib::sg::return_action action_get_file(inlib::sg::gui_viewer& a_gv,inlib::sg::entries& a_widget) {
  inlib::sg::view_astro* _vastro = inlib::sg::cast_view_astro(a_gv);
  if(!_vastro) return inlib::sg::return_none;

  double ra;
 {const std::string& sval = a_widget.values[0];
  if(!inlib::hour_sex_to_deg_10(sval,ra)) {
    if(!inlib::to<double>(sval,ra)) {
      a_gv.map_warn_failed();
      a_gv.show_console(sval+" not <h:m:s> or a number");
      return inlib::sg::return_to_render;     
    }}
  }
  double dec;
 {const std::string& sval = a_widget.values[1];
  if(!inlib::deg_sex_to_deg_10(sval,dec)) {
    if(!inlib::to<double>(sval,dec)) {
      a_gv.map_warn_failed();
      a_gv.show_console(sval+" not <d:am:as> or a number");
      return inlib::sg::return_to_render;     
    }}
  }
  double w;
 {const std::string& sval = a_widget.values[2];
  if(!inlib::to<double>(sval,w)) {
    a_gv.map_warn_failed();
    a_gv.show_console(sval+" not a number");
    return inlib::sg::return_to_render;     
  }}
  double h;
 {const std::string& sval = a_widget.values[3];
  if(!inlib::to<double>(sval,h)) {
    a_gv.map_warn_failed();
    a_gv.show_console(sval+" not a number");
    return inlib::sg::return_to_render;     
  }}

  std::string title = a_widget.values[0] + " " +a_widget.values[1];

  get_objects(a_gv,ra,dec,w,h,title);

  return inlib::sg::return_to_render;     
}

inline inlib::sg::return_action action_STSCI_SIMBAD(inlib::sg::gui_viewer& a_gv) {
  inlib::sg::entries* _entries = new inlib::sg::entries(a_gv.ttf());
  a_gv.set_style(*_entries);
  //_entries->add_range("ra (dec deg)",270,0,360);
  //_entries->add_range("dec (dec deg)",0,-90,90);
  _entries->add_radec("ra (h:m:s or dec deg)","18:0:0");
  _entries->add_radec("dec (d:ma:sa or dec deg)","0:0:0");
  _entries->add_double("w (dec deg)",0.25); //15.0/60.0 = 15 arcmin.
  _entries->add_double("h (dec deg)",0.25); //15.0/60.0 = 15 arcmin.
  inlib::sg::add_callback(a_gv,*_entries,action_get_file);
  a_gv.push_list(_entries);
  return inlib::sg::return_to_render;
}

}}

//exlib_build_use inlib cfitsio wcslib kernel inlib_glutess freetype

#endif

