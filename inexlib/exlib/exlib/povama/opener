// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_povama_opener
#define exlib_povama_opener

#include <inlib/sg/iopener>
#include <inlib/sg/view_evd>
#include <inlib/fog/scene>

#include "set_fog"

namespace exlib {
namespace povama {

class opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::povama::opener)
public:
  virtual parent* copy() const {return new opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    return gzip_is_fog(a_path,a_is);
  }
  virtual bool open(const std::string& a_path,inlib::sg::viewer& a_viewer,const inlib::args& a_args,bool& a_done) const {
    a_done = false;

    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    bool solid = a_gv.m_params.m_solid;
    //bool edges = a_gv.m_params.m_edges;

    float hcam;
    a_args.find<float>(inlib::sg::s_camera_height(),hcam,1500);

    if(!_evd->is_evd()) {
      _evd->create_sg_evd();
      _evd->replace_camera(a_gv.create_3D_camera(hcam));    
    }

    inlib::sg::separator& dsep = _evd->detector_sg();

    //if(a_args.is_arg(inlib::sg::s_clear_scene())) dsep.clear();

    inlib::sg::separator* sep = new inlib::sg::separator;
    dsep.add(sep);

    inlib::sg::draw_style* ds = new inlib::sg::draw_style;
    ds->style = solid?inlib::sg::draw_style::filled:inlib::sg::draw_style::lines;
    ds->line_width = 1;
    sep->add(ds);

    sep->add(new inlib::sg::matrix()); //for move_manip.

    inlib::fog::scene* pvm = new inlib::fog::scene;
    //pvm->filenames.add(inlib::base_name(a_path));
    //pvm->dirs.add(inlib::dir_name(a_path));
    set_fog(a_gv.out(),*pvm,1,a_path);
    pvm->tmp_dir = a_gv.tmp_dir();

    pvm->solid = solid;
    //pvm->enforce_edges = edges;

    // rotate in order to be able to have in the same scene
    // .fog files and atlas.root.
    pvm->layout.value().set_rotate(1,0,0,inlib::fhalf_pi());

    if(a_gv.m_params.m_node_height>0) {
      inlib::sg::bbox_action _action(a_gv.out());
      pvm->bbox(_action);
      if(_action.end()) {
        float dx,dy,dz;
        if(_action.box().get_size(dx,dy,dz)) {
          if(dy>0) {
            float scale = a_gv.m_params.m_node_height/dy;
            pvm->layout.value().mul_scale(scale,scale,scale);
          }
        }
      }
    }

    sep->add(pvm);

    //See : inlib/sg/plots_viewer::evd_create_doc_anim() :
    //if(a_args.is_arg(inlib::sg::s_adapt_camera())) {
    //  _evd->replace_camera(a_gv.create_3D_camera(hcam));    
    //}

    //if(!a_args.is_arg(inlib::sg::s_no_hide_menu())) a_gv.hide_main_menu();
    a_gv.hide_main_menu();
  
    a_done = true;
    return true;
  }

  virtual bool is(inlib::uint64 a_sz,const char* a_buffer,bool& a_is) const {
    if(a_sz<255) {a_is = false;return true;}
    unsigned char head[256];
    ::memcpy(head,a_buffer,255);
    head[255] = 0; //to have a C string.
    a_is = ::strstr((const char*)head,"#nb super-volumes")?true:false;
    return true;
  }
  virtual bool open(inlib::uint64 a_sz,const char* a_buffer,
                    inlib::sg::viewer& a_viewer,const inlib::args& a_args,bool& a_done) const {
    //WARNING : compressed fog in a buffer not yet handled.

    a_done = false;

    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    bool solid = a_gv.m_params.m_solid;
    //bool edges = a_gv.m_params.m_edges;

    float hcam;
    a_args.find<float>(inlib::sg::s_camera_height(),hcam,1500);

    if(!_evd->is_evd()) {
      _evd->create_sg_evd();
      _evd->replace_camera(a_gv.create_3D_camera(hcam));    
    }

    inlib::sg::separator& dsep = _evd->detector_sg();

    //if(a_args.is_arg(inlib::sg::s_clear_scene())) dsep.clear();

    inlib::sg::separator* sep = new inlib::sg::separator;
    dsep.add(sep);

    inlib::sg::draw_style* ds = new inlib::sg::draw_style;
    ds->style = solid?inlib::sg::draw_style::filled:inlib::sg::draw_style::lines;
    ds->line_width = 1;
    sep->add(ds);

    sep->add(new inlib::sg::matrix()); //for move_manip.

    inlib::fog::scene* pvm = new inlib::fog::scene;
    pvm->fog.value().set((unsigned int)a_sz,1,1,(unsigned char*)a_buffer,false);
    pvm->solid = solid;
    //pvm->enforce_edges = edges;

    // rotate in order to be able to have in the same scene
    // .fog files and atlas.root.
    pvm->layout.value().set_rotate(1,0,0,inlib::fhalf_pi());

    if(a_gv.m_params.m_node_height>0) {
      inlib::sg::bbox_action _action(a_gv.out());
      pvm->bbox(_action);
      if(_action.end()) {
        float dx,dy,dz;
        if(_action.box().get_size(dx,dy,dz)) {
          if(dy>0) {
            float scale = a_gv.m_params.m_node_height/dy;
            pvm->layout.value().mul_scale(scale,scale,scale);
          }
        }
      }
    }

    sep->add(pvm);

    //See : inlib/sg/plots_viewer::evd_create_doc_anim() :
    //if(a_args.is_arg(inlib::sg::s_adapt_camera())) {
    //  _evd->replace_camera(a_gv.create_3D_camera(hcam));    
    //}

    //if(!a_args.is_arg(inlib::sg::s_no_hide_menu())) a_gv.hide_main_menu();
    a_gv.hide_main_menu();
  
    a_done = true;
    return true;
  }

  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,

                    const inlib::args& a_args,
                    bool& a_done) const {
    a_done = false;

    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    bool solid = false;
    if(!a_args.find("-solid",solid)) solid = false;

    //bool edges = a_gv.m_params.m_edges;

    inlib::sg::separator& dsep = _evd->detector_sg();

    inlib::sg::separator* sep = new inlib::sg::separator;
    dsep.add(sep);
  
    sep->add(new inlib::sg::matrix()); //for manip.

    inlib::sg::draw_style* ds = new inlib::sg::draw_style;
    ds->style = solid?inlib::sg::draw_style::filled:
                      inlib::sg::draw_style::lines;
    ds->line_width = 1;
    sep->add(ds);
 
    inlib::fog::scene* pvm = new inlib::fog::scene;
    set_fog(a_gv.out(),*pvm,1,a_path);
    pvm->tmp_dir = a_gv.tmp_dir();
    pvm->solid = solid;
    //pvm->enforce_edges = edges;
 
    // rotate in order to be able to have in the same scene
    // .fog files and atlas.root.
    pvm->layout.value().set_rotate(1,0,0,inlib::fhalf_pi());
  
    if(a_gv.m_params.m_node_height>0) {
      inlib::sg::bbox_action _action(a_gv.out());
      pvm->bbox(_action);
      if(_action.end()) {
        float dx,dy,dz;
        if(_action.box().get_size(dx,dy,dz)) {
          if(dy>0) {
            float scale = a_gv.m_params.m_node_height/dy;
            pvm->layout.value().mul_scale(scale,scale,scale);
          }
        }
      }
    }

    sep->add(pvm);
    
    a_done = true;
    return true;
  }
public:
  opener(){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  opener(const opener& a_from):parent(a_from){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  opener& operator=(const opener&){return *this;}  
};

}}

#endif

//exlib_build_use inlib zlib inlib_glutess kernel

