// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_povama_set_fog
#define exlib_povama_set_fog

#include "../gzip"
//#include "../zlib"

#include <inlib/fog/scene>

namespace exlib {
namespace povama {

inline bool set_fog(std::ostream& a_out,inlib::fog::scene& a_scene,int a_level,const std::string& a_path){
  a_scene.fog.value().make_empty();
  a_scene.ucsz = 0;

  if(!inlib::file::exists(a_path)) {
    a_out << "exlib::povama::set_fog :"
          << " file " << a_path << " not found."
          << std::endl;
    return false;
  }

  char* buffer;
  long sz;

  bool compressed = false;
  if(!inlib::file::is_gzip(a_path,compressed)) {
    a_out << "exlib::povama::set_fog :"
          << " is_gzip failed."
          << std::endl;
    return false;
  }

  if(compressed) {

    if(!exlib::gzip_read_bytes(a_path,buffer,sz)) return false;
    if(!sz) {
      a_out << "exlib::povama::set_fog :"
            << " gzip_read_bytes get zero bytes."
            << std::endl;
      delete [] buffer;
#ifdef INLIB_MEM
      inlib::mem::decrement(inlib::s_new().c_str());
#endif
      return false;
    }

  } else {

    if(!inlib::file::read_bytes(a_path,buffer,sz)) return false;
    if(!sz) {
      a_out << "exlib::povama::set_fog :"
            << " read_bytes get zero bytes."
            << std::endl;
      delete [] buffer;
#ifdef INLIB_MEM
      inlib::mem::decrement(inlib::s_new().c_str());
#endif
      return false;
    }

  }

/*
  a_scene.set_decompress_func(xxx);

  char* ob = new char[sz];

  unsigned int rsz;
  if(!exlib::compress_buffer(a_out,a_level,sz,buffer,sz,ob,rsz)){
    a_out << "exlib::povama::set_fog :"
          << " exlib::compress_buffer failed."
           << std::endl;
    delete [] ob;
    delete [] buffer;
#ifdef INLIB_MEM
    inlib::mem::decrement(inlib::s_new().c_str());
#endif
    return false;
  }
  if(!rsz) {
    a_out << "exlib::povama::set_fog :"
          << " zero compression size."
          << std::endl;
    delete [] ob;
    delete [] buffer;
#ifdef INLIB_MEM
    inlib::mem::decrement(inlib::s_new().c_str());
#endif
    return false;
  }

  //a_out << "exlib::povama::set_fog :"
  //      << " sz " << sz << " compressed " << rsz
  //      << std::endl;
  
  a_scene.fog.value().set((unsigned int)rsz,1,1,(unsigned char*)ob,true);
  
  delete [] buffer;
#ifdef INLIB_MEM
  inlib::mem::decrement(inlib::s_new().c_str());
#endif
*/
  a_scene.fog.value().set((unsigned int)sz,1,1,(unsigned char*)buffer,true);
#ifdef INLIB_MEM
  inlib::mem::decrement(inlib::s_new().c_str());
#endif
  (void)a_level;

  a_scene.ucsz = sz;

  return true;
}

}}

#endif

//exlib_build_use inlib zlib inlib_glutess
