// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_exa_text_marker
#define exlib_exa_text_marker

#include "../sg/text_freetype_marker"

#include <inlib/sg/view_evd>

namespace exlib {
namespace exa {

inline inlib::sg::return_action text_marker(inlib::sg::gui_viewer& a_gv){
  inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
  if(!_evd) return inlib::sg::return_none;

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_2D_camera(2));    
  }
  a_gv.set_plane_viewer(true);

  inlib::sg::separator& dsep = _evd->detector_sg();
  //dsep.clear();

  inlib::sg::separator* sep = new inlib::sg::separator;
  dsep.add(sep);

  inlib::sg::matrix* tsf = new inlib::sg::matrix;
  sep->add(tsf);

  inlib::sg::rgba* mat = new inlib::sg::rgba();
  mat->color = inlib::colorf_red();
  sep->add(mat);

  sep->add(new inlib::sg::normal);

  sg::text_freetype_marker* tft = new sg::text_freetype_marker();   
//tft->modeling = inlib::sg::font_outline;
  tft->font = inlib::sg::font_stixgeneral_otf();
  typedef inlib::sg::base_freetype::unichar unichar_t;
  std::vector<unichar_t> line;
  // Schrodinger :
/*
  line.push_back(0x00069); // i
  line.push_back(0x0210F); // planck
  line.push_back(0x02202); // derivative
  line.push_back(0x003C8); // psi
  line.push_back(0x0002F); // /
  line.push_back(0x02202); // derivative
  line.push_back(0x00074); // t
*/
  line.push_back(0x00065); // e
  line.push_back(0x0002B); // +

  tft->unitext.add(line);

  tft->height = 50; //pixels

  sep->add(tft);

  a_gv.hide_main_menu();

  return inlib::sg::return_to_render;
}

}}

#endif

//exlib_build_use inlib inlib_glutess freetype jpeg zlib png kernel
