// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_exa_lal
#define exlib_exa_lal

#include "../jpeg"

#include <inlib/sg/view_evd>
#include <inlib/sg/tex_sphere>
#include <inlib/sg/event_dispatcher>

namespace exlib {
namespace exa {

inline inlib::sg::return_action lal(inlib::sg::gui_viewer& a_gv) {
//#ifdef EXLIB_HAS_JPEG
  std::string _path = a_gv.res_dir();
  _path += inlib::sep();
  _path += "logo_lal_512_1024.jpg";

  unsigned int w,h,bpp;
  unsigned char* buffer = exlib::jpeg::read(a_gv.out(),_path,w,h,bpp);
  if(!buffer) {
    a_gv.out() << "exlib::exa::lal :"
               << " can't read file."
               << std::endl;
    a_gv.map_warn_failed();
    return inlib::sg::return_none;
  }
  if(bpp!=3) {
    a_gv.out() << "exlib::exa::lal :"
               << " bpp not 3."
               << std::endl;
    a_gv.map_warn_failed();
    return inlib::sg::return_none;
  }

  // use the evd_detector sg so that "wall send detector" works.
  inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
  if(!_evd) return inlib::sg::return_none;

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_2D_camera(2));    
  }
  a_gv.set_plane_viewer(true);

  inlib::sg::separator& dsep = _evd->detector_sg();
  //dsep.clear();
  
 {inlib::sg::separator* sep = new inlib::sg::separator;
  dsep.add(sep);
  inlib::sg::matrix* tsf = new inlib::sg::matrix;
  sep->add(tsf);
  inlib::sg::rgba* mat = new inlib::sg::rgba();
  mat->color = inlib::colorf_white();
  sep->add(mat);
  sep->add(new inlib::sg::normal);
  sep->add(new inlib::sg::event_dispatcher); //for image_manip.
  inlib::sg::tex_rect* node = new inlib::sg::tex_rect();
  node->img.value().set(w,h,bpp,buffer,true);
  node->height = a_gv.wanted_size();
  sep->add(node);}

 {inlib::sg::separator* sep = new inlib::sg::separator;
  dsep.add(sep);
  inlib::sg::matrix* tsf = new inlib::sg::matrix;
  tsf->set_translate(0,-a_gv.wanted_size()*1.1f,0);
  tsf->mul_rotate(0,1,0,inlib::fhalf_pi());
  tsf->mul_rotate(1,0,0,inlib::fhalf_pi());
  sep->add(tsf);
  inlib::sg::rgba* mat = new inlib::sg::rgba();
  mat->color = inlib::colorf_wheat();
  sep->add(mat);
  sep->add(new inlib::sg::event_dispatcher); //for image_manip.
  inlib::sg::tex_sphere* node = new inlib::sg::tex_sphere();
  node->img.value().set(w,h,bpp,buffer,false);
  node->radius = 0.5f*a_gv.wanted_size();
  sep->add(node);}

  a_gv.hide_main_menu();

  return inlib::sg::return_to_render;
}

}}

#endif

//exlib_build_use inlib inlib_glutess freetype jpeg zlib kernel

