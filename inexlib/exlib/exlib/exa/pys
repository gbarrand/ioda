// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_exa_pys
#define exlib_exa_pys

#include <exlib/Python>

#include <inlib/sg/gui_viewer>

#define EXLIB_PYTHON_EXA(a__file) \
inline inlib::sg::return_action py_##a__file(inlib::sg::gui_viewer& a_gv) {\
  std::string path;\
  a_gv.find_file(std::string(#a__file)+".py",path);\
  FILE* _file = ::fopen(path.c_str(),"rb");\
  if(!_file) {\
    a_gv.out() << "exlib::exa::py_debug :"\
               << " file " << inlib::sout(path) << " does not exist."\
               << std::endl;\
    a_gv.map_warn_failed();\
    return inlib::sg::return_none;\
  }\
  ::PyRun_SimpleFile(_file,path.c_str());\
  ::fclose(_file);\
  return inlib::sg::return_to_render;\
}

#define EXLIB_PYTHON_RES_EXA(a__file) \
inline inlib::sg::return_action py_##a__file(inlib::sg::gui_viewer& a_gv) {\
  std::string path = a_gv.res_dir()+inlib::sep()+std::string(#a__file)+".py";\
  FILE* _file = ::fopen(path.c_str(),"rb");\
  if(!_file) {\
    a_gv.out() << "exlib::exa::py_debug :"\
               << " file " << inlib::sout(path) << " does not exist."\
               << std::endl;\
    a_gv.map_warn_failed();\
    return inlib::sg::return_none;\
  }\
  ::PyRun_SimpleFile(_file,path.c_str());\
  ::fclose(_file);\
  return inlib::sg::return_to_render;\
}

namespace exlib {
namespace exa {

EXLIB_PYTHON_EXA(user)
EXLIB_PYTHON_RES_EXA(hrand)
EXLIB_PYTHON_RES_EXA(riv)
EXLIB_PYTHON_RES_EXA(rroot)
EXLIB_PYTHON_RES_EXA(tree)

inline inlib::sg::return_action py_h1d(inlib::sg::gui_viewer&){
  ::PyRun_SimpleString((char*)"print 'hello h1d_py'");

  std::string s = "\n\
import inlib\n\
h = inlib.histo_h1d('Rand gauss',100,-5,5)\n\
\n\
r = inlib.rgaussd(0,1)\n\
for I in range(0,10000):\n\
  h.fill(r.shoot(),1)\n\
\n\
print h.entries(),h.mean(),h.rms()\n\
";

  ::PyRun_SimpleString((char*)s.c_str());

  return inlib::sg::return_to_render;
}

}}

#undef EXLIB_PYTHON_EXA
#undef EXLIB_PYTHON_RES_EXA

//exlib_build_use inlib exlib Python kernel

#endif

