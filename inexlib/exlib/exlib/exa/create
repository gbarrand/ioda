// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_exa_create
#define exlib_exa_create

#include "../sg/lhc1"
//exlib_build_use png zlib

#include <inlib/net/wget>
#include <inlib/sg/view_evd>

namespace exlib {
namespace exa {

inline inlib::sg::return_action action_create(inlib::sg::gui_viewer& a_gv,inlib::sg::entries& a_widget) {
  const std::vector<std::string>& vals = a_widget.values.values();

  const std::string& scls = vals[0];         

  inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
  if(!_evd) return inlib::sg::return_none;

  if(!_evd->is_evd()) {
    _evd->create_sg_evd();
    _evd->replace_camera(a_gv.create_3D_camera(2));
  }

  inlib::sg::separator& dsep = _evd->detector_sg();
  //dsep.clear();

  inlib::sg::separator* sep = new inlib::sg::separator;

  inlib::sg::matrix* tsf = new inlib::sg::matrix;
  sep->add(tsf);

  inlib::sg::rgba* mat = new inlib::sg::rgba();
  mat->color = inlib::colorf_red();
  sep->add(mat);
    
  if(scls==sg::lhc1::s_class()) {
    mat->color = inlib::colorf_white();

    inlib::atime _now(0,0);
    if(!a_gv.get_time_now(_now)) {
      //a_gv.pop_warn(a_data,"get_time_now() failed");
      //return inlib::sg::return_to_render;
    }

    inlib::net::wget* wget = new inlib::net::wget(a_gv.out());

    sg::lhc1* node = new sg::lhc1(*wget,_now);
    //node->show_border = true;
    node->expand = true;
    node->time_interval = 20000;
    node->load_first_image();
    sep->add(node);

    sep->add(new inlib::sg::holder<inlib::net::wget>(wget)); // to delete wget.

    a_gv.enable_anim();
  }

  if(sep->empty()) {
    delete sep;
  } else {
    dsep.add(sep);
  }

  a_gv.hide_main_menu();

  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action create_node(inlib::sg::gui_viewer& a_gv,const inlib::sg::pos_data& a_data) {

  inlib::sg::entries* node = new inlib::sg::entries(a_gv.ttf());
  a_gv.set_style(*node);

 {std::vector<std::string> opts;
  opts.push_back(sg::lhc1::s_class());
  node->add_opts("class",sg::lhc1::s_class(),opts);}

  inlib::sg::add_callback(a_gv,*node,action_create);

  a_gv.show_widget(a_data,node);

  return inlib::sg::return_to_render;
}

}}

//exlib_build_use inlib inlib_glutess freetype png zlib kernel

#endif
