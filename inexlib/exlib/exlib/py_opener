// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_py_opener
#define exlib_py_opener

#include <inlib/sg/iopener>
#include <inlib/sg/viewer>
#include <inlib/sout>
#include <inlib/file>

#include "Python"

namespace exlib {

class py_opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::py_opener)
public:
  virtual parent* copy() const {return new py_opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {return inlib::file::is_py(a_path,a_is);}

  virtual bool open(const std::string& a_path,inlib::sg::viewer& a_viewer,const inlib::args&,bool& a_done) const {
    a_done = false;
    FILE* _file = ::fopen(a_path.c_str(),"rb");
    if(!_file) {
      a_viewer.out() << "exlib::py_opener :"
                     << " file " << inlib::sout(a_path) << " does not exist."
                     << std::endl;
      return false;
    } 
    int status = ::PyRun_SimpleFile(_file,a_path.c_str()); //0 = ok, -1 failed.
    ::fclose(_file);
    a_done = true;
    return status?false:true;
  }

  virtual bool is(inlib::uint64,const char*,bool& a_is) const {
    a_is = false;
    return true;
  }
  virtual bool open(inlib::uint64,const char*,inlib::sg::viewer&,const inlib::args&,bool& a_done) const {
    a_done = false;
    return true;
  }

  virtual bool open(const std::string&,
                    inlib::sg::viewer&,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  py_opener() {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~py_opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  py_opener(const py_opener& a_from):parent(a_from) {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  py_opener& operator=(const py_opener&){return *this;}  
};

}

//exlib_build_use inlib Python

#endif
