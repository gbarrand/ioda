// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_zit_jpeg_png
#define exlib_zit_jpeg_png

#include "zip"
#include "pngb" //have png before jpeg.
#include "jpegb"

#include <inlib/image>

namespace exlib {

class zit_jpeg_png : public zip_iterator, public inlib::image::iterator  {
public:
  virtual unsigned int entries() const {return entries_();}
  virtual bool next() {return next_();}
  virtual bool rewind() {return rewind_();}
  virtual unsigned int index() const {return index_();}
public:
  virtual unsigned char* read_image(unsigned int& a_w,unsigned int& a_h,unsigned int& a_bpp) {
    a_w = 0;a_h = 0;a_bpp = 0;
  
    std::string name;
    size_t size;
    char* buffer;
    if(!read_(name,size,buffer)) return 0;
    if(!size) return 0; //directory.

    unsigned char* rb = 0;

    if(jpegb::is(size,buffer)) {
      rb = jpegb::read_buffer(size,buffer,a_w,a_h,a_bpp);
    }

    if(pngb::is(size,buffer)) {
      rb = pngb::read_buffer(size,buffer,a_w,a_h,a_bpp);
    }

    delete [] buffer;
#ifdef INLIB_MEM
    inlib::mem::decrement(inlib::s_new().c_str());
#endif

    return rb;
  }
  
public:
  zit_jpeg_png(std::ostream& a_out,bool a_verbose)
  :zip_iterator(a_out,a_verbose)
  {}
  virtual ~zit_jpeg_png(){}
protected:
  zit_jpeg_png(const zit_jpeg_png& a_from)
  :zip_iterator(a_from)
  ,inlib::image::iterator(a_from)
  {}
  zit_jpeg_png& operator=(const zit_jpeg_png& a_from){
    zip_iterator::operator=(a_from);
    return *this;
  }
public:
  bool open(const std::string& a_file) {return open_(a_file);}
  //virtual bool close() {return close_();}
};

}

//exlib_build_use inlib zip zlib jpeg png

#endif

