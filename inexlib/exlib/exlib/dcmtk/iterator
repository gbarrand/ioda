// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_dcmtk_iterator
#define exlib_dcmtk_iterator

/////////////////////////////////////////////////////
/// dcmtk ///////////////////////////////////////////
/////////////////////////////////////////////////////
#include <dcmtk/config/osconfig.h>
#include <dcmtk/dcmdata/dctk.h>
#include <dcmtk/dcmimgle/dcmimage.h>
#include <dcmtk/dcmimgle/diplugin.h>
#include <dcmtk/dcmimage/diregist.h> //there is a naugthy static.
#include <dcmtk/dcmdata/dcrledrg.h>

/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
#include <inlib/system>
#include <inlib/file>
#include <inlib/img>

/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
#include <inlib/image>

namespace exlib {
namespace dcmtk {

class iterator : public virtual inlib::image::iterator {
public:
  INLIB_SCLASS(exlib::dcmtk::iterator)
public:
  virtual unsigned int entries() const {return m_frames;}
  virtual bool next() {m_index++;return true;}
  virtual bool rewind() {m_index = 0;return true;}
  virtual unsigned int index() const {return m_index;}

  virtual unsigned char* read_image(unsigned int& a_w,unsigned int& a_h,
                                    unsigned int& a_bpp) {
    if(!m_dimg) {
      a_w = 0;a_h = 0;a_bpp = 0;
      return 0;
    }

    inlib::img<inlib::byte> img;

    plugin _plugin;
    int result = m_dimg->writePluginFormat(&_plugin,(FILE*)&img,m_index);
    if(!result){
      m_out << "exlib::dcmtk::iterator::read_image :"
            << " plugin::writePluginFormat failed."
            << std::endl;
      a_w = 0;a_h = 0;a_bpp = 0;
      return 0;
    }

    a_w = img.width();
    a_h = img.height();
    a_bpp = img.bpp();

    unsigned char* buffer = img.buffer();

    img.make_empty(false); //IMPORTANT.
    
    return buffer;
  }

public:
  iterator(std::ostream& a_out,const std::string& a_res_dir)
  :m_out(a_out)
  ,m_res_dir(a_res_dir)
  ,m_index(0)
  ,m_dfile(0)
  ,m_dimg(0)
  ,m_frames(0)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~iterator(){
    delete m_dfile;
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
protected:
  iterator(const iterator& a_from)
  :inlib::image::iterator(a_from)
  ,m_out(a_from.m_out)
  ,m_res_dir(a_from.m_res_dir)
  ,m_index(0)
  ,m_dfile(0)
  ,m_dimg(0)
  ,m_frames(0)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  iterator& operator=(const iterator& a_from){
    if(&a_from==this) return *this;
    m_res_dir = a_from.m_res_dir;
    m_index = 0;
    delete m_dfile;
    m_dfile = 0;
    m_dimg = 0;
    m_frames = 0;
    return *this;
  }
public:
  bool open(const std::string& a_file) {
    if(m_dfile) return false;

    if(!init(m_out)) return false;

    m_dfile = new DcmFileFormat;
    OFCondition status = m_dfile->loadFile(a_file.c_str());
    if(status.bad()) {
      m_out << "exlib::dcmtk::iterator::open :"
            << " cannot read DICOM file (" << status.text() << ")"
            << std::endl;
      delete m_dfile;
      m_dfile = 0;
      return false;
    }

    DcmDataset* dds = m_dfile->getDataset();
  
    E_TransferSyntax xfer = dds->getOriginalXfer();
    unsigned long flags = CIF_MayDetachPixelData | CIF_TakeOverExternalDataset;
  
    m_dimg = new DicomImage(m_dfile,xfer,flags,0,0);
    if(m_dimg->getStatus()!=EIS_Normal)  {
      m_out << "exlib::dcmtk::iterator::open :"
            << " bad DicomImage : "
            << DicomImage::getString(m_dimg->getStatus())
            << std::endl;
      delete m_dfile;
      m_dfile = 0;
      return false;
    }
  
    m_frames = m_dimg->getFrameCount();

    //if(!m_dimg->setPolarity(EPP_Reverse)){}
    if(!m_dimg->flipImage(0,1)) {}
  
    return true;  
  }

protected:
  INLIB_CLASS_STRING(DCMDICTPATH)
  static const std::string& s_dicom_dic() {
    static const std::string s_v("dcmtk_3_6_0_dicom.dic");
    return s_v;
  }  

  bool init(std::ostream& a_out) const {
    if(dcmDataDict.isDictionaryLoaded()) return true; //done

    if(!inlib::is_env(s_DCMDICTPATH())) {
      std::string dic;
      if(m_res_dir.size()) dic = m_res_dir+inlib::sep();
      dic += s_dicom_dic();
      if(!inlib::file::exists(dic)) {
        a_out << "exlib::dcmtk::reader::init :"
              << " file " << dic << " not found."
              << std::endl;
        return false;
      }
      inlib::putenv(s_DCMDICTPATH(),dic);
    }

    if(!dcmDataDict.wrlock().reloadDictionaries(OFFalse,OFTrue)) {
      a_out << "exlib::dcmtk::reader::init :"
            << " reloadDictionaries() failed."
            << std::endl;
      return false;
    }

    if(!dcmDataDict.isDictionaryLoaded()) {
      a_out << "exlib::dcmtk::reader::init :"
            << " dcmDataDict.isDictionaryLoaded() failed."
            << " " << DCM_DICT_ENVIRONMENT_VARIABLE
            << std::endl;
      return false;
    }

    DcmRLEDecoderRegistration::registerCodecs();

    return true;  
  }
protected:
  std::ostream& m_out;
  std::string m_res_dir;
  unsigned int m_index;
  DcmFileFormat* m_dfile;
  DicomImage* m_dimg;
  unsigned int m_frames;

protected:

  class plugin : public DiPluginFormat {
  public:
    virtual int write(DiImage* a_image,
                      FILE* a_tag,
                      const unsigned long a_frame = 0) const { 
      //::printf("debug : plugin::write : 000 : %lu\n",a_frame);
  
      const void* data = a_image->getOutputData(a_frame,8,0);
      if(!data) return 0;
  
      const OFBool is_mono =
        (a_image->getInternalColorModel() == EPI_Monochrome1) ||
        (a_image->getInternalColorModel() == EPI_Monochrome2);
  
      //::printf("debug : plugin : %d %d : mono %d\n",
      //    a_image->getColumns(),a_image->getRows(),is_mono);
  
      unsigned int w = a_image->getColumns();
      unsigned int h = a_image->getRows();
      unsigned int bpp = is_mono?1:3;
      
      inlib::img<inlib::byte>& img = *((inlib::img<inlib::byte>*)a_tag);
      img.copy(w,h,bpp,(inlib::byte*)data);
  
      /* flip vertically :
      unsigned int stride = w*bpp;
      if(!(h*stride)) return 0;
      char* buffer = new char[h*stride];
      char* b = buffer+h*stride-stride;
      char* p = (char*)data;
      for(unsigned int row=0;row<h;row++,b-=stride,p+=stride) {
        ::memcpy(b,p,stride);
      }
      img.set(w,h,bpp,(inlib::byte*)buffer,true);
      */
  
      a_image->deleteOutputData();
  
      return 1; //ok
    }
  public:
    plugin(){}
    virtual ~plugin(){}
  protected:
    plugin(const plugin& a_from):DiPluginFormat(a_from){}
    plugin& operator=(const plugin&){return *this;}
  };

};

}}

#endif

//exlib_build_use inlib dcmtk
