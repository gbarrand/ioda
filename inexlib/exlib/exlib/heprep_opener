// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_heprep_opener
#define exlib_heprep_opener

#include <inlib/sg/iopener>
#include <inlib/sg/view_evd>
#include <inlib/sg/heprep>
#include <inlib/sargs>

#include "sg/view_wall"
#include "xml/xml_heprep"
#include "gzip"

#include "zip" // for heprep.zip files.

// For what is produced by Geant4/HepRep drivers, see :
//   - HepRep 1 : visualization/HepRep/src/G4HepRepFileXMLWriter.cc.
//   - HepRep 2 : visualization/HepRep/src/XMLHepRepWriter.cc.

namespace exlib {

class heprep_opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::heprep_opener)
public:
  virtual parent* copy() const {return new heprep_opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    if(gzip_is_heprep(a_path,a_is)&&a_is) return true; //heprep or gzipped heprep file.
    inlib::nostream out;
    check_zip cz(out);
    cz.load_file(a_path);
    a_is = cz.m_is; //the file iz a zip file containing some heprep files.
    return true;
  }

  virtual bool open(const std::string& a_path,inlib::sg::viewer& a_viewer,const inlib::args&,bool& a_done) const {
    a_done = false;
    bool is;
    if(gzip_is_heprep(a_path,is)&&is) {
      return open_one_file(a_path,a_viewer,a_done);
    } else {
      check_zip cz(a_viewer.out());
      cz.load_file(a_path);
      if(!cz.m_is) return true;
      open_files oz(a_viewer);
      oz.load_file(a_path);
      a_done = oz.m_done;
      return oz.m_status;
    }
  }

  virtual bool is(inlib::uint64,const char*,bool& a_is) const {
    a_is = false;
    return true;
  }
  virtual bool open(inlib::uint64,const char*,inlib::sg::viewer&,const inlib::args&,bool& a_done) const {
    a_done = false;
    return true;
  }

  virtual bool open(const std::string&,
                    inlib::sg::viewer&,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  heprep_opener() {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~heprep_opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  heprep_opener(const heprep_opener& a_from):parent(a_from) {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  heprep_opener& operator=(const heprep_opener&){return *this;}  
protected:
  static bool open_one_file(const std::string& a_path,inlib::sg::viewer& a_viewer,bool& a_done)  {
    a_done = false;

    // heprep 1 or 2 ?
    unsigned int heprep_version = 0;
   {unsigned char head[2048];
    unsigned int num = 2048;
    if(!gzip_signature(a_path.c_str(),head,num)) return false;
    if(!num) return false;
    head[num-1] = 0; //to have a C string.
    if(::strstr((const char*)head,"<heprep:")) {
      heprep_version = 1;
    } else if(::strstr((const char*)head,"<typetree")) {
      heprep_version = 2;
    }}

    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;

    bool solid = _gv->m_params.m_solid;
    if(_gv->argcv().is_arg(inlib::s_arg_solid())) solid = true;

    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;

    inlib::sg::separator& dsep = _evd->static_sg();

    if(heprep_version==1) {

      inlib::heprep1::main main;
      if(!xml::load_heprep1_file(a_viewer.out(),a_path,main,new exlib::gzip_reader)) return false;
      if(!inlib::sg::visualize(a_viewer.out(),dsep,solid,main.m_vols)) return false;
  
    } else if(heprep_version==2) {

      inlib::heprep2::main main;
      if(!xml::load_heprep2_file(a_viewer.out(),a_path,main,new exlib::gzip_reader)) return false;
      if(!inlib::sg::visualize(a_viewer.out(),dsep,solid,main.m_vols)) return false;
  
    }

    _gv->hide_main_menu();

    a_done = true;
    return true;
  }

  static bool open_one_buffer(size_t a_size,const char* a_buffer,inlib::sg::viewer& a_viewer,bool& a_done)  {
    a_done = false;

    // heprep 1 or 2 ?
    unsigned int heprep_version = 0;
   {unsigned int num = 2048;
    if(a_size<=num) return false;
    char old = a_buffer[num];
    ((char*)a_buffer)[num] = 0; //to have a C string.
    if(::strstr(a_buffer,"<heprep:")) {
      heprep_version = 1;
    } else if(::strstr(a_buffer,"<typetree")) {
      heprep_version = 2;
    }
    ((char*)a_buffer)[num] = old;}

    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;

    bool solid = _gv->m_params.m_solid;
    if(_gv->argcv().is_arg(inlib::s_arg_solid())) solid = true;

    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;

    inlib::sg::separator& dsep = _evd->static_sg();

    if(heprep_version==1) {

      inlib::heprep1::main main;
      if(!xml::load_heprep1_buffer(a_viewer.out(),a_size,a_buffer,main)) return false;
      if(!inlib::sg::visualize(a_viewer.out(),dsep,solid,main.m_vols)) return false;
  
    } else if(heprep_version==2) {

      inlib::heprep2::main main;
      if(!xml::load_heprep2_buffer(a_viewer.out(),a_size,a_buffer,main)) return false;
      if(!inlib::sg::visualize(a_viewer.out(),dsep,solid,main.m_vols)) return false;
  
    }

    _gv->hide_main_menu();

    a_done = true;
    return true;
  }
protected:

  class check_zip : public exlib::base_zip {
    typedef exlib::base_zip parent;
  public:
    check_zip(std::ostream& a_out):parent(a_out),m_is(false){}
    virtual ~check_zip(){}
  private:
    check_zip(const check_zip& a_from):parent(a_from){}
    check_zip& operator=(const check_zip&){return *this;}
  public:
    virtual bool visit_entry(const std::string& a_entry,unsigned int a_size,const char* a_buffer) {
      if(!a_size||!a_buffer) return true;
      bool is;
      if(inlib::is_heprep(a_size,a_buffer,is)&&is) {
        //std::cout << "heprep : " << a_entry << " a_size " << a_size << std::endl;
        m_is = true;
      }  
      return false; //stop visiting.
    }
  public:
    bool m_is;
  };

  class open_files : public exlib::base_zip {
    typedef exlib::base_zip parent;
  public:
    open_files(inlib::sg::viewer& a_viewer)
    :parent(a_viewer.out())
    ,m_viewer(a_viewer)
    ,m_status(true)
    ,m_done(true)
    {}
    virtual ~open_files(){}
  private:
    open_files(const open_files& a_from)
    :parent(a_from)
    ,m_viewer(a_from.m_viewer)
    {}
    open_files& operator=(const open_files&){return *this;}
  public:
    virtual bool visit_entry(const std::string& a_entry,unsigned int a_size,const char* a_buffer) {
      if(!a_size||!a_buffer) return true;
      bool is;
      if(inlib::is_gzip(a_size,a_buffer,is)&&is) {
        //m_viewer.out() << "heprep gzippped buffer." << std::endl;
        size_t usz = 100*a_size;
        char* udoc = new char[usz];
        if(!udoc) {
          m_viewer.out() << "exlib::heprep_opener : can't alloc " << usz << std::endl;
          m_status = false;
        } else {
          unsigned int rsz;
          if(!gunzip_buffer(m_viewer.out(),a_size,a_buffer,(unsigned int)usz,udoc,rsz)) {
            m_viewer.out() << "exlib::heprep_opener : uncompress failed." << std::endl;
            m_status = false;
          } else {
            //m_viewer.out() << "decompress ok, sz = " << rsz << std::endl;
            bool done;
            if(!open_one_buffer(rsz,udoc,m_viewer,done)) m_status = false; //but continue.                    
            if(!done) m_done = false;
          }
          delete [] udoc;
        }
      } else {
        if(inlib::is_heprep(a_size,a_buffer,is)&&is) {
          bool done;
          if(!open_one_buffer(a_size,a_buffer,m_viewer,done)) m_status = false; //but continue.                    
          if(!done) m_done = false;
        }  
      }
      return true;
    }
  public:
    inlib::sg::viewer& m_viewer;
    bool m_status;
    bool m_done;
  };

};

}

//exlib_build_use inlib inlib_glutess freetype expat zlib png jpeg kernel zip

#endif
