// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_zvid_opener
#define exlib_zvid_opener

#include <inlib/sg/iopener>
#include <inlib/sg/entries>
#include <inlib/sg/holder>
#include <inlib/sg/tex_rect_anim>
#include <inlib/sg/tex_sphere_anim>
#include <inlib/sg/strings>
#include <inlib/buffer>

#include <inlib/sg/view_evd>

#include "zit_jpeg_png"

namespace exlib {

class zvid_opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::zvid_opener)
public:
  virtual parent* copy() const {return new zvid_opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    //NOTE : should check that we have images in the zip file.
    return inlib::file::is_zip(a_path,a_is);
  }
  virtual bool open(const std::string& a_path,inlib::sg::viewer& a_viewer,const inlib::args& a_args,bool& a_done) const {
    a_done = false;

    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    //popup :
    bool popup;
    if(!a_args.find(inlib::sg::s_popup(),popup,false)) {}
    int ex;
    if(!a_args.find<int>(inlib::sg::s_ex(),ex)) {}
    int ey;
    if(!a_args.find<int>(inlib::sg::s_ey(),ey)) {}

    pos_data data(popup,ex,ey,a_path);

    std::string sclass;
    unsigned int msecs;
    bool repeat;
    if(a_args.find(inlib::sg::s_class(),sclass)        &&
       a_args.find(inlib::sg::s_time_interval(),msecs) &&
       a_args.find(inlib::sg::s_repeat(),repeat) ){
      _open(data,a_gv,msecs,repeat,sclass);

    } else {
      inlib::sg::entries* entries = new inlib::sg::entries(a_gv.ttf());
      a_gv.set_style(*entries);

     {std::vector<std::string> opts;
      opts.push_back(inlib::sg::tex_rect_anim::s_class());
      opts.push_back(inlib::sg::tex_sphere_anim::s_class());
      entries->add_opts("class",opts[0],opts);} //0

      entries->add_uint("millisecs",40); //1
      entries->add_bool("repeat",true);  //2

      inlib::sg::add_callback(a_gv,*entries,action_start,data);

      a_gv.show_widget(data,entries);
    }
  
    a_done = true;
    return true;
  }

  virtual bool is(inlib::uint64 a_sz,const char* a_buffer,bool& a_is) const {
    return inlib::is_zip((unsigned int)a_sz,a_buffer,a_is);
  }
  virtual bool open(inlib::uint64,const char*,inlib::sg::viewer& a_viewer,const inlib::args&,bool& a_done) const {
    a_viewer.out() << "zvid_opener::open(buffer) : dummy." << std::endl;
    a_done = false;
    return true;
  }

  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,
                    const inlib::args& a_args,
                    bool& a_done) const {
    a_done = false;

    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    //popup :
    bool popup;
    if(!a_args.find(inlib::sg::s_popup(),popup,false)) {}
    int ex;
    if(!a_args.find<int>(inlib::sg::s_ex(),ex)) {}
    int ey;
    if(!a_args.find<int>(inlib::sg::s_ey(),ey)) {}

    std::string kind = inlib::sg::tex_rect_anim::s_class();
    unsigned int msecs = 40;
    bool repeat;
    a_args.find(inlib::sg::s_repeat(),repeat,true);

    pos_data data(popup,ex,ey,a_path);

    if(!_open(data,a_gv,msecs,repeat,kind)) return false;
    a_done = true;
    return true;
  }
public:
  zvid_opener() {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~zvid_opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  zvid_opener(const zvid_opener& a_from):parent(a_from){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  zvid_opener& operator=(const zvid_opener&){return *this;}  

protected:
  class pos_data : public inlib::sg::pos_data {
    typedef inlib::sg::pos_data parent;
  public:
    pos_data(bool a_popup,int a_ex,int a_ey,const std::string& a_path)
    :parent(a_popup,a_ex,a_ey)
    ,m_path(a_path)
    {}
    virtual ~pos_data(){}
  public:
    pos_data(const pos_data& a_from)
    :parent(a_from)
    ,m_path(a_from.m_path)
    {}
    pos_data& operator=(const pos_data& a_from){
      parent::operator=(a_from);
      m_path = a_from.m_path;
      return *this;
    }
  public:
    std::string m_path;
  };

  static bool _open(const pos_data& a_data,inlib::sg::gui_viewer& a_gv,
                    unsigned int a_msecs,bool a_repeat,const std::string& a_class) {
    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
    if(!_evd) return false;

    std::ostream& out = a_gv.out();

    zit_jpeg_png* _it = new zit_jpeg_png(out,false);
    if(!_it->open(a_data.m_path)) {
      delete _it;
      out << "exlib::zvid_opener::open :"
          << " can't open " << a_data.m_path << "."
          << std::endl;
      a_gv.pop_warn(a_data,std::string("can't open ")+a_data.m_path);
      return false;
    }

    inlib::atime _now(0,0);
    if(!a_gv.get_time_now(_now)) {
      delete _it;
      out << "exlib::zvid_opener::open :"
          << " viewer.get_time_now() failed."
          << std::endl;
      a_gv.pop_warn(a_data,std::string("can't open ")+a_data.m_path);
      return false;
    }

    //float evd_setup = false;
    if(!_evd->is_evd()) {
      //evd_setup = true;
      _evd->create_sg_evd();
      _evd->replace_camera(a_gv.create_2D_camera(2));    
    }
    //a_gv.set_param_viewing(false); //picking
    a_gv.set_plane_viewer(true);

    inlib::sg::separator& dsep = _evd->detector_sg();
    //bool adapt_camera = dsep.empty()?true:false;

    inlib::sg::separator* _sep = new inlib::sg::separator;
    dsep.add(_sep);

    inlib::sg::matrix* tsf = new inlib::sg::matrix;
    _sep->add(tsf);

    inlib::sg::rgba* mat = new inlib::sg::rgba();
    mat->color = inlib::colorf_white();
    _sep->add(mat);

    if(a_class==inlib::sg::tex_sphere_anim::s_class()) {

      inlib::sg::tex_sphere_anim* node = new inlib::sg::tex_sphere_anim(_now,*_it);
      node->radius = 0.5f*a_gv.wanted_size();

      //node->back_color = a_bg;
      node->expand = a_gv.m_params.m_image_expand;
      node->time_interval = a_msecs;

      _sep->add(node);

      //node->load_first_image();
      //a_gv.adapt_img(adapt_camera,*tsf,*node,a_args);
    
    } else {

      inlib::sg::tex_rect_anim* node = new inlib::sg::tex_rect_anim(_now,*_it);
      node->height = a_gv.wanted_size();

      //node->back_color = a_bg;
      node->expand = a_gv.m_params.m_image_expand;
      node->time_interval = a_msecs;
      node->repeat = a_repeat;
  
      _sep->add(node);
    
      //if((a_kind==s_full_screen()) && evd_setup) {        
      //if(a_kind==s_full_screen()) {
      //  float cam_height = node->height;
      //  _evd->replace_camera(a_gv.create_2D_camera(cam_height));    
      //} else {
      //  //node->load_first_image();
      //  //_evd->adapt_img(adapt_camera,*tsf,*node,a_args);
      //}

    } 

    _sep->add(new inlib::sg::holder<inlib::image::iterator>(_it));

    a_gv.enable_anim();
    a_gv.hide_main_menu();
    return true;
  }

protected:
  static inlib::sg::return_action action_start(inlib::sg::gui_viewer& a_gv,inlib::sg::entries& a_widget,
                                               const pos_data& a_data) {
    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
    if(!_evd) return inlib::sg::return_none;

    const std::string& kind = a_widget.values[0];

    unsigned int msecs;
    if(!inlib::to<unsigned int>(a_widget.values[1],msecs)) {
      a_gv.pop_warn(a_data,"not a uint");
      return inlib::sg::return_to_render;     
    }

    bool repeat;
    if(!inlib::to(a_widget.values[2],repeat)) {
      a_gv.pop_warn(a_data,"not a bool");
      return inlib::sg::return_to_render;     
    }

    _open(a_data,a_gv,msecs,repeat,kind);

    return inlib::sg::return_to_render;     
  }
};

}

#endif

//exlib_build_use inlib zip zlib jpeg png kernel
