// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_fits_image
#define exlib_fits_image

#include "cfitsio"

#include <cstdlib> //malloc, realloc, free
#include <cstring> //memcpy

namespace exlib {
namespace fits_image {

inline bool read_params(std::ostream& a_out,
                        const std::string& a_file,
                        unsigned int a_hdu,
                        std::vector<unsigned int>& a_orders,
                        int& a_bitpix) {
  a_orders.clear();
  a_bitpix = 0;
  cfitsio::file ffile(a_out);
  if(!ffile.open(a_file)) return false;
  if(!ffile.to_HDU(a_hdu)) {
    ffile.close();
    return false;
  }
  unsigned int hdu;
  int type;
  if(!ffile.cur_HDU(hdu,type)) {
    ffile.close();
    return false;
  }

  std::vector<unsigned int> orders;
  int bitpix;
  if(!ffile.IMAGE_HDU_infos(orders,bitpix)) {
    ffile.close();
    return false;
  }
  if(orders.empty()) {
    a_out << "exlib::fits_image::read_params :"
          << " zero naxis."
          << std::endl;
    ffile.close();
    return false;
  }
  ffile.close();
  a_orders = orders;
  a_bitpix = bitpix;
  return true;          
}

inline char* read_slice(std::ostream& a_out,
                        cfitsio::file& a_file,
                        unsigned int a_hdu,
                        unsigned int a_slice,
                        unsigned int& a_width,
                        unsigned int& a_height,
                        size_t& a_sz,
                        int& a_bitpix) {
  a_width = 0;
  a_height = 0;
  a_sz = 0;
  a_bitpix = 0;
  if(!a_file.is_open()) return 0;
  if(!a_file.to_HDU(a_hdu)) return 0;
  unsigned int hdu;
  int type;
  if(!a_file.cur_HDU(hdu,type)) return 0;

  std::vector<unsigned int> orders;
  int bitpix;
  if(!a_file.IMAGE_HDU_infos(orders,bitpix)) return 0;
  
  if(orders.empty()) {
    a_out << "exlib::fits_image::read_slice :"
          << " zero naxis."
          << std::endl;
    return 0;
  }
    
  unsigned int dw,dh;
  size_t dsz;
  char* db = a_file.read_IMAGE_HDU_slice(a_slice,dw,dh,dsz); //data buffer.
  if(!db) return 0;

  a_width = dw;
  a_height = dh;
  a_sz = dsz;
  a_bitpix = bitpix;

  return db;          
}

inline char* read_slice(std::ostream& a_out,
                        const std::string& a_file,
                        unsigned int a_hdu,
                        unsigned int a_slice,
                        unsigned int& a_width,
                        unsigned int& a_height,
                        size_t& a_sz,
                        int& a_bitpix) {
  cfitsio::file ffile(a_out);
  if(!ffile.open(a_file)) {
    a_width = 0;
    a_height = 0;
    a_sz = 0;
    a_bitpix = 0;
    return 0;
  }    
  return read_slice(a_out,ffile,a_hdu,a_slice,a_width,a_height,a_sz,a_bitpix);
}

inline char* read_slice(std::ostream& a_out,
                        inlib::uint64 a_lbuf,const char* a_buffer,
                        unsigned int a_hdu,
                        unsigned int a_slice,
                        unsigned int& a_width,
                        unsigned int& a_height,
                        size_t& a_sz,
                        int& a_bitpix) {
  a_width = 0;
  a_height = 0;
  a_sz = 0;
  a_bitpix = 0;
  cfitsio::file ffile(a_out);
  size_t sz = (size_t)a_lbuf;

//void** buffptr = (void**)&a_buffer; //no, since buffptr may be reallocated.
  char* mem_buffer = (char*)::malloc(sz);
  ::memcpy(mem_buffer,a_buffer,sz);
  void** buffptr = (void**)&mem_buffer;

  if(!ffile.open_buffer(&sz,buffptr)) {::free(mem_buffer);return 0;}

  if(!ffile.to_HDU(a_hdu)) {
    ffile.close();
    ::free(mem_buffer);
    return 0;
  }
  unsigned int hdu;
  int type;
  if(!ffile.cur_HDU(hdu,type)) {
    ffile.close();
    ::free(mem_buffer);
    return 0;
  }

  std::vector<unsigned int> orders;
  int bitpix;
  if(!ffile.IMAGE_HDU_infos(orders,bitpix)) {
    ffile.close();
    ::free(mem_buffer);
    return 0;
  }
  if(orders.empty()) {
    a_out << "exlib::fits_image::read_slice :"
          << " zero naxis."
          << std::endl;
    ffile.close();
    ::free(mem_buffer);
    return 0;
  }
    
  unsigned int dw,dh;
  size_t dsz;
  char* db = ffile.read_IMAGE_HDU_slice(a_slice,dw,dh,dsz); //data buffer.
  ffile.close();
  if(!db) {::free(mem_buffer);return 0;}

  a_width = dw;
  a_height = dh;
  a_sz = dsz;
  a_bitpix = bitpix;
  ::free(mem_buffer);
  return db;          
}

}}

#include <inlib/vpair>
#include <inlib/sto>
#include <inlib/strip>
#include <inlib/sout>

namespace exlib {
namespace fits_image {

template <class TYPE>
inline float* HEALPix_BINARY_TBL_read_col_to_float(const cfitsio::file& a_ffile,unsigned int a_column,
                                                   unsigned int a_nrow,unsigned int a_npix,int a_repeat,
                                                   float& a_min,float& a_max) {
  TYPE* _data = new TYPE[a_npix];
  if(!_data || !a_ffile.TBL_read_col<TYPE>(a_column,a_nrow,a_repeat,_data)) {
    delete [] _data;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  unsigned int num = a_nrow*a_repeat;
  TYPE mn = _data[0];
  TYPE mx = _data[0];
 {TYPE* pos = _data;
  for(unsigned int i=0;i<num;i++,pos++) {
    mn = inlib::mn<TYPE>(mn,*pos);
    mx = inlib::mx<TYPE>(mx,*pos);
  }}
  
  float* hpixs = new float[a_npix];
  if(!hpixs) {
    delete [] _data;
    a_min = 0;
    a_max = 0;
    return 0;
  }

 {TYPE*  dpos = _data;
  float* fpos = hpixs;
  for(unsigned int i=0;i<num;i++,dpos++,fpos++) *fpos = float(*dpos);}

  delete [] _data;

  a_min = float(mn);
  a_max = float(mx);

  return hpixs;
}

inline float* HEALPix_BINARY_TBL_read(std::ostream& a_out,
                                     const std::string& a_file,unsigned int a_hdu,unsigned int a_column,
                                     unsigned int& a_NSIDE,bool& a_ORDERING_RING,
                                     float& a_min,float& a_max) {
  cfitsio::file ffile(a_out);
  if(!ffile.open(a_file)) {
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  if(!ffile.to_HDU(a_hdu)) {
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  unsigned int hdu;
  int type;
  if(!ffile.cur_HDU(hdu,type)) {
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
    
  unsigned int ncol = 0;
  unsigned int nrow = 0;
  std::vector<std::string> names;
  std::vector<int> types;  
  std::vector<int> repeats;
  std::vector<int> widths;
  
  if(!ffile.TBL_infos(ncol,nrow,names,types,repeats,widths)){
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  
  if(!nrow) {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " no row."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  
  if(a_column>=ncol) {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " bad column index " << a_column << ", number of columns is " << ncol << "."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  
  //HEALPix parameters :
  std::string PIXTYPE;
  unsigned int NSIDE;
  unsigned int LASTPIX;
  std::string ORDERING;
  
 {std::vector<cfitsio::key> keys;
  if(!ffile.HDU_keys(keys)) {
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  std::vector< std::pair<std::string,std::string> > kvs;
 {inlib_vforcit(cfitsio::key,keys,it){
    kvs.push_back(std::pair<std::string,std::string>((*it).name(),(*it).value()));
  }}

  if(!inlib::find<std::string,std::string>(kvs,"PIXTYPE",PIXTYPE)) {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " key PIXTYPE not found."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  inlib::strip(PIXTYPE,inlib::both,'\'');
  inlib::strip(PIXTYPE);
  if(PIXTYPE!="HEALPIX") {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " value for key PIXTYPE not HEALPIX. Found " << inlib::sout(PIXTYPE) << "."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
 {std::string sNSIDE;
  if(!inlib::find<std::string,std::string>(kvs,"NSIDE",sNSIDE)) {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " key NSIDE not found or is not an int."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  } 
  if(!inlib::to<unsigned int>(sNSIDE,NSIDE,0)) {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " value of key NSIDE is not an unsigned int."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }}
 {std::string sLASTPIX;
  if(!inlib::find<std::string,std::string>(kvs,"LASTPIX",sLASTPIX)) {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " key LASTPIX not found or is not an int."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  if(!inlib::to<unsigned int>(sLASTPIX,LASTPIX,0)) {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " value of key LASTPIX not an unsigned int."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }}
  if(!inlib::find<std::string,std::string>(kvs,"ORDERING",ORDERING)) {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " key ORDERING not found."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  
  } //end HEALPix parameters.
  
  unsigned int npix = 12*NSIDE*NSIDE;
  if(npix!=(LASTPIX+1)) {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " bad number of entries. Got " << (LASTPIX+1)
          << " whilst " << npix << " expected."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }
  bool ORDERING_RING = false;
  inlib::strip(ORDERING,inlib::both,'\'');
  inlib::strip(ORDERING);
  if(ORDERING=="RING") {
    ORDERING_RING = true;
  } else if(ORDERING=="NESTED") {
    ORDERING_RING = false;
  } else {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " bad ORDERING keyword. Got " << inlib::sout(ORDERING)
          << " whilst RING or NESTED expected."
          << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }

  //read HEALPix pixels :

  int repeat = repeats[a_column];
  unsigned int num = nrow*repeat;
  if(num!=npix) {
    a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
          << " mismatch npix " << npix << " vs number of rows " << num << "." << std::endl;
    ffile.close();
    a_NSIDE = 0;
    a_ORDERING_RING = false;
    a_min = 0;
    a_max = 0;
    return 0;
  }

  if(types[a_column]==TFLOAT) {
    float* _data = new float[npix];
    if(!_data || !ffile.TBL_read_col<float>(a_column,nrow,repeat,_data)) {
      delete [] _data;
      ffile.close();
      a_NSIDE = 0;
      a_ORDERING_RING = false;
      a_min = 0;
      a_max = 0;
      return 0;
    }
    a_min = _data[0];
    a_max = _data[0];
   {float* pos = _data;
    for(unsigned int i=0;i<num;i++,pos++) {
      a_min = inlib::mn<float>(a_min,*pos);
      a_max = inlib::mx<float>(a_max,*pos);
    }}

    ffile.close();
  
    a_NSIDE = NSIDE;
    a_ORDERING_RING = ORDERING_RING;

    return _data;

  }

  float* hpixs = 0;
  if(types[a_column]==TBYTE) {
    hpixs = HEALPix_BINARY_TBL_read_col_to_float<unsigned char>(ffile,a_column,nrow,npix,repeat,a_min,a_max);
  } else if(types[a_column]==TSHORT) {
    hpixs = HEALPix_BINARY_TBL_read_col_to_float<short>(ffile,a_column,nrow,npix,repeat,a_min,a_max);
  } else if(types[a_column]==TINT) {
    hpixs = HEALPix_BINARY_TBL_read_col_to_float<int>(ffile,a_column,nrow,npix,repeat,a_min,a_max);
//} else if(types[a_column]==TFLOAT) {
//  hpixs = HEALPix_BINARY_TBL_read_col_to_float<float>(ffile,a_column,nrow,npix,repeat,a_min,a_max);
  } else if(types[a_column]==TDOUBLE) {
    hpixs = HEALPix_BINARY_TBL_read_col_to_float<double>(ffile,a_column,nrow,npix,repeat,a_min,a_max);
  } else if(types[a_column]==TSBYTE) {
    hpixs = HEALPix_BINARY_TBL_read_col_to_float<char>(ffile,a_column,nrow,npix,repeat,a_min,a_max);
  } else if(types[a_column]==TUSHORT) {
    hpixs = HEALPix_BINARY_TBL_read_col_to_float<unsigned short>(ffile,a_column,nrow,npix,repeat,a_min,a_max);
  } else if(types[a_column]==TUINT) {
    hpixs = HEALPix_BINARY_TBL_read_col_to_float<unsigned int>(ffile,a_column,nrow,npix,repeat,a_min,a_max);
//} else if(types[a_column]==TBIT) {
//  hpixs = HEALPix_BINARY_TBL_read_col_to_float<inlib::fits_bit>(ffile,a_column,nrow,npix,repeat,a_min,a_max);

  } else if(types[a_column]==TLONG) {
    hpixs = HEALPix_BINARY_TBL_read_col_to_float<int>(ffile,a_column,nrow,npix,repeat,a_min,a_max);
  }

  ffile.close();

  if(hpixs) {
    a_NSIDE = NSIDE;
    a_ORDERING_RING = ORDERING_RING;
    return hpixs;
  }

  std::string stype;
  cfitsio::sTYPE(types[a_column],stype);
  a_out << "exlib::fits_image::HEALPix_BINARY_TBL_read :"
        << " column type " << stype << " not yet treated."
        << std::endl;
  a_NSIDE = 0;
  a_ORDERING_RING = false;
  a_min = 0;
  a_max = 0;
  return 0;
}

}}

#include <inlib/array_to_img>

namespace exlib {
namespace fits_image {

inline bool buffer2img(std::ostream& a_out,
                       const char* a_buffer,unsigned int a_width,unsigned int a_height,int a_bitpix,
                       bool a_yswap,
                       const inlib::lut<double>& a_lut,
                       const inlib::SOPI::cmap& a_cmap,
                       inlib::img<inlib::byte>& a_img) {
  if(a_bitpix==BYTE_IMG) {
    inlib::array_to_img<unsigned char>(a_out,a_width,a_height,a_buffer,a_yswap,a_lut,a_cmap,a_img);
  } else if(a_bitpix==SHORT_IMG) {
    inlib::array_to_img<short>(a_out,a_width,a_height,a_buffer,a_yswap,a_lut,a_cmap,a_img);
  } else if(a_bitpix==LONG_IMG) {
    inlib::array_to_img<int>(a_out,a_width,a_height,a_buffer,a_yswap,a_lut,a_cmap,a_img);
  } else if(a_bitpix==LONGLONG_IMG) {
    inlib::array_to_img<inlib::int64>(a_out,a_width,a_height,a_buffer,a_yswap,a_lut,a_cmap,a_img);
  } else if(a_bitpix==FLOAT_IMG) {
    inlib::array_to_img<float>(a_out,a_width,a_height,a_buffer,a_yswap,a_lut,a_cmap,a_img);
  } else if(a_bitpix==DOUBLE_IMG) {
    inlib::array_to_img<double>(a_out,a_width,a_height,a_buffer,a_yswap,a_lut,a_cmap,a_img);
  } else {
    a_img.clear();
    return false;
  }
  return true;
}

inline bool read_slice_to_img(std::ostream& a_out,
                              const std::string& a_file,
                              unsigned int a_hdu,
                              unsigned int a_slice,
                              bool a_yswap,
                              const inlib::lut<double>& a_lut,
                              const inlib::SOPI::cmap& a_cmap,
			      inlib::img<inlib::byte>& a_img) { //for SWIG.
  unsigned int width,height;
  size_t sz;
  int bitpix;
  char* buffer = exlib::fits_image::read_slice(a_out,a_file,a_hdu,a_slice,width,height,sz,bitpix);
  if(!buffer) {
    a_img.clear();
    a_out << "exlib::fits_image::read_slice_to_img : read_slice() failed." << std::endl;
    return false;
  }
#ifdef INLIB_MEM
  inlib::mem::decrement(inlib::s_new().c_str());
#endif
//bool status = inlib::array_to_img<float>(a_out,width,height,bitpix,buffer,a_yswap,a_lut,a_cmap,a_img);
  bool status = buffer2img(a_out,buffer,width,height,bitpix,a_yswap,a_lut,a_cmap,a_img);
  delete [] buffer;
  return status;
}

class img : public inlib::img<char> {
  typedef inlib::img<char> parent;
public:  
  INLIB_SCLASS(exlib::fits_image::img)
  virtual const std::string& s_cls() const {return s_class();} //for gopaw/find_object().
public:
  img(unsigned int a_w,unsigned int a_h,int a_bitpix,char* a_buffer,bool a_owner)
  :parent(a_w,a_h,1,a_buffer,a_owner),m_bitpix(a_bitpix) {} //WARNING : bpp is 1.
  virtual ~img() {}
public:  
  img(const img& a_from):parent(a_from),m_bitpix(a_from.m_bitpix) {}
  img& operator=(const img& a_from){
    parent::operator=(a_from);
    m_bitpix = a_from.m_bitpix;
    return *this;
  }
public:
  int bitpix() const {return m_bitpix;}
protected:
  int m_bitpix;
};

}}

//exlib_build_use inlib cfitsio

#endif

