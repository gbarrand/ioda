// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_iv_so2sg
#define exlib_iv_so2sg

#include <inlib/sg/sf_string>
#include <inlib/sg/render_action>
#include <inlib/sg/atb_vertices>
#include <inlib/sg/noderef>
#include <inlib/sg/group>
#include <inlib/sg/nodekit>

#include "read"
#include "so_2sg_action.h"

namespace exlib {
namespace iv {

class so2sg : public inlib::sg::node {
  INLIB_NODE(so2sg,exlib::iv::so2sg,inlib::sg::node)
public:
  inlib::sg::sf_string name;
  inlib::sg::sf<bool> center_scene;
public:
  virtual const inlib::sg::desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(exlib::iv::so2sg)
    static const inlib::sg::desc_fields s_v(parent::node_desc_fields(),2, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(name),
      INLIB_ARG_FIELD_DESC(center_scene)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&name);
    add_field(&center_scene);
  }
public:
  virtual void render(inlib::sg::render_action& a_action) {
    if(touched()) {
      update_sg(a_action.out(),a_action.ww(),a_action.wh());
      reset_touched();
    }
    m_group.render(a_action);
  }
  virtual void pick(inlib::sg::pick_action& a_action) { 
    if(touched()) {
      update_sg(a_action.out(),a_action.ww(),a_action.wh());
      reset_touched();
    }
    nodekit_pick(a_action,m_group,this);
  }
  virtual void search(inlib::sg::search_action& a_action) { 
    node::search(a_action);
    if(a_action.done()) return;
    if(touched()) {
      //update_sg(a_action.out(),a_action.ww(),a_action.wh());
      update_sg(a_action.out(),100,100);
      reset_touched();
    }
    m_group.search(a_action);
  }
  virtual void bbox(inlib::sg::bbox_action& a_action) {
    if(touched()) {
      update_sg(a_action.out(),a_action.ww(),a_action.wh());
      reset_touched();
    }
    m_group.bbox(a_action);
  }

  virtual bool write(inlib::sg::write_action& a_action) {
    if(touched()) {
      //update_sg(a_action.out(),a_action.ww(),a_action.wh());
      update_sg(a_action.out(),100,100);
      reset_touched();
    }
    //if(!write_fields(a_action)) return false;
    return m_group.write(a_action);
  }
public:
  so2sg(viewport_handling a_viewport_handling = viewport_none)
  :parent()
  ,name()
  ,center_scene(false)
  ,m_viewport_handling(a_viewport_handling)
  ,m_so_node(0)
  {
    add_fields();
    init_sg();
  }
  virtual ~so2sg(){}
public:
  so2sg(const so2sg& a_from)
  :parent(a_from)
  ,name(a_from.name)
  ,center_scene(a_from.center_scene)
  ,m_viewport_handling(a_from.m_viewport_handling)
  ,m_so_node(a_from.m_so_node)
  {
    add_fields();
    init_sg();
  }
  so2sg& operator=(const so2sg& a_from){
    parent::operator=(a_from);
    name = a_from.name;
    center_scene = a_from.center_scene;
    m_viewport_handling = a_from.m_viewport_handling;
    m_so_node = a_from.m_so_node;
    return *this;
  }
public:
  const inlib::vec3f& read_center() const {return m_read_center;}
protected:
  void translate(float a_x,float a_y,float a_z) {
   {float* pos = inlib::vec_data(m_tris.xyzs.values());
    size_t num = m_tris.xyzs.size();
    for(size_t index=0;index<num;index+=3) {
      *pos += a_x;pos++;
      *pos += a_y;pos++;
      *pos += a_z;pos++;
    }}
   {float* pos = inlib::vec_data(m_segs.xyzs.values());
    size_t num = m_segs.xyzs.size();
    for(size_t index=0;index<num;index+=3) {
      *pos += a_x;pos++;
      *pos += a_y;pos++;
      *pos += a_z;pos++;
    }}
   {float* pos = inlib::vec_data(m_pts.xyzs.values());
    size_t num = m_pts.xyzs.size();
    for(size_t index=0;index<num;index+=3) {
      *pos += a_x;pos++;
      *pos += a_y;pos++;
      *pos += a_z;pos++;
    }}

   {float* pos = inlib::vec_data(m_atris.xyzs.values());
    size_t num = m_atris.xyzs.size();
    for(size_t index=0;index<num;index+=3) {
      *pos += a_x;pos++;
      *pos += a_y;pos++;
      *pos += a_z;pos++;
    }}
   {float* pos = inlib::vec_data(m_asegs.xyzs.values());
    size_t num = m_asegs.xyzs.size();
    for(size_t index=0;index<num;index+=3) {
      *pos += a_x;pos++;
      *pos += a_y;pos++;
      *pos += a_z;pos++;
    }}
   {float* pos = inlib::vec_data(m_apts.xyzs.values());
    size_t num = m_apts.xyzs.size();
    for(size_t index=0;index<num;index+=3) {
      *pos += a_x;pos++;
      *pos += a_y;pos++;
      *pos += a_z;pos++;
    }}
  }
  void translate(const inlib::vec3f& a_v) {translate(a_v.x(),a_v.y(),a_v.z());}
protected:
  void init_sg(){
    m_group.add(new inlib::sg::noderef(m_tris));
    m_group.add(new inlib::sg::noderef(m_segs));
    m_group.add(new inlib::sg::noderef(m_pts));
    // alpha after non transparent :
    m_group.add(new inlib::sg::noderef(m_atris));
    m_group.add(new inlib::sg::noderef(m_asegs));
    m_group.add(new inlib::sg::noderef(m_apts));
  }
public:
  void update_sg(std::ostream& a_out,unsigned int a_ww,unsigned int a_wh) {
    m_read_center.set_value(0,0,0);

    SbViewportRegion vp(a_ww,a_wh); 
    so_2sg_action _action(vp,m_tris,m_segs,m_pts,m_atris,m_asegs,m_apts,m_viewport_handling);

    if(m_so_node) {
      _action.apply(m_so_node);
      //::printf("debug : xxx %lu %lu %lu, %lu %lu %lu\n",
      //    m_tris.xyzs.size(),m_segs.xyzs.size(),m_pts.xyzs.size(),
      //    m_atris.xyzs.size(),m_asegs.xyzs.size(),m_apts.xyzs.size());
    } else {
      SoSeparator* sep;
      if(!read_file(a_out,name.value(),sep)) return;
      _action.apply(sep);
      sep->unref();
    }

   {inlib::sg::bbox_action _action(a_out);
    m_group.bbox(_action);
    if(_action.end()) {
      const inlib::box3f& box = _action.box();
      if(!box.is_empty()) {
        _action.box().center(m_read_center);
        if(center_scene.value()) translate(-m_read_center);
      }
    }}
  }
  void set_so_node(SoNode* a_node) { //we do not take ownership.
    if(a_node!=m_so_node) name.touch();
    m_so_node = a_node;
  }
protected:
  inlib::sg::group m_group;
  inlib::sg::atb_vertices m_tris;
  inlib::sg::atb_vertices m_segs;
  inlib::sg::atb_vertices m_pts;
  inlib::sg::atb_vertices m_atris;
  inlib::sg::atb_vertices m_asegs;
  inlib::sg::atb_vertices m_apts;
  inlib::vec3f m_read_center;
  viewport_handling m_viewport_handling;
  SoNode* m_so_node;
};

}}

#endif

//exlib_build_use inlib CoinGL
