// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_iv_send_so
#define exlib_iv_send_so

#include <inlib/args>
#include <inlib/press_func>
#include <inlib/wall/data_client>
#include <inlib/wall/strings>

#include <Inventor/actions/SoWriteAction.h>
#include <Inventor/SoOutput.h>

#include <cstdlib> //realloc

namespace exlib {
namespace iv {

//void* realloc_cb(void* a_p,size_t a_new) {return ::realloc(a_p,a_new);}

inline bool send_so(inlib::wall::data_client& a_dc,
                    SoNode& a_node,
                    inlib::compress_func a_compress_func,
                    const inlib::args& a_opts) {

  // pending code is in wall/master_dcs.

  if(!a_dc.socket().is_connected()) return false;

  size_t sz = 1000;
  char* uc_buffer = new char[sz];

  SoOutput out;
  out.setBuffer(uc_buffer,sz,::realloc);
  //out.setBinary(TRUE); //Does not work properly.
  //a_compress_func = 0; //no need to compress if binary.

  SoWriteAction wa(&out);
  wa.apply(&a_node);

  void* uc_p = 0;
  sz = 0;
  if(!out.getBuffer(uc_p,sz)){}
  uc_buffer = (char*)uc_p;

  unsigned int uc_length = (unsigned int)sz;
  if(!uc_length) {
    delete [] uc_buffer;
    return true; //nothing to send.
  }

  unsigned int cp_length = 0; 
  char* cp_buffer = 0;
  if(a_compress_func) {
    cp_buffer = new char[uc_length];
    if(!cp_buffer) {
      delete [] uc_buffer;
      return false;
    }
    if(!a_compress_func(a_dc.out(),1,
                uc_length,(char*)uc_buffer,
                uc_length,cp_buffer,cp_length)){
      a_dc.out() << "exlib::iv::send_so :"
                 << " zip failed."
                 << std::endl;
      delete [] cp_buffer;
      delete [] uc_buffer;
      return false;
    }
    if(!cp_length) {
      a_dc.out() << "exlib::iv::send_so :"
                 << " zero compression size."
                 << std::endl;
      delete [] cp_buffer;
      delete [] uc_buffer;
      return false;
    }

  } else {
    cp_length = (unsigned int)sz;
    cp_buffer = uc_buffer;
  }

  bool status = a_dc.send_buffer_doc(uc_length,cp_length,cp_buffer,a_opts);

  if(a_compress_func) delete [] cp_buffer;

  delete [] uc_buffer;
  return status;
}

}}

#endif

//exlib_build_use inlib CoinGL socket
