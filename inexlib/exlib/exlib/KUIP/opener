// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_KUIP_opener
#define exlib_KUIP_opener

#include <inlib/sg/iopener>
#include <inlib/sg/view_evd>
#include <inlib/sg/view_plots>

extern "C" {
  bool gopaw_kuip_exec_no_help(std::ostream&,const std::string&);
}

namespace exlib {
namespace KUIP {

class opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::KUIP::opener)
public:
  virtual parent* copy() const {return new opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {return inlib::file::is_py(a_path,a_is);}

  virtual bool open(const std::string& a_path,inlib::sg::viewer& a_viewer,const inlib::args&,bool& a_done) const {
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;
    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;

    //::printf("debug : exlib::KUIP::opener::open : \"%s\"\n",a_path.c_str());
    
    a_gv.set_plane_viewer(true);
  //a_gv.set_param_viewing(false); //picking
    a_gv.hide_main_menu(); // before kumac execution (in case of all.kumac).

    _evd->static_sg().clear(); // to enforce a not adjustable creation of a inlib::sg::plots through ioda::gopaw_viewer::plots().

    // enforce a gopaw::session::set_plots_layout() on the inlib::sg::plots :
    if(!gopaw_kuip_exec_no_help(a_viewer.out(),"/viewer/page/set_layout")) {a_done = false;return false;}
    
    // adjust camera to gopaw inlib::sg::plots setting :
    bool created;
    inlib::sg::plots* _plots = inlib::sg::get_sg_plots(a_gv,inlib::sg::adjust_PAW,created);
    inlib::sg::plotter& plotter = _plots->current_plotter();

    inlib::sg::ortho* camera = new inlib::sg::ortho;
    float YSIZ = 20;
    YSIZ *= 2; // Have a factor two because of the matrix node scaling by two in inlib::sg::create_evd_sg_plots().
    float z = 10*plotter.depth.value(); //large to handle plotter::shape=xyz.
//    camera->height = YSIZ;
    float aspect = float(a_viewer.width())/float(a_viewer.height());
    if(aspect>=1) { //w>h
      camera->height = YSIZ;
    } else { 
      camera->height = YSIZ/aspect;
    }
    camera->position = inlib::vec3f(0,0,z);
    camera->znear = 0.01f*z;
    camera->zfar = 100*z;
    camera->focal = z;
    _evd->replace_camera(camera);    
      
   {std::string cmd = "/macro/exec "+a_path; 
    if(!gopaw_kuip_exec_no_help(a_viewer.out(),cmd)) {a_done = false;return false;}}

    a_done = true;
    return true;
  }

  virtual bool is(inlib::uint64,const char*,bool& a_is) const {
    a_is = false;
    return true;
  }
  virtual bool open(inlib::uint64,const char*,inlib::sg::viewer&,const inlib::args&,bool& a_done) const {
    a_done = false;
    return true;
  }

  virtual bool open(const std::string&,inlib::sg::viewer&,const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,const inlib::args&,bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  opener() {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  opener(const opener& a_from):parent(a_from) {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  opener& operator=(const opener&){return *this;}  
};

}}

//exlib_build_use inlib KUIP

#endif
