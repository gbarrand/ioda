// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_rsgml
#define exlib_rsgml

#include <inlib/xml/exsg>

#include "text_freetype"
#include "text_freetype_marker"

#include "../xml/loader"

namespace exlib {

class rsgml : public inlib::xml::exsg, public xml::loader {
  typedef inlib::xml::exsg parent_exsg;
  typedef xml::loader parent;
public: //exlib::xml::loader :
  //virtual bool visit_end_element(inlib::xml::tree& a_tree,bool& a_keep) {
  //  return true;
  //}
public:
  rsgml(std::ostream& a_out,
        const vreaders& a_readers,
        inlib::sg::separator& a_sep,
        inlib::xml::factory& a_fac,        
        const inlib::sg::base_freetype& a_ttf,
        bool a_verbose = false)
  :parent_exsg(a_readers,a_sep,a_ttf)
  ,parent(a_fac,a_out,a_verbose)
  {
    //set_compressed_reader(new exlib::gzip_reader());
    add_reader<exlib::sg::text_freetype>();
    add_reader<exlib::sg::text_freetype_marker>();

    set_default_tags(parent::m_tags);
    m_tags.push_back(sg::text_freetype::s_class());
    m_tags.push_back(sg::text_freetype_marker::s_class());

    typedef std::pair<std::string,reader> reader_t;
    inlib_vforcit(reader_t,a_readers,it){
      add_tag((*it).first);
      add_reader((*it).first,(*it).second);
    }
  }
  virtual ~rsgml(){}
protected:
  rsgml(const rsgml& a_from)
  :parent_exsg(a_from)
  ,parent(a_from)
  {}
  rsgml& operator=(const rsgml& a_from){
    parent_exsg::operator=(a_from);
    parent::operator=(a_from);
    if(&a_from==this) return *this;
    return *this;
  }
public:
  bool load_file(const std::string& a_file,bool a_compressed){
    m_sep.clear();
    m_group = &m_sep;
    if(!parent::load_file(a_file,a_compressed)) return false;    
    inlib::xml::tree* top = top_item();
    if(!top) return false;
    if(top->tag_name()!=s_exsg()) return false;    

   {inlib::xml::looper _for(*top);
    while(inlib::xml::tree* _tree = _for.next_tree()) {

      const std::string& tag_name = _tree->tag_name();
      //m_out << "debug : " << tag_name << std::endl;
      reader rder = find_reader(tag_name);
      if(!rder) {
        m_out << "rsgml::visit_end_element :"
              << " reader not found for " << inlib::sout(tag_name)
              << std::endl;        
        return false;
      }
      if(!rder(*_tree,m_out,m_verbose,this)) {
        m_out << "rsgml::visit_end_element :"
              << " read failed for " << inlib::sout(tag_name)
              << std::endl;        
        return false;
      }

    }}

    return true;
  }

  bool load_buffer(unsigned int a_sz,const char* a_buffer){
    m_sep.clear();
    m_group = &m_sep;
    if(!parent::load_buffer(a_sz,a_buffer)) return false;    
    inlib::xml::tree* top = top_item();
    if(!top) return false;
    if(top->tag_name()!=s_exsg()) return false;    

   {inlib::xml::looper _for(*top);
    while(inlib::xml::tree* _tree = _for.next_tree()) {

      const std::string& tag_name = _tree->tag_name();
      //m_out << "debug : " << tag_name << std::endl;
      reader rder = find_reader(tag_name);
      if(!rder) {
        m_out << "rsgml::visit_end_element :"
              << " reader not found for " << inlib::sout(tag_name)
              << std::endl;        
        return false;
      }
      if(!rder(*_tree,m_out,m_verbose,this)) {
        m_out << "rsgml::visit_end_element :"
              << " read failed for " << inlib::sout(tag_name)
              << std::endl;        
        return false;
      }

    }}

    return true;
  }
};

}

//exlib_build_use inlib expat inlib_glutess freetype zlib

#endif
