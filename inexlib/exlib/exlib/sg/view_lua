// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_sg_view_lua
#define exlib_sg_view_lua

#include "../lua"

#include <inlib/S_STRING>
#include <inlib/sg/viewer>
#include <inlib/pointer>

namespace exlib {
namespace sg {

class view_lua {
  typedef inlib::sg::viewer viewer_t;
public:
  INLIB_SCLASS(exlib::sg::view_lua)
public:
  view_lua(viewer_t& a_viewer,bool a_init = true)
  :m_viewer(a_viewer)
  ,m_inited_by_exlib(false)
  ,m_lua(0)
  {
    if(a_init) if(!initialize()) {}
  }
  virtual ~view_lua(){
    if(!finalize()) {}
  }
protected: //not copyable
  view_lua(const view_lua& a_from)
  :m_viewer(a_from.m_viewer)
  ,m_inited_by_exlib(false)
  ,m_lua(0)
  {}
  view_lua& operator=(const view_lua&){return *this;}
public:
  bool initialize() {
    if(m_lua) return true; //done
    m_lua = ::luaL_newstate();
    if(!m_lua) {
      m_viewer.out() << "exlib::sg::view_lua::initialize :"
                     << " luaL_newstate failed."
                     << std::endl;
      return false;
    }

    void* ud;
    lua_Alloc _alloc = ::lua_getallocf(m_lua,&ud);
    ::lua_setallocf(m_lua,_alloc,&m_viewer);

    ::luaopen_base(m_lua);
    ::lua_pushcfunction(m_lua,get_viewer_string_pointer);
    ::lua_setglobal(m_lua,"get_viewer_string_pointer");
    return true;
  }
  lua_State* lua_state() const {return m_lua;}
protected:
  bool finalize(){
    if(!m_lua) return true; //done.
    ::lua_close(m_lua);
    m_lua = 0;
    return true;
  }
protected:
  static int get_viewer_string_pointer(lua_State* a_lua) {
    void* tag;
    ::lua_getallocf(a_lua,&tag);
    viewer_t* _viewer = (viewer_t*)tag;

    // The format must be the same than in the function :
    //   inlib/sg/viewer/cast_viewer(const std::string&)

    std::string s;
    if(!inlib::p2sx(_viewer,s)) return 0;

    ::lua_pushstring(a_lua,s.c_str());
    return 1;
  }
protected:
  viewer_t& m_viewer;
  bool m_inited_by_exlib;
  lua_State* m_lua;
};

inline view_lua* cast_view_lua(inlib::sg::viewer& a_viewer) {
  return inlib::safe_cast<inlib::sg::viewer,view_lua>(a_viewer);
}

}}

#endif

//exlib_build_use inlib lua
