// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_xml_heprep
#define exlib_xml_heprep

#include "loader"

#include <inlib/xml/heprep1>

namespace exlib {
namespace xml {
  
inline bool load_heprep1_file(std::ostream& a_out,const std::string& a_file,
                              inlib::heprep1::main& a_main,inlib::file::reader* a_reader = 0) {
  a_main.clear();
  inlib::xml::default_factory factory;
  exlib::xml::loader ml(factory,a_out,false);
  std::vector<std::string> tags;
  tags.push_back(inlib::heprep1::s_heprep());
  tags.push_back(inlib::heprep1::s_heprep_heprep());
  tags.push_back(inlib::heprep1::s_heprep_type());
  tags.push_back(inlib::heprep1::s_heprep_instance());
  tags.push_back(inlib::heprep1::s_heprep_primitive());
  ml.set_tags(tags);
  if(a_reader) ml.set_compressed_reader(a_reader); //ml takes ownership of a_reader
  ml.set_take_cntrl_chars(true);
  if(!ml.load_file(a_file,false)) return false;
  inlib::xml::tree* top = ml.top_item();
  if(!top) return true; //File could be empty.
  if(!inlib::heprep1::scan_tree(a_out,*top,a_main)) {
    a_main.clear();
    return false;
  }
  return true;
}

inline bool load_heprep1_buffer(std::ostream& a_out,size_t a_size,const char* a_buffer,inlib::heprep1::main& a_main) {
  a_main.clear();
  inlib::xml::default_factory factory;
  exlib::xml::loader ml(factory,a_out,false);
  std::vector<std::string> tags;
  tags.push_back(inlib::heprep1::s_heprep());
  tags.push_back(inlib::heprep1::s_heprep_heprep());
  tags.push_back(inlib::heprep1::s_heprep_type());
  tags.push_back(inlib::heprep1::s_heprep_instance());
  tags.push_back(inlib::heprep1::s_heprep_primitive());
  ml.set_tags(tags);
  ml.set_take_cntrl_chars(true);
  if(!ml.load_buffer(a_size,a_buffer)) return false;
  inlib::xml::tree* top = ml.top_item();
  if(!top) return true; //File could be empty.
  if(!inlib::heprep1::scan_tree(a_out,*top,a_main)) {
    a_main.clear();
    return false;
  }
  return true;
}

}}

#include <inlib/xml/heprep2>

namespace exlib {
namespace xml {
  
inline bool load_heprep2_file(std::ostream& a_out,const std::string& a_file,
                              inlib::heprep2::main& a_main,inlib::file::reader* a_reader = 0) {
  a_main.clear();
  inlib::xml::default_factory factory;
  exlib::xml::loader ml(factory,a_out,false);
  std::vector<std::string> tags;
  tags.push_back(inlib::heprep2::s_heprep());
  tags.push_back(inlib::heprep2::s_typetree());
  tags.push_back(inlib::heprep2::s_type());
  tags.push_back(inlib::heprep2::s_instance());
  tags.push_back(inlib::heprep2::s_instancetree());
  ml.set_tags(tags);
  if(a_reader) ml.set_compressed_reader(a_reader); //ml takes ownership of a_reader
  ml.set_take_cntrl_chars(true);
  if(!ml.load_file(a_file,false)) return false;
  inlib::xml::tree* top = ml.top_item();
  if(!top) return true; //File could be empty.
  if(!inlib::heprep2::scan_tree(a_out,*top,a_main)) {
    a_main.clear();
    return false;
  }
  return true;
}

inline bool load_heprep2_buffer(std::ostream& a_out,size_t a_size,const char* a_buffer,inlib::heprep2::main& a_main) {
  a_main.clear();
  inlib::xml::default_factory factory;
  exlib::xml::loader ml(factory,a_out,false);
  std::vector<std::string> tags;
  tags.push_back(inlib::heprep2::s_heprep());
  tags.push_back(inlib::heprep2::s_typetree());
  tags.push_back(inlib::heprep2::s_type());
  tags.push_back(inlib::heprep2::s_instance());
  tags.push_back(inlib::heprep2::s_instancetree());
  ml.set_tags(tags);
  ml.set_take_cntrl_chars(true);
  if(!ml.load_buffer(a_size,a_buffer)) return false;
  inlib::xml::tree* top = ml.top_item();
  if(!top) return true; //File could be empty.
  if(!inlib::heprep2::scan_tree(a_out,*top,a_main)) {
    a_main.clear();
    return false;
  }
  return true;
}

}}

//exlib_build_use inlib expat

#endif
