# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('inlib_swig_py', [dirname(__file__)])
        except ImportError:
            import inlib_swig_py
            return inlib_swig_py
        if fp is not None:
            try:
                _mod = imp.load_module('inlib_swig_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    inlib_swig_py = swig_import_helper()
    del swig_import_helper
else:
    import inlib_swig_py
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return inlib_swig_py.SwigPyIterator_value(self)
    def incr(self, n=1): return inlib_swig_py.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return inlib_swig_py.SwigPyIterator_decr(self, n)
    def distance(self, *args): return inlib_swig_py.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return inlib_swig_py.SwigPyIterator_equal(self, *args)
    def copy(self): return inlib_swig_py.SwigPyIterator_copy(self)
    def next(self): return inlib_swig_py.SwigPyIterator_next(self)
    def __next__(self): return inlib_swig_py.SwigPyIterator___next__(self)
    def previous(self): return inlib_swig_py.SwigPyIterator_previous(self)
    def advance(self, *args): return inlib_swig_py.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return inlib_swig_py.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return inlib_swig_py.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return inlib_swig_py.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return inlib_swig_py.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return inlib_swig_py.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return inlib_swig_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = inlib_swig_py.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class std_vector_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return inlib_swig_py.std_vector_double_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return inlib_swig_py.std_vector_double___nonzero__(self)
    def __bool__(self): return inlib_swig_py.std_vector_double___bool__(self)
    def __len__(self): return inlib_swig_py.std_vector_double___len__(self)
    def pop(self): return inlib_swig_py.std_vector_double_pop(self)
    def __getslice__(self, *args): return inlib_swig_py.std_vector_double___getslice__(self, *args)
    def __setslice__(self, *args): return inlib_swig_py.std_vector_double___setslice__(self, *args)
    def __delslice__(self, *args): return inlib_swig_py.std_vector_double___delslice__(self, *args)
    def __delitem__(self, *args): return inlib_swig_py.std_vector_double___delitem__(self, *args)
    def __getitem__(self, *args): return inlib_swig_py.std_vector_double___getitem__(self, *args)
    def __setitem__(self, *args): return inlib_swig_py.std_vector_double___setitem__(self, *args)
    def append(self, *args): return inlib_swig_py.std_vector_double_append(self, *args)
    def empty(self): return inlib_swig_py.std_vector_double_empty(self)
    def size(self): return inlib_swig_py.std_vector_double_size(self)
    def clear(self): return inlib_swig_py.std_vector_double_clear(self)
    def swap(self, *args): return inlib_swig_py.std_vector_double_swap(self, *args)
    def get_allocator(self): return inlib_swig_py.std_vector_double_get_allocator(self)
    def begin(self): return inlib_swig_py.std_vector_double_begin(self)
    def end(self): return inlib_swig_py.std_vector_double_end(self)
    def rbegin(self): return inlib_swig_py.std_vector_double_rbegin(self)
    def rend(self): return inlib_swig_py.std_vector_double_rend(self)
    def pop_back(self): return inlib_swig_py.std_vector_double_pop_back(self)
    def erase(self, *args): return inlib_swig_py.std_vector_double_erase(self, *args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_std_vector_double(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return inlib_swig_py.std_vector_double_push_back(self, *args)
    def front(self): return inlib_swig_py.std_vector_double_front(self)
    def back(self): return inlib_swig_py.std_vector_double_back(self)
    def assign(self, *args): return inlib_swig_py.std_vector_double_assign(self, *args)
    def resize(self, *args): return inlib_swig_py.std_vector_double_resize(self, *args)
    def insert(self, *args): return inlib_swig_py.std_vector_double_insert(self, *args)
    def reserve(self, *args): return inlib_swig_py.std_vector_double_reserve(self, *args)
    def capacity(self): return inlib_swig_py.std_vector_double_capacity(self)
    __swig_destroy__ = inlib_swig_py.delete_std_vector_double
    __del__ = lambda self : None;
std_vector_double_swigregister = inlib_swig_py.std_vector_double_swigregister
std_vector_double_swigregister(std_vector_double)


def get_cout():
  return inlib_swig_py.get_cout()
get_cout = inlib_swig_py.get_cout
class ios_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = inlib_swig_py.ios_base_erase_event
    imbue_event = inlib_swig_py.ios_base_imbue_event
    copyfmt_event = inlib_swig_py.ios_base_copyfmt_event
    def register_callback(self, *args): return inlib_swig_py.ios_base_register_callback(self, *args)
    def flags(self, *args): return inlib_swig_py.ios_base_flags(self, *args)
    def setf(self, *args): return inlib_swig_py.ios_base_setf(self, *args)
    def unsetf(self, *args): return inlib_swig_py.ios_base_unsetf(self, *args)
    def precision(self, *args): return inlib_swig_py.ios_base_precision(self, *args)
    def width(self, *args): return inlib_swig_py.ios_base_width(self, *args)
    sync_with_stdio = staticmethod(inlib_swig_py.ios_base_sync_with_stdio)
    def imbue(self, *args): return inlib_swig_py.ios_base_imbue(self, *args)
    def getloc(self): return inlib_swig_py.ios_base_getloc(self)
    xalloc = staticmethod(inlib_swig_py.ios_base_xalloc)
    def iword(self, *args): return inlib_swig_py.ios_base_iword(self, *args)
    def pword(self, *args): return inlib_swig_py.ios_base_pword(self, *args)
    __swig_destroy__ = inlib_swig_py.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = inlib_swig_py.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = inlib_swig_py.cvar
ios_base.boolalpha = inlib_swig_py.cvar.ios_base_boolalpha
ios_base.dec = inlib_swig_py.cvar.ios_base_dec
ios_base.fixed = inlib_swig_py.cvar.ios_base_fixed
ios_base.hex = inlib_swig_py.cvar.ios_base_hex
ios_base.internal = inlib_swig_py.cvar.ios_base_internal
ios_base.left = inlib_swig_py.cvar.ios_base_left
ios_base.oct = inlib_swig_py.cvar.ios_base_oct
ios_base.right = inlib_swig_py.cvar.ios_base_right
ios_base.scientific = inlib_swig_py.cvar.ios_base_scientific
ios_base.showbase = inlib_swig_py.cvar.ios_base_showbase
ios_base.showpoint = inlib_swig_py.cvar.ios_base_showpoint
ios_base.showpos = inlib_swig_py.cvar.ios_base_showpos
ios_base.skipws = inlib_swig_py.cvar.ios_base_skipws
ios_base.unitbuf = inlib_swig_py.cvar.ios_base_unitbuf
ios_base.uppercase = inlib_swig_py.cvar.ios_base_uppercase
ios_base.adjustfield = inlib_swig_py.cvar.ios_base_adjustfield
ios_base.basefield = inlib_swig_py.cvar.ios_base_basefield
ios_base.floatfield = inlib_swig_py.cvar.ios_base_floatfield
ios_base.badbit = inlib_swig_py.cvar.ios_base_badbit
ios_base.eofbit = inlib_swig_py.cvar.ios_base_eofbit
ios_base.failbit = inlib_swig_py.cvar.ios_base_failbit
ios_base.goodbit = inlib_swig_py.cvar.ios_base_goodbit
ios_base.app = inlib_swig_py.cvar.ios_base_app
ios_base.ate = inlib_swig_py.cvar.ios_base_ate
ios_base.binary = inlib_swig_py.cvar.ios_base_binary
ios_base.ios_base_in = inlib_swig_py.cvar.ios_base_ios_base_in
ios_base.out = inlib_swig_py.cvar.ios_base_out
ios_base.trunc = inlib_swig_py.cvar.ios_base_trunc
ios_base.beg = inlib_swig_py.cvar.ios_base_beg
ios_base.cur = inlib_swig_py.cvar.ios_base_cur
ios_base.end = inlib_swig_py.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
  return inlib_swig_py.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = inlib_swig_py.ios_base_sync_with_stdio

def ios_base_xalloc():
  return inlib_swig_py.ios_base_xalloc()
ios_base_xalloc = inlib_swig_py.ios_base_xalloc

class ios(ios_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def rdstate(self): return inlib_swig_py.ios_rdstate(self)
    def clear(self, *args): return inlib_swig_py.ios_clear(self, *args)
    def setstate(self, *args): return inlib_swig_py.ios_setstate(self, *args)
    def good(self): return inlib_swig_py.ios_good(self)
    def eof(self): return inlib_swig_py.ios_eof(self)
    def fail(self): return inlib_swig_py.ios_fail(self)
    def bad(self): return inlib_swig_py.ios_bad(self)
    def exceptions(self, *args): return inlib_swig_py.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return inlib_swig_py.ios_tie(self, *args)
    def rdbuf(self, *args): return inlib_swig_py.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return inlib_swig_py.ios_copyfmt(self, *args)
    def fill(self, *args): return inlib_swig_py.ios_fill(self, *args)
    def imbue(self, *args): return inlib_swig_py.ios_imbue(self, *args)
    def narrow(self, *args): return inlib_swig_py.ios_narrow(self, *args)
    def widen(self, *args): return inlib_swig_py.ios_widen(self, *args)
ios_swigregister = inlib_swig_py.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return inlib_swig_py.ostream___lshift__(self, *args)
    def put(self, *args): return inlib_swig_py.ostream_put(self, *args)
    def write(self, *args): return inlib_swig_py.ostream_write(self, *args)
    def flush(self): return inlib_swig_py.ostream_flush(self)
    def tellp(self): return inlib_swig_py.ostream_tellp(self)
    def seekp(self, *args): return inlib_swig_py.ostream_seekp(self, *args)
ostream_swigregister = inlib_swig_py.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return inlib_swig_py.istream___rshift__(self, *args)
    def gcount(self): return inlib_swig_py.istream_gcount(self)
    def get(self, *args): return inlib_swig_py.istream_get(self, *args)
    def getline(self, *args): return inlib_swig_py.istream_getline(self, *args)
    def ignore(self, *args): return inlib_swig_py.istream_ignore(self, *args)
    def peek(self): return inlib_swig_py.istream_peek(self)
    def read(self, *args): return inlib_swig_py.istream_read(self, *args)
    def readsome(self, *args): return inlib_swig_py.istream_readsome(self, *args)
    def putback(self, *args): return inlib_swig_py.istream_putback(self, *args)
    def unget(self): return inlib_swig_py.istream_unget(self)
    def sync(self): return inlib_swig_py.istream_sync(self)
    def tellg(self): return inlib_swig_py.istream_tellg(self)
    def seekg(self, *args): return inlib_swig_py.istream_seekg(self, *args)
istream_swigregister = inlib_swig_py.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = inlib_swig_py.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = inlib_swig_py.endl_cb_ptr

def endl(*args):
  return inlib_swig_py.endl(*args)
endl = inlib_swig_py.endl
ends_cb_ptr = inlib_swig_py.ends_cb_ptr

def ends(*args):
  return inlib_swig_py.ends(*args)
ends = inlib_swig_py.ends
flush_cb_ptr = inlib_swig_py.flush_cb_ptr

def flush(*args):
  return inlib_swig_py.flush(*args)
flush = inlib_swig_py.flush

def env_append_path(*args):
  return inlib_swig_py.env_append_path(*args)
env_append_path = inlib_swig_py.env_append_path

def sep():
  return inlib_swig_py.sep()
sep = inlib_swig_py.sep
class std_string(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_std_string
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_std_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def cast(self): return inlib_swig_py.std_string_cast(self)
std_string_swigregister = inlib_swig_py.std_string_swigregister
std_string_swigregister(std_string)

class printer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_printer
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_printer(*args)
        try: self.this.append(this)
        except: self.this = this
    def write(self, *args): return inlib_swig_py.printer_write(self, *args)
printer_swigregister = inlib_swig_py.printer_swigregister
printer_swigregister(printer)

class args(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_args
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_args(*args)
        try: self.this.append(this)
        except: self.this = this
args_swigregister = inlib_swig_py.args_swigregister
args_swigregister(args)

class opener(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def open(self, *args): return inlib_swig_py.opener_open(self, *args)
opener_swigregister = inlib_swig_py.opener_swigregister
opener_swigregister(opener)

class histo_h1d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_histo_h1d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_histo_h1d(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return inlib_swig_py.histo_h1d_fill(self, *args)
    def entries(self): return inlib_swig_py.histo_h1d_entries(self)
    def mean(self): return inlib_swig_py.histo_h1d_mean(self)
    def rms(self): return inlib_swig_py.histo_h1d_rms(self)
histo_h1d_swigregister = inlib_swig_py.histo_h1d_swigregister
histo_h1d_swigregister(histo_h1d)

class histo_h2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_histo_h2d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_histo_h2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return inlib_swig_py.histo_h2d_fill(self, *args)
    def entries(self): return inlib_swig_py.histo_h2d_entries(self)
    def mean_x(self): return inlib_swig_py.histo_h2d_mean_x(self)
    def rms_x(self): return inlib_swig_py.histo_h2d_rms_x(self)
    def mean_y(self): return inlib_swig_py.histo_h2d_mean_y(self)
    def rms_y(self): return inlib_swig_py.histo_h2d_rms_y(self)
histo_h2d_swigregister = inlib_swig_py.histo_h2d_swigregister
histo_h2d_swigregister(histo_h2d)

class histo_p1d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_histo_p1d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_histo_p1d(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return inlib_swig_py.histo_p1d_fill(self, *args)
    def entries(self): return inlib_swig_py.histo_p1d_entries(self)
    def mean(self): return inlib_swig_py.histo_p1d_mean(self)
    def rms(self): return inlib_swig_py.histo_p1d_rms(self)
histo_p1d_swigregister = inlib_swig_py.histo_p1d_swigregister
histo_p1d_swigregister(histo_p1d)

class histo_p2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_histo_p2d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_histo_p2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return inlib_swig_py.histo_p2d_fill(self, *args)
    def entries(self): return inlib_swig_py.histo_p2d_entries(self)
    def mean_x(self): return inlib_swig_py.histo_p2d_mean_x(self)
    def rms_x(self): return inlib_swig_py.histo_p2d_rms_x(self)
    def mean_y(self): return inlib_swig_py.histo_p2d_mean_y(self)
    def rms_y(self): return inlib_swig_py.histo_p2d_rms_y(self)
histo_p2d_swigregister = inlib_swig_py.histo_p2d_swigregister
histo_p2d_swigregister(histo_p2d)

class rgaussd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rgaussd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_rgaussd(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(self): return inlib_swig_py.rgaussd_shoot(self)
rgaussd_swigregister = inlib_swig_py.rgaussd_swigregister
rgaussd_swigregister(rgaussd)

class rbwd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rbwd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_rbwd(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(self): return inlib_swig_py.rbwd_shoot(self)
rbwd_swigregister = inlib_swig_py.rbwd_swigregister
rbwd_swigregister(rbwd)

class rexpd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rexpd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_rexpd(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(self): return inlib_swig_py.rexpd_shoot(self)
rexpd_swigregister = inlib_swig_py.rexpd_swigregister
rexpd_swigregister(rexpd)

class styles(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_styles
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_styles(*args)
        try: self.this.append(this)
        except: self.this = this
styles_swigregister = inlib_swig_py.styles_swigregister
styles_swigregister(styles)

class SOPI_color(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_color
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_color(*args)
        try: self.this.append(this)
        except: self.this = this
    def rchar(self): return inlib_swig_py.SOPI_color_rchar(self)
    def gchar(self): return inlib_swig_py.SOPI_color_gchar(self)
    def bchar(self): return inlib_swig_py.SOPI_color_bchar(self)
    def r(self): return inlib_swig_py.SOPI_color_r(self)
    def g(self): return inlib_swig_py.SOPI_color_g(self)
    def b(self): return inlib_swig_py.SOPI_color_b(self)
SOPI_color_swigregister = inlib_swig_py.SOPI_color_swigregister
SOPI_color_swigregister(SOPI_color)

class SOPI_cmap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    black = staticmethod(inlib_swig_py.SOPI_cmap_black)
    __swig_destroy__ = inlib_swig_py.delete_SOPI_cmap
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_cmap(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_color(self, *args): return inlib_swig_py.SOPI_cmap_get_color(self, *args)
    def size(self): return inlib_swig_py.SOPI_cmap_size(self)
SOPI_cmap_swigregister = inlib_swig_py.SOPI_cmap_swigregister
SOPI_cmap_swigregister(SOPI_cmap)

def SOPI_cmap_black():
  return inlib_swig_py.SOPI_cmap_black()
SOPI_cmap_black = inlib_swig_py.SOPI_cmap_black

class SOPI_grey32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_grey32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_grey32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_grey32_swigregister = inlib_swig_py.SOPI_grey32_swigregister
SOPI_grey32_swigregister(SOPI_grey32)

class SOPI_greyinv32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_greyinv32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_greyinv32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_greyinv32_swigregister = inlib_swig_py.SOPI_greyinv32_swigregister
SOPI_greyinv32_swigregister(SOPI_greyinv32)

class SOPI_grey128(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_grey128
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_grey128(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_grey128_swigregister = inlib_swig_py.SOPI_grey128_swigregister
SOPI_grey128_swigregister(SOPI_grey128)

class SOPI_greyinv128(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_greyinv128
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_greyinv128(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_greyinv128_swigregister = inlib_swig_py.SOPI_greyinv128_swigregister
SOPI_greyinv128_swigregister(SOPI_greyinv128)

class SOPI_grey256(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_grey256
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_grey256(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_grey256_swigregister = inlib_swig_py.SOPI_grey256_swigregister
SOPI_grey256_swigregister(SOPI_grey256)

class SOPI_col16(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_col16
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_col16(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_col16_swigregister = inlib_swig_py.SOPI_col16_swigregister
SOPI_col16_swigregister(SOPI_col16)

class SOPI_colrj32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_colrj32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_colrj32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_colrj32_swigregister = inlib_swig_py.SOPI_colrj32_swigregister
SOPI_colrj32_swigregister(SOPI_colrj32)

class SOPI_colbr32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_colbr32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_colbr32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_colbr32_swigregister = inlib_swig_py.SOPI_colbr32_swigregister
SOPI_colbr32_swigregister(SOPI_colbr32)

class SOPI_colrv32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_colrv32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_colrv32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_colrv32_swigregister = inlib_swig_py.SOPI_colrv32_swigregister
SOPI_colrv32_swigregister(SOPI_colrv32)

class SOPI_colrj128(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_colrj128
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_colrj128(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_colrj128_swigregister = inlib_swig_py.SOPI_colrj128_swigregister
SOPI_colrj128_swigregister(SOPI_colrj128)

class SOPI_colbr128(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_colbr128
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_colbr128(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_colbr128_swigregister = inlib_swig_py.SOPI_colbr128_swigregister
SOPI_colbr128_swigregister(SOPI_colbr128)

class SOPI_red32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_red32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_red32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_red32_swigregister = inlib_swig_py.SOPI_red32_swigregister
SOPI_red32_swigregister(SOPI_red32)

class SOPI_green32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_green32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_green32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_green32_swigregister = inlib_swig_py.SOPI_green32_swigregister
SOPI_green32_swigregister(SOPI_green32)

class SOPI_blue32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_blue32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_blue32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_blue32_swigregister = inlib_swig_py.SOPI_blue32_swigregister
SOPI_blue32_swigregister(SOPI_blue32)

class SOPI_yellow32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_yellow32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_yellow32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_yellow32_swigregister = inlib_swig_py.SOPI_yellow32_swigregister
SOPI_yellow32_swigregister(SOPI_yellow32)

class SOPI_orange32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_orange32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_orange32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_orange32_swigregister = inlib_swig_py.SOPI_orange32_swigregister
SOPI_orange32_swigregister(SOPI_orange32)

class SOPI_cyan32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_cyan32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_cyan32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_cyan32_swigregister = inlib_swig_py.SOPI_cyan32_swigregister
SOPI_cyan32_swigregister(SOPI_cyan32)

class SOPI_violet32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_violet32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_violet32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_violet32_swigregister = inlib_swig_py.SOPI_violet32_swigregister
SOPI_violet32_swigregister(SOPI_violet32)

class SOPI_col64(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_col64
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_col64(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_col64_swigregister = inlib_swig_py.SOPI_col64_swigregister
SOPI_col64_swigregister(SOPI_col64)

class SOPI_rgb216(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_rgb216
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_rgb216(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_rgb216_swigregister = inlib_swig_py.SOPI_rgb216_swigregister
SOPI_rgb216_swigregister(SOPI_rgb216)

class SOPI_rgb512(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_rgb512
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_rgb512(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_rgb512_swigregister = inlib_swig_py.SOPI_rgb512_swigregister
SOPI_rgb512_swigregister(SOPI_rgb512)

class SOPI_rgb4096(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_rgb4096
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_rgb4096(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_rgb4096_swigregister = inlib_swig_py.SOPI_rgb4096_swigregister
SOPI_rgb4096_swigregister(SOPI_rgb4096)

class SOPI_rgb32768(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_rgb32768
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_rgb32768(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_rgb32768_swigregister = inlib_swig_py.SOPI_rgb32768_swigregister
SOPI_rgb32768_swigregister(SOPI_rgb32768)

class SOPI_midas_pastel(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_pastel
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_pastel(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_pastel_swigregister = inlib_swig_py.SOPI_midas_pastel_swigregister
SOPI_midas_pastel_swigregister(SOPI_midas_pastel)

class SOPI_midas_heat(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_heat
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_heat(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_heat_swigregister = inlib_swig_py.SOPI_midas_heat_swigregister
SOPI_midas_heat_swigregister(SOPI_midas_heat)

class SOPI_midas_rainbow3(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_rainbow3
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_rainbow3(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_rainbow3_swigregister = inlib_swig_py.SOPI_midas_rainbow3_swigregister
SOPI_midas_rainbow3_swigregister(SOPI_midas_rainbow3)

class SOPI_midas_bluered(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_bluered
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_bluered(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_bluered_swigregister = inlib_swig_py.SOPI_midas_bluered_swigregister
SOPI_midas_bluered_swigregister(SOPI_midas_bluered)

class SOPI_midas_bluewhite(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_bluewhite
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_bluewhite(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_bluewhite_swigregister = inlib_swig_py.SOPI_midas_bluewhite_swigregister
SOPI_midas_bluewhite_swigregister(SOPI_midas_bluewhite)

class SOPI_midas_stairs8(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_stairs8
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_stairs8(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_stairs8_swigregister = inlib_swig_py.SOPI_midas_stairs8_swigregister
SOPI_midas_stairs8_swigregister(SOPI_midas_stairs8)

class SOPI_midas_stairs9(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_stairs9
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_stairs9(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_stairs9_swigregister = inlib_swig_py.SOPI_midas_stairs9_swigregister
SOPI_midas_stairs9_swigregister(SOPI_midas_stairs9)

class SOPI_midas_staircase(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_staircase
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_staircase(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_staircase_swigregister = inlib_swig_py.SOPI_midas_staircase_swigregister
SOPI_midas_staircase_swigregister(SOPI_midas_staircase)

class SOPI_midas_color(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_color
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_color(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_color_swigregister = inlib_swig_py.SOPI_midas_color_swigregister
SOPI_midas_color_swigregister(SOPI_midas_color)

class SOPI_midas_manycol(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_manycol
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_manycol(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_manycol_swigregister = inlib_swig_py.SOPI_midas_manycol_swigregister
SOPI_midas_manycol_swigregister(SOPI_midas_manycol)

class SOPI_midas_idl14(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_idl14
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_idl14(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_idl14_swigregister = inlib_swig_py.SOPI_midas_idl14_swigregister
SOPI_midas_idl14_swigregister(SOPI_midas_idl14)

class SOPI_midas_idl15(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_idl15
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_SOPI_midas_idl15(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_idl15_swigregister = inlib_swig_py.SOPI_midas_idl15_swigregister
SOPI_midas_idl15_swigregister(SOPI_midas_idl15)

class img_byte(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_img_byte
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_img_byte(*args)
        try: self.this.append(this)
        except: self.this = this
    def transfer(self, *args): return inlib_swig_py.img_byte_transfer(self, *args)
    def clear(self): return inlib_swig_py.img_byte_clear(self)
    def copy(self, *args): return inlib_swig_py.img_byte_copy(self, *args)
    def make_empty(self, a_delete=True): return inlib_swig_py.img_byte_make_empty(self, a_delete)
    def is_empty(self): return inlib_swig_py.img_byte_is_empty(self)
    def equal(self, *args): return inlib_swig_py.img_byte_equal(self, *args)
    def width(self): return inlib_swig_py.img_byte_width(self)
    def height(self): return inlib_swig_py.img_byte_height(self)
    def bytes_per_pixel(self): return inlib_swig_py.img_byte_bytes_per_pixel(self)
    def bpp(self): return inlib_swig_py.img_byte_bpp(self)
    def owner(self): return inlib_swig_py.img_byte_owner(self)
    def size(self): return inlib_swig_py.img_byte_size(self)
img_byte_swigregister = inlib_swig_py.img_byte_swigregister
img_byte_swigregister(img_byte)

class lut_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_lut_float
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_lut_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args): return inlib_swig_py.lut_float_apply(self, *args)
    def mn(self): return inlib_swig_py.lut_float_mn(self)
    def mx(self): return inlib_swig_py.lut_float_mx(self)
    def coln(self): return inlib_swig_py.lut_float_coln(self)
lut_float_swigregister = inlib_swig_py.lut_float_swigregister
lut_float_swigregister(lut_float)

class lut_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_lut_double
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_lut_double(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args): return inlib_swig_py.lut_double_apply(self, *args)
    def mn(self): return inlib_swig_py.lut_double_mn(self)
    def mx(self): return inlib_swig_py.lut_double_mx(self)
    def coln(self): return inlib_swig_py.lut_double_coln(self)
lut_double_swigregister = inlib_swig_py.lut_double_swigregister
lut_double_swigregister(lut_double)


def fpi():
  return inlib_swig_py.fpi()
fpi = inlib_swig_py.fpi

def ftwo_pi():
  return inlib_swig_py.ftwo_pi()
ftwo_pi = inlib_swig_py.ftwo_pi

def fhalf_pi():
  return inlib_swig_py.fhalf_pi()
fhalf_pi = inlib_swig_py.fhalf_pi

def fdeg2rad():
  return inlib_swig_py.fdeg2rad()
fdeg2rad = inlib_swig_py.fdeg2rad

def frad2deg():
  return inlib_swig_py.frad2deg()
frad2deg = inlib_swig_py.frad2deg

def fround(*args):
  return inlib_swig_py.fround(*args)
fround = inlib_swig_py.fround

def fstep(*args):
  return inlib_swig_py.fstep(*args)
fstep = inlib_swig_py.fstep

def fcos(*args):
  return inlib_swig_py.fcos(*args)
fcos = inlib_swig_py.fcos

def fsin(*args):
  return inlib_swig_py.fsin(*args)
fsin = inlib_swig_py.fsin

def facos(*args):
  return inlib_swig_py.facos(*args)
facos = inlib_swig_py.facos

def fasin(*args):
  return inlib_swig_py.fasin(*args)
fasin = inlib_swig_py.fasin

def ftan(*args):
  return inlib_swig_py.ftan(*args)
ftan = inlib_swig_py.ftan

def fatan(*args):
  return inlib_swig_py.fatan(*args)
fatan = inlib_swig_py.fatan

def fatan2(*args):
  return inlib_swig_py.fatan2(*args)
fatan2 = inlib_swig_py.fatan2

def fsqrt(*args):
  return inlib_swig_py.fsqrt(*args)
fsqrt = inlib_swig_py.fsqrt

def fpow(*args):
  return inlib_swig_py.fpow(*args)
fpow = inlib_swig_py.fpow

def fexp(*args):
  return inlib_swig_py.fexp(*args)
fexp = inlib_swig_py.fexp

def flog(*args):
  return inlib_swig_py.flog(*args)
flog = inlib_swig_py.flog

def flog10(*args):
  return inlib_swig_py.flog10(*args)
flog10 = inlib_swig_py.flog10

def ffloor(*args):
  return inlib_swig_py.ffloor(*args)
ffloor = inlib_swig_py.ffloor

def fceil(*args):
  return inlib_swig_py.fceil(*args)
fceil = inlib_swig_py.fceil

def fcosh(*args):
  return inlib_swig_py.fcosh(*args)
fcosh = inlib_swig_py.fcosh

def fsinh(*args):
  return inlib_swig_py.fsinh(*args)
fsinh = inlib_swig_py.fsinh

def ffabs(*args):
  return inlib_swig_py.ffabs(*args)
ffabs = inlib_swig_py.ffabs

def ffabsc(*args):
  return inlib_swig_py.ffabsc(*args)
ffabsc = inlib_swig_py.ffabsc

def pi():
  return inlib_swig_py.pi()
pi = inlib_swig_py.pi

def two_pi():
  return inlib_swig_py.two_pi()
two_pi = inlib_swig_py.two_pi

def half_pi():
  return inlib_swig_py.half_pi()
half_pi = inlib_swig_py.half_pi

def deg2rad():
  return inlib_swig_py.deg2rad()
deg2rad = inlib_swig_py.deg2rad

def rad2deg():
  return inlib_swig_py.rad2deg()
rad2deg = inlib_swig_py.rad2deg
class colorf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = inlib_swig_py.new_colorf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_colorf
    __del__ = lambda self : None;
colorf_swigregister = inlib_swig_py.colorf_swigregister
colorf_swigregister(colorf)


def colorf_aquamarine():
  return inlib_swig_py.colorf_aquamarine()
colorf_aquamarine = inlib_swig_py.colorf_aquamarine

def colorf_mediumaquamarine():
  return inlib_swig_py.colorf_mediumaquamarine()
colorf_mediumaquamarine = inlib_swig_py.colorf_mediumaquamarine

def colorf_black():
  return inlib_swig_py.colorf_black()
colorf_black = inlib_swig_py.colorf_black

def colorf_blue():
  return inlib_swig_py.colorf_blue()
colorf_blue = inlib_swig_py.colorf_blue

def colorf_cadetblue():
  return inlib_swig_py.colorf_cadetblue()
colorf_cadetblue = inlib_swig_py.colorf_cadetblue

def colorf_cornflowerblue():
  return inlib_swig_py.colorf_cornflowerblue()
colorf_cornflowerblue = inlib_swig_py.colorf_cornflowerblue

def colorf_darkslateblue():
  return inlib_swig_py.colorf_darkslateblue()
colorf_darkslateblue = inlib_swig_py.colorf_darkslateblue

def colorf_lightblue():
  return inlib_swig_py.colorf_lightblue()
colorf_lightblue = inlib_swig_py.colorf_lightblue

def colorf_lightsteelblue():
  return inlib_swig_py.colorf_lightsteelblue()
colorf_lightsteelblue = inlib_swig_py.colorf_lightsteelblue

def colorf_mediumblue():
  return inlib_swig_py.colorf_mediumblue()
colorf_mediumblue = inlib_swig_py.colorf_mediumblue

def colorf_mediumslateblue():
  return inlib_swig_py.colorf_mediumslateblue()
colorf_mediumslateblue = inlib_swig_py.colorf_mediumslateblue

def colorf_midnightblue():
  return inlib_swig_py.colorf_midnightblue()
colorf_midnightblue = inlib_swig_py.colorf_midnightblue

def colorf_navyblue():
  return inlib_swig_py.colorf_navyblue()
colorf_navyblue = inlib_swig_py.colorf_navyblue

def colorf_navy():
  return inlib_swig_py.colorf_navy()
colorf_navy = inlib_swig_py.colorf_navy

def colorf_skyblue():
  return inlib_swig_py.colorf_skyblue()
colorf_skyblue = inlib_swig_py.colorf_skyblue

def colorf_slateblue():
  return inlib_swig_py.colorf_slateblue()
colorf_slateblue = inlib_swig_py.colorf_slateblue

def colorf_steelblue():
  return inlib_swig_py.colorf_steelblue()
colorf_steelblue = inlib_swig_py.colorf_steelblue

def colorf_coral():
  return inlib_swig_py.colorf_coral()
colorf_coral = inlib_swig_py.colorf_coral

def colorf_cyan():
  return inlib_swig_py.colorf_cyan()
colorf_cyan = inlib_swig_py.colorf_cyan

def colorf_firebrick():
  return inlib_swig_py.colorf_firebrick()
colorf_firebrick = inlib_swig_py.colorf_firebrick

def colorf_brown():
  return inlib_swig_py.colorf_brown()
colorf_brown = inlib_swig_py.colorf_brown

def colorf_gold():
  return inlib_swig_py.colorf_gold()
colorf_gold = inlib_swig_py.colorf_gold

def colorf_goldenrod():
  return inlib_swig_py.colorf_goldenrod()
colorf_goldenrod = inlib_swig_py.colorf_goldenrod

def colorf_green():
  return inlib_swig_py.colorf_green()
colorf_green = inlib_swig_py.colorf_green

def colorf_darkgreen():
  return inlib_swig_py.colorf_darkgreen()
colorf_darkgreen = inlib_swig_py.colorf_darkgreen

def colorf_darkolivegreen():
  return inlib_swig_py.colorf_darkolivegreen()
colorf_darkolivegreen = inlib_swig_py.colorf_darkolivegreen

def colorf_forestgreen():
  return inlib_swig_py.colorf_forestgreen()
colorf_forestgreen = inlib_swig_py.colorf_forestgreen

def colorf_limegreen():
  return inlib_swig_py.colorf_limegreen()
colorf_limegreen = inlib_swig_py.colorf_limegreen

def colorf_mediumseagreen():
  return inlib_swig_py.colorf_mediumseagreen()
colorf_mediumseagreen = inlib_swig_py.colorf_mediumseagreen

def colorf_mediumspringgreen():
  return inlib_swig_py.colorf_mediumspringgreen()
colorf_mediumspringgreen = inlib_swig_py.colorf_mediumspringgreen

def colorf_palegreen():
  return inlib_swig_py.colorf_palegreen()
colorf_palegreen = inlib_swig_py.colorf_palegreen

def colorf_seagreen():
  return inlib_swig_py.colorf_seagreen()
colorf_seagreen = inlib_swig_py.colorf_seagreen

def colorf_springgreen():
  return inlib_swig_py.colorf_springgreen()
colorf_springgreen = inlib_swig_py.colorf_springgreen

def colorf_yellowgreen():
  return inlib_swig_py.colorf_yellowgreen()
colorf_yellowgreen = inlib_swig_py.colorf_yellowgreen

def colorf_darkslategrey():
  return inlib_swig_py.colorf_darkslategrey()
colorf_darkslategrey = inlib_swig_py.colorf_darkslategrey

def colorf_dimgrey():
  return inlib_swig_py.colorf_dimgrey()
colorf_dimgrey = inlib_swig_py.colorf_dimgrey

def colorf_lightgrey():
  return inlib_swig_py.colorf_lightgrey()
colorf_lightgrey = inlib_swig_py.colorf_lightgrey

def colorf_grey():
  return inlib_swig_py.colorf_grey()
colorf_grey = inlib_swig_py.colorf_grey

def colorf_khaki():
  return inlib_swig_py.colorf_khaki()
colorf_khaki = inlib_swig_py.colorf_khaki

def colorf_magenta():
  return inlib_swig_py.colorf_magenta()
colorf_magenta = inlib_swig_py.colorf_magenta

def colorf_maroon():
  return inlib_swig_py.colorf_maroon()
colorf_maroon = inlib_swig_py.colorf_maroon

def colorf_orange():
  return inlib_swig_py.colorf_orange()
colorf_orange = inlib_swig_py.colorf_orange

def colorf_orchid():
  return inlib_swig_py.colorf_orchid()
colorf_orchid = inlib_swig_py.colorf_orchid

def colorf_darkorchid():
  return inlib_swig_py.colorf_darkorchid()
colorf_darkorchid = inlib_swig_py.colorf_darkorchid

def colorf_mediumorchid():
  return inlib_swig_py.colorf_mediumorchid()
colorf_mediumorchid = inlib_swig_py.colorf_mediumorchid

def colorf_pink():
  return inlib_swig_py.colorf_pink()
colorf_pink = inlib_swig_py.colorf_pink

def colorf_plum():
  return inlib_swig_py.colorf_plum()
colorf_plum = inlib_swig_py.colorf_plum

def colorf_red():
  return inlib_swig_py.colorf_red()
colorf_red = inlib_swig_py.colorf_red

def colorf_indianred():
  return inlib_swig_py.colorf_indianred()
colorf_indianred = inlib_swig_py.colorf_indianred

def colorf_mediumvioletred():
  return inlib_swig_py.colorf_mediumvioletred()
colorf_mediumvioletred = inlib_swig_py.colorf_mediumvioletred

def colorf_orangered():
  return inlib_swig_py.colorf_orangered()
colorf_orangered = inlib_swig_py.colorf_orangered

def colorf_violetred():
  return inlib_swig_py.colorf_violetred()
colorf_violetred = inlib_swig_py.colorf_violetred

def colorf_salmon():
  return inlib_swig_py.colorf_salmon()
colorf_salmon = inlib_swig_py.colorf_salmon

def colorf_sienna():
  return inlib_swig_py.colorf_sienna()
colorf_sienna = inlib_swig_py.colorf_sienna

def colorf_tan():
  return inlib_swig_py.colorf_tan()
colorf_tan = inlib_swig_py.colorf_tan

def colorf_thistle():
  return inlib_swig_py.colorf_thistle()
colorf_thistle = inlib_swig_py.colorf_thistle

def colorf_turquoise():
  return inlib_swig_py.colorf_turquoise()
colorf_turquoise = inlib_swig_py.colorf_turquoise

def colorf_darkturquoise():
  return inlib_swig_py.colorf_darkturquoise()
colorf_darkturquoise = inlib_swig_py.colorf_darkturquoise

def colorf_mediumturquoise():
  return inlib_swig_py.colorf_mediumturquoise()
colorf_mediumturquoise = inlib_swig_py.colorf_mediumturquoise

def colorf_violet():
  return inlib_swig_py.colorf_violet()
colorf_violet = inlib_swig_py.colorf_violet

def colorf_blueviolet():
  return inlib_swig_py.colorf_blueviolet()
colorf_blueviolet = inlib_swig_py.colorf_blueviolet

def colorf_wheat():
  return inlib_swig_py.colorf_wheat()
colorf_wheat = inlib_swig_py.colorf_wheat

def colorf_white():
  return inlib_swig_py.colorf_white()
colorf_white = inlib_swig_py.colorf_white

def colorf_yellow():
  return inlib_swig_py.colorf_yellow()
colorf_yellow = inlib_swig_py.colorf_yellow

def colorf_greenyellow():
  return inlib_swig_py.colorf_greenyellow()
colorf_greenyellow = inlib_swig_py.colorf_greenyellow
class vec3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec3f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
vec3f_swigregister = inlib_swig_py.vec3f_swigregister
vec3f_swigregister(vec3f)

class mat4f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_mat4f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_mat4f(*args)
        try: self.this.append(this)
        except: self.this = this
mat4f_swigregister = inlib_swig_py.mat4f_swigregister
mat4f_swigregister(mat4f)

class rotf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rotf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_rotf(*args)
        try: self.this.append(this)
        except: self.this = this
rotf_swigregister = inlib_swig_py.rotf_swigregister
rotf_swigregister(rotf)

class vec3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec3d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_vec3d(*args)
        try: self.this.append(this)
        except: self.this = this
vec3d_swigregister = inlib_swig_py.vec3d_swigregister
vec3d_swigregister(vec3d)

class rotd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rotd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_rotd(*args)
        try: self.this.append(this)
        except: self.this = this
rotd_swigregister = inlib_swig_py.rotd_swigregister
rotd_swigregister(rotd)

class sf_string(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_string
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return inlib_swig_py.sf_string_value(self, *args)
sf_string_swigregister = inlib_swig_py.sf_string_swigregister
sf_string_swigregister(sf_string)

class sf_vec3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_vec3f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return inlib_swig_py.sf_vec3f_value(self, *args)
sf_vec3f_swigregister = inlib_swig_py.sf_vec3f_swigregister
sf_vec3f_swigregister(sf_vec3f)

class sf_mat4f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_mat4f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_mat4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return inlib_swig_py.sf_mat4f_value(self, *args)
sf_mat4f_swigregister = inlib_swig_py.sf_mat4f_swigregister
sf_mat4f_swigregister(sf_mat4f)

class sf_rotf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_rotf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_rotf(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return inlib_swig_py.sf_rotf_value(self, *args)
sf_rotf_swigregister = inlib_swig_py.sf_rotf_swigregister
sf_rotf_swigregister(sf_rotf)

class sf_bool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_bool
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_bool(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return inlib_swig_py.sf_bool_value(self, *args)
sf_bool_swigregister = inlib_swig_py.sf_bool_swigregister
sf_bool_swigregister(sf_bool)

class sf_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_float
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return inlib_swig_py.sf_float_value(self, *args)
sf_float_swigregister = inlib_swig_py.sf_float_swigregister
sf_float_swigregister(sf_float)

class sf_vec_colorf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_vec_colorf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_vec_colorf(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return inlib_swig_py.sf_vec_colorf_value(self, *args)
sf_vec_colorf_swigregister = inlib_swig_py.sf_vec_colorf_swigregister
sf_vec_colorf_swigregister(sf_vec_colorf)

class sf_img_byte(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_img_byte(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return inlib_swig_py.sf_img_byte_value(self, *args)
sf_img_byte_swigregister = inlib_swig_py.sf_img_byte_swigregister
sf_img_byte_swigregister(sf_img_byte)


def font_arialbd_ttf():
  return inlib_swig_py.font_arialbd_ttf()
font_arialbd_ttf = inlib_swig_py.font_arialbd_ttf

def modeling_boxes():
  return inlib_swig_py.modeling_boxes()
modeling_boxes = inlib_swig_py.modeling_boxes

def modeling_wire_boxes():
  return inlib_swig_py.modeling_wire_boxes()
modeling_wire_boxes = inlib_swig_py.modeling_wire_boxes

def modeling_lines():
  return inlib_swig_py.modeling_lines()
modeling_lines = inlib_swig_py.modeling_lines

def modeling_segments():
  return inlib_swig_py.modeling_segments()
modeling_segments = inlib_swig_py.modeling_segments

def modeling_points():
  return inlib_swig_py.modeling_points()
modeling_points = inlib_swig_py.modeling_points

def modeling_top_lines():
  return inlib_swig_py.modeling_top_lines()
modeling_top_lines = inlib_swig_py.modeling_top_lines

def modeling_texts():
  return inlib_swig_py.modeling_texts()
modeling_texts = inlib_swig_py.modeling_texts

def modeling_curve():
  return inlib_swig_py.modeling_curve()
modeling_curve = inlib_swig_py.modeling_curve

def modeling_filled_curve():
  return inlib_swig_py.modeling_filled_curve()
modeling_filled_curve = inlib_swig_py.modeling_filled_curve

def modeling_bar_chart():
  return inlib_swig_py.modeling_bar_chart()
modeling_bar_chart = inlib_swig_py.modeling_bar_chart

def modeling_solid():
  return inlib_swig_py.modeling_solid()
modeling_solid = inlib_swig_py.modeling_solid

def modeling_wire_frame():
  return inlib_swig_py.modeling_wire_frame()
modeling_wire_frame = inlib_swig_py.modeling_wire_frame

def modeling_reduced_wire_frame():
  return inlib_swig_py.modeling_reduced_wire_frame()
modeling_reduced_wire_frame = inlib_swig_py.modeling_reduced_wire_frame

def modeling_polygon():
  return inlib_swig_py.modeling_polygon()
modeling_polygon = inlib_swig_py.modeling_polygon

def modeling_none():
  return inlib_swig_py.modeling_none()
modeling_none = inlib_swig_py.modeling_none

def modeling_I():
  return inlib_swig_py.modeling_I()
modeling_I = inlib_swig_py.modeling_I

def modeling_plus():
  return inlib_swig_py.modeling_plus()
modeling_plus = inlib_swig_py.modeling_plus
class style(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    color = _swig_property(inlib_swig_py.style_color_get, inlib_swig_py.style_color_set)
    modeling = _swig_property(inlib_swig_py.style_modeling_get, inlib_swig_py.style_modeling_set)
    def __init__(self): 
        this = inlib_swig_py.new_style()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_style
    __del__ = lambda self : None;
style_swigregister = inlib_swig_py.style_swigregister
style_swigregister(style)

class text_style(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    font = _swig_property(inlib_swig_py.text_style_font_get, inlib_swig_py.text_style_font_set)
    def __init__(self): 
        this = inlib_swig_py.new_text_style()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_text_style
    __del__ = lambda self : None;
text_style_swigregister = inlib_swig_py.text_style_swigregister
text_style_swigregister(text_style)

class render_action(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
render_action_swigregister = inlib_swig_py.render_action_swigregister
render_action_swigregister(render_action)

class polyhedron(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_polyhedron
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_polyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    def Translate(self, *args): return inlib_swig_py.polyhedron_Translate(self, *args)
    def Transform(self, *args): return inlib_swig_py.polyhedron_Transform(self, *args)
    def add(self, *args): return inlib_swig_py.polyhedron_add(self, *args)
    def subtract(self, *args): return inlib_swig_py.polyhedron_subtract(self, *args)
    def intersect(self, *args): return inlib_swig_py.polyhedron_intersect(self, *args)
polyhedron_swigregister = inlib_swig_py.polyhedron_swigregister
polyhedron_swigregister(polyhedron)

class hep_polyhedron_tubs(polyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_hep_polyhedron_tubs
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_hep_polyhedron_tubs(*args)
        try: self.this.append(this)
        except: self.this = this
hep_polyhedron_tubs_swigregister = inlib_swig_py.hep_polyhedron_tubs_swigregister
hep_polyhedron_tubs_swigregister(hep_polyhedron_tubs)

class sf_polyhedron(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_polyhedron
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sf_polyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return inlib_swig_py.sf_polyhedron_value(self, *args)
sf_polyhedron_swigregister = inlib_swig_py.sf_polyhedron_swigregister
sf_polyhedron_swigregister(sf_polyhedron)

class sg_node(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def copy(self): return inlib_swig_py.sg_node_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_node
    __del__ = lambda self : None;
    def render(self, *args): return inlib_swig_py.sg_node_render(self, *args)
sg_node_swigregister = inlib_swig_py.sg_node_swigregister
sg_node_swigregister(sg_node)

class sg_group(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return inlib_swig_py.sg_group_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_group
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_group(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return inlib_swig_py.sg_group_add(self, *args)
sg_group_swigregister = inlib_swig_py.sg_group_swigregister
sg_group_swigregister(sg_group)

class sg_separator(sg_group):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sg_separator
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_separator(*args)
        try: self.this.append(this)
        except: self.this = this
sg_separator_swigregister = inlib_swig_py.sg_separator_swigregister
sg_separator_swigregister(sg_separator)

class sg_base_camera(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def near_height(self): return inlib_swig_py.sg_base_camera_near_height(self)
    def zoom(self, *args): return inlib_swig_py.sg_base_camera_zoom(self, *args)
    def copy(self): return inlib_swig_py.sg_base_camera_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_base_camera
    __del__ = lambda self : None;
    znear = _swig_property(inlib_swig_py.sg_base_camera_znear_get, inlib_swig_py.sg_base_camera_znear_set)
    zfar = _swig_property(inlib_swig_py.sg_base_camera_zfar_get, inlib_swig_py.sg_base_camera_zfar_set)
    position = _swig_property(inlib_swig_py.sg_base_camera_position_get, inlib_swig_py.sg_base_camera_position_set)
    orientation = _swig_property(inlib_swig_py.sg_base_camera_orientation_get, inlib_swig_py.sg_base_camera_orientation_set)
    dx = _swig_property(inlib_swig_py.sg_base_camera_dx_get, inlib_swig_py.sg_base_camera_dx_set)
    da = _swig_property(inlib_swig_py.sg_base_camera_da_get, inlib_swig_py.sg_base_camera_da_set)
    ds = _swig_property(inlib_swig_py.sg_base_camera_ds_get, inlib_swig_py.sg_base_camera_ds_set)
    focal = _swig_property(inlib_swig_py.sg_base_camera_focal_get, inlib_swig_py.sg_base_camera_focal_set)
sg_base_camera_swigregister = inlib_swig_py.sg_base_camera_swigregister
sg_base_camera_swigregister(sg_base_camera)

class sg_ortho(sg_base_camera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def near_height(self): return inlib_swig_py.sg_ortho_near_height(self)
    def zoom(self, *args): return inlib_swig_py.sg_ortho_zoom(self, *args)
    def copy(self): return inlib_swig_py.sg_ortho_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_ortho
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_ortho(*args)
        try: self.this.append(this)
        except: self.this = this
    height = _swig_property(inlib_swig_py.sg_ortho_height_get, inlib_swig_py.sg_ortho_height_set)
sg_ortho_swigregister = inlib_swig_py.sg_ortho_swigregister
sg_ortho_swigregister(sg_ortho)

class sg_rgba(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return inlib_swig_py.sg_rgba_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_rgba
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_rgba(*args)
        try: self.this.append(this)
        except: self.this = this
    color = _swig_property(inlib_swig_py.sg_rgba_color_get, inlib_swig_py.sg_rgba_color_set)
sg_rgba_swigregister = inlib_swig_py.sg_rgba_swigregister
sg_rgba_swigregister(sg_rgba)

class sg_base_tex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sg_base_tex
    __del__ = lambda self : None;
    intersect_down = inlib_swig_py.sg_base_tex_intersect_down
    intersect_move = inlib_swig_py.sg_base_tex_intersect_move
    intersect_up = inlib_swig_py.sg_base_tex_intersect_up
    def intersect_value(self, *args): return inlib_swig_py.sg_base_tex_intersect_value(self, *args)
    img = _swig_property(inlib_swig_py.sg_base_tex_img_get, inlib_swig_py.sg_base_tex_img_set)
    back_color = _swig_property(inlib_swig_py.sg_base_tex_back_color_get, inlib_swig_py.sg_base_tex_back_color_set)
    expand = _swig_property(inlib_swig_py.sg_base_tex_expand_get, inlib_swig_py.sg_base_tex_expand_set)
    limit = _swig_property(inlib_swig_py.sg_base_tex_limit_get, inlib_swig_py.sg_base_tex_limit_set)
    nearest = _swig_property(inlib_swig_py.sg_base_tex_nearest_get, inlib_swig_py.sg_base_tex_nearest_set)
sg_base_tex_swigregister = inlib_swig_py.sg_base_tex_swigregister
sg_base_tex_swigregister(sg_base_tex)

class sg_tex_rect(sg_base_tex,sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def intersect_value(self, *args): return inlib_swig_py.sg_tex_rect_intersect_value(self, *args)
    def copy(self): return inlib_swig_py.sg_tex_rect_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_tex_rect
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_tex_rect(*args)
        try: self.this.append(this)
        except: self.this = this
sg_tex_rect_swigregister = inlib_swig_py.sg_tex_rect_swigregister
sg_tex_rect_swigregister(sg_tex_rect)

class sg_torche(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return inlib_swig_py.sg_torche_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_torche
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_torche(*args)
        try: self.this.append(this)
        except: self.this = this
    color = _swig_property(inlib_swig_py.sg_torche_color_get, inlib_swig_py.sg_torche_color_set)
    direction = _swig_property(inlib_swig_py.sg_torche_direction_get, inlib_swig_py.sg_torche_direction_set)
    on = _swig_property(inlib_swig_py.sg_torche_on_get, inlib_swig_py.sg_torche_on_set)
sg_torche_swigregister = inlib_swig_py.sg_torche_swigregister
sg_torche_swigregister(sg_torche)

class sg_head_light(sg_torche):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return inlib_swig_py.sg_head_light_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_head_light
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_head_light(*args)
        try: self.this.append(this)
        except: self.this = this
sg_head_light_swigregister = inlib_swig_py.sg_head_light_swigregister
sg_head_light_swigregister(sg_head_light)

class sg_matrix(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return inlib_swig_py.sg_matrix_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_matrix
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    mtx = _swig_property(inlib_swig_py.sg_matrix_mtx_get, inlib_swig_py.sg_matrix_mtx_set)
    def set_identity(self): return inlib_swig_py.sg_matrix_set_identity(self)
    def set_translate(self, *args): return inlib_swig_py.sg_matrix_set_translate(self, *args)
    def set_scale(self, *args): return inlib_swig_py.sg_matrix_set_scale(self, *args)
    def set_rotate(self, *args): return inlib_swig_py.sg_matrix_set_rotate(self, *args)
    def mul_mtx(self, *args): return inlib_swig_py.sg_matrix_mul_mtx(self, *args)
    def mul_translate(self, *args): return inlib_swig_py.sg_matrix_mul_translate(self, *args)
    def mul_scale(self, *args): return inlib_swig_py.sg_matrix_mul_scale(self, *args)
    def left_mul_rotate(self, *args): return inlib_swig_py.sg_matrix_left_mul_rotate(self, *args)
    def left_mul_scale(self, *args): return inlib_swig_py.sg_matrix_left_mul_scale(self, *args)
    def left_mul_translate(self, *args): return inlib_swig_py.sg_matrix_left_mul_translate(self, *args)
    def mul_rotate(self, *args): return inlib_swig_py.sg_matrix_mul_rotate(self, *args)
sg_matrix_swigregister = inlib_swig_py.sg_matrix_swigregister
sg_matrix_swigregister(sg_matrix)

class sg_polyhedron(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return inlib_swig_py.sg_polyhedron_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_polyhedron
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_polyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    ph = _swig_property(inlib_swig_py.sg_polyhedron_ph_get, inlib_swig_py.sg_polyhedron_ph_set)
    solid = _swig_property(inlib_swig_py.sg_polyhedron_solid_get, inlib_swig_py.sg_polyhedron_solid_set)
    reduced_wire_frame = _swig_property(inlib_swig_py.sg_polyhedron_reduced_wire_frame_get, inlib_swig_py.sg_polyhedron_reduced_wire_frame_set)
    enforce_edges = _swig_property(inlib_swig_py.sg_polyhedron_enforce_edges_get, inlib_swig_py.sg_polyhedron_enforce_edges_set)
sg_polyhedron_swigregister = inlib_swig_py.sg_polyhedron_swigregister
sg_polyhedron_swigregister(sg_polyhedron)

class base_freetype(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_base_freetype
    __del__ = lambda self : None;
base_freetype_swigregister = inlib_swig_py.base_freetype_swigregister
base_freetype_swigregister(base_freetype)

class sg_plotter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    infos_x_margin = _swig_property(inlib_swig_py.sg_plotter_infos_x_margin_get, inlib_swig_py.sg_plotter_infos_x_margin_set)
    infos_y_margin = _swig_property(inlib_swig_py.sg_plotter_infos_y_margin_get, inlib_swig_py.sg_plotter_infos_y_margin_set)
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_plotter(*args)
        try: self.this.append(this)
        except: self.this = this
    def bins_style(self, *args): return inlib_swig_py.sg_plotter_bins_style(self, *args)
    def infos_style(self): return inlib_swig_py.sg_plotter_infos_style(self)
    def clear(self): return inlib_swig_py.sg_plotter_clear(self)
    def plot(self, *args): return inlib_swig_py.sg_plotter_plot(self, *args)
    def plot_cp(self, *args): return inlib_swig_py.sg_plotter_plot_cp(self, *args)
sg_plotter_swigregister = inlib_swig_py.sg_plotter_swigregister
sg_plotter_swigregister(sg_plotter)

class sg_plots(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    view_border = _swig_property(inlib_swig_py.sg_plots_view_border_get, inlib_swig_py.sg_plots_view_border_set)
    def __init__(self, *args): 
        this = inlib_swig_py.new_sg_plots(*args)
        try: self.this.append(this)
        except: self.this = this
    def current_plotter(self): return inlib_swig_py.sg_plots_current_plotter(self)
    def number(self): return inlib_swig_py.sg_plots_number(self)
    def current_index(self): return inlib_swig_py.sg_plots_current_index(self)
    def set_regions(self, a_cols=1, a_rows=1, a_transfer=False): return inlib_swig_py.sg_plots_set_regions(self, a_cols, a_rows, a_transfer)
    def next(self): return inlib_swig_py.sg_plots_next(self)
    def set_current_plotter(self, *args): return inlib_swig_py.sg_plots_set_current_plotter(self, *args)
sg_plots_swigregister = inlib_swig_py.sg_plots_swigregister
sg_plots_swigregister(sg_plots)

class viewer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def out(self): return inlib_swig_py.viewer_out(self)
viewer_swigregister = inlib_swig_py.viewer_swigregister
viewer_swigregister(viewer)


def cast_viewer(*args):
  return inlib_swig_py.cast_viewer(*args)
cast_viewer = inlib_swig_py.cast_viewer
class render_manager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
render_manager_swigregister = inlib_swig_py.render_manager_swigregister
render_manager_swigregister(render_manager)

class gui_viewer(viewer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def res_dir(self): return inlib_swig_py.gui_viewer_res_dir(self)
    def opener(self): return inlib_swig_py.gui_viewer_opener(self)
    def show_console(self, *args): return inlib_swig_py.gui_viewer_show_console(self, *args)
    def hide_console(self): return inlib_swig_py.gui_viewer_hide_console(self)
    def set_console_size(self, arg2=0.3, arg3=0.05, arg4=1): return inlib_swig_py.gui_viewer_set_console_size(self, arg2, arg3, arg4)
    def hide_main_menu(self): return inlib_swig_py.gui_viewer_hide_main_menu(self)
    def show_main_menu(self): return inlib_swig_py.gui_viewer_show_main_menu(self)
    def adapt_camera_to_scene(self): return inlib_swig_py.gui_viewer_adapt_camera_to_scene(self)
    def set_scene_light_on(self, *args): return inlib_swig_py.gui_viewer_set_scene_light_on(self, *args)
    def toggle_light(self): return inlib_swig_py.gui_viewer_toggle_light(self)
    def styles(self, *args): return inlib_swig_py.gui_viewer_styles(self, *args)
    s_default = staticmethod(inlib_swig_py.gui_viewer_s_default)
    def first_data_dir(self, *args): return inlib_swig_py.gui_viewer_first_data_dir(self, *args)
    def find_file(self, *args): return inlib_swig_py.gui_viewer_find_file(self, *args)
gui_viewer_swigregister = inlib_swig_py.gui_viewer_swigregister
gui_viewer_swigregister(gui_viewer)

def gui_viewer_s_default():
  return inlib_swig_py.gui_viewer_s_default()
gui_viewer_s_default = inlib_swig_py.gui_viewer_s_default


def cast_gui_viewer(*args):
  return inlib_swig_py.cast_gui_viewer(*args)
cast_gui_viewer = inlib_swig_py.cast_gui_viewer

def get_sg_plots(*args):
  return inlib_swig_py.get_sg_plots(*args)
get_sg_plots = inlib_swig_py.get_sg_plots

def style_from_res(*args):
  return inlib_swig_py.style_from_res(*args)
style_from_res = inlib_swig_py.style_from_res
class waxml_file(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = inlib_swig_py.new_waxml_file()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_waxml_file
    __del__ = lambda self : None;
    def open(self, *args): return inlib_swig_py.waxml_file_open(self, *args)
    def close(self): return inlib_swig_py.waxml_file_close(self)
    def write(self, *args): return inlib_swig_py.waxml_file_write(self, *args)
waxml_file_swigregister = inlib_swig_py.waxml_file_swigregister
waxml_file_swigregister(waxml_file)

class ifile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
ifile_swigregister = inlib_swig_py.ifile_swigregister
ifile_swigregister(ifile)

class key(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_key(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_key
    __del__ = lambda self : None;
key_swigregister = inlib_swig_py.key_swigregister
key_swigregister(key)

class ifac(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
ifac_swigregister = inlib_swig_py.ifac_swigregister
ifac_swigregister(ifac)

class rroot_fac(ifac):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rroot_fac
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = inlib_swig_py.new_rroot_fac(*args)
        try: self.this.append(this)
        except: self.this = this
rroot_fac_swigregister = inlib_swig_py.rroot_fac_swigregister
rroot_fac_swigregister(rroot_fac)

class std_vector_keys(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return inlib_swig_py.std_vector_keys_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return inlib_swig_py.std_vector_keys___nonzero__(self)
    def __bool__(self): return inlib_swig_py.std_vector_keys___bool__(self)
    def __len__(self): return inlib_swig_py.std_vector_keys___len__(self)
    def pop(self): return inlib_swig_py.std_vector_keys_pop(self)
    def __getslice__(self, *args): return inlib_swig_py.std_vector_keys___getslice__(self, *args)
    def __setslice__(self, *args): return inlib_swig_py.std_vector_keys___setslice__(self, *args)
    def __delslice__(self, *args): return inlib_swig_py.std_vector_keys___delslice__(self, *args)
    def __delitem__(self, *args): return inlib_swig_py.std_vector_keys___delitem__(self, *args)
    def __getitem__(self, *args): return inlib_swig_py.std_vector_keys___getitem__(self, *args)
    def __setitem__(self, *args): return inlib_swig_py.std_vector_keys___setitem__(self, *args)
    def append(self, *args): return inlib_swig_py.std_vector_keys_append(self, *args)
    def empty(self): return inlib_swig_py.std_vector_keys_empty(self)
    def size(self): return inlib_swig_py.std_vector_keys_size(self)
    def clear(self): return inlib_swig_py.std_vector_keys_clear(self)
    def swap(self, *args): return inlib_swig_py.std_vector_keys_swap(self, *args)
    def get_allocator(self): return inlib_swig_py.std_vector_keys_get_allocator(self)
    def begin(self): return inlib_swig_py.std_vector_keys_begin(self)
    def end(self): return inlib_swig_py.std_vector_keys_end(self)
    def rbegin(self): return inlib_swig_py.std_vector_keys_rbegin(self)
    def rend(self): return inlib_swig_py.std_vector_keys_rend(self)
    def pop_back(self): return inlib_swig_py.std_vector_keys_pop_back(self)
    def erase(self, *args): return inlib_swig_py.std_vector_keys_erase(self, *args)
    def __init__(self, *args): 
        this = inlib_swig_py.new_std_vector_keys(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return inlib_swig_py.std_vector_keys_push_back(self, *args)
    def front(self): return inlib_swig_py.std_vector_keys_front(self)
    def back(self): return inlib_swig_py.std_vector_keys_back(self)
    def assign(self, *args): return inlib_swig_py.std_vector_keys_assign(self, *args)
    def resize(self, *args): return inlib_swig_py.std_vector_keys_resize(self, *args)
    def insert(self, *args): return inlib_swig_py.std_vector_keys_insert(self, *args)
    def reserve(self, *args): return inlib_swig_py.std_vector_keys_reserve(self, *args)
    def capacity(self): return inlib_swig_py.std_vector_keys_capacity(self)
    __swig_destroy__ = inlib_swig_py.delete_std_vector_keys
    __del__ = lambda self : None;
std_vector_keys_swigregister = inlib_swig_py.std_vector_keys_swigregister
std_vector_keys_swigregister(std_vector_keys)

class directory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_directory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_directory
    __del__ = lambda self : None;
    def find_key(self, *args): return inlib_swig_py.directory_find_key(self, *args)
    def keys(self, *args): return inlib_swig_py.directory_keys(self, *args)
directory_swigregister = inlib_swig_py.directory_swigregister
directory_swigregister(directory)

class rroot_file(ifile):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_rroot_file(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_rroot_file
    __del__ = lambda self : None;
    def is_open(self): return inlib_swig_py.rroot_file_is_open(self)
    def close(self): return inlib_swig_py.rroot_file_close(self)
    def dir(self): return inlib_swig_py.rroot_file_dir(self)
rroot_file_swigregister = inlib_swig_py.rroot_file_swigregister
rroot_file_swigregister(rroot_file)

class TDirectory(directory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_TDirectory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_TDirectory
    __del__ = lambda self : None;
TDirectory_swigregister = inlib_swig_py.TDirectory_swigregister
TDirectory_swigregister(TDirectory)


def rroot_find_dir(*args):
  return inlib_swig_py.rroot_find_dir(*args)
rroot_find_dir = inlib_swig_py.rroot_find_dir

def rroot_key_to_h1d(*args):
  return inlib_swig_py.rroot_key_to_h1d(*args)
rroot_key_to_h1d = inlib_swig_py.rroot_key_to_h1d

def rroot_read(*args):
  return inlib_swig_py.rroot_read(*args)
rroot_read = inlib_swig_py.rroot_read
class rroot_branch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def find_entry(self, *args): return inlib_swig_py.rroot_branch_find_entry(self, *args)
rroot_branch_swigregister = inlib_swig_py.rroot_branch_swigregister
rroot_branch_swigregister(rroot_branch)

class rroot_leaf_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def value(self, *args): return inlib_swig_py.rroot_leaf_int_value(self, *args)
rroot_leaf_int_swigregister = inlib_swig_py.rroot_leaf_int_swigregister
rroot_leaf_int_swigregister(rroot_leaf_int)

class rroot_leaf_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def value(self, *args): return inlib_swig_py.rroot_leaf_float_value(self, *args)
rroot_leaf_float_swigregister = inlib_swig_py.rroot_leaf_float_swigregister
rroot_leaf_float_swigregister(rroot_leaf_float)

class rroot_leaf_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def value(self, *args): return inlib_swig_py.rroot_leaf_double_value(self, *args)
rroot_leaf_double_swigregister = inlib_swig_py.rroot_leaf_double_swigregister
rroot_leaf_double_swigregister(rroot_leaf_double)

class rroot_base_leaf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def s_cls(self): return inlib_swig_py.rroot_base_leaf_s_cls(self)
rroot_base_leaf_swigregister = inlib_swig_py.rroot_base_leaf_swigregister
rroot_base_leaf_swigregister(rroot_base_leaf)


def rroot_cast_leaf_int(*args):
  return inlib_swig_py.rroot_cast_leaf_int(*args)
rroot_cast_leaf_int = inlib_swig_py.rroot_cast_leaf_int

def rroot_cast_leaf_float(*args):
  return inlib_swig_py.rroot_cast_leaf_float(*args)
rroot_cast_leaf_float = inlib_swig_py.rroot_cast_leaf_float

def rroot_cast_leaf_double(*args):
  return inlib_swig_py.rroot_cast_leaf_double(*args)
rroot_cast_leaf_double = inlib_swig_py.rroot_cast_leaf_double
class rroot_tree(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = inlib_swig_py.new_rroot_tree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = inlib_swig_py.delete_rroot_tree
    __del__ = lambda self : None;
    def show(self, *args): return inlib_swig_py.rroot_tree_show(self, *args)
    def find_branch(self, *args): return inlib_swig_py.rroot_tree_find_branch(self, *args)
    def find_leaf(self, *args): return inlib_swig_py.rroot_tree_find_leaf(self, *args)
    def find_leaf_branch(self, *args): return inlib_swig_py.rroot_tree_find_leaf_branch(self, *args)
    def entries(self): return inlib_swig_py.rroot_tree_entries(self)
rroot_tree_swigregister = inlib_swig_py.rroot_tree_swigregister
rroot_tree_swigregister(rroot_tree)


def rroot_key_to_tree(*args):
  return inlib_swig_py.rroot_key_to_tree(*args)
rroot_key_to_tree = inlib_swig_py.rroot_key_to_tree


