// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_exsg_opener
#define exlib_exsg_opener

#include <inlib/sg/iopener>
#include <inlib/sg/load_node>

#include "sg/rsgml"

namespace exlib {

class exsg_opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::exsg_opener)
protected:
  typedef inlib::xml::exsg::vreaders readers;
public:
  virtual parent* copy() const {return new exsg_opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}

  virtual bool is(const std::string& a_path,bool& a_is) const {
    return inlib::file::is_exsg(a_path,a_is);
  }
  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::args& a_args,
                    bool& a_done) const {
    a_done = false;

    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    std::ostream& out = a_gv.out();

    bool verbose = false;

    inlib::sg::separator* node = new inlib::sg::separator;
    inlib::xml::default_factory fac;
    rsgml ml(out,m_readers,*node,fac,a_gv.ttf(),verbose);
    if(!ml.load_file(a_path,false)) {
      delete node;
      a_gv.map_warn_failed();
      return false;
    }

    load_node(a_gv,node,a_args);  

    a_done = true;
    return true;
  }


  // buffer :
  virtual bool is(inlib::uint64 a_sz,const char* a_buffer,bool& a_is) const {
    a_is = inlib::file::is_exsg((unsigned int)a_sz,a_buffer);
    return true;
  }
  virtual bool open(inlib::uint64 a_sz,const char* a_buffer,
                    inlib::sg::viewer& a_viewer,
                    const inlib::args& a_args,
                    bool& a_done) const {

    a_done = false;

    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    bool verbose = false;

    inlib::sg::separator* node = new inlib::sg::separator;
    inlib::xml::default_factory fac;
    rsgml ml(a_gv.out(),m_readers,*node,fac,a_gv.ttf(),verbose);
    if(!ml.load_buffer((unsigned int)a_sz,a_buffer)) {
      delete node;
      a_gv.map_warn_failed();
      return false;
    }
  
    load_node(a_gv,node,a_args);  

    //m_gv.out() << "loaded exsg from buffer." << std::endl;
  
    a_done = true;
    return true;
  }
  virtual bool open(const std::string&,
                    inlib::sg::viewer&,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  exsg_opener(const readers& a_readers):m_readers(a_readers){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~exsg_opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  exsg_opener(const exsg_opener& a_from):parent(a_from),m_readers(a_from.m_readers){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  exsg_opener& operator=(const exsg_opener& a_from){
    m_readers = a_from.m_readers;
    return *this;
  }  
protected:
  readers m_readers;
};

}

#endif

//exlib_build_use inlib expat inlib_glutess freetype zlib kernel


