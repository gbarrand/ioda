// Copyright (C) 2018, Guy Barrand. All rights reserved.
// See the file ioda.license for terms.

#ifndef ioda_UI_gopaw
#define ioda_UI_gopaw

#include "../../gopaw/source/iui"

#include <inlib/sg/gui_viewer>
#include <inlib/sg/view_plots>

#include <exlib/sg/write_paper>

namespace ioda {

class gopaw_viewer : public virtual gopaw::iwidget {
public:
  virtual inlib::sg::plots* plots(bool& a_created) const {
    return inlib::sg::get_sg_plots(m_gv,inlib::sg::adjust_PAW,a_created);
  }
  virtual bool size(unsigned int& a_w,unsigned int& a_h) {a_w = m_gv.width();a_h = m_gv.height();return true;}
  virtual bool write(const std::string& a_file,const std::string& a_format,const std::string& /*a_opts*/ = "") {
    exlib::sg::gl2ps_manager* _gl2ps_mgr = gl2ps_mgr();
    if(!_gl2ps_mgr) {
      m_gv.out() << "ioda::gopaw_viewer::write : gl2ps_mgr() returned null." << std::endl;
      return false;
    }      
    float r,g,b,a;
    m_gv.get_clear_color(r,g,b,a);
    return exlib::sg::write_paper(m_gv.out(),*_gl2ps_mgr,m_gv.zb_manager(),r,g,b,a,
                                  m_gv.scene(),m_gv.width(),m_gv.height(),a_file,a_format);
  }
#ifdef APP_USE_PYTHON
  virtual const inlib::sg::viewer& viewer() const {return m_gv;}
  virtual inlib::sg::viewer& viewer() {return m_gv;}
#endif  
  virtual void set_produce_jpeg(bool a_value) {m_gv.set_produce_out_jpg(a_value);}
  virtual void set_produce_png(bool a_value) {m_gv.set_produce_out_png(a_value);}
  virtual void set_produce_file(const std::string& a_file) {m_gv.set_produce_out_file(a_file);}
  virtual void set_background_color(float a_r,float a_g,float a_b,float a_a = 1) {
    m_gv.set_clear_color(a_r,a_g,a_b,a_a);
  }
  virtual void get_background_color(float& a_r,float& a_g,float& a_b,float& a_a) {
    m_gv.get_clear_color(a_r,a_g,a_b,a_a);
  }
public:
  gopaw_viewer(inlib::sg::gui_viewer& a_viewer):m_gv(a_viewer) {}
  virtual ~gopaw_viewer() {}
public:
  gopaw_viewer(const gopaw_viewer& a_from):gopaw::iwidget(a_from),m_gv(a_from.m_gv){}
  gopaw_viewer& operator=(const gopaw_viewer& a_from) {return *this;}
public:  
  const inlib::sg::gui_viewer& gv() const {return m_gv;}
  inlib::sg::gui_viewer& gv() {return m_gv;}
protected:
  exlib::sg::gl2ps_manager* gl2ps_mgr() {
    inlib::sg::render_manager* _mgr = m_gv.find_render_manager(exlib::sg::gl2ps_manager::s_class());
    if(!_mgr) return 0;
    return inlib::safe_cast<inlib::sg::render_manager,exlib::sg::gl2ps_manager>(*_mgr);
  }    
protected:
  inlib::sg::gui_viewer& m_gv;
};

class UI_gopaw : public virtual gopaw::iui {
public:
  virtual void show() {}
  virtual void synchronize() {}
  virtual void render_it() {m_viewer.gv().win_render();}
public:
  virtual std::ostream& out() const {return m_out;}

  virtual void exit(int = 0) {m_to_exit = true;}
  
  virtual bool ask(const std::string& a_prompt,std::string& a_value){
  /*
    char* p = ::ourex_Getline(a_prompt.c_str());
    if(!p) {a_value.clear();return false;}
    if(!*p) {a_value.clear();return true;} //^D
    std::string cmd(p);
    inlib::strip(cmd,inlib::trailing,'\n');
    a_value = cmd;
    */
    m_out << "ioda::UI_gopaw::ask : dummy." << inlib::sout(a_prompt) << std::endl;
    a_value = "Q";
    return true;
  }
  
  virtual gopaw::iwidget* current_widget() const {
    gopaw_viewer* viewer = const_cast<gopaw_viewer*>(&m_viewer);
    return static_cast<gopaw::iwidget*>(viewer);
  }
  virtual gopaw::iwidget* find_widget(const std::string&) const {
    gopaw_viewer* viewer = const_cast<gopaw_viewer*>(&m_viewer);
    return static_cast<gopaw::iwidget*>(viewer);
  }
public:
  UI_gopaw(std::ostream& a_out,inlib::sg::gui_viewer& a_viewer)
  :m_out(a_out)
  ,m_viewer(a_viewer)
  ,m_to_exit(false)
  {}
  virtual ~UI_gopaw() {}
protected:
public:
  UI_gopaw(const UI_gopaw& a_from)
  :m_out(a_from.m_out)
  ,m_viewer(a_from.m_viewer)
  ,m_to_exit(false)
  {}
protected:
  UI_gopaw& operator=(const UI_gopaw& a_from) {
    m_viewer = a_from.m_viewer;
    return *this;
  }
public:
#ifdef APP_USE_PYTHON
  const gopaw_viewer& viewer() const {return m_viewer;}
  gopaw_viewer& viewer() {return m_viewer;}
#endif  
protected:
  std::ostream& m_out;
  gopaw_viewer m_viewer;
  bool m_to_exit;
};

}

#endif
